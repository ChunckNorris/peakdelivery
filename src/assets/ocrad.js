var OCRAD = (function(){
    function createOcradInstance(){
    
    
    // The Module object: Our interface to the outside world. We import
    // and export values on it, and do the work to get that through
    // closure compiler if necessary. There are various ways Module can be used:
    // 1. Not defined. We create it here
    // 2. A function parameter, function(Module) { ..generated code.. }
    // 3. pre-run appended it, var Module = {}; ..generated code..
    // 4. External script tag defines var Module.
    // We need to do an eval in order to handle the closure compiler
    // case, where this code here is minified but Module was defined
    // elsewhere (e.g. case 4 above). We also need to check if Module
    // already exists (e.g. case 3 above).
    // Note that if you want to run closure, and also to use Module
    // after the generated code, you will need to define   var Module = {};
    // before the code. Then that object will be used in the code, and you
    // can continue to use Module afterwards as well.
    var Module;
    if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};
    
    // Sometimes an existing Module object exists with properties
    // meant to overwrite the default module functionality. Here
    // we collect those properties and reapply _after_ we configure
    // the current environment's defaults to avoid having to be so
    // defensive during initialization.
    var moduleOverrides = {};
    for (var key in Module) {
      if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
      }
    }
    
    // The environment setup code below is customized to use Module.
    // *** Environment setup code ***
    var ENVIRONMENT_IS_WEB = false;
    var ENVIRONMENT_IS_WORKER = false;
    var ENVIRONMENT_IS_NODE = false;
    var ENVIRONMENT_IS_SHELL = false;
    
    // Three configurations we can be running in:
    // 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
    // 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
    // 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
    
    if (Module['ENVIRONMENT']) {
      if (Module['ENVIRONMENT'] === 'WEB') {
        ENVIRONMENT_IS_WEB = true;
      } else if (Module['ENVIRONMENT'] === 'WORKER') {
        ENVIRONMENT_IS_WORKER = true;
      } else if (Module['ENVIRONMENT'] === 'NODE') {
        ENVIRONMENT_IS_NODE = true;
      } else if (Module['ENVIRONMENT'] === 'SHELL') {
        ENVIRONMENT_IS_SHELL = true;
      } else {
        throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
      }
    } else {
      ENVIRONMENT_IS_WEB = typeof window === 'object';
      ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
      ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
      ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
    }
    
    
    if (ENVIRONMENT_IS_NODE) {
      // Expose functionality in the same simple way that the shells work
      // Note that we pollute the global namespace here, otherwise we break in node
      if (!Module['print']) Module['print'] = console.log;
      if (!Module['printErr']) Module['printErr'] = console.warn;
    
      var nodeFS;
      var nodePath;
    
      Module['read'] = function read(filename, binary) {
        if (!nodeFS) nodeFS = require('fs');
        if (!nodePath) nodePath = require('path');
    
        filename = nodePath['normalize'](filename);
        var ret = nodeFS['readFileSync'](filename);
        // The path is absolute if the normalized version is the same as the resolved.
        if (!ret && filename != nodePath['resolve'](filename)) {
          filename = path.join(__dirname, '..', 'src', filename);
          ret = nodeFS['readFileSync'](filename);
        }
        if (ret && !binary) ret = ret.toString();
        return ret;
      };
    
      Module['readBinary'] = function readBinary(filename) {
        var ret = Module['read'](filename, true);
        if (!ret.buffer) {
          ret = new Uint8Array(ret);
        }
        assert(ret.buffer);
        return ret;
      };
    
      Module['load'] = function load(f) {
        globalEval(read(f));
      };
    
      if (!Module['thisProgram']) {
        if (process['argv'].length > 1) {
          Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
        } else {
          Module['thisProgram'] = 'unknown-program';
        }
      }
    
      Module['arguments'] = process['argv'].slice(2);
    
      if (typeof module !== 'undefined') {
        module['exports'] = Module;
      }
    
      process['on']('uncaughtException', function(ex) {
        // suppress ExitStatus exceptions from showing an error
        if (!(ex instanceof ExitStatus)) {
          throw ex;
        }
      });
    
      Module['inspect'] = function () { return '[Emscripten Module object]'; };
    }
    else if (ENVIRONMENT_IS_SHELL) {
      if (!Module['print']) Module['print'] = print;
      if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
    
      if (typeof read != 'undefined') {
        Module['read'] = read;
      } else {
        Module['read'] = function read() { throw 'no read() available (jsc?)' };
      }
    
      Module['readBinary'] = function readBinary(f) {
        if (typeof readbuffer === 'function') {
          return new Uint8Array(readbuffer(f));
        }
        var data = read(f, 'binary');
        assert(typeof data === 'object');
        return data;
      };
    
      if (typeof scriptArgs != 'undefined') {
        Module['arguments'] = scriptArgs;
      } else if (typeof arguments != 'undefined') {
        Module['arguments'] = arguments;
      }
    
    }
    else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      Module['read'] = function read(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.send(null);
        return xhr.responseText;
      };
    
      Module['readAsync'] = function readAsync(url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      };
    
      if (typeof arguments != 'undefined') {
        Module['arguments'] = arguments;
      }
    
      if (typeof console !== 'undefined') {
        if (!Module['print']) Module['print'] = function print(x) {
          console.log(x);
        };
        if (!Module['printErr']) Module['printErr'] = function printErr(x) {
          console.warn(x);
        };
      } else {
        // Probably a worker, and without console.log. We can do very little here...
        var TRY_USE_DUMP = false;
        if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
          dump(x);
        }) : (function(x) {
          // self.postMessage(x); // enable this if you want stdout to be sent as messages
        }));
      }
    
      if (ENVIRONMENT_IS_WORKER) {
        Module['load'] = importScripts;
      }
    
      if (typeof Module['setWindowTitle'] === 'undefined') {
        Module['setWindowTitle'] = function(title) { document.title = title };
      }
    }
    else {
      // Unreachable because SHELL is dependant on the others
      throw 'Unknown runtime environment. Where are we?';
    }
    
    function globalEval(x) {
      eval.call(null, x);
    }
    if (!Module['load'] && Module['read']) {
      Module['load'] = function load(f) {
        globalEval(Module['read'](f));
      };
    }
    if (!Module['print']) {
      Module['print'] = function(){};
    }
    if (!Module['printErr']) {
      Module['printErr'] = Module['print'];
    }
    if (!Module['arguments']) {
      Module['arguments'] = [];
    }
    if (!Module['thisProgram']) {
      Module['thisProgram'] = './this.program';
    }
    
    // *** Environment setup code ***
    
    // Closure helpers
    Module.print = Module['print'];
    Module.printErr = Module['printErr'];
    
    // Callbacks
    Module['preRun'] = [];
    Module['postRun'] = [];
    
    // Merge back in the overrides
    for (var key in moduleOverrides) {
      if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
      }
    }
    // Free the object hierarchy contained in the overrides, this lets the GC
    // reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
    moduleOverrides = undefined;
    
    
    
    // {{PREAMBLE_ADDITIONS}}
    
    // === Preamble library stuff ===
    
    // Documentation for the public APIs defined in this file must be updated in:
    //    site/source/docs/api_reference/preamble.js.rst
    // A prebuilt local version of the documentation is available at:
    //    site/build/text/docs/api_reference/preamble.js.txt
    // You can also build docs locally as HTML or other formats in site/
    // An online HTML version (which may be of a different version of Emscripten)
    //    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
    
    //========================================
    // Runtime code shared with compiler
    //========================================
    
    var Runtime = {
      setTempRet0: function (value) {
        tempRet0 = value;
      },
      getTempRet0: function () {
        return tempRet0;
      },
      stackSave: function () {
        return STACKTOP;
      },
      stackRestore: function (stackTop) {
        STACKTOP = stackTop;
      },
      getNativeTypeSize: function (type) {
        switch (type) {
          case 'i1': case 'i8': return 1;
          case 'i16': return 2;
          case 'i32': return 4;
          case 'i64': return 8;
          case 'float': return 4;
          case 'double': return 8;
          default: {
            if (type[type.length-1] === '*') {
              return Runtime.QUANTUM_SIZE; // A pointer
            } else if (type[0] === 'i') {
              var bits = parseInt(type.substr(1));
              assert(bits % 8 === 0);
              return bits/8;
            } else {
              return 0;
            }
          }
        }
      },
      getNativeFieldSize: function (type) {
        return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
      },
      STACK_ALIGN: 16,
      prepVararg: function (ptr, type) {
        if (type === 'double' || type === 'i64') {
          // move so the load is aligned
          if (ptr & 7) {
            assert((ptr & 7) === 4);
            ptr += 4;
          }
        } else {
          assert((ptr & 3) === 0);
        }
        return ptr;
      },
      getAlignSize: function (type, size, vararg) {
        // we align i64s and doubles on 64-bit boundaries, unlike x86
        if (!vararg && (type == 'i64' || type == 'double')) return 8;
        if (!type) return Math.min(size, 8); // align structures internally to 64 bits
        return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
      },
      dynCall: function (sig, ptr, args) {
        if (args && args.length) {
          assert(args.length == sig.length-1);
          if (!args.splice) args = Array.prototype.slice.call(args);
          args.splice(0, 0, ptr);
          assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
          return Module['dynCall_' + sig].apply(null, args);
        } else {
          assert(sig.length == 1);
          assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
          return Module['dynCall_' + sig].call(null, ptr);
        }
      },
      functionPointers: [],
      addFunction: function (func) {
        for (var i = 0; i < Runtime.functionPointers.length; i++) {
          if (!Runtime.functionPointers[i]) {
            Runtime.functionPointers[i] = func;
            return 2*(1 + i);
          }
        }
        throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
      },
      removeFunction: function (index) {
        Runtime.functionPointers[(index-2)/2] = null;
      },
      warnOnce: function (text) {
        if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
        if (!Runtime.warnOnce.shown[text]) {
          Runtime.warnOnce.shown[text] = 1;
          Module.printErr(text);
        }
      },
      funcWrappers: {},
      getFuncWrapper: function (func, sig) {
        assert(sig);
        if (!Runtime.funcWrappers[sig]) {
          Runtime.funcWrappers[sig] = {};
        }
        var sigCache = Runtime.funcWrappers[sig];
        if (!sigCache[func]) {
          sigCache[func] = function dynCall_wrapper() {
            return Runtime.dynCall(sig, func, arguments);
          };
        }
        return sigCache[func];
      },
      getCompilerSetting: function (name) {
        throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
      },
      stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
      staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
      dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
      alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
      makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
      GLOBAL_BASE: 8,
      QUANTUM_SIZE: 4,
      __dummy__: 0
    }
    
    
    
    Module["Runtime"] = Runtime;
    
    
    
    //========================================
    // Runtime essentials
    //========================================
    
    var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
    var EXITSTATUS = 0;
    
    function assert(condition, text) {
      if (!condition) {
        abort('Assertion failed: ' + text);
      }
    }
    
    var globalScope = this;
    
    // Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
    function getCFunc(ident) {
      var func = Module['_' + ident]; // closure exported function
      if (!func) {
        try { func = eval('_' + ident); } catch(e) {}
      }
      assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
      return func;
    }
    
    var cwrap, ccall;
    (function(){
      var JSfuncs = {
        // Helpers for cwrap -- it can't refer to Runtime directly because it might
        // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
        // out what the minified function name is.
        'stackSave': function() {
          Runtime.stackSave()
        },
        'stackRestore': function() {
          Runtime.stackRestore()
        },
        // type conversion from js to c
        'arrayToC' : function(arr) {
          var ret = Runtime.stackAlloc(arr.length);
          writeArrayToMemory(arr, ret);
          return ret;
        },
        'stringToC' : function(str) {
          var ret = 0;
          if (str !== null && str !== undefined && str !== 0) { // null string
            // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
            ret = Runtime.stackAlloc((str.length << 2) + 1);
            writeStringToMemory(str, ret);
          }
          return ret;
        }
      };
      // For fast lookup of conversion functions
      var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};
    
      // C calling interface.
      ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
        var func = getCFunc(ident);
        var cArgs = [];
        var stack = 0;
        assert(returnType !== 'array', 'Return type should not be "array".');
        if (args) {
          for (var i = 0; i < args.length; i++) {
            var converter = toC[argTypes[i]];
            if (converter) {
              if (stack === 0) stack = Runtime.stackSave();
              cArgs[i] = converter(args[i]);
            } else {
              cArgs[i] = args[i];
            }
          }
        }
        var ret = func.apply(null, cArgs);
        if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
          assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
        }
        if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
        if (returnType === 'string') ret = Pointer_stringify(ret);
        if (stack !== 0) {
          if (opts && opts.async) {
            EmterpreterAsync.asyncFinalizers.push(function() {
              Runtime.stackRestore(stack);
            });
            return;
          }
          Runtime.stackRestore(stack);
        }
        return ret;
      }
    
      var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
      function parseJSFunc(jsfunc) {
        // Match the body and the return value of a javascript function source
        var parsed = jsfunc.toString().match(sourceRegex).slice(1);
        return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
      }
    
      // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
      var JSsource = null;
      function ensureJSsource() {
        if (!JSsource) {
          JSsource = {};
          for (var fun in JSfuncs) {
            if (JSfuncs.hasOwnProperty(fun)) {
              // Elements of toCsource are arrays of three items:
              // the code, and the return value
              JSsource[fun] = parseJSFunc(JSfuncs[fun]);
            }
          }
        }
      }
    
      cwrap = function cwrap(ident, returnType, argTypes) {
        argTypes = argTypes || [];
        var cfunc = getCFunc(ident);
        // When the function takes numbers and returns a number, we can just return
        // the original function
        var numericArgs = argTypes.every(function(type){ return type === 'number'});
        var numericRet = (returnType !== 'string');
        if ( numericRet && numericArgs) {
          return cfunc;
        }
        // Creation of the arguments list (["$1","$2",...,"$nargs"])
        var argNames = argTypes.map(function(x,i){return '$'+i});
        var funcstr = "(function(" + argNames.join(',') + ") {";
        var nargs = argTypes.length;
        if (!numericArgs) {
          // Generate the code needed to convert the arguments from javascript
          // values to pointers
          ensureJSsource();
          funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
          for (var i = 0; i < nargs; i++) {
            var arg = argNames[i], type = argTypes[i];
            if (type === 'number') continue;
            var convertCode = JSsource[type + 'ToC']; // [code, return]
            funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
            funcstr += convertCode.body + ';';
            funcstr += arg + '=(' + convertCode.returnValue + ');';
          }
        }
    
        // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
        var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
        // Call the function
        funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
        if (!numericRet) { // Return type can only by 'string' or 'number'
          // Convert the result to a string
          var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
          funcstr += 'ret = ' + strgfy + '(ret);';
        }
        funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
        if (!numericArgs) {
          // If we had a stack, restore it
          ensureJSsource();
          funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
        }
        funcstr += 'return ret})';
        return eval(funcstr);
      };
    })();
    Module["ccall"] = ccall;
    Module["cwrap"] = cwrap;
    
    function setValue(ptr, value, type, noSafe) {
      type = type || 'i8';
      if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
        switch(type) {
          case 'i1': HEAP8[((ptr)>>0)]=value; break;
          case 'i8': HEAP8[((ptr)>>0)]=value; break;
          case 'i16': HEAP16[((ptr)>>1)]=value; break;
          case 'i32': HEAP32[((ptr)>>2)]=value; break;
          case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
          case 'float': HEAPF32[((ptr)>>2)]=value; break;
          case 'double': HEAPF64[((ptr)>>3)]=value; break;
          default: abort('invalid type for setValue: ' + type);
        }
    }
    Module["setValue"] = setValue;
    
    
    function getValue(ptr, type, noSafe) {
      type = type || 'i8';
      if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
        switch(type) {
          case 'i1': return HEAP8[((ptr)>>0)];
          case 'i8': return HEAP8[((ptr)>>0)];
          case 'i16': return HEAP16[((ptr)>>1)];
          case 'i32': return HEAP32[((ptr)>>2)];
          case 'i64': return HEAP32[((ptr)>>2)];
          case 'float': return HEAPF32[((ptr)>>2)];
          case 'double': return HEAPF64[((ptr)>>3)];
          default: abort('invalid type for setValue: ' + type);
        }
      return null;
    }
    Module["getValue"] = getValue;
    
    var ALLOC_NORMAL = 0; // Tries to use _malloc()
    var ALLOC_STACK = 1; // Lives for the duration of the current function call
    var ALLOC_STATIC = 2; // Cannot be freed
    var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
    var ALLOC_NONE = 4; // Do not allocate
    Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
    Module["ALLOC_STACK"] = ALLOC_STACK;
    Module["ALLOC_STATIC"] = ALLOC_STATIC;
    Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
    Module["ALLOC_NONE"] = ALLOC_NONE;
    
    // allocate(): This is for internal use. You can use it yourself as well, but the interface
    //             is a little tricky (see docs right below). The reason is that it is optimized
    //             for multiple syntaxes to save space in generated code. So you should
    //             normally not use allocate(), and instead allocate memory using _malloc(),
    //             initialize it with setValue(), and so forth.
    // @slab: An array of data, or a number. If a number, then the size of the block to allocate,
    //        in *bytes* (note that this is sometimes confusing: the next parameter does not
    //        affect this!)
    // @types: Either an array of types, one for each byte (or 0 if no type at that position),
    //         or a single type which is used for the entire block. This only matters if there
    //         is initial data - if @slab is a number, then this does not matter at all and is
    //         ignored.
    // @allocator: How to allocate memory, see ALLOC_*
    function allocate(slab, types, allocator, ptr) {
      var zeroinit, size;
      if (typeof slab === 'number') {
        zeroinit = true;
        size = slab;
      } else {
        zeroinit = false;
        size = slab.length;
      }
    
      var singleType = typeof types === 'string' ? types : null;
    
      var ret;
      if (allocator == ALLOC_NONE) {
        ret = ptr;
      } else {
        ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
      }
    
      if (zeroinit) {
        var ptr = ret, stop;
        assert((ret & 3) == 0);
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
          HEAP32[((ptr)>>2)]=0;
        }
        stop = ret + size;
        while (ptr < stop) {
          HEAP8[((ptr++)>>0)]=0;
        }
        return ret;
      }
    
      if (singleType === 'i8') {
        if (slab.subarray || slab.slice) {
          HEAPU8.set(slab, ret);
        } else {
          HEAPU8.set(new Uint8Array(slab), ret);
        }
        return ret;
      }
    
      var i = 0, type, typeSize, previousType;
      while (i < size) {
        var curr = slab[i];
    
        if (typeof curr === 'function') {
          curr = Runtime.getFunctionIndex(curr);
        }
    
        type = singleType || types[i];
        if (type === 0) {
          i++;
          continue;
        }
        assert(type, 'Must know what type to store in allocate!');
    
        if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    
        setValue(ret+i, curr, type);
    
        // no need to look up size unless type changes, so cache it
        if (previousType !== type) {
          typeSize = Runtime.getNativeTypeSize(type);
          previousType = type;
        }
        i += typeSize;
      }
    
      return ret;
    }
    Module["allocate"] = allocate;
    
    // Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
    function getMemory(size) {
      if (!staticSealed) return Runtime.staticAlloc(size);
      if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
      return _malloc(size);
    }
    Module["getMemory"] = getMemory;
    
    function Pointer_stringify(ptr, /* optional */ length) {
      if (length === 0 || !ptr) return '';
      // TODO: use TextDecoder
      // Find the length, and check for UTF while doing so
      var hasUtf = 0;
      var t;
      var i = 0;
      while (1) {
        assert(ptr + i < TOTAL_MEMORY);
        t = HEAPU8[(((ptr)+(i))>>0)];
        hasUtf |= t;
        if (t == 0 && !length) break;
        i++;
        if (length && i == length) break;
      }
      if (!length) length = i;
    
      var ret = '';
    
      if (hasUtf < 128) {
        var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
        var curr;
        while (length > 0) {
          curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
          ret = ret ? ret + curr : curr;
          ptr += MAX_CHUNK;
          length -= MAX_CHUNK;
        }
        return ret;
      }
      return Module['UTF8ToString'](ptr);
    }
    Module["Pointer_stringify"] = Pointer_stringify;
    
    // Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
    // a copy of that string as a Javascript String object.
    
    function AsciiToString(ptr) {
      var str = '';
      while (1) {
        var ch = HEAP8[((ptr++)>>0)];
        if (!ch) return str;
        str += String.fromCharCode(ch);
      }
    }
    Module["AsciiToString"] = AsciiToString;
    
    // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
    // null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.
    
    function stringToAscii(str, outPtr) {
      return writeAsciiToMemory(str, outPtr, false);
    }
    Module["stringToAscii"] = stringToAscii;
    
    // Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
    // a copy of that string as a Javascript String object.
    
    function UTF8ArrayToString(u8Array, idx) {
      var u0, u1, u2, u3, u4, u5;
    
      var str = '';
      while (1) {
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
        u0 = u8Array[idx++];
        if (!u0) return str;
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        u1 = u8Array[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        u2 = u8Array[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          u3 = u8Array[idx++] & 63;
          if ((u0 & 0xF8) == 0xF0) {
            u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
          } else {
            u4 = u8Array[idx++] & 63;
            if ((u0 & 0xFC) == 0xF8) {
              u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
            } else {
              u5 = u8Array[idx++] & 63;
              u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
            }
          }
        }
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
    }
    Module["UTF8ArrayToString"] = UTF8ArrayToString;
    
    // Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
    // a copy of that string as a Javascript String object.
    
    function UTF8ToString(ptr) {
      return UTF8ArrayToString(HEAPU8,ptr);
    }
    Module["UTF8ToString"] = UTF8ToString;
    
    // Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
    // encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
    // Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
    // Parameters:
    //   str: the Javascript string to copy.
    //   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
    //   outIdx: The starting offset in the array to begin the copying.
    //   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
    //                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
    //                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
    // Returns the number of bytes written, EXCLUDING the null terminator.
    
    function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
      if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
        return 0;
    
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          outU8Array[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          outU8Array[outIdx++] = 0xC0 | (u >> 6);
          outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          outU8Array[outIdx++] = 0xE0 | (u >> 12);
          outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
          outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0x1FFFFF) {
          if (outIdx + 3 >= endIdx) break;
          outU8Array[outIdx++] = 0xF0 | (u >> 18);
          outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
          outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
          outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0x3FFFFFF) {
          if (outIdx + 4 >= endIdx) break;
          outU8Array[outIdx++] = 0xF8 | (u >> 24);
          outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
          outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
          outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
          outU8Array[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 5 >= endIdx) break;
          outU8Array[outIdx++] = 0xFC | (u >> 30);
          outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
          outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
          outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
          outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
          outU8Array[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      outU8Array[outIdx] = 0;
      return outIdx - startIdx;
    }
    Module["stringToUTF8Array"] = stringToUTF8Array;
    
    // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
    // null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
    // Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
    // Returns the number of bytes written, EXCLUDING the null terminator.
    
    function stringToUTF8(str, outPtr, maxBytesToWrite) {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
    }
    Module["stringToUTF8"] = stringToUTF8;
    
    // Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
    
    function lengthBytesUTF8(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
        if (u <= 0x7F) {
          ++len;
        } else if (u <= 0x7FF) {
          len += 2;
        } else if (u <= 0xFFFF) {
          len += 3;
        } else if (u <= 0x1FFFFF) {
          len += 4;
        } else if (u <= 0x3FFFFFF) {
          len += 5;
        } else {
          len += 6;
        }
      }
      return len;
    }
    Module["lengthBytesUTF8"] = lengthBytesUTF8;
    
    // Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
    // a copy of that string as a Javascript String object.
    
    function UTF16ToString(ptr) {
      var i = 0;
    
      var str = '';
      while (1) {
        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
        if (codeUnit == 0)
          return str;
        ++i;
        // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
        str += String.fromCharCode(codeUnit);
      }
    }
    
    
    // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
    // null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
    // Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
    // Parameters:
    //   str: the Javascript string to copy.
    //   outPtr: Byte address in Emscripten HEAP where to write the string to.
    //   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
    //                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
    //                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
    // Returns the number of bytes written, EXCLUDING the null terminator.
    
    function stringToUTF16(str, outPtr, maxBytesToWrite) {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr)>>1)]=codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[((outPtr)>>1)]=0;
      return outPtr - startPtr;
    }
    
    
    // Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
    
    function lengthBytesUTF16(str) {
      return str.length*2;
    }
    
    
    function UTF32ToString(ptr) {
      var i = 0;
    
      var str = '';
      while (1) {
        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
        if (utf32 == 0)
          return str;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
    }
    
    
    // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
    // null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
    // Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
    // Parameters:
    //   str: the Javascript string to copy.
    //   outPtr: Byte address in Emscripten HEAP where to write the string to.
    //   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
    //                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
    //                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
    // Returns the number of bytes written, EXCLUDING the null terminator.
    
    function stringToUTF32(str, outPtr, maxBytesToWrite) {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr)>>2)]=codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[((outPtr)>>2)]=0;
      return outPtr - startPtr;
    }
    
    
    // Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
    
    function lengthBytesUTF32(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }
    
      return len;
    }
    
    
    function demangle(func) {
      var hasLibcxxabi = !!Module['___cxa_demangle'];
      if (hasLibcxxabi) {
        try {
          var buf = _malloc(func.length);
          writeStringToMemory(func.substr(1), buf);
          var status = _malloc(4);
          var ret = Module['___cxa_demangle'](buf, 0, 0, status);
          if (getValue(status, 'i32') === 0 && ret) {
            return Pointer_stringify(ret);
          }
          // otherwise, libcxxabi failed, we can try ours which may return a partial result
        } catch(e) {
          // failure when using libcxxabi, we can try ours which may return a partial result
          return func;
        } finally {
          if (buf) _free(buf);
          if (status) _free(status);
          if (ret) _free(ret);
        }
      }
      Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }
    
    function demangleAll(text) {
      return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
    }
    
    function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }
    
    function stackTrace() {
      return demangleAll(jsStackTrace());
    }
    Module["stackTrace"] = stackTrace;
    
    // Memory management
    
    var PAGE_SIZE = 4096;
    
    function alignMemoryPage(x) {
      if (x % 4096 > 0) {
        x += (4096 - (x % 4096));
      }
      return x;
    }
    
    var HEAP;
    var buffer;
    var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
    
    function updateGlobalBuffer(buf) {
      Module['buffer'] = buffer = buf;
    }
    
    function updateGlobalBufferViews() {
      Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
      Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
      Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
      Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
      Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
      Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
      Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
      Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
    }
    
    var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
    var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
    var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
    
    
    function abortOnCannotGrowMemory() {
      abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
    
    function enlargeMemory() {
      abortOnCannotGrowMemory();
    }
    
    
    var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
    var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;
    
    var totalMemory = 64*1024;
    while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
      if (totalMemory < 16*1024*1024) {
        totalMemory *= 2;
      } else {
        totalMemory += 16*1024*1024
      }
    }
    if (totalMemory !== TOTAL_MEMORY) {
      Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
      TOTAL_MEMORY = totalMemory;
    }
    
    // Initialize the runtime's memory
    // check for full engine support (use string 'subarray' to avoid closure compiler confusion)
    assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
           'JS engine does not provide full typed array support');
    
    
    
    // Use a provided buffer, if there is one, or else allocate a new one
    if (Module['buffer']) {
      buffer = Module['buffer'];
      assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
    } else {
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
    updateGlobalBufferViews();
    
    
    // Endianness check (note: assumes compiler arch was little-endian)
    HEAP32[0] = 255;
    if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';
    
    Module['HEAP'] = HEAP;
    Module['buffer'] = buffer;
    Module['HEAP8'] = HEAP8;
    Module['HEAP16'] = HEAP16;
    Module['HEAP32'] = HEAP32;
    Module['HEAPU8'] = HEAPU8;
    Module['HEAPU16'] = HEAPU16;
    Module['HEAPU32'] = HEAPU32;
    Module['HEAPF32'] = HEAPF32;
    Module['HEAPF64'] = HEAPF64;
    
    function callRuntimeCallbacks(callbacks) {
      while(callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback();
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            Runtime.dynCall('v', func);
          } else {
            Runtime.dynCall('vi', func, [callback.arg]);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }
    
    var __ATPRERUN__  = []; // functions called before the runtime is initialized
    var __ATINIT__    = []; // functions called during startup
    var __ATMAIN__    = []; // functions called when main() is to be run
    var __ATEXIT__    = []; // functions called during shutdown
    var __ATPOSTRUN__ = []; // functions called after the runtime has exited
    
    var runtimeInitialized = false;
    var runtimeExited = false;
    
    
    function preRun() {
      // compatibility - merge in anything from Module['preRun'] at this time
      if (Module['preRun']) {
        if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
        while (Module['preRun'].length) {
          addOnPreRun(Module['preRun'].shift());
        }
      }
      callRuntimeCallbacks(__ATPRERUN__);
    }
    
    function ensureInitRuntime() {
      if (runtimeInitialized) return;
      runtimeInitialized = true;
      callRuntimeCallbacks(__ATINIT__);
    }
    
    function preMain() {
      callRuntimeCallbacks(__ATMAIN__);
    }
    
    function exitRuntime() {
      callRuntimeCallbacks(__ATEXIT__);
      runtimeExited = true;
    }
    
    function postRun() {
      // compatibility - merge in anything from Module['postRun'] at this time
      if (Module['postRun']) {
        if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
        while (Module['postRun'].length) {
          addOnPostRun(Module['postRun'].shift());
        }
      }
      callRuntimeCallbacks(__ATPOSTRUN__);
    }
    
    function addOnPreRun(cb) {
      __ATPRERUN__.unshift(cb);
    }
    Module["addOnPreRun"] = addOnPreRun;
    
    function addOnInit(cb) {
      __ATINIT__.unshift(cb);
    }
    Module["addOnInit"] = addOnInit;
    
    function addOnPreMain(cb) {
      __ATMAIN__.unshift(cb);
    }
    Module["addOnPreMain"] = addOnPreMain;
    
    function addOnExit(cb) {
      __ATEXIT__.unshift(cb);
    }
    Module["addOnExit"] = addOnExit;
    
    function addOnPostRun(cb) {
      __ATPOSTRUN__.unshift(cb);
    }
    Module["addOnPostRun"] = addOnPostRun;
    
    // Tools
    
    
    function intArrayFromString(stringy, dontAddNull, length /* optional */) {
      var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array;
    }
    Module["intArrayFromString"] = intArrayFromString;
    
    function intArrayToString(array) {
      var ret = [];
      for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 0xFF) {
          assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
          chr &= 0xFF;
        }
        ret.push(String.fromCharCode(chr));
      }
      return ret.join('');
    }
    Module["intArrayToString"] = intArrayToString;
    
    function writeStringToMemory(string, buffer, dontAddNull) {
      var array = intArrayFromString(string, dontAddNull);
      var i = 0;
      while (i < array.length) {
        var chr = array[i];
        HEAP8[(((buffer)+(i))>>0)]=chr;
        i = i + 1;
      }
    }
    Module["writeStringToMemory"] = writeStringToMemory;
    
    function writeArrayToMemory(array, buffer) {
      for (var i = 0; i < array.length; i++) {
        HEAP8[((buffer++)>>0)]=array[i];
      }
    }
    Module["writeArrayToMemory"] = writeArrayToMemory;
    
    function writeAsciiToMemory(str, buffer, dontAddNull) {
      for (var i = 0; i < str.length; ++i) {
        assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
        HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
      }
      // Null-terminate the pointer to the HEAP.
      if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
    }
    Module["writeAsciiToMemory"] = writeAsciiToMemory;
    
    function unSign(value, bits, ignore) {
      if (value >= 0) {
        return value;
      }
      return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                        : Math.pow(2, bits)         + value;
    }
    function reSign(value, bits, ignore) {
      if (value <= 0) {
        return value;
      }
      var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                            : Math.pow(2, bits-1);
      if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                           // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                           // TODO: In i64 mode 1, resign the two parts separately and safely
        value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
      }
      return value;
    }
    
    
    // check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
    if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
      var ah  = a >>> 16;
      var al = a & 0xffff;
      var bh  = b >>> 16;
      var bl = b & 0xffff;
      return (al*bl + ((ah*bl + al*bh) << 16))|0;
    };
    Math.imul = Math['imul'];
    
    
    if (!Math['clz32']) Math['clz32'] = function(x) {
      x = x >>> 0;
      for (var i = 0; i < 32; i++) {
        if (x & (1 << (31 - i))) return i;
      }
      return 32;
    };
    Math.clz32 = Math['clz32']
    
    var Math_abs = Math.abs;
    var Math_cos = Math.cos;
    var Math_sin = Math.sin;
    var Math_tan = Math.tan;
    var Math_acos = Math.acos;
    var Math_asin = Math.asin;
    var Math_atan = Math.atan;
    var Math_atan2 = Math.atan2;
    var Math_exp = Math.exp;
    var Math_log = Math.log;
    var Math_sqrt = Math.sqrt;
    var Math_ceil = Math.ceil;
    var Math_floor = Math.floor;
    var Math_pow = Math.pow;
    var Math_imul = Math.imul;
    var Math_fround = Math.fround;
    var Math_min = Math.min;
    var Math_clz32 = Math.clz32;
    
    // A counter of dependencies for calling run(). If we need to
    // do asynchronous work before running, increment this and
    // decrement it. Incrementing must happen in a place like
    // PRE_RUN_ADDITIONS (used by emcc to add file preloading).
    // Note that you can add dependencies in preRun, even though
    // it happens right before run - run will be postponed until
    // the dependencies are met.
    var runDependencies = 0;
    var runDependencyWatcher = null;
    var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
    var runDependencyTracking = {};
    
    function getUniqueRunDependency(id) {
      var orig = id;
      while (1) {
        if (!runDependencyTracking[id]) return id;
        id = orig + Math.random();
      }
      return id;
    }
    
    function addRunDependency(id) {
      runDependencies++;
      if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
      }
      if (id) {
        assert(!runDependencyTracking[id]);
        runDependencyTracking[id] = 1;
        if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
          // Check for missing dependencies every few seconds
          runDependencyWatcher = setInterval(function() {
            if (ABORT) {
              clearInterval(runDependencyWatcher);
              runDependencyWatcher = null;
              return;
            }
            var shown = false;
            for (var dep in runDependencyTracking) {
              if (!shown) {
                shown = true;
                Module.printErr('still waiting on run dependencies:');
              }
              Module.printErr('dependency: ' + dep);
            }
            if (shown) {
              Module.printErr('(end of list)');
            }
          }, 10000);
        }
      } else {
        Module.printErr('warning: run dependency added without ID');
      }
    }
    Module["addRunDependency"] = addRunDependency;
    
    function removeRunDependency(id) {
      runDependencies--;
      if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
      }
      if (id) {
        assert(runDependencyTracking[id]);
        delete runDependencyTracking[id];
      } else {
        Module.printErr('warning: run dependency removed without ID');
      }
      if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback(); // can add another dependenciesFulfilled
        }
      }
    }
    Module["removeRunDependency"] = removeRunDependency;
    
    Module["preloadedImages"] = {}; // maps url to image data
    Module["preloadedAudios"] = {}; // maps url to audio data
    
    
    
    var memoryInitializer = null;
    
    
    
    
    // === Body ===
    
    var ASM_CONSTS = [];
    
    
    
    
    STATIC_BASE = 8;
    
    STATICTOP = STATIC_BASE + 9456;
      /* global initializers */  __ATINIT__.push();
    
    
    /* memory initializer */ allocate([212,2,0,0,134,3,0,0,212,2,0,0,17,25,0,0,252,2,0,0,239,24,0,0,56,0,0,0,0,0,0,0,252,2,0,0,156,24,0,0,24,0,0,0,0,0,0,0,252,2,0,0,193,24,0,0,72,0,0,0,0,0,0,0,212,2,0,0,226,24,0,0,252,2,0,0,9,26,0,0,16,0,0,0,0,0,0,0,252,2,0,0,37,26,0,0,16,0,0,0,0,0,0,0,252,2,0,0,53,26,0,0,96,0,0,0,0,0,0,0,252,2,0,0,106,26,0,0,56,0,0,0,0,0,0,0,252,2,0,0,70,26,0,0,128,0,0,0,0,0,0,0,150,13,0,0,0,0,0,0,155,13,0,0,1,0,0,0,164,13,0,0,2,0,0,0,174,13,0,0,3,0,0,0,184,13,0,0,4,0,0,0,194,13,0,0,5,0,0,0,204,13,0,0,6,0,0,0,214,13,0,0,7,0,0,0,0,0,0,0,0,0,0,0,224,13,0,0,0,0,0,0,232,13,0,0,1,0,0,0,245,13,0,0,2,0,0,0,253,13,0,0,3,0,0,0,10,14,0,0,4,0,0,0,22,14,0,0,5,0,0,0,33,14,0,0,6,0,0,0,43,14,0,0,7,0,0,0,58,14,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,108,1,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,208,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,216,28,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,0,0,88,2,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,224,32,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,24,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,40,0,0,0,7,0,0,0,15,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,30,25,0,0,0,0,0,0,80,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,96,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,112,0,0,0,22,0,0,0,25,0,0,0,24,0,0,0,45,0,114,98,0,119,0,48,46,50,53,0,101,110,100,45,111,102,45,102,105,108,101,32,114,101,97,100,105,110,103,32,112,110,109,32,102,105,108,101,46,0,78,49,48,80,97,103,101,95,105,109,97,103,101,53,69,114,114,111,114,69,0,106,117,110,107,32,105,110,32,112,98,109,32,102,105,108,101,32,119,104,101,114,101,32,98,105,116,115,32,115,104,111,117,108,100,32,98,101,46,0,106,117,110,107,32,105,110,32,112,110,109,32,102,105,108,101,32,119,104,101,114,101,32,97,110,32,105,110,116,101,103,101,114,32,115,104,111,117,108,100,32,98,101,46,0,110,117,109,98,101,114,32,116,111,111,32,98,105,103,32,105,110,32,112,110,109,32,102,105,108,101,46,0,122,101,114,111,32,109,97,120,118,97,108,32,105,110,32,112,103,109,32,102,105,108,101,46,0,118,97,108,117,101,32,62,32,109,97,120,118,97,108,32,105,110,32,112,103,109,32,102,105,108,101,46,0,109,97,120,118,97,108,32,62,32,50,53,53,32,105,110,32,112,103,109,32,34,80,53,34,32,102,105,108,101,46,0,122,101,114,111,32,109,97,120,118,97,108,32,105,110,32,112,112,109,32,102,105,108,101,46,0,118,97,108,117,101,32,62,32,109,97,120,118,97,108,32,105,110,32,112,112,109,32,102,105,108,101,46,0,109,97,120,118,97,108,32,62,32,50,53,53,32,105,110,32,112,112,109,32,34,80,54,34,32,102,105,108,101,46,0,98,97,100,32,109,97,103,105,99,32,110,117,109,98,101,114,32,45,32,110,111,116,32,97,32,112,98,109,44,32,112,103,109,32,111,114,32,112,112,109,32,102,105,108,101,46,0,122,101,114,111,32,119,105,100,116,104,32,105,110,32,112,110,109,32,102,105,108,101,46,0,122,101,114,111,32,104,101,105,103,104,116,32,105,110,32,112,110,109,32,102,105,108,101,46,0,105,109,97,103,101,32,116,111,111,32,115,109,97,108,108,46,32,77,105,110,105,109,117,109,32,115,105,122,101,32,105,115,32,51,120,51,46,0,105,109,97,103,101,32,116,111,111,32,98,105,103,46,32,39,105,110,116,39,32,119,105,108,108,32,111,118,101,114,102,108,111,119,46,0,102,105,108,101,32,116,121,112,101,32,105,115,32,80,37,99,10,0,102,105,108,101,32,115,105,122,101,32,105,115,32,37,100,119,32,120,32,37,100,104,10,0,80,37,99,10,37,100,32,37,100,10,0,37,100,10,0,37,100,32,0,37,100,32,37,100,32,37,100,10,0,37,100,32,37,100,32,37,100,32,0,37,99,32,37,99,32,37,99,32,0,98,97,100,32,112,97,114,97,109,101,116,101,114,32,98,117,105,108,100,105,110,103,32,97,32,114,101,100,117,99,101,100,32,80,97,103,101,95,105,109,97,103,101,46,0,115,99,97,108,101,32,102,97,99,116,111,114,32,116,111,111,32,98,105,103,46,32,39,105,110,116,39,32,119,105,108,108,32,111,118,101,114,102,108,111,119,46,0,108,32,61,32,37,100,44,32,116,32,61,32,37,100,44,32,114,32,61,32,37,100,44,32,98,32,61,32,37,100,10,0,98,97,100,32,112,97,114,97,109,101,116,101,114,32,98,117,105,108,100,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,108,101,102,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,116,111,112,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,114,105,103,104,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,98,111,116,116,111,109,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,104,101,105,103,104,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,119,105,100,116,104,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,106,111,105,110,95,98,108,111,98,115,44,32,108,111,115,116,32,98,108,111,98,46,0,110,117,109,98,101,114,32,111,102,32,116,101,120,116,32,98,108,111,99,107,115,32,61,32,37,100,10,0,116,111,116,97,108,32,122,111,110,101,115,32,105,110,32,112,97,103,101,32,37,100,10,0,116,111,116,97,108,32,98,108,111,98,115,32,105,110,32,112,97,103,101,32,37,100,10,10,0,122,111,110,101,32,37,100,32,111,102,32,37,100,10,0,122,111,110,101,32,115,105,122,101,32,37,100,119,32,120,32,37,100,104,10,0,116,111,116,97,108,32,98,108,111,98,115,32,105,110,32,122,111,110,101,32,37,117,10,10,0,84,101,120,116,112,97,103,101,58,58,116,101,120,116,98,108,111,99,107,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,115,111,117,114,99,101,32,102,105,108,101,32,37,115,10,0,116,111,116,97,108,32,116,101,120,116,32,98,108,111,99,107,115,32,37,100,10,0,116,101,120,116,32,98,108,111,99,107,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,10,0,98,97,100,32,112,97,114,97,109,101,116,101,114,32,98,117,105,108,100,105,110,103,32,97,32,66,105,116,109,97,112,32,102,114,111,109,32,112,97,114,116,32,111,102,32,97,110,111,116,104,101,114,32,111,110,101,46,0,104,111,108,101,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,32,79,0,32,46,0,102,105,108,108,95,104,111,108,101,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,100,101,108,101,116,101,95,104,111,108,101,44,32,108,111,115,116,32,104,111,108,101,46,0,106,111,105,110,95,104,111,108,101,115,44,32,108,111,115,116,32,104,111,108,101,46,0,108,105,110,101,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,37,100,32,108,105,110,101,115,10,10,0,37,100,32,99,104,97,114,97,99,116,101,114,115,32,105,110,32,108,105,110,101,32,37,100,10,0,108,105,110,101,115,32,37,100,10,0,108,105,110,101,32,37,100,32,99,104,97,114,115,32,37,100,32,104,101,105,103,104,116,32,37,100,10,0,99,111,110,115,116,32,98,108,111,98,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,98,108,111,98,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,105,110,115,101,114,116,95,103,117,101,115,115,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,115,119,97,112,95,103,117,101,115,115,101,115,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,103,117,101,115,115,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,95,0,37,100,32,103,117,101,115,115,101,115,32,32,32,32,0,103,117,101,115,115,32,39,37,115,39,44,32,99,111,110,102,105,100,101,110,99,101,32,37,100,32,32,32,32,0,103,117,101,115,115,32,39,37,99,39,44,32,99,111,110,102,105,100,101,110,99,101,32,37,100,32,32,32,32,0,103,117,101,115,115,32,39,92,116,39,44,32,99,111,110,102,105,100,101,110,99,101,32,37,100,32,32,32,32,0,108,101,102,116,32,61,32,37,100,44,32,116,111,112,32,61,32,37,100,44,32,114,105,103,104,116,32,61,32,37,100,44,32,98,111,116,116,111,109,32,61,32,37,100,10,0,119,105,100,116,104,32,61,32,37,100,44,32,104,101,105,103,104,116,32,61,32,37,100,44,32,104,99,101,110,116,101,114,32,61,32,37,100,44,32,118,99,101,110,116,101,114,32,61,32,37,100,44,32,98,108,97,99,107,32,97,114,101,97,32,61,32,37,100,37,37,10,0,104,98,97,114,115,32,61,32,37,100,44,32,118,98,97,114,115,32,61,32,37,100,10,0,10,10,0,32,37,99,0,32,32,116,111,112,40,37,100,41,0,32,32,118,99,101,110,116,101,114,40,37,100,41,0,32,32,98,111,116,116,111,109,40,37,100,41,0,32,32,98,111,120,46,116,111,112,40,37,100,41,0,32,32,98,111,120,46,118,99,101,110,116,101,114,40,37,100,41,0,32,32,98,111,120,46,98,111,116,116,111,109,40,37,100,41,0,32,32,104,49,46,116,111,112,40,37,100,41,0,32,32,104,49,46,98,111,116,116,111,109,40,37,100,41,0,32,32,104,50,46,116,111,112,40,37,100,41,0,32,32,104,50,46,98,111,116,116,111,109,40,37,100,41,0,37,51,100,32,37,51,100,32,37,50,100,32,37,50,100,59,32,37,100,0,44,32,39,37,99,39,37,100,0,44,32,39,37,115,39,37,100,0,99,104,97,114,97,99,116,101,114,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,105,115,95,107,101,121,95,99,104,97,114,97,99,116,101,114,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,100,101,108,101,116,101,95,99,104,97,114,97,99,116,101,114,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,105,110,115,101,114,116,95,115,112,97,99,101,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,105,110,115,101,114,116,95,115,112,97,99,101,44,32,116,114,97,99,107,32,110,111,116,32,115,101,116,32,121,101,116,46,0,109,101,97,110,32,104,101,105,103,104,116,32,61,32,37,100,44,32,109,101,100,105,97,110,32,104,101,105,103,104,116,32,61,32,37,100,44,32,116,114,97,99,107,32,115,101,103,109,101,110,116,115,32,61,32,37,100,44,32,98,105,103,32,105,110,105,116,105,97,108,115,32,61,32,37,100,10,0,108,32,61,32,37,100,44,32,108,99,32,61,32,37,100,44,32,114,32,61,32,37,100,44,32,114,99,32,61,32,37,100,44,32,104,32,61,32,37,100,10,0,98,97,100,32,112,97,114,97,109,101,116,101,114,32,98,117,105,108,100,105,110,103,32,97,32,86,114,104,111,109,98,111,105,100,46,0,101,120,116,101,110,100,95,108,101,102,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,86,114,104,111,109,98,111,105,100,46,0,101,120,116,101,110,100,95,114,105,103,104,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,86,114,104,111,109,98,111,105,100,46,0,111,99,114,97,100,58,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,37,115,10,0,104,101,108,112,0,32,32,37,115,0,110,111,110,101,0,114,111,116,97,116,101,57,48,0,114,111,116,97,116,101,49,56,48,0,114,111,116,97,116,101,50,55,48,0,109,105,114,114,111,114,95,108,114,0,109,105,114,114,111,114,95,116,98,0,109,105,114,114,111,114,95,100,49,0,109,105,114,114,111,114,95,100,50,0,108,101,116,116,101,114,115,0,108,101,116,116,101,114,115,95,111,110,108,121,0,110,117,109,98,101,114,115,0,110,117,109,98,101,114,115,95,111,110,108,121,0,115,97,109,101,95,104,101,105,103,104,116,0,116,101,120,116,95,98,108,111,99,107,0,117,112,112,101,114,95,110,117,109,0,117,112,112,101,114,95,110,117,109,95,109,97,114,107,0,117,112,112,101,114,95,110,117,109,95,111,110,108,121,0,37,115,58,32,98,97,100,32,102,105,108,116,101,114,32,39,37,115,39,10,0,86,97,108,105,100,32,102,105,108,116,101,114,32,110,97,109,101,115,58,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,98,97,115,105,99,95,115,116,114,105,110,103,0,118,101,99,116,111,114,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,117,110,99,97,117,103,104,116,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
    
    
    
    
    
    /* no memory initializer */
    var tempDoublePtr = STATICTOP; STATICTOP += 16;
    
    assert(tempDoublePtr % 8 == 0);
    
    function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
    
      HEAP8[tempDoublePtr] = HEAP8[ptr];
    
      HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
    
      HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
    
      HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
    
    }
    
    function copyTempDouble(ptr) {
    
      HEAP8[tempDoublePtr] = HEAP8[ptr];
    
      HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
    
      HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
    
      HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
    
      HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
    
      HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
    
      HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
    
      HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
    
    }
    
    // {{PRE_LIBRARY}}
    
    
    
      Module["_i64Subtract"] = _i64Subtract;
    
    
      function ___setErrNo(value) {
          if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
          else Module.printErr('failed to set errno from JS');
          return value;
        }
    
      var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
          // long sysconf(int name);
          // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
          switch(name) {
            case 30: return PAGE_SIZE;
            case 85: return totalMemory / PAGE_SIZE;
            case 132:
            case 133:
            case 12:
            case 137:
            case 138:
            case 15:
            case 235:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 149:
            case 13:
            case 10:
            case 236:
            case 153:
            case 9:
            case 21:
            case 22:
            case 159:
            case 154:
            case 14:
            case 77:
            case 78:
            case 139:
            case 80:
            case 81:
            case 82:
            case 68:
            case 67:
            case 164:
            case 11:
            case 29:
            case 47:
            case 48:
            case 95:
            case 52:
            case 51:
            case 46:
              return 200809;
            case 79:
              return 0;
            case 27:
            case 246:
            case 127:
            case 128:
            case 23:
            case 24:
            case 160:
            case 161:
            case 181:
            case 182:
            case 242:
            case 183:
            case 184:
            case 243:
            case 244:
            case 245:
            case 165:
            case 178:
            case 179:
            case 49:
            case 50:
            case 168:
            case 169:
            case 175:
            case 170:
            case 171:
            case 172:
            case 97:
            case 76:
            case 32:
            case 173:
            case 35:
              return -1;
            case 176:
            case 177:
            case 7:
            case 155:
            case 8:
            case 157:
            case 125:
            case 126:
            case 92:
            case 93:
            case 129:
            case 130:
            case 131:
            case 94:
            case 91:
              return 1;
            case 74:
            case 60:
            case 69:
            case 70:
            case 4:
              return 1024;
            case 31:
            case 42:
            case 72:
              return 32;
            case 87:
            case 26:
            case 33:
              return 2147483647;
            case 34:
            case 1:
              return 47839;
            case 38:
            case 36:
              return 99;
            case 43:
            case 37:
              return 2048;
            case 0: return 2097152;
            case 3: return 65536;
            case 28: return 32768;
            case 44: return 32767;
            case 75: return 16384;
            case 39: return 1000;
            case 89: return 700;
            case 71: return 256;
            case 40: return 255;
            case 2: return 100;
            case 180: return 64;
            case 25: return 20;
            case 5: return 16;
            case 6: return 6;
            case 73: return 4;
            case 84: {
              if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
              return 1;
            }
          }
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        }
    
    
      function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
          return !!__ZSt18uncaught_exceptionv.uncaught_exception;
        }
    
    
    
      var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
            if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
            for (var ptr in EXCEPTIONS.infos) {
              var info = EXCEPTIONS.infos[ptr];
              if (info.adjusted === adjusted) {
                return ptr;
              }
            }
            return adjusted;
          },addRef:function (ptr) {
            if (!ptr) return;
            var info = EXCEPTIONS.infos[ptr];
            info.refcount++;
          },decRef:function (ptr) {
            if (!ptr) return;
            var info = EXCEPTIONS.infos[ptr];
            assert(info.refcount > 0);
            info.refcount--;
            if (info.refcount === 0) {
              if (info.destructor) {
                Runtime.dynCall('vi', info.destructor, [ptr]);
              }
              delete EXCEPTIONS.infos[ptr];
              ___cxa_free_exception(ptr);
            }
          },clearRef:function (ptr) {
            if (!ptr) return;
            var info = EXCEPTIONS.infos[ptr];
            info.refcount = 0;
          }};
      function ___resumeException(ptr) {
          if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
          EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
          throw ptr;
        }function ___cxa_find_matching_catch() {
          var thrown = EXCEPTIONS.last;
          if (!thrown) {
            // just pass through the null ptr
            return ((asm["setTempRet0"](0),0)|0);
          }
          var info = EXCEPTIONS.infos[thrown];
          var throwntype = info.type;
          if (!throwntype) {
            // just pass through the thrown ptr
            return ((asm["setTempRet0"](0),thrown)|0);
          }
          var typeArray = Array.prototype.slice.call(arguments);
    
          var pointer = Module['___cxa_is_pointer_type'](throwntype);
          // can_catch receives a **, add indirection
          if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
          HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
          thrown = ___cxa_find_matching_catch.buffer;
          // The different catch blocks are denoted by different types.
          // Due to inheritance, those types may not precisely match the
          // type of the thrown object. Find one which matches, and
          // return the type of the catch block which should be called.
          for (var i = 0; i < typeArray.length; i++) {
            if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
              thrown = HEAP32[((thrown)>>2)]; // undo indirection
              info.adjusted = thrown;
              return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
            }
          }
          // Shouldn't happen unless we have bogus data in typeArray
          // or encounter a type for which emscripten doesn't have suitable
          // typeinfo defined. Best-efforts match just in case.
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          return ((asm["setTempRet0"](throwntype),thrown)|0);
        }function ___cxa_throw(ptr, type, destructor) {
          EXCEPTIONS.infos[ptr] = {
            ptr: ptr,
            adjusted: ptr,
            type: type,
            destructor: destructor,
            refcount: 0
          };
          EXCEPTIONS.last = ptr;
          if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
            __ZSt18uncaught_exceptionv.uncaught_exception = 1;
          } else {
            __ZSt18uncaught_exceptionv.uncaught_exception++;
          }
          throw ptr;
        }
    
    
      Module["_memset"] = _memset;
    
      function ___gxx_personality_v0() {
        }
    
    
      Module["_bitshift64Shl"] = _bitshift64Shl;
    
      function _abort() {
          Module['abort']();
        }
    
    
    
      function _free() {
      }
      Module["_free"] = _free;function ___cxa_free_exception(ptr) {
          try {
            return _free(ptr);
          } catch(e) { // XXX FIXME
            Module.printErr('exception during cxa_free_exception: ' + e);
          }
        }function ___cxa_end_catch() {
          if (___cxa_end_catch.rethrown) {
            ___cxa_end_catch.rethrown = false;
            return;
          }
          // Clear state flag.
          asm['setThrew'](0);
          // Call destructor if one is registered then clear it.
          var ptr = EXCEPTIONS.caught.pop();
          if (ptr) {
            EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
            EXCEPTIONS.last = 0; // XXX in decRef?
          }
        }
    
    
      function _pthread_once(ptr, func) {
          if (!_pthread_once.seen) _pthread_once.seen = {};
          if (ptr in _pthread_once.seen) return;
          Runtime.dynCall('v', func);
          _pthread_once.seen[ptr] = 1;
        }
    
      function ___lock() {}
    
      function ___unlock() {}
    
    
      var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
          return PTHREAD_SPECIFIC[key] || 0;
        }
    
    
      Module["_i64Add"] = _i64Add;
    
    
      var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
          if (key == 0) {
            return ERRNO_CODES.EINVAL;
          }
          HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
          // values start at 0
          PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
          PTHREAD_SPECIFIC_NEXT_KEY++;
          return 0;
        }
    
    
      function __exit(status) {
          // void _exit(int status);
          // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
          Module['exit'](status);
        }function _exit(status) {
          __exit(status);
        }
    
      function _pthread_setspecific(key, value) {
          if (!(key in PTHREAD_SPECIFIC)) {
            return ERRNO_CODES.EINVAL;
          }
          PTHREAD_SPECIFIC[key] = value;
          return 0;
        }
    
    
      function _malloc(bytes) {
          /* Over-allocate to make sure it is byte-aligned by 8.
           * This will leak memory, but this is only the dummy
           * implementation (replaced by dlmalloc normally) so
           * not an issue.
           */
          var ptr = Runtime.dynamicAlloc(bytes + 8);
          return (ptr+8) & 0xFFFFFFF8;
        }
      Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
          return _malloc(size);
        }
    
    
    
    
      var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
    
      var PATH={splitPath:function (filename) {
            var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
            return splitPathRe.exec(filename).slice(1);
          },normalizeArray:function (parts, allowAboveRoot) {
            // if the path tries to go above the root, `up` ends up > 0
            var up = 0;
            for (var i = parts.length - 1; i >= 0; i--) {
              var last = parts[i];
              if (last === '.') {
                parts.splice(i, 1);
              } else if (last === '..') {
                parts.splice(i, 1);
                up++;
              } else if (up) {
                parts.splice(i, 1);
                up--;
              }
            }
            // if the path is allowed to go above the root, restore leading ..s
            if (allowAboveRoot) {
              for (; up--; up) {
                parts.unshift('..');
              }
            }
            return parts;
          },normalize:function (path) {
            var isAbsolute = path.charAt(0) === '/',
                trailingSlash = path.substr(-1) === '/';
            // Normalize the path
            path = PATH.normalizeArray(path.split('/').filter(function(p) {
              return !!p;
            }), !isAbsolute).join('/');
            if (!path && !isAbsolute) {
              path = '.';
            }
            if (path && trailingSlash) {
              path += '/';
            }
            return (isAbsolute ? '/' : '') + path;
          },dirname:function (path) {
            var result = PATH.splitPath(path),
                root = result[0],
                dir = result[1];
            if (!root && !dir) {
              // No dirname whatsoever
              return '.';
            }
            if (dir) {
              // It has a dirname, strip trailing slash
              dir = dir.substr(0, dir.length - 1);
            }
            return root + dir;
          },basename:function (path) {
            // EMSCRIPTEN return '/'' for '/', not an empty string
            if (path === '/') return '/';
            var lastSlash = path.lastIndexOf('/');
            if (lastSlash === -1) return path;
            return path.substr(lastSlash+1);
          },extname:function (path) {
            return PATH.splitPath(path)[3];
          },join:function () {
            var paths = Array.prototype.slice.call(arguments, 0);
            return PATH.normalize(paths.join('/'));
          },join2:function (l, r) {
            return PATH.normalize(l + '/' + r);
          },resolve:function () {
            var resolvedPath = '',
              resolvedAbsolute = false;
            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
              var path = (i >= 0) ? arguments[i] : FS.cwd();
              // Skip empty and invalid entries
              if (typeof path !== 'string') {
                throw new TypeError('Arguments to path.resolve must be strings');
              } else if (!path) {
                return ''; // an invalid portion invalidates the whole thing
              }
              resolvedPath = path + '/' + resolvedPath;
              resolvedAbsolute = path.charAt(0) === '/';
            }
            // At this point the path should be resolved to a full absolute path, but
            // handle relative paths to be safe (might happen when process.cwd() fails)
            resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
              return !!p;
            }), !resolvedAbsolute).join('/');
            return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
          },relative:function (from, to) {
            from = PATH.resolve(from).substr(1);
            to = PATH.resolve(to).substr(1);
            function trim(arr) {
              var start = 0;
              for (; start < arr.length; start++) {
                if (arr[start] !== '') break;
              }
              var end = arr.length - 1;
              for (; end >= 0; end--) {
                if (arr[end] !== '') break;
              }
              if (start > end) return [];
              return arr.slice(start, end - start + 1);
            }
            var fromParts = trim(from.split('/'));
            var toParts = trim(to.split('/'));
            var length = Math.min(fromParts.length, toParts.length);
            var samePartsLength = length;
            for (var i = 0; i < length; i++) {
              if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
              }
            }
            var outputParts = [];
            for (var i = samePartsLength; i < fromParts.length; i++) {
              outputParts.push('..');
            }
            outputParts = outputParts.concat(toParts.slice(samePartsLength));
            return outputParts.join('/');
          }};
    
      var TTY={ttys:[],init:function () {
            // https://github.com/kripken/emscripten/pull/1555
            // if (ENVIRONMENT_IS_NODE) {
            //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
            //   // device, it always assumes it's a TTY device. because of this, we're forcing
            //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
            //   // with text files until FS.init can be refactored.
            //   process['stdin']['setEncoding']('utf8');
            // }
          },shutdown:function () {
            // https://github.com/kripken/emscripten/pull/1555
            // if (ENVIRONMENT_IS_NODE) {
            //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
            //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
            //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
            //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
            //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
            //   process['stdin']['pause']();
            // }
          },register:function (dev, ops) {
            TTY.ttys[dev] = { input: [], output: [], ops: ops };
            FS.registerDevice(dev, TTY.stream_ops);
          },stream_ops:{open:function (stream) {
              var tty = TTY.ttys[stream.node.rdev];
              if (!tty) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
              }
              stream.tty = tty;
              stream.seekable = false;
            },close:function (stream) {
              // flush any pending line data
              stream.tty.ops.flush(stream.tty);
            },flush:function (stream) {
              stream.tty.ops.flush(stream.tty);
            },read:function (stream, buffer, offset, length, pos /* ignored */) {
              if (!stream.tty || !stream.tty.ops.get_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
              }
              var bytesRead = 0;
              for (var i = 0; i < length; i++) {
                var result;
                try {
                  result = stream.tty.ops.get_char(stream.tty);
                } catch (e) {
                  throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                if (result === undefined && bytesRead === 0) {
                  throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                }
                if (result === null || result === undefined) break;
                bytesRead++;
                buffer[offset+i] = result;
              }
              if (bytesRead) {
                stream.node.timestamp = Date.now();
              }
              return bytesRead;
            },write:function (stream, buffer, offset, length, pos) {
              if (!stream.tty || !stream.tty.ops.put_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
              }
              for (var i = 0; i < length; i++) {
                try {
                  stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
                } catch (e) {
                  throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
              }
              if (length) {
                stream.node.timestamp = Date.now();
              }
              return i;
            }},default_tty_ops:{get_char:function (tty) {
              if (!tty.input.length) {
                var result = null;
                if (ENVIRONMENT_IS_NODE) {
                  // we will read data by chunks of BUFSIZE
                  var BUFSIZE = 256;
                  var buf = new Buffer(BUFSIZE);
                  var bytesRead = 0;
    
                  var fd = process.stdin.fd;
                  // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                  var usingDevice = false;
                  try {
                    fd = fs.openSync('/dev/stdin', 'r');
                    usingDevice = true;
                  } catch (e) {}
    
                  bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
    
                  if (usingDevice) { fs.closeSync(fd); }
                  if (bytesRead > 0) {
                    result = buf.slice(0, bytesRead).toString('utf-8');
                  } else {
                    result = null;
                  }
    
                } else if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                  // Browser.
                  result = window.prompt('Input: ');  // returns null on cancel
                  if (result !== null) {
                    result += '\n';
                  }
                } else if (typeof readline == 'function') {
                  // Command line.
                  result = readline();
                  if (result !== null) {
                    result += '\n';
                  }
                }
                if (!result) {
                  return null;
                }
                tty.input = intArrayFromString(result, true);
              }
              return tty.input.shift();
            },put_char:function (tty, val) {
              if (val === null || val === 10) {
                Module['print'](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
              } else {
                if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
              }
            },flush:function (tty) {
              if (tty.output && tty.output.length > 0) {
                Module['print'](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
              }
            }},default_tty1_ops:{put_char:function (tty, val) {
              if (val === null || val === 10) {
                Module['printErr'](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
              } else {
                if (val != 0) tty.output.push(val);
              }
            },flush:function (tty) {
              if (tty.output && tty.output.length > 0) {
                Module['printErr'](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
              }
            }}};
    
      var MEMFS={ops_table:null,mount:function (mount) {
            return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
          },createNode:function (parent, name, mode, dev) {
            if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
              // no supported
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            if (!MEMFS.ops_table) {
              MEMFS.ops_table = {
                dir: {
                  node: {
                    getattr: MEMFS.node_ops.getattr,
                    setattr: MEMFS.node_ops.setattr,
                    lookup: MEMFS.node_ops.lookup,
                    mknod: MEMFS.node_ops.mknod,
                    rename: MEMFS.node_ops.rename,
                    unlink: MEMFS.node_ops.unlink,
                    rmdir: MEMFS.node_ops.rmdir,
                    readdir: MEMFS.node_ops.readdir,
                    symlink: MEMFS.node_ops.symlink
                  },
                  stream: {
                    llseek: MEMFS.stream_ops.llseek
                  }
                },
                file: {
                  node: {
                    getattr: MEMFS.node_ops.getattr,
                    setattr: MEMFS.node_ops.setattr
                  },
                  stream: {
                    llseek: MEMFS.stream_ops.llseek,
                    read: MEMFS.stream_ops.read,
                    write: MEMFS.stream_ops.write,
                    allocate: MEMFS.stream_ops.allocate,
                    mmap: MEMFS.stream_ops.mmap,
                    msync: MEMFS.stream_ops.msync
                  }
                },
                link: {
                  node: {
                    getattr: MEMFS.node_ops.getattr,
                    setattr: MEMFS.node_ops.setattr,
                    readlink: MEMFS.node_ops.readlink
                  },
                  stream: {}
                },
                chrdev: {
                  node: {
                    getattr: MEMFS.node_ops.getattr,
                    setattr: MEMFS.node_ops.setattr
                  },
                  stream: FS.chrdev_stream_ops
                }
              };
            }
            var node = FS.createNode(parent, name, mode, dev);
            if (FS.isDir(node.mode)) {
              node.node_ops = MEMFS.ops_table.dir.node;
              node.stream_ops = MEMFS.ops_table.dir.stream;
              node.contents = {};
            } else if (FS.isFile(node.mode)) {
              node.node_ops = MEMFS.ops_table.file.node;
              node.stream_ops = MEMFS.ops_table.file.stream;
              node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
              // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
              // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
              // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
              node.contents = null;
            } else if (FS.isLink(node.mode)) {
              node.node_ops = MEMFS.ops_table.link.node;
              node.stream_ops = MEMFS.ops_table.link.stream;
            } else if (FS.isChrdev(node.mode)) {
              node.node_ops = MEMFS.ops_table.chrdev.node;
              node.stream_ops = MEMFS.ops_table.chrdev.stream;
            }
            node.timestamp = Date.now();
            // add the new node to the parent
            if (parent) {
              parent.contents[name] = node;
            }
            return node;
          },getFileDataAsRegularArray:function (node) {
            if (node.contents && node.contents.subarray) {
              var arr = [];
              for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
              return arr; // Returns a copy of the original data.
            }
            return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
          },getFileDataAsTypedArray:function (node) {
            if (!node.contents) return new Uint8Array;
            if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
            return new Uint8Array(node.contents);
          },expandFileStorage:function (node, newCapacity) {
            // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
            // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
            // increase the size.
            if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
              node.contents = MEMFS.getFileDataAsRegularArray(node);
              node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
            }
    
            if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
              var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
              if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
              // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
              // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
              // avoid overshooting the allocation cap by a very large margin.
              var CAPACITY_DOUBLING_MAX = 1024 * 1024;
              newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
              if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
              var oldContents = node.contents;
              node.contents = new Uint8Array(newCapacity); // Allocate new storage.
              if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
              return;
            }
            // Not using a typed array to back the file storage. Use a standard JS array instead.
            if (!node.contents && newCapacity > 0) node.contents = [];
            while (node.contents.length < newCapacity) node.contents.push(0);
          },resizeFileStorage:function (node, newSize) {
            if (node.usedBytes == newSize) return;
            if (newSize == 0) {
              node.contents = null; // Fully decommit when requesting a resize to zero.
              node.usedBytes = 0;
              return;
            }
            if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
              var oldContents = node.contents;
              node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
              if (oldContents) {
                node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
              }
              node.usedBytes = newSize;
              return;
            }
            // Backing with a JS array.
            if (!node.contents) node.contents = [];
            if (node.contents.length > newSize) node.contents.length = newSize;
            else while (node.contents.length < newSize) node.contents.push(0);
            node.usedBytes = newSize;
          },node_ops:{getattr:function (node) {
              var attr = {};
              // device numbers reuse inode numbers.
              attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
              attr.ino = node.id;
              attr.mode = node.mode;
              attr.nlink = 1;
              attr.uid = 0;
              attr.gid = 0;
              attr.rdev = node.rdev;
              if (FS.isDir(node.mode)) {
                attr.size = 4096;
              } else if (FS.isFile(node.mode)) {
                attr.size = node.usedBytes;
              } else if (FS.isLink(node.mode)) {
                attr.size = node.link.length;
              } else {
                attr.size = 0;
              }
              attr.atime = new Date(node.timestamp);
              attr.mtime = new Date(node.timestamp);
              attr.ctime = new Date(node.timestamp);
              // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
              //       but this is not required by the standard.
              attr.blksize = 4096;
              attr.blocks = Math.ceil(attr.size / attr.blksize);
              return attr;
            },setattr:function (node, attr) {
              if (attr.mode !== undefined) {
                node.mode = attr.mode;
              }
              if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp;
              }
              if (attr.size !== undefined) {
                MEMFS.resizeFileStorage(node, attr.size);
              }
            },lookup:function (parent, name) {
              throw FS.genericErrors[ERRNO_CODES.ENOENT];
            },mknod:function (parent, name, mode, dev) {
              return MEMFS.createNode(parent, name, mode, dev);
            },rename:function (old_node, new_dir, new_name) {
              // if we're overwriting a directory at new_name, make sure it's empty.
              if (FS.isDir(old_node.mode)) {
                var new_node;
                try {
                  new_node = FS.lookupNode(new_dir, new_name);
                } catch (e) {
                }
                if (new_node) {
                  for (var i in new_node.contents) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
                  }
                }
              }
              // do the internal rewiring
              delete old_node.parent.contents[old_node.name];
              old_node.name = new_name;
              new_dir.contents[new_name] = old_node;
              old_node.parent = new_dir;
            },unlink:function (parent, name) {
              delete parent.contents[name];
            },rmdir:function (parent, name) {
              var node = FS.lookupNode(parent, name);
              for (var i in node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
              delete parent.contents[name];
            },readdir:function (node) {
              var entries = ['.', '..']
              for (var key in node.contents) {
                if (!node.contents.hasOwnProperty(key)) {
                  continue;
                }
                entries.push(key);
              }
              return entries;
            },symlink:function (parent, newname, oldpath) {
              var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
              node.link = oldpath;
              return node;
            },readlink:function (node) {
              if (!FS.isLink(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              return node.link;
            }},stream_ops:{read:function (stream, buffer, offset, length, position) {
              var contents = stream.node.contents;
              if (position >= stream.node.usedBytes) return 0;
              var size = Math.min(stream.node.usedBytes - position, length);
              assert(size >= 0);
              if (size > 8 && contents.subarray) { // non-trivial, and typed array
                buffer.set(contents.subarray(position, position + size), offset);
              } else {
                for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
              }
              return size;
            },write:function (stream, buffer, offset, length, position, canOwn) {
              if (!length) return 0;
              var node = stream.node;
              node.timestamp = Date.now();
    
              if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
                if (canOwn) { // Can we just reuse the buffer we are given?
                  assert(position === 0, 'canOwn must imply no weird position inside the file');
                  node.contents = buffer.subarray(offset, offset + length);
                  node.usedBytes = length;
                  return length;
                } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
                  node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
                  node.usedBytes = length;
                  return length;
                } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
                  node.contents.set(buffer.subarray(offset, offset + length), position);
                  return length;
                }
              }
    
              // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
              MEMFS.expandFileStorage(node, position+length);
              if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
              else {
                for (var i = 0; i < length; i++) {
                 node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
                }
              }
              node.usedBytes = Math.max(node.usedBytes, position+length);
              return length;
            },llseek:function (stream, offset, whence) {
              var position = offset;
              if (whence === 1) {  // SEEK_CUR.
                position += stream.position;
              } else if (whence === 2) {  // SEEK_END.
                if (FS.isFile(stream.node.mode)) {
                  position += stream.node.usedBytes;
                }
              }
              if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              return position;
            },allocate:function (stream, offset, length) {
              MEMFS.expandFileStorage(stream.node, offset + length);
              stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
            },mmap:function (stream, buffer, offset, length, position, prot, flags) {
              if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
              }
              var ptr;
              var allocated;
              var contents = stream.node.contents;
              // Only make a new copy when MAP_PRIVATE is specified.
              if ( !(flags & 2) &&
                    (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
                // We can't emulate MAP_SHARED when the file is not backed by the buffer
                // we're mapping to (e.g. the HEAP buffer).
                allocated = false;
                ptr = contents.byteOffset;
              } else {
                // Try to avoid unnecessary slices.
                if (position > 0 || position + length < stream.node.usedBytes) {
                  if (contents.subarray) {
                    contents = contents.subarray(position, position + length);
                  } else {
                    contents = Array.prototype.slice.call(contents, position, position + length);
                  }
                }
                allocated = true;
                ptr = _malloc(length);
                if (!ptr) {
                  throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
                }
                buffer.set(contents, ptr);
              }
              return { ptr: ptr, allocated: allocated };
            },msync:function (stream, buffer, offset, length, mmapFlags) {
              if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
              }
              if (mmapFlags & 2) {
                // MAP_PRIVATE calls need not to be synced back to underlying fs
                return 0;
              }
    
              var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
              // should we check if bytesWritten and length are the same?
              return 0;
            }}};
    
      var IDBFS={dbs:{},indexedDB:function () {
            if (typeof indexedDB !== 'undefined') return indexedDB;
            var ret = null;
            if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
            assert(ret, 'IDBFS used, but indexedDB not supported');
            return ret;
          },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
            // reuse all of the core MEMFS functionality
            return MEMFS.mount.apply(null, arguments);
          },syncfs:function (mount, populate, callback) {
            IDBFS.getLocalSet(mount, function(err, local) {
              if (err) return callback(err);
    
              IDBFS.getRemoteSet(mount, function(err, remote) {
                if (err) return callback(err);
    
                var src = populate ? remote : local;
                var dst = populate ? local : remote;
    
                IDBFS.reconcile(src, dst, callback);
              });
            });
          },getDB:function (name, callback) {
            // check the cache first
            var db = IDBFS.dbs[name];
            if (db) {
              return callback(null, db);
            }
    
            var req;
            try {
              req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
            } catch (e) {
              return callback(e);
            }
            req.onupgradeneeded = function(e) {
              var db = e.target.result;
              var transaction = e.target.transaction;
    
              var fileStore;
    
              if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
                fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
              } else {
                fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
              }
    
              if (!fileStore.indexNames.contains('timestamp')) {
                fileStore.createIndex('timestamp', 'timestamp', { unique: false });
              }
            };
            req.onsuccess = function() {
              db = req.result;
    
              // add to the cache
              IDBFS.dbs[name] = db;
              callback(null, db);
            };
            req.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
          },getLocalSet:function (mount, callback) {
            var entries = {};
    
            function isRealDir(p) {
              return p !== '.' && p !== '..';
            };
            function toAbsolute(root) {
              return function(p) {
                return PATH.join2(root, p);
              }
            };
    
            var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
    
            while (check.length) {
              var path = check.pop();
              var stat;
    
              try {
                stat = FS.stat(path);
              } catch (e) {
                return callback(e);
              }
    
              if (FS.isDir(stat.mode)) {
                check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
              }
    
              entries[path] = { timestamp: stat.mtime };
            }
    
            return callback(null, { type: 'local', entries: entries });
          },getRemoteSet:function (mount, callback) {
            var entries = {};
    
            IDBFS.getDB(mount.mountpoint, function(err, db) {
              if (err) return callback(err);
    
              var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
              transaction.onerror = function(e) {
                callback(this.error);
                e.preventDefault();
              };
    
              var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
              var index = store.index('timestamp');
    
              index.openKeyCursor().onsuccess = function(event) {
                var cursor = event.target.result;
    
                if (!cursor) {
                  return callback(null, { type: 'remote', db: db, entries: entries });
                }
    
                entries[cursor.primaryKey] = { timestamp: cursor.key };
    
                cursor.continue();
              };
            });
          },loadLocalEntry:function (path, callback) {
            var stat, node;
    
            try {
              var lookup = FS.lookupPath(path);
              node = lookup.node;
              stat = FS.stat(path);
            } catch (e) {
              return callback(e);
            }
    
            if (FS.isDir(stat.mode)) {
              return callback(null, { timestamp: stat.mtime, mode: stat.mode });
            } else if (FS.isFile(stat.mode)) {
              // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
              // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
              node.contents = MEMFS.getFileDataAsTypedArray(node);
              return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
            } else {
              return callback(new Error('node type not supported'));
            }
          },storeLocalEntry:function (path, entry, callback) {
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
              } else {
                return callback(new Error('node type not supported'));
              }
    
              FS.chmod(path, entry.mode);
              FS.utime(path, entry.timestamp, entry.timestamp);
            } catch (e) {
              return callback(e);
            }
    
            callback(null);
          },removeLocalEntry:function (path, callback) {
            try {
              var lookup = FS.lookupPath(path);
              var stat = FS.stat(path);
    
              if (FS.isDir(stat.mode)) {
                FS.rmdir(path);
              } else if (FS.isFile(stat.mode)) {
                FS.unlink(path);
              }
            } catch (e) {
              return callback(e);
            }
    
            callback(null);
          },loadRemoteEntry:function (store, path, callback) {
            var req = store.get(path);
            req.onsuccess = function(event) { callback(null, event.target.result); };
            req.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
          },storeRemoteEntry:function (store, path, entry, callback) {
            var req = store.put(entry, path);
            req.onsuccess = function() { callback(null); };
            req.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
          },removeRemoteEntry:function (store, path, callback) {
            var req = store.delete(path);
            req.onsuccess = function() { callback(null); };
            req.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
          },reconcile:function (src, dst, callback) {
            var total = 0;
    
            var create = [];
            Object.keys(src.entries).forEach(function (key) {
              var e = src.entries[key];
              var e2 = dst.entries[key];
              if (!e2 || e.timestamp > e2.timestamp) {
                create.push(key);
                total++;
              }
            });
    
            var remove = [];
            Object.keys(dst.entries).forEach(function (key) {
              var e = dst.entries[key];
              var e2 = src.entries[key];
              if (!e2) {
                remove.push(key);
                total++;
              }
            });
    
            if (!total) {
              return callback(null);
            }
    
            var errored = false;
            var completed = 0;
            var db = src.type === 'remote' ? src.db : dst.db;
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
    
            function done(err) {
              if (err) {
                if (!done.errored) {
                  done.errored = true;
                  return callback(err);
                }
                return;
              }
              if (++completed >= total) {
                return callback(null);
              }
            };
    
            transaction.onerror = function(e) {
              done(this.error);
              e.preventDefault();
            };
    
            // sort paths in ascending order so directory entries are created
            // before the files inside them
            create.sort().forEach(function (path) {
              if (dst.type === 'local') {
                IDBFS.loadRemoteEntry(store, path, function (err, entry) {
                  if (err) return done(err);
                  IDBFS.storeLocalEntry(path, entry, done);
                });
              } else {
                IDBFS.loadLocalEntry(path, function (err, entry) {
                  if (err) return done(err);
                  IDBFS.storeRemoteEntry(store, path, entry, done);
                });
              }
            });
    
            // sort paths in descending order so files are deleted before their
            // parent directories
            remove.sort().reverse().forEach(function(path) {
              if (dst.type === 'local') {
                IDBFS.removeLocalEntry(path, done);
              } else {
                IDBFS.removeRemoteEntry(store, path, done);
              }
            });
          }};
    
      var NODEFS={isWindows:false,staticInit:function () {
            NODEFS.isWindows = !!process.platform.match(/^win/);
          },mount:function (mount) {
            assert(ENVIRONMENT_IS_NODE);
            return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
          },createNode:function (parent, name, mode, dev) {
            if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            var node = FS.createNode(parent, name, mode);
            node.node_ops = NODEFS.node_ops;
            node.stream_ops = NODEFS.stream_ops;
            return node;
          },getMode:function (path) {
            var stat;
            try {
              stat = fs.lstatSync(path);
              if (NODEFS.isWindows) {
                // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
                // propagate write bits to execute bits.
                stat.mode = stat.mode | ((stat.mode & 146) >> 1);
              }
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            return stat.mode;
          },realPath:function (node) {
            var parts = [];
            while (node.parent !== node) {
              parts.push(node.name);
              node = node.parent;
            }
            parts.push(node.mount.opts.root);
            parts.reverse();
            return PATH.join.apply(null, parts);
          },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
            flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
            flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
            if (flags in NODEFS.flagsToPermissionStringMap) {
              return NODEFS.flagsToPermissionStringMap[flags];
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
          },node_ops:{getattr:function (node) {
              var path = NODEFS.realPath(node);
              var stat;
              try {
                stat = fs.lstatSync(path);
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
              // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
              // See http://support.microsoft.com/kb/140365
              if (NODEFS.isWindows && !stat.blksize) {
                stat.blksize = 4096;
              }
              if (NODEFS.isWindows && !stat.blocks) {
                stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
              }
              return {
                dev: stat.dev,
                ino: stat.ino,
                mode: stat.mode,
                nlink: stat.nlink,
                uid: stat.uid,
                gid: stat.gid,
                rdev: stat.rdev,
                size: stat.size,
                atime: stat.atime,
                mtime: stat.mtime,
                ctime: stat.ctime,
                blksize: stat.blksize,
                blocks: stat.blocks
              };
            },setattr:function (node, attr) {
              var path = NODEFS.realPath(node);
              try {
                if (attr.mode !== undefined) {
                  fs.chmodSync(path, attr.mode);
                  // update the common node structure mode as well
                  node.mode = attr.mode;
                }
                if (attr.timestamp !== undefined) {
                  var date = new Date(attr.timestamp);
                  fs.utimesSync(path, date, date);
                }
                if (attr.size !== undefined) {
                  fs.truncateSync(path, attr.size);
                }
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            },lookup:function (parent, name) {
              var path = PATH.join2(NODEFS.realPath(parent), name);
              var mode = NODEFS.getMode(path);
              return NODEFS.createNode(parent, name, mode);
            },mknod:function (parent, name, mode, dev) {
              var node = NODEFS.createNode(parent, name, mode, dev);
              // create the backing node for this in the fs root as well
              var path = NODEFS.realPath(node);
              try {
                if (FS.isDir(node.mode)) {
                  fs.mkdirSync(path, node.mode);
                } else {
                  fs.writeFileSync(path, '', { mode: node.mode });
                }
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
              return node;
            },rename:function (oldNode, newDir, newName) {
              var oldPath = NODEFS.realPath(oldNode);
              var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
              try {
                fs.renameSync(oldPath, newPath);
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            },unlink:function (parent, name) {
              var path = PATH.join2(NODEFS.realPath(parent), name);
              try {
                fs.unlinkSync(path);
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            },rmdir:function (parent, name) {
              var path = PATH.join2(NODEFS.realPath(parent), name);
              try {
                fs.rmdirSync(path);
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            },readdir:function (node) {
              var path = NODEFS.realPath(node);
              try {
                return fs.readdirSync(path);
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            },symlink:function (parent, newName, oldPath) {
              var newPath = PATH.join2(NODEFS.realPath(parent), newName);
              try {
                fs.symlinkSync(oldPath, newPath);
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            },readlink:function (node) {
              var path = NODEFS.realPath(node);
              try {
                path = fs.readlinkSync(path);
                path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
                return path;
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }},stream_ops:{open:function (stream) {
              var path = NODEFS.realPath(stream.node);
              try {
                if (FS.isFile(stream.node.mode)) {
                  stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
                }
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            },close:function (stream) {
              try {
                if (FS.isFile(stream.node.mode) && stream.nfd) {
                  fs.closeSync(stream.nfd);
                }
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            },read:function (stream, buffer, offset, length, position) {
              if (length === 0) return 0; // node errors on 0 length reads
              // FIXME this is terrible.
              var nbuffer = new Buffer(length);
              var res;
              try {
                res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
              if (res > 0) {
                for (var i = 0; i < res; i++) {
                  buffer[offset + i] = nbuffer[i];
                }
              }
              return res;
            },write:function (stream, buffer, offset, length, position) {
              // FIXME this is terrible.
              var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
              var res;
              try {
                res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
              return res;
            },llseek:function (stream, offset, whence) {
              var position = offset;
              if (whence === 1) {  // SEEK_CUR.
                position += stream.position;
              } else if (whence === 2) {  // SEEK_END.
                if (FS.isFile(stream.node.mode)) {
                  try {
                    var stat = fs.fstatSync(stream.nfd);
                    position += stat.size;
                  } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                  }
                }
              }
    
              if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
    
              return position;
            }}};
    
      var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
            assert(ENVIRONMENT_IS_WORKER);
            if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
            var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
            var createdParents = {};
            function ensureParent(path) {
              // return the parent node, creating subdirs as necessary
              var parts = path.split('/');
              var parent = root;
              for (var i = 0; i < parts.length-1; i++) {
                var curr = parts.slice(0, i+1).join('/');
                if (!createdParents[curr]) {
                  createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
                }
                parent = createdParents[curr];
              }
              return parent;
            }
            function base(path) {
              var parts = path.split('/');
              return parts[parts.length-1];
            }
            // We also accept FileList here, by using Array.prototype
            Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
              WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
            });
            (mount.opts["blobs"] || []).forEach(function(obj) {
              WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
            });
            (mount.opts["packages"] || []).forEach(function(pack) {
              pack['metadata'].files.forEach(function(file) {
                var name = file.filename.substr(1); // remove initial slash
                WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
              });
            });
            return root;
          },createNode:function (parent, name, mode, dev, contents, mtime) {
            var node = FS.createNode(parent, name, mode);
            node.mode = mode;
            node.node_ops = WORKERFS.node_ops;
            node.stream_ops = WORKERFS.stream_ops;
            node.timestamp = (mtime || new Date).getTime();
            assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
            if (mode === WORKERFS.FILE_MODE) {
              node.size = contents.size;
              node.contents = contents;
            } else {
              node.size = 4096;
              node.contents = {};
            }
            if (parent) {
              parent.contents[name] = node;
            }
            return node;
          },node_ops:{getattr:function (node) {
              return {
                dev: 1,
                ino: undefined,
                mode: node.mode,
                nlink: 1,
                uid: 0,
                gid: 0,
                rdev: undefined,
                size: node.size,
                atime: new Date(node.timestamp),
                mtime: new Date(node.timestamp),
                ctime: new Date(node.timestamp),
                blksize: 4096,
                blocks: Math.ceil(node.size / 4096),
              };
            },setattr:function (node, attr) {
              if (attr.mode !== undefined) {
                node.mode = attr.mode;
              }
              if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp;
              }
            },lookup:function (parent, name) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
            },mknod:function (parent, name, mode, dev) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            },rename:function (oldNode, newDir, newName) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            },unlink:function (parent, name) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            },rmdir:function (parent, name) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            },readdir:function (node) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            },symlink:function (parent, newName, oldPath) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            },readlink:function (node) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }},stream_ops:{read:function (stream, buffer, offset, length, position) {
              if (position >= stream.node.size) return 0;
              var chunk = stream.node.contents.slice(position, position + length);
              var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
              buffer.set(new Uint8Array(ab), offset);
              return chunk.size;
            },write:function (stream, buffer, offset, length, position) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            },llseek:function (stream, offset, whence) {
              var position = offset;
              if (whence === 1) {  // SEEK_CUR.
                position += stream.position;
              } else if (whence === 2) {  // SEEK_END.
                if (FS.isFile(stream.node.mode)) {
                  position += stream.node.size;
                }
              }
              if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              return position;
            }}};
    
      var _stdin=STATICTOP; STATICTOP += 16;;
    
      var _stdout=STATICTOP; STATICTOP += 16;;
    
      var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
            if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
            return ___setErrNo(e.errno);
          },lookupPath:function (path, opts) {
            path = PATH.resolve(FS.cwd(), path);
            opts = opts || {};
    
            if (!path) return { path: '', node: null };
    
            var defaults = {
              follow_mount: true,
              recurse_count: 0
            };
            for (var key in defaults) {
              if (opts[key] === undefined) {
                opts[key] = defaults[key];
              }
            }
    
            if (opts.recurse_count > 8) {  // max recursive lookup of 8
              throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
            }
    
            // split the path
            var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
              return !!p;
            }), false);
    
            // start at the root
            var current = FS.root;
            var current_path = '/';
    
            for (var i = 0; i < parts.length; i++) {
              var islast = (i === parts.length-1);
              if (islast && opts.parent) {
                // stop resolving
                break;
              }
    
              current = FS.lookupNode(current, parts[i]);
              current_path = PATH.join2(current_path, parts[i]);
    
              // jump to the mount's root node if this is a mountpoint
              if (FS.isMountpoint(current)) {
                if (!islast || (islast && opts.follow_mount)) {
                  current = current.mounted.root;
                }
              }
    
              // by default, lookupPath will not follow a symlink if it is the final path component.
              // setting opts.follow = true will override this behavior.
              if (!islast || opts.follow) {
                var count = 0;
                while (FS.isLink(current.mode)) {
                  var link = FS.readlink(current_path);
                  current_path = PATH.resolve(PATH.dirname(current_path), link);
    
                  var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
                  current = lookup.node;
    
                  if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                    throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
                  }
                }
              }
            }
    
            return { path: current_path, node: current };
          },getPath:function (node) {
            var path;
            while (true) {
              if (FS.isRoot(node)) {
                var mount = node.mount.mountpoint;
                if (!path) return mount;
                return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
              }
              path = path ? node.name + '/' + path : node.name;
              node = node.parent;
            }
          },hashName:function (parentid, name) {
            var hash = 0;
    
    
            for (var i = 0; i < name.length; i++) {
              hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
            }
            return ((parentid + hash) >>> 0) % FS.nameTable.length;
          },hashAddNode:function (node) {
            var hash = FS.hashName(node.parent.id, node.name);
            node.name_next = FS.nameTable[hash];
            FS.nameTable[hash] = node;
          },hashRemoveNode:function (node) {
            var hash = FS.hashName(node.parent.id, node.name);
            if (FS.nameTable[hash] === node) {
              FS.nameTable[hash] = node.name_next;
            } else {
              var current = FS.nameTable[hash];
              while (current) {
                if (current.name_next === node) {
                  current.name_next = node.name_next;
                  break;
                }
                current = current.name_next;
              }
            }
          },lookupNode:function (parent, name) {
            var err = FS.mayLookup(parent);
            if (err) {
              throw new FS.ErrnoError(err, parent);
            }
            var hash = FS.hashName(parent.id, name);
            for (var node = FS.nameTable[hash]; node; node = node.name_next) {
              var nodeName = node.name;
              if (node.parent.id === parent.id && nodeName === name) {
                return node;
              }
            }
            // if we failed to find it in the cache, call into the VFS
            return FS.lookup(parent, name);
          },createNode:function (parent, name, mode, rdev) {
            if (!FS.FSNode) {
              FS.FSNode = function(parent, name, mode, rdev) {
                if (!parent) {
                  parent = this;  // root node sets parent to itself
                }
                this.parent = parent;
                this.mount = parent.mount;
                this.mounted = null;
                this.id = FS.nextInode++;
                this.name = name;
                this.mode = mode;
                this.node_ops = {};
                this.stream_ops = {};
                this.rdev = rdev;
              };
    
              FS.FSNode.prototype = {};
    
              // compatibility
              var readMode = 292 | 73;
              var writeMode = 146;
    
              // NOTE we must use Object.defineProperties instead of individual calls to
              // Object.defineProperty in order to make closure compiler happy
              Object.defineProperties(FS.FSNode.prototype, {
                read: {
                  get: function() { return (this.mode & readMode) === readMode; },
                  set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
                },
                write: {
                  get: function() { return (this.mode & writeMode) === writeMode; },
                  set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
                },
                isFolder: {
                  get: function() { return FS.isDir(this.mode); }
                },
                isDevice: {
                  get: function() { return FS.isChrdev(this.mode); }
                }
              });
            }
    
            var node = new FS.FSNode(parent, name, mode, rdev);
    
            FS.hashAddNode(node);
    
            return node;
          },destroyNode:function (node) {
            FS.hashRemoveNode(node);
          },isRoot:function (node) {
            return node === node.parent;
          },isMountpoint:function (node) {
            return !!node.mounted;
          },isFile:function (mode) {
            return (mode & 61440) === 32768;
          },isDir:function (mode) {
            return (mode & 61440) === 16384;
          },isLink:function (mode) {
            return (mode & 61440) === 40960;
          },isChrdev:function (mode) {
            return (mode & 61440) === 8192;
          },isBlkdev:function (mode) {
            return (mode & 61440) === 24576;
          },isFIFO:function (mode) {
            return (mode & 61440) === 4096;
          },isSocket:function (mode) {
            return (mode & 49152) === 49152;
          },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
            var flags = FS.flagModes[str];
            if (typeof flags === 'undefined') {
              throw new Error('Unknown file open mode: ' + str);
            }
            return flags;
          },flagsToPermissionString:function (flag) {
            var perms = ['r', 'w', 'rw'][flag & 3];
            if ((flag & 512)) {
              perms += 'w';
            }
            return perms;
          },nodePermissions:function (node, perms) {
            if (FS.ignorePermissions) {
              return 0;
            }
            // return 0 if any user, group or owner bits are set.
            if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
              return ERRNO_CODES.EACCES;
            } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
              return ERRNO_CODES.EACCES;
            } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
              return ERRNO_CODES.EACCES;
            }
            return 0;
          },mayLookup:function (dir) {
            var err = FS.nodePermissions(dir, 'x');
            if (err) return err;
            if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
            return 0;
          },mayCreate:function (dir, name) {
            try {
              var node = FS.lookupNode(dir, name);
              return ERRNO_CODES.EEXIST;
            } catch (e) {
            }
            return FS.nodePermissions(dir, 'wx');
          },mayDelete:function (dir, name, isdir) {
            var node;
            try {
              node = FS.lookupNode(dir, name);
            } catch (e) {
              return e.errno;
            }
            var err = FS.nodePermissions(dir, 'wx');
            if (err) {
              return err;
            }
            if (isdir) {
              if (!FS.isDir(node.mode)) {
                return ERRNO_CODES.ENOTDIR;
              }
              if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                return ERRNO_CODES.EBUSY;
              }
            } else {
              if (FS.isDir(node.mode)) {
                return ERRNO_CODES.EISDIR;
              }
            }
            return 0;
          },mayOpen:function (node, flags) {
            if (!node) {
              return ERRNO_CODES.ENOENT;
            }
            if (FS.isLink(node.mode)) {
              return ERRNO_CODES.ELOOP;
            } else if (FS.isDir(node.mode)) {
              if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
                  (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
                return ERRNO_CODES.EISDIR;
              }
            }
            return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
          },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
            fd_start = fd_start || 0;
            fd_end = fd_end || FS.MAX_OPEN_FDS;
            for (var fd = fd_start; fd <= fd_end; fd++) {
              if (!FS.streams[fd]) {
                return fd;
              }
            }
            throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
          },getStream:function (fd) {
            return FS.streams[fd];
          },createStream:function (stream, fd_start, fd_end) {
            if (!FS.FSStream) {
              FS.FSStream = function(){};
              FS.FSStream.prototype = {};
              // compatibility
              Object.defineProperties(FS.FSStream.prototype, {
                object: {
                  get: function() { return this.node; },
                  set: function(val) { this.node = val; }
                },
                isRead: {
                  get: function() { return (this.flags & 2097155) !== 1; }
                },
                isWrite: {
                  get: function() { return (this.flags & 2097155) !== 0; }
                },
                isAppend: {
                  get: function() { return (this.flags & 1024); }
                }
              });
            }
            // clone it, so we can return an instance of FSStream
            var newStream = new FS.FSStream();
            for (var p in stream) {
              newStream[p] = stream[p];
            }
            stream = newStream;
            var fd = FS.nextfd(fd_start, fd_end);
            stream.fd = fd;
            FS.streams[fd] = stream;
            return stream;
          },closeStream:function (fd) {
            FS.streams[fd] = null;
          },chrdev_stream_ops:{open:function (stream) {
              var device = FS.getDevice(stream.node.rdev);
              // override node's stream ops with the device's
              stream.stream_ops = device.stream_ops;
              // forward the open call
              if (stream.stream_ops.open) {
                stream.stream_ops.open(stream);
              }
            },llseek:function () {
              throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
            }},major:function (dev) {
            return ((dev) >> 8);
          },minor:function (dev) {
            return ((dev) & 0xff);
          },makedev:function (ma, mi) {
            return ((ma) << 8 | (mi));
          },registerDevice:function (dev, ops) {
            FS.devices[dev] = { stream_ops: ops };
          },getDevice:function (dev) {
            return FS.devices[dev];
          },getMounts:function (mount) {
            var mounts = [];
            var check = [mount];
    
            while (check.length) {
              var m = check.pop();
    
              mounts.push(m);
    
              check.push.apply(check, m.mounts);
            }
    
            return mounts;
          },syncfs:function (populate, callback) {
            if (typeof(populate) === 'function') {
              callback = populate;
              populate = false;
            }
    
            FS.syncFSRequests++;
    
            if (FS.syncFSRequests > 1) {
              console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
            }
    
            var mounts = FS.getMounts(FS.root.mount);
            var completed = 0;
    
            function doCallback(err) {
              assert(FS.syncFSRequests > 0);
              FS.syncFSRequests--;
              return callback(err);
            }
    
            function done(err) {
              if (err) {
                if (!done.errored) {
                  done.errored = true;
                  return doCallback(err);
                }
                return;
              }
              if (++completed >= mounts.length) {
                doCallback(null);
              }
            };
    
            // sync all mounts
            mounts.forEach(function (mount) {
              if (!mount.type.syncfs) {
                return done(null);
              }
              mount.type.syncfs(mount, populate, done);
            });
          },mount:function (type, opts, mountpoint) {
            var root = mountpoint === '/';
            var pseudo = !mountpoint;
            var node;
    
            if (root && FS.root) {
              throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            } else if (!root && !pseudo) {
              var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
    
              mountpoint = lookup.path;  // use the absolute path
              node = lookup.node;
    
              if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
              }
    
              if (!FS.isDir(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
              }
            }
    
            var mount = {
              type: type,
              opts: opts,
              mountpoint: mountpoint,
              mounts: []
            };
    
            // create a root node for the fs
            var mountRoot = type.mount(mount);
            mountRoot.mount = mount;
            mount.root = mountRoot;
    
            if (root) {
              FS.root = mountRoot;
            } else if (node) {
              // set as a mountpoint
              node.mounted = mount;
    
              // add the new mount to the current mount's children
              if (node.mount) {
                node.mount.mounts.push(mount);
              }
            }
    
            return mountRoot;
          },unmount:function (mountpoint) {
            var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
    
            if (!FS.isMountpoint(lookup.node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
    
            // destroy the nodes for this mount, and all its child mounts
            var node = lookup.node;
            var mount = node.mounted;
            var mounts = FS.getMounts(mount);
    
            Object.keys(FS.nameTable).forEach(function (hash) {
              var current = FS.nameTable[hash];
    
              while (current) {
                var next = current.name_next;
    
                if (mounts.indexOf(current.mount) !== -1) {
                  FS.destroyNode(current);
                }
    
                current = next;
              }
            });
    
            // no longer a mountpoint
            node.mounted = null;
    
            // remove this mount from the child mounts
            var idx = node.mount.mounts.indexOf(mount);
            assert(idx !== -1);
            node.mount.mounts.splice(idx, 1);
          },lookup:function (parent, name) {
            return parent.node_ops.lookup(parent, name);
          },mknod:function (path, mode, dev) {
            var lookup = FS.lookupPath(path, { parent: true });
            var parent = lookup.node;
            var name = PATH.basename(path);
            if (!name || name === '.' || name === '..') {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            var err = FS.mayCreate(parent, name);
            if (err) {
              throw new FS.ErrnoError(err);
            }
            if (!parent.node_ops.mknod) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            return parent.node_ops.mknod(parent, name, mode, dev);
          },create:function (path, mode) {
            mode = mode !== undefined ? mode : 438 /* 0666 */;
            mode &= 4095;
            mode |= 32768;
            return FS.mknod(path, mode, 0);
          },mkdir:function (path, mode) {
            mode = mode !== undefined ? mode : 511 /* 0777 */;
            mode &= 511 | 512;
            mode |= 16384;
            return FS.mknod(path, mode, 0);
          },mkdev:function (path, mode, dev) {
            if (typeof(dev) === 'undefined') {
              dev = mode;
              mode = 438 /* 0666 */;
            }
            mode |= 8192;
            return FS.mknod(path, mode, dev);
          },symlink:function (oldpath, newpath) {
            if (!PATH.resolve(oldpath)) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
            }
            var lookup = FS.lookupPath(newpath, { parent: true });
            var parent = lookup.node;
            if (!parent) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
            }
            var newname = PATH.basename(newpath);
            var err = FS.mayCreate(parent, newname);
            if (err) {
              throw new FS.ErrnoError(err);
            }
            if (!parent.node_ops.symlink) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            return parent.node_ops.symlink(parent, newname, oldpath);
          },rename:function (old_path, new_path) {
            var old_dirname = PATH.dirname(old_path);
            var new_dirname = PATH.dirname(new_path);
            var old_name = PATH.basename(old_path);
            var new_name = PATH.basename(new_path);
            // parents must exist
            var lookup, old_dir, new_dir;
            try {
              lookup = FS.lookupPath(old_path, { parent: true });
              old_dir = lookup.node;
              lookup = FS.lookupPath(new_path, { parent: true });
              new_dir = lookup.node;
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            }
            if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
            // need to be part of the same mount
            if (old_dir.mount !== new_dir.mount) {
              throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
            }
            // source must exist
            var old_node = FS.lookupNode(old_dir, old_name);
            // old path should not be an ancestor of the new path
            var relative = PATH.relative(old_path, new_dirname);
            if (relative.charAt(0) !== '.') {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            // new path should not be an ancestor of the old path
            relative = PATH.relative(new_path, old_dirname);
            if (relative.charAt(0) !== '.') {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
            }
            // see if the new path already exists
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
              // not fatal
            }
            // early out if nothing needs to change
            if (old_node === new_node) {
              return;
            }
            // we'll need to delete the old entry
            var isdir = FS.isDir(old_node.mode);
            var err = FS.mayDelete(old_dir, old_name, isdir);
            if (err) {
              throw new FS.ErrnoError(err);
            }
            // need delete permissions if we'll be overwriting.
            // need create permissions if new doesn't already exist.
            err = new_node ?
              FS.mayDelete(new_dir, new_name, isdir) :
              FS.mayCreate(new_dir, new_name);
            if (err) {
              throw new FS.ErrnoError(err);
            }
            if (!old_dir.node_ops.rename) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
              throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            }
            // if we are going to change the parent, check write permissions
            if (new_dir !== old_dir) {
              err = FS.nodePermissions(old_dir, 'w');
              if (err) {
                throw new FS.ErrnoError(err);
              }
            }
            try {
              if (FS.trackingDelegate['willMovePath']) {
                FS.trackingDelegate['willMovePath'](old_path, new_path);
              }
            } catch(e) {
              console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
            }
            // remove the node from the lookup hash
            FS.hashRemoveNode(old_node);
            // do the underlying fs rename
            try {
              old_dir.node_ops.rename(old_node, new_dir, new_name);
            } catch (e) {
              throw e;
            } finally {
              // add the node back to the hash (in case node_ops.rename
              // changed its name)
              FS.hashAddNode(old_node);
            }
            try {
              if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
            } catch(e) {
              console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
            }
          },rmdir:function (path) {
            var lookup = FS.lookupPath(path, { parent: true });
            var parent = lookup.node;
            var name = PATH.basename(path);
            var node = FS.lookupNode(parent, name);
            var err = FS.mayDelete(parent, name, true);
            if (err) {
              throw new FS.ErrnoError(err);
            }
            if (!parent.node_ops.rmdir) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            if (FS.isMountpoint(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            }
            try {
              if (FS.trackingDelegate['willDeletePath']) {
                FS.trackingDelegate['willDeletePath'](path);
              }
            } catch(e) {
              console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
            }
            parent.node_ops.rmdir(parent, name);
            FS.destroyNode(node);
            try {
              if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
            } catch(e) {
              console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
            }
          },readdir:function (path) {
            var lookup = FS.lookupPath(path, { follow: true });
            var node = lookup.node;
            if (!node.node_ops.readdir) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
            }
            return node.node_ops.readdir(node);
          },unlink:function (path) {
            var lookup = FS.lookupPath(path, { parent: true });
            var parent = lookup.node;
            var name = PATH.basename(path);
            var node = FS.lookupNode(parent, name);
            var err = FS.mayDelete(parent, name, false);
            if (err) {
              // POSIX says unlink should set EPERM, not EISDIR
              if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
              throw new FS.ErrnoError(err);
            }
            if (!parent.node_ops.unlink) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            if (FS.isMountpoint(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            }
            try {
              if (FS.trackingDelegate['willDeletePath']) {
                FS.trackingDelegate['willDeletePath'](path);
              }
            } catch(e) {
              console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
            }
            parent.node_ops.unlink(parent, name);
            FS.destroyNode(node);
            try {
              if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
            } catch(e) {
              console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
            }
          },readlink:function (path) {
            var lookup = FS.lookupPath(path);
            var link = lookup.node;
            if (!link) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
            }
            if (!link.node_ops.readlink) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
          },stat:function (path, dontFollow) {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            var node = lookup.node;
            if (!node) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
            }
            if (!node.node_ops.getattr) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            return node.node_ops.getattr(node);
          },lstat:function (path) {
            return FS.stat(path, true);
          },chmod:function (path, mode, dontFollow) {
            var node;
            if (typeof path === 'string') {
              var lookup = FS.lookupPath(path, { follow: !dontFollow });
              node = lookup.node;
            } else {
              node = path;
            }
            if (!node.node_ops.setattr) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            node.node_ops.setattr(node, {
              mode: (mode & 4095) | (node.mode & ~4095),
              timestamp: Date.now()
            });
          },lchmod:function (path, mode) {
            FS.chmod(path, mode, true);
          },fchmod:function (fd, mode) {
            var stream = FS.getStream(fd);
            if (!stream) {
              throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            }
            FS.chmod(stream.node, mode);
          },chown:function (path, uid, gid, dontFollow) {
            var node;
            if (typeof path === 'string') {
              var lookup = FS.lookupPath(path, { follow: !dontFollow });
              node = lookup.node;
            } else {
              node = path;
            }
            if (!node.node_ops.setattr) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            node.node_ops.setattr(node, {
              timestamp: Date.now()
              // we ignore the uid / gid for now
            });
          },lchown:function (path, uid, gid) {
            FS.chown(path, uid, gid, true);
          },fchown:function (fd, uid, gid) {
            var stream = FS.getStream(fd);
            if (!stream) {
              throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            }
            FS.chown(stream.node, uid, gid);
          },truncate:function (path, len) {
            if (len < 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            var node;
            if (typeof path === 'string') {
              var lookup = FS.lookupPath(path, { follow: true });
              node = lookup.node;
            } else {
              node = path;
            }
            if (!node.node_ops.setattr) {
              throw new FS.ErrnoError(ERRNO_CODES.EPERM);
            }
            if (FS.isDir(node.mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
            }
            if (!FS.isFile(node.mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            var err = FS.nodePermissions(node, 'w');
            if (err) {
              throw new FS.ErrnoError(err);
            }
            node.node_ops.setattr(node, {
              size: len,
              timestamp: Date.now()
            });
          },ftruncate:function (fd, len) {
            var stream = FS.getStream(fd);
            if (!stream) {
              throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            }
            if ((stream.flags & 2097155) === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            FS.truncate(stream.node, len);
          },utime:function (path, atime, mtime) {
            var lookup = FS.lookupPath(path, { follow: true });
            var node = lookup.node;
            node.node_ops.setattr(node, {
              timestamp: Math.max(atime, mtime)
            });
          },open:function (path, flags, mode, fd_start, fd_end) {
            if (path === "") {
              throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
            }
            flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
            mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
            if ((flags & 64)) {
              mode = (mode & 4095) | 32768;
            } else {
              mode = 0;
            }
            var node;
            if (typeof path === 'object') {
              node = path;
            } else {
              path = PATH.normalize(path);
              try {
                var lookup = FS.lookupPath(path, {
                  follow: !(flags & 131072)
                });
                node = lookup.node;
              } catch (e) {
                // ignore
              }
            }
            // perhaps we need to create the node
            var created = false;
            if ((flags & 64)) {
              if (node) {
                // if O_CREAT and O_EXCL are set, error out if the node already exists
                if ((flags & 128)) {
                  throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
                }
              } else {
                // node doesn't exist, try to create it
                node = FS.mknod(path, mode, 0);
                created = true;
              }
            }
            if (!node) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
            }
            // can't truncate a device
            if (FS.isChrdev(node.mode)) {
              flags &= ~512;
            }
            // if asked only for a directory, then this must be one
            if ((flags & 65536) && !FS.isDir(node.mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
            }
            // check permissions, if this is not a file we just created now (it is ok to
            // create and write to a file with read-only permissions; it is read-only
            // for later use)
            if (!created) {
              var err = FS.mayOpen(node, flags);
              if (err) {
                throw new FS.ErrnoError(err);
              }
            }
            // do truncation if necessary
            if ((flags & 512)) {
              FS.truncate(node, 0);
            }
            // we've already handled these, don't pass down to the underlying vfs
            flags &= ~(128 | 512);
    
            // register the stream with the filesystem
            var stream = FS.createStream({
              node: node,
              path: FS.getPath(node),  // we want the absolute path to the node
              flags: flags,
              seekable: true,
              position: 0,
              stream_ops: node.stream_ops,
              // used by the file family libc calls (fopen, fwrite, ferror, etc.)
              ungotten: [],
              error: false
            }, fd_start, fd_end);
            // call the new stream's open function
            if (stream.stream_ops.open) {
              stream.stream_ops.open(stream);
            }
            if (Module['logReadFiles'] && !(flags & 1)) {
              if (!FS.readFiles) FS.readFiles = {};
              if (!(path in FS.readFiles)) {
                FS.readFiles[path] = 1;
                Module['printErr']('read file: ' + path);
              }
            }
            try {
              if (FS.trackingDelegate['onOpenFile']) {
                var trackingFlags = 0;
                if ((flags & 2097155) !== 1) {
                  trackingFlags |= FS.tracking.openFlags.READ;
                }
                if ((flags & 2097155) !== 0) {
                  trackingFlags |= FS.tracking.openFlags.WRITE;
                }
                FS.trackingDelegate['onOpenFile'](path, trackingFlags);
              }
            } catch(e) {
              console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
            }
            return stream;
          },close:function (stream) {
            if (stream.getdents) stream.getdents = null; // free readdir state
            try {
              if (stream.stream_ops.close) {
                stream.stream_ops.close(stream);
              }
            } catch (e) {
              throw e;
            } finally {
              FS.closeStream(stream.fd);
            }
          },llseek:function (stream, offset, whence) {
            if (!stream.seekable || !stream.stream_ops.llseek) {
              throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
            }
            stream.position = stream.stream_ops.llseek(stream, offset, whence);
            stream.ungotten = [];
            return stream.position;
          },read:function (stream, buffer, offset, length, position) {
            if (length < 0 || position < 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            if ((stream.flags & 2097155) === 1) {
              throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            }
            if (FS.isDir(stream.node.mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
            }
            if (!stream.stream_ops.read) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            var seeking = true;
            if (typeof position === 'undefined') {
              position = stream.position;
              seeking = false;
            } else if (!stream.seekable) {
              throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
            }
            var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
            if (!seeking) stream.position += bytesRead;
            return bytesRead;
          },write:function (stream, buffer, offset, length, position, canOwn) {
            if (length < 0 || position < 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            if ((stream.flags & 2097155) === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            }
            if (FS.isDir(stream.node.mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
            }
            if (!stream.stream_ops.write) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            if (stream.flags & 1024) {
              // seek to the end before writing in append mode
              FS.llseek(stream, 0, 2);
            }
            var seeking = true;
            if (typeof position === 'undefined') {
              position = stream.position;
              seeking = false;
            } else if (!stream.seekable) {
              throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
            }
            var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
            if (!seeking) stream.position += bytesWritten;
            try {
              if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
            } catch(e) {
              console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
            }
            return bytesWritten;
          },allocate:function (stream, offset, length) {
            if (offset < 0 || length <= 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            if ((stream.flags & 2097155) === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            }
            if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            if (!stream.stream_ops.allocate) {
              throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
            }
            stream.stream_ops.allocate(stream, offset, length);
          },mmap:function (stream, buffer, offset, length, position, prot, flags) {
            // TODO if PROT is PROT_WRITE, make sure we have write access
            if ((stream.flags & 2097155) === 1) {
              throw new FS.ErrnoError(ERRNO_CODES.EACCES);
            }
            if (!stream.stream_ops.mmap) {
              throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
          },msync:function (stream, buffer, offset, length, mmapFlags) {
            if (!stream || !stream.stream_ops.msync) {
              return 0;
            }
            return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
          },munmap:function (stream) {
            return 0;
          },ioctl:function (stream, cmd, arg) {
            if (!stream.stream_ops.ioctl) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
            }
            return stream.stream_ops.ioctl(stream, cmd, arg);
          },readFile:function (path, opts) {
            opts = opts || {};
            opts.flags = opts.flags || 'r';
            opts.encoding = opts.encoding || 'binary';
            if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
              throw new Error('Invalid encoding type "' + opts.encoding + '"');
            }
            var ret;
            var stream = FS.open(path, opts.flags);
            var stat = FS.stat(path);
            var length = stat.size;
            var buf = new Uint8Array(length);
            FS.read(stream, buf, 0, length, 0);
            if (opts.encoding === 'utf8') {
              ret = UTF8ArrayToString(buf, 0);
            } else if (opts.encoding === 'binary') {
              ret = buf;
            }
            FS.close(stream);
            return ret;
          },writeFile:function (path, data, opts) {
            opts = opts || {};
            opts.flags = opts.flags || 'w';
            opts.encoding = opts.encoding || 'utf8';
            if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
              throw new Error('Invalid encoding type "' + opts.encoding + '"');
            }
            var stream = FS.open(path, opts.flags, opts.mode);
            if (opts.encoding === 'utf8') {
              var buf = new Uint8Array(lengthBytesUTF8(data)+1);
              var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
              FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
            } else if (opts.encoding === 'binary') {
              FS.write(stream, data, 0, data.length, 0, opts.canOwn);
            }
            FS.close(stream);
          },cwd:function () {
            return FS.currentPath;
          },chdir:function (path) {
            var lookup = FS.lookupPath(path, { follow: true });
            if (!FS.isDir(lookup.node.mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
            }
            var err = FS.nodePermissions(lookup.node, 'x');
            if (err) {
              throw new FS.ErrnoError(err);
            }
            FS.currentPath = lookup.path;
          },createDefaultDirectories:function () {
            FS.mkdir('/tmp');
            FS.mkdir('/home');
            FS.mkdir('/home/web_user');
          },createDefaultDevices:function () {
            // create /dev
            FS.mkdir('/dev');
            // setup /dev/null
            FS.registerDevice(FS.makedev(1, 3), {
              read: function() { return 0; },
              write: function(stream, buffer, offset, length, pos) { return length; }
            });
            FS.mkdev('/dev/null', FS.makedev(1, 3));
            // setup /dev/tty and /dev/tty1
            // stderr needs to print output using Module['printErr']
            // so we register a second tty just for it.
            TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
            TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
            FS.mkdev('/dev/tty', FS.makedev(5, 0));
            FS.mkdev('/dev/tty1', FS.makedev(6, 0));
            // setup /dev/[u]random
            var random_device;
            if (typeof crypto !== 'undefined') {
              // for modern web browsers
              var randomBuffer = new Uint8Array(1);
              random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
            } else if (ENVIRONMENT_IS_NODE) {
              // for nodejs
              random_device = function() { return require('crypto').randomBytes(1)[0]; };
            } else {
              // default for ES5 platforms
              random_device = function() { return (Math.random()*256)|0; };
            }
            FS.createDevice('/dev', 'random', random_device);
            FS.createDevice('/dev', 'urandom', random_device);
            // we're not going to emulate the actual shm device,
            // just create the tmp dirs that reside in it commonly
            FS.mkdir('/dev/shm');
            FS.mkdir('/dev/shm/tmp');
          },createSpecialDirectories:function () {
            // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
            FS.mkdir('/proc');
            FS.mkdir('/proc/self');
            FS.mkdir('/proc/self/fd');
            FS.mount({
              mount: function() {
                var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
                node.node_ops = {
                  lookup: function(parent, name) {
                    var fd = +name;
                    var stream = FS.getStream(fd);
                    if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                    var ret = {
                      parent: null,
                      mount: { mountpoint: 'fake' },
                      node_ops: { readlink: function() { return stream.path } }
                    };
                    ret.parent = ret; // make it look like a simple root node
                    return ret;
                  }
                };
                return node;
              }
            }, {}, '/proc/self/fd');
          },createStandardStreams:function () {
            // TODO deprecate the old functionality of a single
            // input / output callback and that utilizes FS.createDevice
            // and instead require a unique set of stream ops
    
            // by default, we symlink the standard streams to the
            // default tty devices. however, if the standard streams
            // have been overwritten we create a unique device for
            // them instead.
            if (Module['stdin']) {
              FS.createDevice('/dev', 'stdin', Module['stdin']);
            } else {
              FS.symlink('/dev/tty', '/dev/stdin');
            }
            if (Module['stdout']) {
              FS.createDevice('/dev', 'stdout', null, Module['stdout']);
            } else {
              FS.symlink('/dev/tty', '/dev/stdout');
            }
            if (Module['stderr']) {
              FS.createDevice('/dev', 'stderr', null, Module['stderr']);
            } else {
              FS.symlink('/dev/tty1', '/dev/stderr');
            }
    
            // open default streams for the stdin, stdout and stderr devices
            var stdin = FS.open('/dev/stdin', 'r');
            assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
    
            var stdout = FS.open('/dev/stdout', 'w');
            assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
    
            var stderr = FS.open('/dev/stderr', 'w');
            assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
          },ensureErrnoError:function () {
            if (FS.ErrnoError) return;
            FS.ErrnoError = function ErrnoError(errno, node) {
              //Module.printErr(stackTrace()); // useful for debugging
              this.node = node;
              this.setErrno = function(errno) {
                this.errno = errno;
                for (var key in ERRNO_CODES) {
                  if (ERRNO_CODES[key] === errno) {
                    this.code = key;
                    break;
                  }
                }
              };
              this.setErrno(errno);
              this.message = ERRNO_MESSAGES[errno];
              if (this.stack) this.stack = demangleAll(this.stack);
            };
            FS.ErrnoError.prototype = new Error();
            FS.ErrnoError.prototype.constructor = FS.ErrnoError;
            // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
            [ERRNO_CODES.ENOENT].forEach(function(code) {
              FS.genericErrors[code] = new FS.ErrnoError(code);
              FS.genericErrors[code].stack = '<generic error, no stack>';
            });
          },staticInit:function () {
            FS.ensureErrnoError();
    
            FS.nameTable = new Array(4096);
    
            FS.mount(MEMFS, {}, '/');
    
            FS.createDefaultDirectories();
            FS.createDefaultDevices();
            FS.createSpecialDirectories();
    
            FS.filesystems = {
              'MEMFS': MEMFS,
              'IDBFS': IDBFS,
              'NODEFS': NODEFS,
              'WORKERFS': WORKERFS,
            };
          },init:function (input, output, error) {
            assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
            FS.init.initialized = true;
    
            FS.ensureErrnoError();
    
            // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
            Module['stdin'] = input || Module['stdin'];
            Module['stdout'] = output || Module['stdout'];
            Module['stderr'] = error || Module['stderr'];
    
            FS.createStandardStreams();
          },quit:function () {
            FS.init.initialized = false;
            // force-flush all streams, so we get musl std streams printed out
            var fflush = Module['_fflush'];
            if (fflush) fflush(0);
            // close all of our streams
            for (var i = 0; i < FS.streams.length; i++) {
              var stream = FS.streams[i];
              if (!stream) {
                continue;
              }
              FS.close(stream);
            }
          },getMode:function (canRead, canWrite) {
            var mode = 0;
            if (canRead) mode |= 292 | 73;
            if (canWrite) mode |= 146;
            return mode;
          },joinPath:function (parts, forceRelative) {
            var path = PATH.join.apply(null, parts);
            if (forceRelative && path[0] == '/') path = path.substr(1);
            return path;
          },absolutePath:function (relative, base) {
            return PATH.resolve(base, relative);
          },standardizePath:function (path) {
            return PATH.normalize(path);
          },findObject:function (path, dontResolveLastLink) {
            var ret = FS.analyzePath(path, dontResolveLastLink);
            if (ret.exists) {
              return ret.object;
            } else {
              ___setErrNo(ret.error);
              return null;
            }
          },analyzePath:function (path, dontResolveLastLink) {
            // operate from within the context of the symlink's target
            try {
              var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
              path = lookup.path;
            } catch (e) {
            }
            var ret = {
              isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
              parentExists: false, parentPath: null, parentObject: null
            };
            try {
              var lookup = FS.lookupPath(path, { parent: true });
              ret.parentExists = true;
              ret.parentPath = lookup.path;
              ret.parentObject = lookup.node;
              ret.name = PATH.basename(path);
              lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
              ret.exists = true;
              ret.path = lookup.path;
              ret.object = lookup.node;
              ret.name = lookup.node.name;
              ret.isRoot = lookup.path === '/';
            } catch (e) {
              ret.error = e.errno;
            };
            return ret;
          },createFolder:function (parent, name, canRead, canWrite) {
            var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
            var mode = FS.getMode(canRead, canWrite);
            return FS.mkdir(path, mode);
          },createPath:function (parent, path, canRead, canWrite) {
            parent = typeof parent === 'string' ? parent : FS.getPath(parent);
            var parts = path.split('/').reverse();
            while (parts.length) {
              var part = parts.pop();
              if (!part) continue;
              var current = PATH.join2(parent, part);
              try {
                FS.mkdir(current);
              } catch (e) {
                // ignore EEXIST
              }
              parent = current;
            }
            return current;
          },createFile:function (parent, name, properties, canRead, canWrite) {
            var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
            var mode = FS.getMode(canRead, canWrite);
            return FS.create(path, mode);
          },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
            var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
            var mode = FS.getMode(canRead, canWrite);
            var node = FS.create(path, mode);
            if (data) {
              if (typeof data === 'string') {
                var arr = new Array(data.length);
                for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
                data = arr;
              }
              // make sure we can write to the file
              FS.chmod(node, mode | 146);
              var stream = FS.open(node, 'w');
              FS.write(stream, data, 0, data.length, 0, canOwn);
              FS.close(stream);
              FS.chmod(node, mode);
            }
            return node;
          },createDevice:function (parent, name, input, output) {
            var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
            var mode = FS.getMode(!!input, !!output);
            if (!FS.createDevice.major) FS.createDevice.major = 64;
            var dev = FS.makedev(FS.createDevice.major++, 0);
            // Create a fake device that a set of stream ops to emulate
            // the old behavior.
            FS.registerDevice(dev, {
              open: function(stream) {
                stream.seekable = false;
              },
              close: function(stream) {
                // flush any pending line data
                if (output && output.buffer && output.buffer.length) {
                  output(10);
                }
              },
              read: function(stream, buffer, offset, length, pos /* ignored */) {
                var bytesRead = 0;
                for (var i = 0; i < length; i++) {
                  var result;
                  try {
                    result = input();
                  } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                  }
                  if (result === undefined && bytesRead === 0) {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                  }
                  if (result === null || result === undefined) break;
                  bytesRead++;
                  buffer[offset+i] = result;
                }
                if (bytesRead) {
                  stream.node.timestamp = Date.now();
                }
                return bytesRead;
              },
              write: function(stream, buffer, offset, length, pos) {
                for (var i = 0; i < length; i++) {
                  try {
                    output(buffer[offset+i]);
                  } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                  }
                }
                if (length) {
                  stream.node.timestamp = Date.now();
                }
                return i;
              }
            });
            return FS.mkdev(path, mode, dev);
          },createLink:function (parent, name, target, canRead, canWrite) {
            var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
            return FS.symlink(target, path);
          },forceLoadFile:function (obj) {
            if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
            var success = true;
            if (typeof XMLHttpRequest !== 'undefined') {
              throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
            } else if (Module['read']) {
              // Command-line.
              try {
                // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
                //          read() will try to parse UTF8.
                obj.contents = intArrayFromString(Module['read'](obj.url), true);
                obj.usedBytes = obj.contents.length;
              } catch (e) {
                success = false;
              }
            } else {
              throw new Error('Cannot load without read() or XMLHttpRequest.');
            }
            if (!success) ___setErrNo(ERRNO_CODES.EIO);
            return success;
          },createLazyFile:function (parent, name, url, canRead, canWrite) {
            // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
            function LazyUint8Array() {
              this.lengthKnown = false;
              this.chunks = []; // Loaded chunks. Index is the chunk number
            }
            LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
              if (idx > this.length-1 || idx < 0) {
                return undefined;
              }
              var chunkOffset = idx % this.chunkSize;
              var chunkNum = (idx / this.chunkSize)|0;
              return this.getter(chunkNum)[chunkOffset];
            }
            LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
              this.getter = getter;
            }
            LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
    
              var chunkSize = 1024*1024; // Chunk size in bytes
    
              if (!hasByteServing) chunkSize = datalength;
    
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
    
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
    
              if (usesGzip || !datalength) {
                // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
                chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
                datalength = this.getter(0).length;
                chunkSize = datalength;
                console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
              }
    
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
            }
            if (typeof XMLHttpRequest !== 'undefined') {
              if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
              var lazyArray = new LazyUint8Array();
              Object.defineProperties(lazyArray, {
                length: {
                  get: function() {
                    if(!this.lengthKnown) {
                      this.cacheLength();
                    }
                    return this._length;
                  }
                },
                chunkSize: {
                  get: function() {
                    if(!this.lengthKnown) {
                      this.cacheLength();
                    }
                    return this._chunkSize;
                  }
                }
              });
    
              var properties = { isDevice: false, contents: lazyArray };
            } else {
              var properties = { isDevice: false, url: url };
            }
    
            var node = FS.createFile(parent, name, properties, canRead, canWrite);
            // This is a total hack, but I want to get this lazy file code out of the
            // core of MEMFS. If we want to keep this lazy file concept I feel it should
            // be its own thin LAZYFS proxying calls to MEMFS.
            if (properties.contents) {
              node.contents = properties.contents;
            } else if (properties.url) {
              node.contents = null;
              node.url = properties.url;
            }
            // Add a function that defers querying the file size until it is asked the first time.
            Object.defineProperties(node, {
              usedBytes: {
                get: function() { return this.contents.length; }
              }
            });
            // override each stream op with one that tries to force load the lazy file first
            var stream_ops = {};
            var keys = Object.keys(node.stream_ops);
            keys.forEach(function(key) {
              var fn = node.stream_ops[key];
              stream_ops[key] = function forceLoadLazyFile() {
                if (!FS.forceLoadFile(node)) {
                  throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                return fn.apply(null, arguments);
              };
            });
            // use a custom read function
            stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
              if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              var contents = stream.node.contents;
              if (position >= contents.length)
                return 0;
              var size = Math.min(contents.length - position, length);
              assert(size >= 0);
              if (contents.slice) { // normal array
                for (var i = 0; i < size; i++) {
                  buffer[offset + i] = contents[position + i];
                }
              } else {
                for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
                  buffer[offset + i] = contents.get(position + i);
                }
              }
              return size;
            };
            node.stream_ops = stream_ops;
            return node;
          },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
            Browser.init(); // XXX perhaps this method should move onto Browser?
            // TODO we should allow people to just pass in a complete filename instead
            // of parent and name being that we just join them anyways
            var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
            var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
            function processData(byteArray) {
              function finish(byteArray) {
                if (preFinish) preFinish();
                if (!dontCreateFile) {
                  FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
                }
                if (onload) onload();
                removeRunDependency(dep);
              }
              var handled = false;
              Module['preloadPlugins'].forEach(function(plugin) {
                if (handled) return;
                if (plugin['canHandle'](fullname)) {
                  plugin['handle'](byteArray, fullname, finish, function() {
                    if (onerror) onerror();
                    removeRunDependency(dep);
                  });
                  handled = true;
                }
              });
              if (!handled) finish(byteArray);
            }
            addRunDependency(dep);
            if (typeof url == 'string') {
              Browser.asyncLoad(url, function(byteArray) {
                processData(byteArray);
              }, onerror);
            } else {
              processData(url);
            }
          },indexedDB:function () {
            return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
          },DB_NAME:function () {
            return 'EM_FS_' + window.location.pathname;
          },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
            onload = onload || function(){};
            onerror = onerror || function(){};
            var indexedDB = FS.indexedDB();
            try {
              var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
            } catch (e) {
              return onerror(e);
            }
            openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
              console.log('creating db');
              var db = openRequest.result;
              db.createObjectStore(FS.DB_STORE_NAME);
            };
            openRequest.onsuccess = function openRequest_onsuccess() {
              var db = openRequest.result;
              var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
              var files = transaction.objectStore(FS.DB_STORE_NAME);
              var ok = 0, fail = 0, total = paths.length;
              function finish() {
                if (fail == 0) onload(); else onerror();
              }
              paths.forEach(function(path) {
                var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
                putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
              });
              transaction.onerror = onerror;
            };
            openRequest.onerror = onerror;
          },loadFilesFromDB:function (paths, onload, onerror) {
            onload = onload || function(){};
            onerror = onerror || function(){};
            var indexedDB = FS.indexedDB();
            try {
              var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
            } catch (e) {
              return onerror(e);
            }
            openRequest.onupgradeneeded = onerror; // no database to load from
            openRequest.onsuccess = function openRequest_onsuccess() {
              var db = openRequest.result;
              try {
                var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
              } catch(e) {
                onerror(e);
                return;
              }
              var files = transaction.objectStore(FS.DB_STORE_NAME);
              var ok = 0, fail = 0, total = paths.length;
              function finish() {
                if (fail == 0) onload(); else onerror();
              }
              paths.forEach(function(path) {
                var getRequest = files.get(path);
                getRequest.onsuccess = function getRequest_onsuccess() {
                  if (FS.analyzePath(path).exists) {
                    FS.unlink(path);
                  }
                  FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                  ok++;
                  if (ok + fail == total) finish();
                };
                getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
              });
              transaction.onerror = onerror;
            };
            openRequest.onerror = onerror;
          }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
            if (path[0] !== '/') {
              // relative path
              var dir;
              if (dirfd === -100) {
                dir = FS.cwd();
              } else {
                var dirstream = FS.getStream(dirfd);
                if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                dir = dirstream.path;
              }
              path = PATH.join2(dir, path);
            }
            return path;
          },doStat:function (func, path, buf) {
            try {
              var stat = func(path);
            } catch (e) {
              if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                // an error occurred while trying to look up the path; we should just report ENOTDIR
                return -ERRNO_CODES.ENOTDIR;
              }
              throw e;
            }
            HEAP32[((buf)>>2)]=stat.dev;
            HEAP32[(((buf)+(4))>>2)]=0;
            HEAP32[(((buf)+(8))>>2)]=stat.ino;
            HEAP32[(((buf)+(12))>>2)]=stat.mode;
            HEAP32[(((buf)+(16))>>2)]=stat.nlink;
            HEAP32[(((buf)+(20))>>2)]=stat.uid;
            HEAP32[(((buf)+(24))>>2)]=stat.gid;
            HEAP32[(((buf)+(28))>>2)]=stat.rdev;
            HEAP32[(((buf)+(32))>>2)]=0;
            HEAP32[(((buf)+(36))>>2)]=stat.size;
            HEAP32[(((buf)+(40))>>2)]=4096;
            HEAP32[(((buf)+(44))>>2)]=stat.blocks;
            HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
            HEAP32[(((buf)+(52))>>2)]=0;
            HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
            HEAP32[(((buf)+(60))>>2)]=0;
            HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
            HEAP32[(((buf)+(68))>>2)]=0;
            HEAP32[(((buf)+(72))>>2)]=stat.ino;
            return 0;
          },doMsync:function (addr, stream, len, flags) {
            var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
            FS.msync(stream, buffer, 0, len, flags);
          },doMkdir:function (path, mode) {
            // remove a trailing slash, if one - /a/b/ has basename of '', but
            // we want to create b in the context of this function
            path = PATH.normalize(path);
            if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
            FS.mkdir(path, mode, 0);
            return 0;
          },doMknod:function (path, mode, dev) {
            // we don't want this in the JS API as it uses mknod to create all nodes.
            switch (mode & 61440) {
              case 32768:
              case 8192:
              case 24576:
              case 4096:
              case 49152:
                break;
              default: return -ERRNO_CODES.EINVAL;
            }
            FS.mknod(path, mode, dev);
            return 0;
          },doReadlink:function (path, buf, bufsize) {
            if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
            var ret = FS.readlink(path);
            ret = ret.slice(0, Math.max(0, bufsize));
            writeStringToMemory(ret, buf, true);
            return ret.length;
          },doAccess:function (path, amode) {
            if (amode & ~7) {
              // need a valid mode
              return -ERRNO_CODES.EINVAL;
            }
            var node;
            var lookup = FS.lookupPath(path, { follow: true });
            node = lookup.node;
            var perms = '';
            if (amode & 4) perms += 'r';
            if (amode & 2) perms += 'w';
            if (amode & 1) perms += 'x';
            if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
              return -ERRNO_CODES.EACCES;
            }
            return 0;
          },doDup:function (path, flags, suggestFD) {
            var suggest = FS.getStream(suggestFD);
            if (suggest) FS.close(suggest);
            return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
          },doReadv:function (stream, iov, iovcnt, offset) {
            var ret = 0;
            for (var i = 0; i < iovcnt; i++) {
              var ptr = HEAP32[(((iov)+(i*8))>>2)];
              var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
              var curr = FS.read(stream, HEAP8,ptr, len, offset);
              if (curr < 0) return -1;
              ret += curr;
              if (curr < len) break; // nothing more to read
            }
            return ret;
          },doWritev:function (stream, iov, iovcnt, offset) {
            var ret = 0;
            for (var i = 0; i < iovcnt; i++) {
              var ptr = HEAP32[(((iov)+(i*8))>>2)];
              var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
              var curr = FS.write(stream, HEAP8,ptr, len, offset);
              if (curr < 0) return -1;
              ret += curr;
            }
            return ret;
          },varargs:0,get:function (varargs) {
            SYSCALLS.varargs += 4;
            var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
            return ret;
          },getStr:function () {
            var ret = Pointer_stringify(SYSCALLS.get());
            return ret;
          },getStreamFromFD:function () {
            var stream = FS.getStream(SYSCALLS.get());
            if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            return stream;
          },getSocketFromFD:function () {
            var socket = SOCKFS.getSocket(SYSCALLS.get());
            if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            return socket;
          },getSocketAddress:function (allowNull) {
            var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
            if (allowNull && addrp === 0) return null;
            var info = __read_sockaddr(addrp, addrlen);
            if (info.errno) throw new FS.ErrnoError(info.errno);
            info.addr = DNS.lookup_addr(info.addr) || info.addr;
            return info;
          },get64:function () {
            var low = SYSCALLS.get(), high = SYSCALLS.get();
            if (low >= 0) assert(high === 0);
            else assert(high === -1);
            return low;
          },getZero:function () {
            assert(SYSCALLS.get() === 0);
          }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
      try {
       // ioctl
          var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
          switch (op) {
            case 21505: {
              if (!stream.tty) return -ERRNO_CODES.ENOTTY;
              return 0;
            }
            case 21506: {
              if (!stream.tty) return -ERRNO_CODES.ENOTTY;
              return 0; // no-op, not actually adjusting terminal settings
            }
            case 21519: {
              if (!stream.tty) return -ERRNO_CODES.ENOTTY;
              var argp = SYSCALLS.get();
              HEAP32[((argp)>>2)]=0;
              return 0;
            }
            case 21520: {
              if (!stream.tty) return -ERRNO_CODES.ENOTTY;
              return -ERRNO_CODES.EINVAL; // not supported
            }
            case 21531: {
              var argp = SYSCALLS.get();
              return FS.ioctl(stream, op, argp);
            }
            default: abort('bad ioctl syscall ' + op);
          }
        } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
      }
      }
    
    
      Module["_bitshift64Ashr"] = _bitshift64Ashr;
    
    
      Module["_bitshift64Lshr"] = _bitshift64Lshr;
    
      function ___cxa_get_exception_ptr(ptr) {
          // TODO: use info.adjusted?
          return ptr;
        }
    
      function _pthread_cleanup_push(routine, arg) {
          __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
          _pthread_cleanup_push.level = __ATEXIT__.length;
        }
    
      function ___cxa_find_matching_catch_4() {
              return ___cxa_find_matching_catch.apply(null, arguments);
            }
    
      function ___cxa_find_matching_catch_2() {
              return ___cxa_find_matching_catch.apply(null, arguments);
            }
    
      function ___cxa_find_matching_catch_3() {
              return ___cxa_find_matching_catch.apply(null, arguments);
            }
    
      function ___cxa_begin_catch(ptr) {
          __ZSt18uncaught_exceptionv.uncaught_exception--;
          EXCEPTIONS.caught.push(ptr);
          EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
          return ptr;
        }
    
      function _llvm_eh_typeid_for(type) {
          return type;
        }
    
      function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
      try {
       // open
          var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
          var stream = FS.open(pathname, flags, mode);
          return stream.fd;
        } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
      }
      }
    
    
      function _emscripten_memcpy_big(dest, src, num) {
          HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
          return dest;
        }
      Module["_memcpy"] = _memcpy;
    
      function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
      try {
       // close
          var stream = SYSCALLS.getStreamFromFD();
          FS.close(stream);
          return 0;
        } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
      }
      }
    
      function _sbrk(bytes) {
          // Implement a Linux-like 'memory area' for our 'process'.
          // Changes the size of the memory area by |bytes|; returns the
          // address of the previous top ('break') of the memory area
          // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
          var self = _sbrk;
          if (!self.called) {
            DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
            self.called = true;
            assert(Runtime.dynamicAlloc);
            self.alloc = Runtime.dynamicAlloc;
            Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
          }
          var ret = DYNAMICTOP;
          if (bytes != 0) {
            var success = self.alloc(bytes);
            if (!success) return -1 >>> 0; // sbrk failure code
          }
          return ret;  // Previous break location.
        }
    
    
      Module["_memmove"] = _memmove;
    
      function _pthread_cleanup_pop() {
          assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
          __ATEXIT__.pop();
          _pthread_cleanup_push.level = __ATEXIT__.length;
        }
    
      function _time(ptr) {
          var ret = (Date.now()/1000)|0;
          if (ptr) {
            HEAP32[((ptr)>>2)]=ret;
          }
          return ret;
        }
    
      function _pthread_self() {
          //FIXME: assumes only a single thread
          return 0;
        }
    
      function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
      try {
       // llseek
          var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
          var offset = offset_low;
          assert(offset_high === 0);
          FS.llseek(stream, offset, whence);
          HEAP32[((result)>>2)]=stream.position;
          if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
          return 0;
        } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
      }
      }
    
    
      function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
      try {
       // writev
          var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
          return SYSCALLS.doWritev(stream, iov, iovcnt);
        } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
      }
      }
    
      function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
      try {
       // fcntl64
          var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
          switch (cmd) {
            case 0: {
              var arg = SYSCALLS.get();
              if (arg < 0) {
                return -ERRNO_CODES.EINVAL;
              }
              var newStream;
              newStream = FS.open(stream.path, stream.flags, 0, arg);
              return newStream.fd;
            }
            case 1:
            case 2:
              return 0;  // FD_CLOEXEC makes no sense for a single process.
            case 3:
              return stream.flags;
            case 4: {
              var arg = SYSCALLS.get();
              stream.flags |= arg;
              return 0;
            }
            case 12:
            case 12: {
              var arg = SYSCALLS.get();
              var offset = 0;
              // We're always unlocked.
              HEAP16[(((arg)+(offset))>>1)]=2;
              return 0;
            }
            case 13:
            case 14:
            case 13:
            case 14:
              return 0; // Pretend that the locking is successful.
            case 16:
            case 8:
              return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
            case 9:
              // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
              ___setErrNo(ERRNO_CODES.EINVAL);
              return -1;
            default: {
              return -ERRNO_CODES.EINVAL;
            }
          }
        } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
      }
      }
    
      function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
      try {
       // readv
          var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
          return SYSCALLS.doReadv(stream, iov, iovcnt);
        } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
      }
      }
    FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
    __ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
    if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
    STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
    
    staticSealed = true; // seal the static portion of memory
    
    STACK_MAX = STACK_BASE + TOTAL_STACK;
    
    DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
    
    assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
    
     var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
    
    
    function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
    
    function invoke_iiii(index,a1,a2,a3) {
      try {
        return Module["dynCall_iiii"](index,a1,a2,a3);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_viiiii(index,a1,a2,a3,a4,a5) {
      try {
        Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_i(index) {
      try {
        return Module["dynCall_i"](index);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_vi(index,a1) {
      try {
        Module["dynCall_vi"](index,a1);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_vii(index,a1,a2) {
      try {
        Module["dynCall_vii"](index,a1,a2);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_ii(index,a1) {
      try {
        return Module["dynCall_ii"](index,a1);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_viii(index,a1,a2,a3) {
      try {
        Module["dynCall_viii"](index,a1,a2,a3);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_v(index) {
      try {
        Module["dynCall_v"](index);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_iiiii(index,a1,a2,a3,a4) {
      try {
        return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      try {
        Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_iii(index,a1,a2) {
      try {
        return Module["dynCall_iii"](index,a1,a2);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
      try {
        return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    function invoke_viiii(index,a1,a2,a3,a4) {
      try {
        Module["dynCall_viiii"](index,a1,a2,a3,a4);
      } catch(e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        asm["setThrew"](1, 0);
      }
    }
    
    Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
    
    Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_pthread_key_create": _pthread_key_create, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "___gxx_personality_v0": ___gxx_personality_v0, "___cxa_find_matching_catch_4": ___cxa_find_matching_catch_4, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___setErrNo": ___setErrNo, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__exit": __exit, "_pthread_getspecific": _pthread_getspecific, "_pthread_self": _pthread_self, "___cxa_get_exception_ptr": ___cxa_get_exception_ptr, "_pthread_once": _pthread_once, "___syscall54": ___syscall54, "___unlock": ___unlock, "_pthread_setspecific": _pthread_setspecific, "___cxa_throw": ___cxa_throw, "_sysconf": _sysconf, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "___cxa_allocate_exception": ___cxa_allocate_exception, "___syscall140": ___syscall140, "_exit": _exit, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
    // EMSCRIPTEN_START_ASM
    var asm = (function(global, env, buffer) {
      'almost asm';
    
    
      var HEAP8 = new global.Int8Array(buffer);
      var HEAP16 = new global.Int16Array(buffer);
      var HEAP32 = new global.Int32Array(buffer);
      var HEAPU8 = new global.Uint8Array(buffer);
      var HEAPU16 = new global.Uint16Array(buffer);
      var HEAPU32 = new global.Uint32Array(buffer);
      var HEAPF32 = new global.Float32Array(buffer);
      var HEAPF64 = new global.Float64Array(buffer);
    
    
      var STACKTOP=env.STACKTOP|0;
      var STACK_MAX=env.STACK_MAX|0;
      var tempDoublePtr=env.tempDoublePtr|0;
      var ABORT=env.ABORT|0;
      var cttz_i8=env.cttz_i8|0;
    
      var __THREW__ = 0;
      var threwValue = 0;
      var setjmpId = 0;
      var undef = 0;
      var nan = global.NaN, inf = global.Infinity;
      var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
    
      var tempRet0 = 0;
      var tempRet1 = 0;
      var tempRet2 = 0;
      var tempRet3 = 0;
      var tempRet4 = 0;
      var tempRet5 = 0;
      var tempRet6 = 0;
      var tempRet7 = 0;
      var tempRet8 = 0;
      var tempRet9 = 0;
      var Math_floor=global.Math.floor;
      var Math_abs=global.Math.abs;
      var Math_sqrt=global.Math.sqrt;
      var Math_pow=global.Math.pow;
      var Math_cos=global.Math.cos;
      var Math_sin=global.Math.sin;
      var Math_tan=global.Math.tan;
      var Math_acos=global.Math.acos;
      var Math_asin=global.Math.asin;
      var Math_atan=global.Math.atan;
      var Math_atan2=global.Math.atan2;
      var Math_exp=global.Math.exp;
      var Math_log=global.Math.log;
      var Math_ceil=global.Math.ceil;
      var Math_imul=global.Math.imul;
      var Math_min=global.Math.min;
      var Math_clz32=global.Math.clz32;
      var abort=env.abort;
      var assert=env.assert;
      var nullFunc_iiii=env.nullFunc_iiii;
      var nullFunc_viiiii=env.nullFunc_viiiii;
      var nullFunc_i=env.nullFunc_i;
      var nullFunc_vi=env.nullFunc_vi;
      var nullFunc_vii=env.nullFunc_vii;
      var nullFunc_ii=env.nullFunc_ii;
      var nullFunc_viii=env.nullFunc_viii;
      var nullFunc_v=env.nullFunc_v;
      var nullFunc_iiiii=env.nullFunc_iiiii;
      var nullFunc_viiiiii=env.nullFunc_viiiiii;
      var nullFunc_iii=env.nullFunc_iii;
      var nullFunc_iiiiii=env.nullFunc_iiiiii;
      var nullFunc_viiii=env.nullFunc_viiii;
      var invoke_iiii=env.invoke_iiii;
      var invoke_viiiii=env.invoke_viiiii;
      var invoke_i=env.invoke_i;
      var invoke_vi=env.invoke_vi;
      var invoke_vii=env.invoke_vii;
      var invoke_ii=env.invoke_ii;
      var invoke_viii=env.invoke_viii;
      var invoke_v=env.invoke_v;
      var invoke_iiiii=env.invoke_iiiii;
      var invoke_viiiiii=env.invoke_viiiiii;
      var invoke_iii=env.invoke_iii;
      var invoke_iiiiii=env.invoke_iiiiii;
      var invoke_viiii=env.invoke_viiii;
      var _pthread_cleanup_pop=env._pthread_cleanup_pop;
      var ___syscall221=env.___syscall221;
      var _pthread_key_create=env._pthread_key_create;
      var _abort=env._abort;
      var _pthread_cleanup_push=env._pthread_cleanup_push;
      var ___gxx_personality_v0=env.___gxx_personality_v0;
      var ___cxa_find_matching_catch_4=env.___cxa_find_matching_catch_4;
      var ___cxa_free_exception=env.___cxa_free_exception;
      var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
      var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
      var ___setErrNo=env.___setErrNo;
      var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
      var _sbrk=env._sbrk;
      var ___cxa_begin_catch=env.___cxa_begin_catch;
      var _emscripten_memcpy_big=env._emscripten_memcpy_big;
      var ___cxa_end_catch=env.___cxa_end_catch;
      var ___resumeException=env.___resumeException;
      var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
      var __exit=env.__exit;
      var _pthread_getspecific=env._pthread_getspecific;
      var _pthread_self=env._pthread_self;
      var ___cxa_get_exception_ptr=env.___cxa_get_exception_ptr;
      var _pthread_once=env._pthread_once;
      var ___syscall54=env.___syscall54;
      var ___unlock=env.___unlock;
      var _pthread_setspecific=env._pthread_setspecific;
      var ___cxa_throw=env.___cxa_throw;
      var _sysconf=env._sysconf;
      var ___lock=env.___lock;
      var ___syscall6=env.___syscall6;
      var ___syscall5=env.___syscall5;
      var _time=env._time;
      var ___cxa_allocate_exception=env.___cxa_allocate_exception;
      var ___syscall140=env.___syscall140;
      var _exit=env._exit;
      var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
      var ___syscall145=env.___syscall145;
      var ___syscall146=env.___syscall146;
      var tempFloat = 0.0;
    
    // EMSCRIPTEN_START_FUNCS
    
    function stackAlloc(size) {
      size = size|0;
      var ret = 0;
      ret = STACKTOP;
      STACKTOP = (STACKTOP + size)|0;
      STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
    
      return ret|0;
    }
    function stackSave() {
      return STACKTOP|0;
    }
    function stackRestore(top) {
      top = top|0;
      STACKTOP = top;
    }
    function establishStackSpace(stackBase, stackMax) {
      stackBase = stackBase|0;
      stackMax = stackMax|0;
      STACKTOP = stackBase;
      STACK_MAX = stackMax;
    }
    
    function setThrew(threw, value) {
      threw = threw|0;
      value = value|0;
      if ((__THREW__|0) == 0) {
        __THREW__ = threw;
        threwValue = value;
      }
    }
    function copyTempFloat(ptr) {
      ptr = ptr|0;
      HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
      HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
      HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
      HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    }
    function copyTempDouble(ptr) {
      ptr = ptr|0;
      HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
      HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
      HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
      HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
      HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
      HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
      HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
      HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
    }
    
    function setTempRet0(value) {
      value = value|0;
      tempRet0 = value;
    }
    function getTempRet0() {
      return tempRet0|0;
    }
    
    function _OCRAD_version() {
     var label = 0, sp = 0;
     sp = STACKTOP;
     return (867|0);
    }
    function _OCRAD_open() {
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     HEAP32[1700] = -1;
     $0 = (__ZnwjRKSt9nothrow_t(56,9440)|0);
     $1 = ($0|0)==(0|0);
     if ($1) {
      $8 = 0;
      return ($8|0);
     }
     $2 = ((($0)) + 28|0);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;HEAP32[$0+24>>2]=0|0;
     $3 = ((($0)) + 32|0);
     HEAP32[$3>>2] = 0;
     $4 = ((($0)) + 36|0);
     HEAP32[$4>>2] = 0;
     $5 = ((($0)) + 40|0);
     HEAP8[$5>>0] = 52;
     $6 = ((($0)) + 41|0);
     HEAP8[$6>>0] = 0;
     $7 = ((($0)) + 44|0);
     ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     HEAP32[$2>>2] = 0;
     $8 = $0;
     return ($8|0);
    }
    function _OCRAD_close($ocrdes) {
     $ocrdes = $ocrdes|0;
     var $$0 = 0, $$01 = 0, $$02 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$02 = -1;
      return ($$02|0);
     }
     $1 = ((($ocrdes)) + 4|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = ($2|0)==(0|0);
     do {
      if (!($3)) {
       __THREW__ = 0;
       invoke_vi(26,($2|0));
       $4 = __THREW__; __THREW__ = 0;
       $5 = $4&1;
       if (!($5)) {
        __ZdlPv($2);
        break;
       }
       $6 = ___cxa_find_matching_catch_2()|0;
       $7 = tempRet0;
       __ZdlPv($2);
       $$0 = $7;$$01 = $6;
       ___resumeException($$01|0);
       // unreachable;
      }
     } while(0);
     $8 = HEAP32[$ocrdes>>2]|0;
     $9 = ($8|0)==(0|0);
     if (!($9)) {
      $10 = ((($8)) + 16|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($11|0)==(0|0);
      if (!($12)) {
       $13 = ((($8)) + 20|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ($14|0)==($11|0);
       if ($15) {
        $25 = $11;
       } else {
        $17 = $14;
        while(1) {
         $16 = ((($17)) + -12|0);
         HEAP32[$13>>2] = $16;
         $18 = HEAP32[$16>>2]|0;
         $19 = ($18|0)==(0|0);
         if ($19) {
          $20 = $16;
         } else {
          $22 = ((($17)) + -8|0);
          $23 = HEAP32[$22>>2]|0;
          $24 = ($23|0)==($18|0);
          if (!($24)) {
           HEAP32[$22>>2] = $18;
          }
          __ZdlPv($18);
          $$pre$i$i$i$i = HEAP32[$13>>2]|0;
          $20 = $$pre$i$i$i$i;
         }
         $21 = ($20|0)==($11|0);
         if ($21) {
          break;
         } else {
          $17 = $20;
         }
        }
        $$pre$i$i = HEAP32[$10>>2]|0;
        $25 = $$pre$i$i;
       }
       __ZdlPv($25);
      }
      __ZdlPv($8);
     }
     $26 = ((($ocrdes)) + 44|0);
     __THREW__ = 0;
     invoke_vi(27,($26|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     do {
      if ($28) {
       $32 = ___cxa_find_matching_catch_2()|0;
       $33 = tempRet0;
       $34 = ((($ocrdes)) + 12|0);
       __THREW__ = 0;
       invoke_vi(28,($34|0));
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        $37 = ___cxa_find_matching_catch_3(0|0)|0;
        $38 = tempRet0;
        ___clang_call_terminate($37);
        // unreachable;
       } else {
        $eh$lpad$body$index2Z2D = $33;$eh$lpad$body$indexZ2D = $32;
       }
      } else {
       $29 = ((($ocrdes)) + 12|0);
       __THREW__ = 0;
       invoke_vi(28,($29|0));
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        $39 = ___cxa_find_matching_catch_2()|0;
        $40 = tempRet0;
        $eh$lpad$body$index2Z2D = $40;$eh$lpad$body$indexZ2D = $39;
        break;
       }
       __ZdlPv($ocrdes);
       $$02 = 0;
       return ($$02|0);
      }
     } while(0);
     __ZdlPv($ocrdes);
     $$0 = $eh$lpad$body$index2Z2D;$$01 = $eh$lpad$body$indexZ2D;
     ___resumeException($$01|0);
     // unreachable;
     return (0)|0;
    }
    function _OCRAD_get_errno($ocrdes) {
     $ocrdes = $ocrdes|0;
     var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = 1;
      return ($$0|0);
     }
     $1 = ((($ocrdes)) + 8|0);
     $2 = HEAP32[$1>>2]|0;
     $$0 = $2;
     return ($$0|0);
    }
    function _OCRAD_set_image($ocrdes,$image,$invert) {
     $ocrdes = $ocrdes|0;
     $image = $image|0;
     $invert = $invert|0;
     var $$0 = 0, $$01 = 0, $$02 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $0 = sp;
     $1 = ($ocrdes|0)==(0|0);
     if ($1) {
      $$02 = -1;
      STACKTOP = sp;return ($$02|0);
     }
     $2 = ($image|0)==(0|0);
     if (!($2)) {
      $3 = ((($image)) + 4|0);
      $4 = HEAP32[$3>>2]|0;
      $5 = ($4|0)<(3);
      if (!($5)) {
       $6 = ((($image)) + 8|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = ($7|0)<(3);
       if (!($8)) {
        $9 = (2147483647 / ($7|0))&-1;
        $10 = ($9|0)<($4|0);
        if (!($10)) {
         $11 = ((($image)) + 12|0);
         $12 = HEAP32[$11>>2]|0;
         $switch = ($12>>>0)<(3);
         if ($switch) {
          __THREW__ = 0;
          $14 = (invoke_ii(29,32)|0);
          $15 = __THREW__; __THREW__ = 0;
          $16 = $15&1;
          L10: do {
           if ($16) {
            $24 = ___cxa_find_matching_catch_3(80|0)|0;
            $25 = tempRet0;
            $$0 = $25;$$01 = $24;
           } else {
            __THREW__ = 0;
            invoke_viii(30,($14|0),($image|0),($invert|0));
            $17 = __THREW__; __THREW__ = 0;
            $18 = $17&1;
            if ($18) {
             $26 = ___cxa_find_matching_catch_3(80|0)|0;
             $27 = tempRet0;
             __ZdlPv($14);
             $$0 = $27;$$01 = $26;
             break;
            }
            $19 = ((($ocrdes)) + 4|0);
            $20 = HEAP32[$19>>2]|0;
            $21 = ($20|0)==(0|0);
            do {
             if (!($21)) {
              __THREW__ = 0;
              invoke_vi(26,($20|0));
              $22 = __THREW__; __THREW__ = 0;
              $23 = $22&1;
              if ($23) {
               $28 = ___cxa_find_matching_catch_3(80|0)|0;
               $29 = tempRet0;
               __ZdlPv($20);
               $$0 = $29;$$01 = $28;
               break L10;
              } else {
               __ZdlPv($20);
               HEAP32[$19>>2] = 0;
               break;
              }
             }
            } while(0);
            $30 = HEAP32[$ocrdes>>2]|0;
            $31 = ($30|0)==(0|0);
            if (!($31)) {
             $32 = ((($30)) + 16|0);
             $33 = HEAP32[$32>>2]|0;
             $34 = ($33|0)==(0|0);
             if (!($34)) {
              $35 = ((($30)) + 20|0);
              $36 = HEAP32[$35>>2]|0;
              $37 = ($36|0)==($33|0);
              if ($37) {
               $47 = $33;
              } else {
               $39 = $36;
               while(1) {
                $38 = ((($39)) + -12|0);
                HEAP32[$35>>2] = $38;
                $40 = HEAP32[$38>>2]|0;
                $41 = ($40|0)==(0|0);
                if ($41) {
                 $42 = $38;
                } else {
                 $44 = ((($39)) + -8|0);
                 $45 = HEAP32[$44>>2]|0;
                 $46 = ($45|0)==($40|0);
                 if (!($46)) {
                  HEAP32[$44>>2] = $40;
                 }
                 __ZdlPv($40);
                 $$pre$i$i$i$i = HEAP32[$35>>2]|0;
                 $42 = $$pre$i$i$i$i;
                }
                $43 = ($42|0)==($33|0);
                if ($43) {
                 break;
                } else {
                 $39 = $42;
                }
               }
               $$pre$i$i = HEAP32[$32>>2]|0;
               $47 = $$pre$i$i;
              }
              __ZdlPv($47);
             }
             __ZdlPv($30);
            }
            HEAP32[$ocrdes>>2] = $14;
            $$02 = 0;
            STACKTOP = sp;return ($$02|0);
           }
          } while(0);
          $48 = (_llvm_eh_typeid_for((80|0))|0);
          $49 = ($$0|0)==($48|0);
          if (!($49)) {
           ___resumeException($$01|0);
           // unreachable;
          }
          (___cxa_get_exception_ptr(($$01|0))|0);
          HEAP32[$0>>2] = (808);
          (___cxa_begin_catch(($$01|0))|0);
          $50 = ((($ocrdes)) + 8|0);
          HEAP32[$50>>2] = 2;
          __ZNSt9bad_allocD2Ev($0);
          ___cxa_end_catch();
          $$02 = -1;
          STACKTOP = sp;return ($$02|0);
         }
        }
       }
      }
     }
     $13 = ((($ocrdes)) + 8|0);
     HEAP32[$13>>2] = 1;
     $$02 = -1;
     STACKTOP = sp;return ($$02|0);
    }
    function _OCRAD_set_image_from_file($ocrdes,$filename,$invert) {
     $ocrdes = $ocrdes|0;
     $filename = $filename|0;
     $invert = $invert|0;
     var $$0 = 0, $$01 = 0, $$1 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $infile$0 = 0, $retval$0 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $0 = sp;
     $1 = ($ocrdes|0)==(0|0);
     if ($1) {
      $$1 = -1;
      STACKTOP = sp;return ($$1|0);
     }
     $2 = ($filename|0)==(0|0);
     if (!($2)) {
      $3 = HEAP8[$filename>>0]|0;
      $4 = ($3<<24>>24)==(0);
      if (!($4)) {
       $5 = (_strcmp($filename,860)|0);
       $6 = ($5|0)==(0);
       if ($6) {
        $7 = HEAP32[149]|0;
        $infile$0 = $7;
       } else {
        $8 = (_fopen($filename,862)|0);
        $infile$0 = $8;
       }
       $9 = ($infile$0|0)==(0|0);
       if (!($9)) {
        __THREW__ = 0;
        $11 = (invoke_ii(29,32)|0);
        $12 = __THREW__; __THREW__ = 0;
        $13 = $12&1;
        L12: do {
         if ($13) {
          $21 = ___cxa_find_matching_catch_4(80|0,0|0)|0;
          $22 = tempRet0;
          $$0 = $22;$$01 = $21;
          label = 28;
         } else {
          __THREW__ = 0;
          invoke_viii(31,($11|0),($infile$0|0),($invert|0));
          $14 = __THREW__; __THREW__ = 0;
          $15 = $14&1;
          if ($15) {
           $23 = ___cxa_find_matching_catch_4(80|0,0|0)|0;
           $24 = tempRet0;
           __ZdlPv($11);
           $$0 = $24;$$01 = $23;
           label = 28;
           break;
          }
          $16 = ((($ocrdes)) + 4|0);
          $17 = HEAP32[$16>>2]|0;
          $18 = ($17|0)==(0|0);
          do {
           if (!($18)) {
            __THREW__ = 0;
            invoke_vi(26,($17|0));
            $19 = __THREW__; __THREW__ = 0;
            $20 = $19&1;
            if ($20) {
             $25 = ___cxa_find_matching_catch_4(80|0,0|0)|0;
             $26 = tempRet0;
             __ZdlPv($17);
             $$0 = $26;$$01 = $25;
             label = 28;
             break L12;
            } else {
             __ZdlPv($17);
             HEAP32[$16>>2] = 0;
             break;
            }
           }
          } while(0);
          $27 = HEAP32[$ocrdes>>2]|0;
          $28 = ($27|0)==(0|0);
          if (!($28)) {
           $29 = ((($27)) + 16|0);
           $30 = HEAP32[$29>>2]|0;
           $31 = ($30|0)==(0|0);
           if (!($31)) {
            $32 = ((($27)) + 20|0);
            $33 = HEAP32[$32>>2]|0;
            $34 = ($33|0)==($30|0);
            if ($34) {
             $44 = $30;
            } else {
             $36 = $33;
             while(1) {
              $35 = ((($36)) + -12|0);
              HEAP32[$32>>2] = $35;
              $37 = HEAP32[$35>>2]|0;
              $38 = ($37|0)==(0|0);
              if ($38) {
               $39 = $35;
              } else {
               $41 = ((($36)) + -8|0);
               $42 = HEAP32[$41>>2]|0;
               $43 = ($42|0)==($37|0);
               if (!($43)) {
                HEAP32[$41>>2] = $37;
               }
               __ZdlPv($37);
               $$pre$i$i$i$i = HEAP32[$32>>2]|0;
               $39 = $$pre$i$i$i$i;
              }
              $40 = ($39|0)==($30|0);
              if ($40) {
               break;
              } else {
               $36 = $39;
              }
             }
             $$pre$i$i = HEAP32[$29>>2]|0;
             $44 = $$pre$i$i;
            }
            __ZdlPv($44);
           }
           __ZdlPv($27);
          }
          HEAP32[$ocrdes>>2] = $11;
          $retval$0 = 0;
         }
        } while(0);
        do {
         if ((label|0) == 28) {
          $45 = (_llvm_eh_typeid_for((80|0))|0);
          $46 = ($$0|0)==($45|0);
          if ($46) {
           (___cxa_get_exception_ptr(($$01|0))|0);
           HEAP32[$0>>2] = (808);
           (___cxa_begin_catch(($$01|0))|0);
           $47 = ((($ocrdes)) + 8|0);
           HEAP32[$47>>2] = 2;
           __ZNSt9bad_allocD2Ev($0);
           ___cxa_end_catch();
           $retval$0 = -1;
           break;
          } else {
           (___cxa_begin_catch(($$01|0))|0);
           $48 = ((($ocrdes)) + 8|0);
           HEAP32[$48>>2] = 1;
           ___cxa_end_catch();
           $retval$0 = -1;
           break;
          }
         }
        } while(0);
        (_fclose($infile$0)|0);
        $$1 = $retval$0;
        STACKTOP = sp;return ($$1|0);
       }
      }
     }
     $10 = ((($ocrdes)) + 8|0);
     HEAP32[$10>>2] = 1;
     $$1 = -1;
     STACKTOP = sp;return ($$1|0);
    }
    function _OCRAD_set_utf8_format($ocrdes,$utf8) {
     $ocrdes = $ocrdes|0;
     $utf8 = $utf8|0;
     var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if ($2) {
      $3 = ((($ocrdes)) + 8|0);
      HEAP32[$3>>2] = 3;
      $$0 = -1;
      return ($$0|0);
     } else {
      $4 = ((($ocrdes)) + 41|0);
      $5 = $utf8&1;
      HEAP8[$4>>0] = $5;
      $$0 = 0;
      return ($$0|0);
     }
     return (0)|0;
    }
    function _OCRAD_set_threshold($ocrdes,$threshold) {
     $ocrdes = $ocrdes|0;
     $threshold = $threshold|0;
     var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $threshold$off = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if ($2) {
      $3 = ((($ocrdes)) + 8|0);
      HEAP32[$3>>2] = 3;
      $$0 = -1;
      return ($$0|0);
     }
     $threshold$off = (($threshold) + 1)|0;
     $4 = ($threshold$off>>>0)>(256);
     if ($4) {
      $5 = ((($ocrdes)) + 8|0);
      HEAP32[$5>>2] = 1;
      $$0 = -1;
      return ($$0|0);
     } else {
      __ZN10Page_image9thresholdEi($1,$threshold);
      $$0 = 0;
      return ($$0|0);
     }
     return (0)|0;
    }
    function _OCRAD_scale($ocrdes,$value) {
     $ocrdes = $ocrdes|0;
     $value = $value|0;
     var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if ($2) {
      $3 = ((($ocrdes)) + 8|0);
      HEAP32[$3>>2] = 3;
      $$0 = -1;
      return ($$0|0);
     }
     __THREW__ = 0;
     $4 = (invoke_iii(32,($1|0),($value|0))|0);
     $5 = __THREW__; __THREW__ = 0;
     $6 = $5&1;
     if ($6) {
      $7 = ___cxa_find_matching_catch_3(0|0)|0;
      $8 = tempRet0;
      (___cxa_begin_catch(($7|0))|0);
      ___cxa_end_catch();
     } else {
      if ($4) {
       $$0 = 0;
       return ($$0|0);
      }
     }
     $9 = ((($ocrdes)) + 8|0);
     HEAP32[$9>>2] = 1;
     $$0 = -1;
     return ($$0|0);
    }
    function _OCRAD_transform($ocrdes,$transformation) {
     $ocrdes = $ocrdes|0;
     $transformation = $transformation|0;
     var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $trans = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $trans = sp;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$1 = -1;
      STACKTOP = sp;return ($$1|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if ($2) {
      $3 = ((($ocrdes)) + 8|0);
      HEAP32[$3>>2] = 3;
      $$1 = -1;
      STACKTOP = sp;return ($$1|0);
     }
     HEAP32[$trans>>2] = 0;
     $4 = (__ZN14Transformation3setEPKc($trans,$transformation)|0);
     if ($4) {
      $5 = HEAP32[$ocrdes>>2]|0;
      __ZN10Page_image9transformERK14Transformation($5,$trans);
      $$0 = 0;
     } else {
      $$0 = -1;
     }
     $$1 = $$0;
     STACKTOP = sp;return ($$1|0);
    }
    function _OCRAD_set_exportfile($ocrdes,$filename) {
     $ocrdes = $ocrdes|0;
     $filename = $filename|0;
     var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exportfile$0 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$1 = -1;
      return ($$1|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if ($2) {
      $3 = ((($ocrdes)) + 8|0);
      HEAP32[$3>>2] = 3;
      $$1 = -1;
      return ($$1|0);
     }
     $4 = ($filename|0)==(0|0);
     if (!($4)) {
      $5 = HEAP8[$filename>>0]|0;
      $6 = ($5<<24>>24)==(0);
      if (!($6)) {
       $7 = (_strcmp($filename,860)|0);
       $8 = ($7|0)==(0);
       if ($8) {
        $9 = HEAP32[119]|0;
        $exportfile$0 = $9;
       } else {
        $10 = (_fopen($filename,865)|0);
        $exportfile$0 = $10;
       }
       $11 = ($exportfile$0|0)==(0|0);
       if (!($11)) {
        $13 = ((($ocrdes)) + 32|0);
        HEAP32[$13>>2] = $exportfile$0;
        $$1 = 0;
        return ($$1|0);
       }
      }
     }
     $12 = ((($ocrdes)) + 8|0);
     HEAP32[$12>>2] = 1;
     $$1 = -1;
     return ($$1|0);
    }
    function _OCRAD_add_filter($ocrdes,$name) {
     $ocrdes = $ocrdes|0;
     $name = $name|0;
     var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if ($2) {
      $3 = ((($ocrdes)) + 8|0);
      HEAP32[$3>>2] = 3;
      $$0 = -1;
      return ($$0|0);
     } else {
      $4 = ((($ocrdes)) + 12|0);
      (__ZN7Control10add_filterEPKcS1_($4,7360,$name)|0);
      $$0 = 0;
      return ($$0|0);
     }
     return (0)|0;
    }
    function _OCRAD_recognize($ocrdes,$layout) {
     $ocrdes = $ocrdes|0;
     $layout = $layout|0;
     var $$0 = 0, $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
     var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$1 = -1;
      return ($$1|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if ($2) {
      $3 = ((($ocrdes)) + 8|0);
      HEAP32[$3>>2] = 3;
      $$1 = -1;
      return ($$1|0);
     }
     $4 = (__ZnwjRKSt9nothrow_t(40,9440)|0);
     $5 = ($4|0)==(0|0);
     if ($5) {
      $9 = ((($ocrdes)) + 8|0);
      HEAP32[$9>>2] = 2;
      $$1 = -1;
      return ($$1|0);
     }
     $6 = ((($ocrdes)) + 12|0);
     __THREW__ = 0;
     invoke_viiiii(33,($4|0),($1|0),(7360|0),($6|0),($layout|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if ($8) {
      $10 = ___cxa_find_matching_catch_2()|0;
      $11 = tempRet0;
      __ZdlPvRKSt9nothrow_t($4,9440);
      $$0 = $11;$$01 = $10;
      ___resumeException($$01|0);
      // unreachable;
     }
     $12 = ((($ocrdes)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0|0);
     do {
      if (!($14)) {
       __THREW__ = 0;
       invoke_vi(26,($13|0));
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if (!($16)) {
        __ZdlPv($13);
        break;
       }
       $17 = ___cxa_find_matching_catch_2()|0;
       $18 = tempRet0;
       __ZdlPv($13);
       $$0 = $18;$$01 = $17;
       ___resumeException($$01|0);
       // unreachable;
      }
     } while(0);
     HEAP32[$12>>2] = $4;
     $19 = ((($ocrdes)) + 32|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     if ($21) {
      $$1 = 0;
      return ($$1|0);
     }
     __ZNK8Textpage6xprintERK7Control($4,$6);
     $$1 = 0;
     return ($$1|0);
    }
    function _OCRAD_result_blocks($ocrdes) {
     $ocrdes = $ocrdes|0;
     var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if (!($2)) {
      $3 = ((($ocrdes)) + 4|0);
      $4 = HEAP32[$3>>2]|0;
      $5 = ($4|0)==(0|0);
      if (!($5)) {
       $7 = ((($4)) + 28|0);
       $8 = ((($4)) + 32|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = HEAP32[$7>>2]|0;
       $11 = (($9) - ($10))|0;
       $12 = $11 >> 2;
       $$0 = $12;
       return ($$0|0);
      }
     }
     $6 = ((($ocrdes)) + 8|0);
     HEAP32[$6>>2] = 3;
     $$0 = -1;
     return ($$0|0);
    }
    function _OCRAD_result_lines($ocrdes,$blocknum) {
     $ocrdes = $ocrdes|0;
     $blocknum = $blocknum|0;
     var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
     var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if (!($2)) {
      $3 = ((($ocrdes)) + 4|0);
      $4 = HEAP32[$3>>2]|0;
      $5 = ($4|0)==(0|0);
      if (!($5)) {
       $7 = ($blocknum|0)<(0);
       if (!($7)) {
        $8 = ((($4)) + 28|0);
        $9 = ((($4)) + 32|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = HEAP32[$8>>2]|0;
        $12 = (($10) - ($11))|0;
        $13 = $12 >> 2;
        $14 = ($13|0)>($blocknum|0);
        if ($14) {
         $16 = (__ZNK8Textpage9textblockEi($4,$blocknum)|0);
         $17 = ((($16)) + 16|0);
         $18 = ((($16)) + 20|0);
         $19 = HEAP32[$18>>2]|0;
         $20 = HEAP32[$17>>2]|0;
         $21 = (($19) - ($20))|0;
         $22 = $21 >> 2;
         $$0 = $22;
         return ($$0|0);
        }
       }
       $15 = ((($ocrdes)) + 8|0);
       HEAP32[$15>>2] = 1;
       $$0 = -1;
       return ($$0|0);
      }
     }
     $6 = ((($ocrdes)) + 8|0);
     HEAP32[$6>>2] = 3;
     $$0 = -1;
     return ($$0|0);
    }
    function _OCRAD_result_chars_total($ocrdes) {
     $ocrdes = $ocrdes|0;
     var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
     var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$04 = 0, $c$03 = 0, $c$1$lcssa = 0, $c$11 = 0, $i$02 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if (!($2)) {
      $3 = ((($ocrdes)) + 4|0);
      $4 = HEAP32[$3>>2]|0;
      $5 = ($4|0)==(0|0);
      if (!($5)) {
       $6 = ((($4)) + 28|0);
       $7 = ((($4)) + 32|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = HEAP32[$6>>2]|0;
       $10 = (($8) - ($9))|0;
       $11 = ($10|0)>(0);
       if ($11) {
        $13 = $4;$b$04 = 0;$c$03 = 0;
       } else {
        $$0 = 0;
        return ($$0|0);
       }
       while(1) {
        $14 = (__ZNK8Textpage9textblockEi($13,$b$04)|0);
        $15 = ((($14)) + 16|0);
        $16 = ((($14)) + 20|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = HEAP32[$15>>2]|0;
        $19 = (($17) - ($18))|0;
        $20 = ($19|0)>(0);
        if ($20) {
         $c$11 = $c$03;$i$02 = 0;
         while(1) {
          $30 = HEAP32[$3>>2]|0;
          $31 = (__ZNK8Textpage9textblockEi($30,$b$04)|0);
          $32 = (__ZNK9Textblock8textlineEi($31,$i$02)|0);
          $33 = ((($32)) + 16|0);
          $34 = ((($32)) + 20|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = HEAP32[$33>>2]|0;
          $37 = (($35) - ($36))|0;
          $38 = $37 >> 2;
          $39 = (($38) + ($c$11))|0;
          $40 = (($i$02) + 1)|0;
          $41 = HEAP32[$3>>2]|0;
          $42 = (__ZNK8Textpage9textblockEi($41,$b$04)|0);
          $43 = ((($42)) + 16|0);
          $44 = ((($42)) + 20|0);
          $45 = HEAP32[$44>>2]|0;
          $46 = HEAP32[$43>>2]|0;
          $47 = (($45) - ($46))|0;
          $48 = $47 >> 2;
          $49 = ($40|0)<($48|0);
          if ($49) {
           $c$11 = $39;$i$02 = $40;
          } else {
           $c$1$lcssa = $39;
           break;
          }
         }
        } else {
         $c$1$lcssa = $c$03;
        }
        $21 = (($b$04) + 1)|0;
        $22 = HEAP32[$3>>2]|0;
        $23 = ((($22)) + 28|0);
        $24 = ((($22)) + 32|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = HEAP32[$23>>2]|0;
        $27 = (($25) - ($26))|0;
        $28 = $27 >> 2;
        $29 = ($21|0)<($28|0);
        if ($29) {
         $13 = $22;$b$04 = $21;$c$03 = $c$1$lcssa;
        } else {
         $$0 = $c$1$lcssa;
         break;
        }
       }
       return ($$0|0);
      }
     }
     $12 = ((($ocrdes)) + 8|0);
     HEAP32[$12>>2] = 3;
     $$0 = -1;
     return ($$0|0);
    }
    function _OCRAD_result_chars_block($ocrdes,$blocknum) {
     $ocrdes = $ocrdes|0;
     $blocknum = $blocknum|0;
     var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
     var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$01 = 0, $i$02 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if (!($2)) {
      $3 = ((($ocrdes)) + 4|0);
      $4 = HEAP32[$3>>2]|0;
      $5 = ($4|0)==(0|0);
      if (!($5)) {
       $7 = ($blocknum|0)<(0);
       if (!($7)) {
        $8 = ((($4)) + 28|0);
        $9 = ((($4)) + 32|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = HEAP32[$8>>2]|0;
        $12 = (($10) - ($11))|0;
        $13 = $12 >> 2;
        $14 = ($13|0)>($blocknum|0);
        if ($14) {
         $15 = (__ZNK8Textpage9textblockEi($4,$blocknum)|0);
         $16 = ((($15)) + 16|0);
         $17 = ((($15)) + 20|0);
         $18 = HEAP32[$17>>2]|0;
         $19 = HEAP32[$16>>2]|0;
         $20 = (($18) - ($19))|0;
         $21 = ($20|0)>(0);
         if ($21) {
          $c$01 = 0;$i$02 = 0;
         } else {
          $$0 = 0;
          return ($$0|0);
         }
         while(1) {
          $23 = HEAP32[$3>>2]|0;
          $24 = (__ZNK8Textpage9textblockEi($23,$blocknum)|0);
          $25 = (__ZNK9Textblock8textlineEi($24,$i$02)|0);
          $26 = ((($25)) + 16|0);
          $27 = ((($25)) + 20|0);
          $28 = HEAP32[$27>>2]|0;
          $29 = HEAP32[$26>>2]|0;
          $30 = (($28) - ($29))|0;
          $31 = $30 >> 2;
          $32 = (($31) + ($c$01))|0;
          $33 = (($i$02) + 1)|0;
          $34 = HEAP32[$3>>2]|0;
          $35 = (__ZNK8Textpage9textblockEi($34,$blocknum)|0);
          $36 = ((($35)) + 16|0);
          $37 = ((($35)) + 20|0);
          $38 = HEAP32[$37>>2]|0;
          $39 = HEAP32[$36>>2]|0;
          $40 = (($38) - ($39))|0;
          $41 = $40 >> 2;
          $42 = ($33|0)<($41|0);
          if ($42) {
           $c$01 = $32;$i$02 = $33;
          } else {
           $$0 = $32;
           break;
          }
         }
         return ($$0|0);
        }
       }
       $22 = ((($ocrdes)) + 8|0);
       HEAP32[$22>>2] = 1;
       $$0 = -1;
       return ($$0|0);
      }
     }
     $6 = ((($ocrdes)) + 8|0);
     HEAP32[$6>>2] = 3;
     $$0 = -1;
     return ($$0|0);
    }
    function _OCRAD_result_chars_line($ocrdes,$blocknum,$linenum) {
     $ocrdes = $ocrdes|0;
     $blocknum = $blocknum|0;
     $linenum = $linenum|0;
     var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if (!($2)) {
      $3 = ((($ocrdes)) + 4|0);
      $4 = HEAP32[$3>>2]|0;
      $5 = ($4|0)==(0|0);
      if (!($5)) {
       $7 = ($blocknum|0)<(0);
       if (!($7)) {
        $8 = ((($4)) + 28|0);
        $9 = ((($4)) + 32|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = HEAP32[$8>>2]|0;
        $12 = (($10) - ($11))|0;
        $13 = $12 >> 2;
        $14 = ($13|0)<=($blocknum|0);
        $15 = ($linenum|0)<(0);
        $or$cond = $15 | $14;
        if (!($or$cond)) {
         $16 = (__ZNK8Textpage9textblockEi($4,$blocknum)|0);
         $17 = ((($16)) + 16|0);
         $18 = ((($16)) + 20|0);
         $19 = HEAP32[$18>>2]|0;
         $20 = HEAP32[$17>>2]|0;
         $21 = (($19) - ($20))|0;
         $22 = $21 >> 2;
         $23 = ($22|0)>($linenum|0);
         if ($23) {
          $25 = HEAP32[$3>>2]|0;
          $26 = (__ZNK8Textpage9textblockEi($25,$blocknum)|0);
          $27 = (__ZNK9Textblock8textlineEi($26,$linenum)|0);
          $28 = ((($27)) + 16|0);
          $29 = ((($27)) + 20|0);
          $30 = HEAP32[$29>>2]|0;
          $31 = HEAP32[$28>>2]|0;
          $32 = (($30) - ($31))|0;
          $33 = $32 >> 2;
          $$0 = $33;
          return ($$0|0);
         }
        }
       }
       $24 = ((($ocrdes)) + 8|0);
       HEAP32[$24>>2] = 1;
       $$0 = -1;
       return ($$0|0);
      }
     }
     $6 = ((($ocrdes)) + 8|0);
     HEAP32[$6>>2] = 3;
     $$0 = -1;
     return ($$0|0);
    }
    function _OCRAD_result_line($ocrdes,$blocknum,$linenum) {
     $ocrdes = $ocrdes|0;
     $blocknum = $blocknum|0;
     $linenum = $linenum|0;
     var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
     var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
     var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $i1$05 = 0, $or$cond = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = 0;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if (!($2)) {
      $3 = ((($ocrdes)) + 4|0);
      $4 = HEAP32[$3>>2]|0;
      $5 = ($4|0)==(0|0);
      if (!($5)) {
       $7 = ($blocknum|0)<(0);
       if (!($7)) {
        $8 = ((($4)) + 28|0);
        $9 = ((($4)) + 32|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = HEAP32[$8>>2]|0;
        $12 = (($10) - ($11))|0;
        $13 = $12 >> 2;
        $14 = ($13|0)<=($blocknum|0);
        $15 = ($linenum|0)<(0);
        $or$cond = $15 | $14;
        if (!($or$cond)) {
         $16 = (__ZNK8Textpage9textblockEi($4,$blocknum)|0);
         $17 = ((($16)) + 16|0);
         $18 = ((($16)) + 20|0);
         $19 = HEAP32[$18>>2]|0;
         $20 = HEAP32[$17>>2]|0;
         $21 = (($19) - ($20))|0;
         $22 = $21 >> 2;
         $23 = ($22|0)>($linenum|0);
         if ($23) {
          $25 = HEAP32[$3>>2]|0;
          $26 = (__ZNK8Textpage9textblockEi($25,$blocknum)|0);
          $27 = (__ZNK9Textblock8textlineEi($26,$linenum)|0);
          $28 = ((($ocrdes)) + 44|0);
          $29 = HEAP8[$28>>0]|0;
          $30 = $29 & 1;
          $31 = ($30<<24>>24)==(0);
          if ($31) {
           $35 = ((($28)) + 1|0);
           HEAP8[$35>>0] = 0;
           HEAP8[$28>>0] = 0;
          } else {
           $32 = ((($ocrdes)) + 52|0);
           $33 = HEAP32[$32>>2]|0;
           HEAP8[$33>>0] = 0;
           $34 = ((($ocrdes)) + 48|0);
           HEAP32[$34>>2] = 0;
          }
          $36 = ((($ocrdes)) + 41|0);
          $37 = HEAP8[$36>>0]|0;
          $38 = ($37<<24>>24)==(0);
          $39 = ((($27)) + 16|0);
          $40 = ((($27)) + 20|0);
          $41 = HEAP32[$40>>2]|0;
          $42 = HEAP32[$39>>2]|0;
          $43 = (($41) - ($42))|0;
          $44 = ($43|0)>(0);
          if ($38) {
           if ($44) {
            $i$04 = 0;
            while(1) {
             $45 = (__ZNK8Textline9characterEi($27,$i$04)|0);
             $46 = (__ZNK9Character11byte_resultEv($45)|0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($28,$46);
             $47 = (($i$04) + 1)|0;
             $48 = HEAP32[$40>>2]|0;
             $49 = HEAP32[$39>>2]|0;
             $50 = (($48) - ($49))|0;
             $51 = $50 >> 2;
             $52 = ($47|0)<($51|0);
             if ($52) {
              $i$04 = $47;
             } else {
              break;
             }
            }
           }
          } else {
           if ($44) {
            $i1$05 = 0;
            while(1) {
             $53 = (__ZNK8Textline9characterEi($27,$i1$05)|0);
             $54 = (__ZNK9Character11utf8_resultEv($53)|0);
             (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($28,$54)|0);
             $55 = (($i1$05) + 1)|0;
             $56 = HEAP32[$40>>2]|0;
             $57 = HEAP32[$39>>2]|0;
             $58 = (($56) - ($57))|0;
             $59 = $58 >> 2;
             $60 = ($55|0)<($59|0);
             if ($60) {
              $i1$05 = $55;
             } else {
              break;
             }
            }
           }
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($28,10);
          $61 = HEAP8[$28>>0]|0;
          $62 = $61 & 1;
          $63 = ($62<<24>>24)==(0);
          if ($63) {
           $66 = ((($28)) + 1|0);
           $$0 = $66;
           return ($$0|0);
          } else {
           $64 = ((($ocrdes)) + 52|0);
           $65 = HEAP32[$64>>2]|0;
           $$0 = $65;
           return ($$0|0);
          }
         }
        }
       }
       $24 = ((($ocrdes)) + 8|0);
       HEAP32[$24>>2] = 1;
       $$0 = 0;
       return ($$0|0);
      }
     }
     $6 = ((($ocrdes)) + 8|0);
     HEAP32[$6>>2] = 3;
     $$0 = 0;
     return ($$0|0);
    }
    function _OCRAD_result_first_character($ocrdes) {
     $ocrdes = $ocrdes|0;
     var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($ocrdes|0)==(0|0);
     if ($0) {
      $$0 = -1;
      return ($$0|0);
     }
     $1 = HEAP32[$ocrdes>>2]|0;
     $2 = ($1|0)==(0|0);
     if (!($2)) {
      $3 = ((($ocrdes)) + 4|0);
      $4 = HEAP32[$3>>2]|0;
      $5 = ($4|0)==(0|0);
      if (!($5)) {
       $7 = ((($4)) + 28|0);
       $8 = ((($4)) + 32|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = HEAP32[$7>>2]|0;
       $11 = (($9) - ($10))|0;
       $12 = ($11|0)>(0);
       if (!($12)) {
        $$0 = 0;
        return ($$0|0);
       }
       $13 = (__ZNK8Textpage9textblockEi($4,0)|0);
       $14 = ((($13)) + 16|0);
       $15 = ((($13)) + 20|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[$14>>2]|0;
       $18 = (($16) - ($17))|0;
       $19 = ($18|0)>(0);
       if (!($19)) {
        $$0 = 0;
        return ($$0|0);
       }
       $20 = HEAP32[$3>>2]|0;
       $21 = (__ZNK8Textpage9textblockEi($20,0)|0);
       $22 = (__ZNK9Textblock8textlineEi($21,0)|0);
       $23 = (__ZNK8Textline9characterEi($22,0)|0);
       $24 = ((($23)) + 28|0);
       $25 = ((($23)) + 32|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = HEAP32[$24>>2]|0;
       $28 = ($26|0)==($27|0);
       if ($28) {
        $$0 = 0;
        return ($$0|0);
       }
       $29 = ((($ocrdes)) + 41|0);
       $30 = HEAP8[$29>>0]|0;
       $31 = ($30<<24>>24)==(0);
       $32 = (__ZNK9Character5guessEi($23,0)|0);
       $33 = HEAP32[$32>>2]|0;
       if (!($31)) {
        $$0 = $33;
        return ($$0|0);
       }
       $34 = (__ZN3UCS11map_to_byteEi($33)|0);
       $35 = $34&255;
       $$0 = $35;
       return ($$0|0);
      }
     }
     $6 = ((($ocrdes)) + 8|0);
     HEAP32[$6>>2] = 3;
     $$0 = -1;
     return ($$0|0);
    }
    function ___clang_call_terminate($0) {
     $0 = $0|0;
     var label = 0, sp = 0;
     sp = STACKTOP;
     (___cxa_begin_catch(($0|0))|0);
     __ZSt9terminatev();
     // unreachable;
    }
    function __ZN10Page_image7read_p1EP8_IO_FILEb($this,$f,$invert) {
     $this = $this|0;
     $f = $f|0;
     $invert = $invert|0;
     var $$0$i$us = 0, $$0$i1$i$i$us = 0, $$0$i1$i$i10$us = 0, $$0$i14$us = 0, $$0$i2$i$i$us = 0, $$0$i2$i$i11$us = 0, $$in$i$i$us = 0, $$in$i$i7$us = 0, $$pre$i$i$us = 0, $$pre$i$i3$us = 0, $$pre$i$us = 0, $$pre$i5$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$i6$usZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
     var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
     var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
     var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
     var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
     var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
     var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
     var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch$0$i$us = 0, $ch$0$i$us$lcssa = 0, $ch$0$i18$us = 0, $ch$0$i18$us$lcssa = 0, $col$029$us = 0, $col2$026$us = 0;
     var $row$032$us = 0, $row1$027$us = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 28|0);
     HEAP8[$0>>0] = 1;
     $1 = ((($this)) + 29|0);
     HEAP8[$1>>0] = 0;
     $2 = ((($this)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ((($this)) + 4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = (($3) + 1)|0;
     $7 = (($6) - ($5))|0;
     $8 = ((($this)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP32[$this>>2]|0;
     $11 = (($9) + 1)|0;
     $12 = (($11) - ($10))|0;
     $13 = ($7|0)>(0);
     if ($invert) {
      if (!($13)) {
       return;
      }
      $72 = ($12|0)>(0);
      $73 = ((($this)) + 16|0);
      if ($72) {
       $row1$027$us = 0;
      } else {
       return;
      }
      L8: while(1) {
       $col2$026$us = 0;
       while(1) {
        $74 = HEAP32[$73>>2]|0;
        $75 = (($74) + (($row1$027$us*12)|0)|0);
        while(1) {
         $76 = (_fgetc($f)|0);
         $77 = ($76|0)==(-1);
         if ($77) {
          label = 53;
          break L8;
         }
         $78 = $76&255;
         $79 = ($78<<24>>24)==(35);
         if ($79) {
          while(1) {
           $80 = (_fgetc($f)|0);
           $81 = ($80|0)==(-1);
           if ($81) {
            label = 54;
            break L8;
           }
           $82 = $80&255;
           $83 = ($82<<24>>24)==(10);
           if ($83) {
            $ch$0$i18$us = 10;
            break;
           }
          }
         } else {
          $ch$0$i18$us = $78;
         }
         $84 = $ch$0$i18$us&255;
         $85 = (_isspace($84)|0);
         $86 = ($85|0)==(0);
         if ($86) {
          $ch$0$i18$us$lcssa = $ch$0$i18$us;
          break;
         }
        }
        switch ($ch$0$i18$us$lcssa<<24>>24) {
        case 48:  {
         $$0$i14$us = 0;
         break;
        }
        case 49:  {
         $$0$i14$us = 1;
         break;
        }
        default: {
         label = 55;
         break L8;
        }
        }
        $87 = (((($74) + (($row1$027$us*12)|0)|0)) + 4|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (((($74) + (($row1$027$us*12)|0)|0)) + 8|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = ($88|0)==($90|0);
        $92 = $90;
        if ($91) {
         $95 = $88;
         $96 = HEAP32[$75>>2]|0;
         $97 = (($95) - ($96))|0;
         $98 = (($97) + 1)|0;
         $99 = ($98|0)<(0);
         if ($99) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($75);
          $$pre$i$i$us = HEAP32[$75>>2]|0;
          $$pre$i$us = HEAP32[$89>>2]|0;
          $$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $89;$102 = $$pre$i$us;
         } else {
          $$in$i$i$us = $96;$$pre$phi$i$usZ2D = $89;$102 = $92;
         }
         $100 = $$in$i$i$us;
         $101 = (($102) - ($$in$i$i$us))|0;
         $103 = ($101>>>0)<(1073741823);
         if ($103) {
          $106 = $101 << 1;
          $107 = ($106>>>0)<($98>>>0);
          $108 = $107 ? $98 : $106;
          $109 = HEAP32[$87>>2]|0;
          $110 = (($109) - ($$in$i$i$us))|0;
          $111 = ($108|0)==(0);
          if ($111) {
           $$0$i2$i$i$us = 0;$114 = 0;$115 = $110;$121 = $109;
          } else {
           $$0$i1$i$i$us = $108;$138 = $109;$139 = $110;
           label = 44;
          }
         } else {
          $104 = HEAP32[$87>>2]|0;
          $105 = (($104) - ($$in$i$i$us))|0;
          $$0$i1$i$i$us = 2147483647;$138 = $104;$139 = $105;
          label = 44;
         }
         if ((label|0) == 44) {
          label = 0;
          $112 = (__Znwj($$0$i1$i$i$us)|0);
          $$0$i2$i$i$us = $$0$i1$i$i$us;$114 = $112;$115 = $139;$121 = $138;
         }
         $113 = (($114) + ($115)|0);
         $116 = (($114) + ($$0$i2$i$i$us)|0);
         $117 = $116;
         HEAP8[$113>>0] = $$0$i14$us;
         $118 = ((($113)) + 1|0);
         $119 = $118;
         $120 = (($121) - ($$in$i$i$us))|0;
         $122 = (0 - ($120))|0;
         $123 = (($113) + ($122)|0);
         $124 = $123;
         _memcpy(($123|0),($100|0),($120|0))|0;
         HEAP32[$75>>2] = $124;
         HEAP32[$87>>2] = $119;
         HEAP32[$$pre$phi$i$usZ2D>>2] = $117;
         $125 = ($$in$i$i$us|0)==(0);
         if (!($125)) {
          __ZdlPv($100);
         }
        } else {
         HEAP8[$88>>0] = $$0$i14$us;
         $93 = HEAP32[$87>>2]|0;
         $94 = ((($93)) + 1|0);
         HEAP32[$87>>2] = $94;
        }
        $126 = (($col2$026$us) + 1)|0;
        $127 = ($126|0)<($12|0);
        if ($127) {
         $col2$026$us = $126;
        } else {
         break;
        }
       }
       $128 = (($row1$027$us) + 1)|0;
       $129 = ($128|0)<($7|0);
       if ($129) {
        $row1$027$us = $128;
       } else {
        label = 56;
        break;
       }
      }
      if ((label|0) == 53) {
       $133 = (___cxa_allocate_exception(4)|0);
       HEAP32[$133>>2] = 872;
       ___cxa_throw(($133|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 54) {
       $134 = (___cxa_allocate_exception(4)|0);
       HEAP32[$134>>2] = 872;
       ___cxa_throw(($134|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 55) {
       $135 = (___cxa_allocate_exception(4)|0);
       HEAP32[$135>>2] = 923;
       ___cxa_throw(($135|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 56) {
       return;
      }
     } else {
      if (!($13)) {
       return;
      }
      $14 = ($12|0)>(0);
      $15 = ((($this)) + 16|0);
      if ($14) {
       $row$032$us = 0;
      } else {
       return;
      }
      L51: while(1) {
       $col$029$us = 0;
       while(1) {
        $16 = HEAP32[$15>>2]|0;
        $17 = (($16) + (($row$032$us*12)|0)|0);
        while(1) {
         $18 = (_fgetc($f)|0);
         $19 = ($18|0)==(-1);
         if ($19) {
          label = 50;
          break L51;
         }
         $20 = $18&255;
         $21 = ($20<<24>>24)==(35);
         if ($21) {
          while(1) {
           $22 = (_fgetc($f)|0);
           $23 = ($22|0)==(-1);
           if ($23) {
            label = 51;
            break L51;
           }
           $24 = $22&255;
           $25 = ($24<<24>>24)==(10);
           if ($25) {
            $ch$0$i$us = 10;
            break;
           }
          }
         } else {
          $ch$0$i$us = $20;
         }
         $26 = $ch$0$i$us&255;
         $27 = (_isspace($26)|0);
         $28 = ($27|0)==(0);
         if ($28) {
          $ch$0$i$us$lcssa = $ch$0$i$us;
          break;
         }
        }
        switch ($ch$0$i$us$lcssa<<24>>24) {
        case 48:  {
         $$0$i$us = 1;
         break;
        }
        case 49:  {
         $$0$i$us = 0;
         break;
        }
        default: {
         label = 52;
         break L51;
        }
        }
        $29 = (((($16) + (($row$032$us*12)|0)|0)) + 4|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = (((($16) + (($row$032$us*12)|0)|0)) + 8|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = ($30|0)==($32|0);
        $34 = $32;
        if ($33) {
         $37 = $30;
         $38 = HEAP32[$17>>2]|0;
         $39 = (($37) - ($38))|0;
         $40 = (($39) + 1)|0;
         $41 = ($40|0)<(0);
         if ($41) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($17);
          $$pre$i$i3$us = HEAP32[$17>>2]|0;
          $$pre$i5$us = HEAP32[$31>>2]|0;
          $$in$i$i7$us = $$pre$i$i3$us;$$pre$phi$i6$usZ2D = $31;$44 = $$pre$i5$us;
         } else {
          $$in$i$i7$us = $38;$$pre$phi$i6$usZ2D = $31;$44 = $34;
         }
         $42 = $$in$i$i7$us;
         $43 = (($44) - ($$in$i$i7$us))|0;
         $45 = ($43>>>0)<(1073741823);
         if ($45) {
          $48 = $43 << 1;
          $49 = ($48>>>0)<($40>>>0);
          $50 = $49 ? $40 : $48;
          $51 = HEAP32[$29>>2]|0;
          $52 = (($51) - ($$in$i$i7$us))|0;
          $53 = ($50|0)==(0);
          if ($53) {
           $$0$i2$i$i11$us = 0;$56 = 0;$57 = $52;$63 = $51;
          } else {
           $$0$i1$i$i10$us = $50;$136 = $51;$137 = $52;
           label = 20;
          }
         } else {
          $46 = HEAP32[$29>>2]|0;
          $47 = (($46) - ($$in$i$i7$us))|0;
          $$0$i1$i$i10$us = 2147483647;$136 = $46;$137 = $47;
          label = 20;
         }
         if ((label|0) == 20) {
          label = 0;
          $54 = (__Znwj($$0$i1$i$i10$us)|0);
          $$0$i2$i$i11$us = $$0$i1$i$i10$us;$56 = $54;$57 = $137;$63 = $136;
         }
         $55 = (($56) + ($57)|0);
         $58 = (($56) + ($$0$i2$i$i11$us)|0);
         $59 = $58;
         HEAP8[$55>>0] = $$0$i$us;
         $60 = ((($55)) + 1|0);
         $61 = $60;
         $62 = (($63) - ($$in$i$i7$us))|0;
         $64 = (0 - ($62))|0;
         $65 = (($55) + ($64)|0);
         $66 = $65;
         _memcpy(($65|0),($42|0),($62|0))|0;
         HEAP32[$17>>2] = $66;
         HEAP32[$29>>2] = $61;
         HEAP32[$$pre$phi$i6$usZ2D>>2] = $59;
         $67 = ($$in$i$i7$us|0)==(0);
         if (!($67)) {
          __ZdlPv($42);
         }
        } else {
         HEAP8[$30>>0] = $$0$i$us;
         $35 = HEAP32[$29>>2]|0;
         $36 = ((($35)) + 1|0);
         HEAP32[$29>>2] = $36;
        }
        $68 = (($col$029$us) + 1)|0;
        $69 = ($68|0)<($12|0);
        if ($69) {
         $col$029$us = $68;
        } else {
         break;
        }
       }
       $70 = (($row$032$us) + 1)|0;
       $71 = ($70|0)<($7|0);
       if ($71) {
        $row$032$us = $70;
       } else {
        label = 56;
        break;
       }
      }
      if ((label|0) == 50) {
       $130 = (___cxa_allocate_exception(4)|0);
       HEAP32[$130>>2] = 872;
       ___cxa_throw(($130|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 51) {
       $131 = (___cxa_allocate_exception(4)|0);
       HEAP32[$131>>2] = 872;
       ___cxa_throw(($131|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 52) {
       $132 = (___cxa_allocate_exception(4)|0);
       HEAP32[$132>>2] = 923;
       ___cxa_throw(($132|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 56) {
       return;
      }
     }
    }
    function __ZN10Page_image7read_p4EP8_IO_FILEb($this,$f,$invert) {
     $this = $this|0;
     $f = $f|0;
     $invert = $invert|0;
     var $$0$i1$i$i$us = 0, $$0$i1$i$i12$us = 0, $$0$i2$i$i$us = 0, $$0$i2$i$i13$us = 0, $$in$i$i$us = 0, $$in$i$i9$us = 0, $$pre$i$i$us = 0, $$pre$i$i5$us = 0, $$pre$i$us = 0, $$pre$i7$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$i8$usZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
     var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
     var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
     var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
     var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
     var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$030$us = 0, $col$1$lcssa$us = 0, $col$127$us = 0, $col2$022$us = 0, $col2$1$lcssa$us = 0, $col2$121$us = 0, $not$$us = 0, $or$cond$us = 0, $or$cond2$us = 0, $row$032$us = 0, $row1$024$us = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 28|0);
     HEAP8[$0>>0] = 1;
     $1 = ((($this)) + 29|0);
     HEAP8[$1>>0] = 0;
     $2 = ((($this)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ((($this)) + 4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = (($3) + 1)|0;
     $7 = (($6) - ($5))|0;
     $8 = ((($this)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP32[$this>>2]|0;
     $11 = (($9) + 1)|0;
     $12 = (($11) - ($10))|0;
     $13 = ($7|0)>(0);
     if ($invert) {
      if (!($13)) {
       return;
      }
      $70 = ($12|0)>(0);
      $71 = ((($this)) + 16|0);
      if ($70) {
       $row1$024$us = 0;
      } else {
       return;
      }
      L8: while(1) {
       $col2$022$us = 0;
       while(1) {
        $72 = (_fgetc($f)|0);
        $73 = ($72|0)==(-1);
        if ($73) {
         label = 41;
         break L8;
        }
        $123 = ($col2$022$us|0)<($12|0);
        if ($123) {
         $77 = 128;$col2$121$us = $col2$022$us;
         while(1) {
          $74 = HEAP32[$71>>2]|0;
          $75 = (($74) + (($row1$024$us*12)|0)|0);
          $76 = $77 & $72;
          $78 = ($76|0)!=(0);
          $79 = $78&1;
          $80 = (((($74) + (($row1$024$us*12)|0)|0)) + 4|0);
          $81 = HEAP32[$80>>2]|0;
          $82 = (((($74) + (($row1$024$us*12)|0)|0)) + 8|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = ($81|0)==($83|0);
          $85 = $83;
          if ($84) {
           $88 = $81;
           $89 = HEAP32[$75>>2]|0;
           $90 = (($88) - ($89))|0;
           $91 = (($90) + 1)|0;
           $92 = ($91|0)<(0);
           if ($92) {
            __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($75);
            $$pre$i$i$us = HEAP32[$75>>2]|0;
            $$pre$i$us = HEAP32[$82>>2]|0;
            $$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $82;$95 = $$pre$i$us;
           } else {
            $$in$i$i$us = $89;$$pre$phi$i$usZ2D = $82;$95 = $85;
           }
           $93 = $$in$i$i$us;
           $94 = (($95) - ($$in$i$i$us))|0;
           $96 = ($94>>>0)<(1073741823);
           if ($96) {
            $99 = $94 << 1;
            $100 = ($99>>>0)<($91>>>0);
            $101 = $100 ? $91 : $99;
            $102 = HEAP32[$80>>2]|0;
            $103 = (($102) - ($$in$i$i$us))|0;
            $104 = ($101|0)==(0);
            if ($104) {
             $$0$i2$i$i$us = 0;$107 = 0;$108 = $103;$114 = $102;
            } else {
             $$0$i1$i$i$us = $101;$131 = $102;$132 = $103;
             label = 32;
            }
           } else {
            $97 = HEAP32[$80>>2]|0;
            $98 = (($97) - ($$in$i$i$us))|0;
            $$0$i1$i$i$us = 2147483647;$131 = $97;$132 = $98;
            label = 32;
           }
           if ((label|0) == 32) {
            label = 0;
            $105 = (__Znwj($$0$i1$i$i$us)|0);
            $$0$i2$i$i$us = $$0$i1$i$i$us;$107 = $105;$108 = $132;$114 = $131;
           }
           $106 = (($107) + ($108)|0);
           $109 = (($107) + ($$0$i2$i$i$us)|0);
           $110 = $109;
           HEAP8[$106>>0] = $79;
           $111 = ((($106)) + 1|0);
           $112 = $111;
           $113 = (($114) - ($$in$i$i$us))|0;
           $115 = (0 - ($113))|0;
           $116 = (($106) + ($115)|0);
           $117 = $116;
           _memcpy(($116|0),($93|0),($113|0))|0;
           HEAP32[$75>>2] = $117;
           HEAP32[$80>>2] = $112;
           HEAP32[$$pre$phi$i$usZ2D>>2] = $110;
           $118 = ($$in$i$i$us|0)==(0);
           if (!($118)) {
            __ZdlPv($93);
           }
          } else {
           HEAP8[$81>>0] = $79;
           $86 = HEAP32[$80>>2]|0;
           $87 = ((($86)) + 1|0);
           HEAP32[$80>>2] = $87;
          }
          $119 = $77 >>> 1;
          $120 = (($col2$121$us) + 1)|0;
          $121 = ($119|0)!=(0);
          $122 = ($120|0)<($12|0);
          $or$cond2$us = $122 & $121;
          if ($or$cond2$us) {
           $77 = $119;$col2$121$us = $120;
          } else {
           $col2$1$lcssa$us = $120;
           break;
          }
         }
        } else {
         $col2$1$lcssa$us = $col2$022$us;
        }
        $124 = ($col2$1$lcssa$us|0)<($12|0);
        if ($124) {
         $col2$022$us = $col2$1$lcssa$us;
        } else {
         break;
        }
       }
       $125 = (($row1$024$us) + 1)|0;
       $126 = ($125|0)<($7|0);
       if ($126) {
        $row1$024$us = $125;
       } else {
        label = 42;
        break;
       }
      }
      if ((label|0) == 41) {
       $128 = (___cxa_allocate_exception(4)|0);
       HEAP32[$128>>2] = 872;
       ___cxa_throw(($128|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 42) {
       return;
      }
     } else {
      if (!($13)) {
       return;
      }
      $14 = ($12|0)>(0);
      $15 = ((($this)) + 16|0);
      if ($14) {
       $row$032$us = 0;
      } else {
       return;
      }
      L42: while(1) {
       $col$030$us = 0;
       while(1) {
        $16 = (_fgetc($f)|0);
        $17 = ($16|0)==(-1);
        if ($17) {
         label = 40;
         break L42;
        }
        $66 = ($col$030$us|0)<($12|0);
        if ($66) {
         $21 = 128;$col$127$us = $col$030$us;
         while(1) {
          $18 = HEAP32[$15>>2]|0;
          $19 = (($18) + (($row$032$us*12)|0)|0);
          $20 = $21 & $16;
          $not$$us = ($20|0)==(0);
          $22 = $not$$us&1;
          $23 = (((($18) + (($row$032$us*12)|0)|0)) + 4|0);
          $24 = HEAP32[$23>>2]|0;
          $25 = (((($18) + (($row$032$us*12)|0)|0)) + 8|0);
          $26 = HEAP32[$25>>2]|0;
          $27 = ($24|0)==($26|0);
          $28 = $26;
          if ($27) {
           $31 = $24;
           $32 = HEAP32[$19>>2]|0;
           $33 = (($31) - ($32))|0;
           $34 = (($33) + 1)|0;
           $35 = ($34|0)<(0);
           if ($35) {
            __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($19);
            $$pre$i$i5$us = HEAP32[$19>>2]|0;
            $$pre$i7$us = HEAP32[$25>>2]|0;
            $$in$i$i9$us = $$pre$i$i5$us;$$pre$phi$i8$usZ2D = $25;$38 = $$pre$i7$us;
           } else {
            $$in$i$i9$us = $32;$$pre$phi$i8$usZ2D = $25;$38 = $28;
           }
           $36 = $$in$i$i9$us;
           $37 = (($38) - ($$in$i$i9$us))|0;
           $39 = ($37>>>0)<(1073741823);
           if ($39) {
            $42 = $37 << 1;
            $43 = ($42>>>0)<($34>>>0);
            $44 = $43 ? $34 : $42;
            $45 = HEAP32[$23>>2]|0;
            $46 = (($45) - ($$in$i$i9$us))|0;
            $47 = ($44|0)==(0);
            if ($47) {
             $$0$i2$i$i13$us = 0;$50 = 0;$51 = $46;$57 = $45;
            } else {
             $$0$i1$i$i12$us = $44;$129 = $45;$130 = $46;
             label = 13;
            }
           } else {
            $40 = HEAP32[$23>>2]|0;
            $41 = (($40) - ($$in$i$i9$us))|0;
            $$0$i1$i$i12$us = 2147483647;$129 = $40;$130 = $41;
            label = 13;
           }
           if ((label|0) == 13) {
            label = 0;
            $48 = (__Znwj($$0$i1$i$i12$us)|0);
            $$0$i2$i$i13$us = $$0$i1$i$i12$us;$50 = $48;$51 = $130;$57 = $129;
           }
           $49 = (($50) + ($51)|0);
           $52 = (($50) + ($$0$i2$i$i13$us)|0);
           $53 = $52;
           HEAP8[$49>>0] = $22;
           $54 = ((($49)) + 1|0);
           $55 = $54;
           $56 = (($57) - ($$in$i$i9$us))|0;
           $58 = (0 - ($56))|0;
           $59 = (($49) + ($58)|0);
           $60 = $59;
           _memcpy(($59|0),($36|0),($56|0))|0;
           HEAP32[$19>>2] = $60;
           HEAP32[$23>>2] = $55;
           HEAP32[$$pre$phi$i8$usZ2D>>2] = $53;
           $61 = ($$in$i$i9$us|0)==(0);
           if (!($61)) {
            __ZdlPv($36);
           }
          } else {
           HEAP8[$24>>0] = $22;
           $29 = HEAP32[$23>>2]|0;
           $30 = ((($29)) + 1|0);
           HEAP32[$23>>2] = $30;
          }
          $62 = $21 >>> 1;
          $63 = (($col$127$us) + 1)|0;
          $64 = ($62|0)!=(0);
          $65 = ($63|0)<($12|0);
          $or$cond$us = $65 & $64;
          if ($or$cond$us) {
           $21 = $62;$col$127$us = $63;
          } else {
           $col$1$lcssa$us = $63;
           break;
          }
         }
        } else {
         $col$1$lcssa$us = $col$030$us;
        }
        $67 = ($col$1$lcssa$us|0)<($12|0);
        if ($67) {
         $col$030$us = $col$1$lcssa$us;
        } else {
         break;
        }
       }
       $68 = (($row$032$us) + 1)|0;
       $69 = ($68|0)<($7|0);
       if ($69) {
        $row$032$us = $68;
       } else {
        label = 42;
        break;
       }
      }
      if ((label|0) == 40) {
       $127 = (___cxa_allocate_exception(4)|0);
       HEAP32[$127>>2] = 872;
       ___cxa_throw(($127|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 42) {
       return;
      }
     }
    }
    function __ZN10Page_image7read_p2EP8_IO_FILEb($this,$f,$invert) {
     $this = $this|0;
     $f = $f|0;
     $invert = $invert|0;
     var $$ = 0, $$$us = 0, $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
     var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
     var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
     var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
     var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
     var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
     var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
     var $98 = 0, $99 = 0, $col$02 = 0, $col$02$us = 0, $row$03 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
     $1 = ($0|0)==(0);
     if ($1) {
      $2 = (___cxa_allocate_exception(4)|0);
      HEAP32[$2>>2] = 1035;
      ___cxa_throw(($2|0),(8|0),(0|0));
      // unreachable;
     }
     $3 = ($0|0)>(255);
     $4 = $3 ? 255 : $0;
     $5 = $4&255;
     $6 = ((($this)) + 28|0);
     HEAP8[$6>>0] = $5;
     $7 = $4 >>> 1;
     $8 = $7 & 127;
     $9 = $8&255;
     $10 = ((($this)) + 29|0);
     HEAP8[$10>>0] = $9;
     $11 = ((($this)) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($this)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($12) + 1)|0;
     $16 = (($15) - ($14))|0;
     $17 = ((($this)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[$this>>2]|0;
     $20 = (($18) + 1)|0;
     $21 = (($20) - ($19))|0;
     $22 = ($16|0)>(0);
     if (!($22)) {
      return;
     }
     $23 = ($21|0)>(0);
     $24 = ((($this)) + 16|0);
     $row$03 = 0;
     L7: while(1) {
      if ($23) {
       if ($3) {
        $col$02$us = 0;
        while(1) {
         $25 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
         $26 = ($0|0)<($25|0);
         if ($26) {
          label = 23;
          break L7;
         }
         $27 = (($0) - ($25))|0;
         $$$us = $invert ? $27 : $25;
         $28 = ($$$us*255)|0;
         $29 = (($28|0) / ($0|0))&-1;
         $30 = HEAP32[$24>>2]|0;
         $31 = (($30) + (($row$03*12)|0)|0);
         $32 = $29&255;
         $33 = (((($30) + (($row$03*12)|0)|0)) + 4|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = (((($30) + (($row$03*12)|0)|0)) + 8|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         $38 = $36;
         if ($37) {
          $41 = $34;
          $42 = HEAP32[$31>>2]|0;
          $43 = (($41) - ($42))|0;
          $44 = (($43) + 1)|0;
          $45 = ($44|0)<(0);
          if ($45) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($31);
           $$pre$i$i$us = HEAP32[$31>>2]|0;
           $$pre$i$us = HEAP32[$35>>2]|0;
           $$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $35;$48 = $$pre$i$us;
          } else {
           $$in$i$i$us = $42;$$pre$phi$i$usZ2D = $35;$48 = $38;
          }
          $46 = $$in$i$i$us;
          $47 = (($48) - ($$in$i$i$us))|0;
          $49 = ($47>>>0)<(1073741823);
          if ($49) {
           $52 = $47 << 1;
           $53 = ($52>>>0)<($44>>>0);
           $54 = $53 ? $44 : $52;
           $55 = HEAP32[$33>>2]|0;
           $56 = (($55) - ($$in$i$i$us))|0;
           $57 = ($54|0)==(0);
           if ($57) {
            $$0$i2$i$i$us = 0;$60 = 0;$61 = $56;$67 = $55;
           } else {
            $$0$i1$i$i$us = $54;$124 = $55;$125 = $56;
            label = 16;
           }
          } else {
           $50 = HEAP32[$33>>2]|0;
           $51 = (($50) - ($$in$i$i$us))|0;
           $$0$i1$i$i$us = 2147483647;$124 = $50;$125 = $51;
           label = 16;
          }
          if ((label|0) == 16) {
           label = 0;
           $58 = (__Znwj($$0$i1$i$i$us)|0);
           $$0$i2$i$i$us = $$0$i1$i$i$us;$60 = $58;$61 = $125;$67 = $124;
          }
          $59 = (($60) + ($61)|0);
          $62 = (($60) + ($$0$i2$i$i$us)|0);
          $63 = $62;
          HEAP8[$59>>0] = $32;
          $64 = ((($59)) + 1|0);
          $65 = $64;
          $66 = (($67) - ($$in$i$i$us))|0;
          $68 = (0 - ($66))|0;
          $69 = (($59) + ($68)|0);
          $70 = $69;
          _memcpy(($69|0),($46|0),($66|0))|0;
          HEAP32[$31>>2] = $70;
          HEAP32[$33>>2] = $65;
          HEAP32[$$pre$phi$i$usZ2D>>2] = $63;
          $71 = ($$in$i$i$us|0)==(0);
          if (!($71)) {
           __ZdlPv($46);
          }
         } else {
          HEAP8[$34>>0] = $32;
          $39 = HEAP32[$33>>2]|0;
          $40 = ((($39)) + 1|0);
          HEAP32[$33>>2] = $40;
         }
         $72 = (($col$02$us) + 1)|0;
         $73 = ($72|0)<($21|0);
         if ($73) {
          $col$02$us = $72;
         } else {
          break;
         }
        }
       } else {
        $col$02 = 0;
        while(1) {
         $76 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
         $77 = ($0|0)<($76|0);
         if ($77) {
          label = 23;
          break L7;
         }
         $79 = (($0) - ($76))|0;
         $$ = $invert ? $79 : $76;
         $80 = HEAP32[$24>>2]|0;
         $81 = (($80) + (($row$03*12)|0)|0);
         $82 = $$&255;
         $83 = (((($80) + (($row$03*12)|0)|0)) + 4|0);
         $84 = HEAP32[$83>>2]|0;
         $85 = (((($80) + (($row$03*12)|0)|0)) + 8|0);
         $86 = HEAP32[$85>>2]|0;
         $87 = ($84|0)==($86|0);
         $88 = $86;
         if ($87) {
          $91 = $84;
          $92 = HEAP32[$81>>2]|0;
          $93 = (($91) - ($92))|0;
          $94 = (($93) + 1)|0;
          $95 = ($94|0)<(0);
          if ($95) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($81);
           $$pre$i$i = HEAP32[$81>>2]|0;
           $$pre$i = HEAP32[$85>>2]|0;
           $$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $85;$98 = $$pre$i;
          } else {
           $$in$i$i = $92;$$pre$phi$iZ2D = $85;$98 = $88;
          }
          $96 = $$in$i$i;
          $97 = (($98) - ($$in$i$i))|0;
          $99 = ($97>>>0)<(1073741823);
          if ($99) {
           $102 = $97 << 1;
           $103 = ($102>>>0)<($94>>>0);
           $104 = $103 ? $94 : $102;
           $105 = HEAP32[$83>>2]|0;
           $106 = (($105) - ($$in$i$i))|0;
           $107 = ($104|0)==(0);
           if ($107) {
            $$0$i2$i$i = 0;$110 = 0;$111 = $106;$117 = $105;
           } else {
            $$0$i1$i$i = $104;$126 = $105;$127 = $106;
            label = 32;
           }
          } else {
           $100 = HEAP32[$83>>2]|0;
           $101 = (($100) - ($$in$i$i))|0;
           $$0$i1$i$i = 2147483647;$126 = $100;$127 = $101;
           label = 32;
          }
          if ((label|0) == 32) {
           label = 0;
           $108 = (__Znwj($$0$i1$i$i)|0);
           $$0$i2$i$i = $$0$i1$i$i;$110 = $108;$111 = $127;$117 = $126;
          }
          $109 = (($110) + ($111)|0);
          $112 = (($110) + ($$0$i2$i$i)|0);
          $113 = $112;
          HEAP8[$109>>0] = $82;
          $114 = ((($109)) + 1|0);
          $115 = $114;
          $116 = (($117) - ($$in$i$i))|0;
          $118 = (0 - ($116))|0;
          $119 = (($109) + ($118)|0);
          $120 = $119;
          _memcpy(($119|0),($96|0),($116|0))|0;
          HEAP32[$81>>2] = $120;
          HEAP32[$83>>2] = $115;
          HEAP32[$$pre$phi$iZ2D>>2] = $113;
          $121 = ($$in$i$i|0)==(0);
          if (!($121)) {
           __ZdlPv($96);
          }
         } else {
          HEAP8[$84>>0] = $82;
          $89 = HEAP32[$83>>2]|0;
          $90 = ((($89)) + 1|0);
          HEAP32[$83>>2] = $90;
         }
         $122 = (($col$02) + 1)|0;
         $123 = ($122|0)<($21|0);
         if ($123) {
          $col$02 = $122;
         } else {
          break;
         }
        }
       }
      }
      $74 = (($row$03) + 1)|0;
      $75 = ($74|0)<($16|0);
      if ($75) {
       $row$03 = $74;
      } else {
       label = 20;
       break;
      }
     }
     if ((label|0) == 20) {
      return;
     }
     else if ((label|0) == 23) {
      $78 = (___cxa_allocate_exception(4)|0);
      HEAP32[$78>>2] = 1060;
      ___cxa_throw(($78|0),(8|0),(0|0));
      // unreachable;
     }
    }
    function __ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f) {
     $f = $f|0;
     var $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
     var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$0 = 0, $ch$0$i = 0, $ch$0$i$lcssa = 0, $ch$0$i5 = 0, $i$0 = 0;
     var $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     L1: while(1) {
      $0 = (_fgetc($f)|0);
      $1 = ($0|0)==(-1);
      if ($1) {
       label = 3;
       break;
      }
      $3 = $0&255;
      $4 = ($3<<24>>24)==(35);
      if ($4) {
       while(1) {
        $5 = (_fgetc($f)|0);
        $6 = ($5|0)==(-1);
        if ($6) {
         label = 6;
         break L1;
        }
        $8 = $5&255;
        $9 = ($8<<24>>24)==(10);
        if ($9) {
         $ch$0$i = 10;
         break;
        }
       }
      } else {
       $ch$0$i = $3;
      }
      $10 = $ch$0$i&255;
      $11 = (_isspace($10)|0);
      $12 = ($11|0)==(0);
      if ($12) {
       $$lcssa = $10;$ch$0$i$lcssa = $ch$0$i;
       label = 9;
       break;
      }
     }
     if ((label|0) == 3) {
      $2 = (___cxa_allocate_exception(4)|0);
      HEAP32[$2>>2] = 872;
      ___cxa_throw(($2|0),(8|0),(0|0));
      // unreachable;
     }
     else if ((label|0) == 6) {
      $7 = (___cxa_allocate_exception(4)|0);
      HEAP32[$7>>2] = 872;
      ___cxa_throw(($7|0),(8|0),(0|0));
      // unreachable;
     }
     else if ((label|0) == 9) {
      $isdigittmp = (($$lcssa) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $ch$0 = $ch$0$i$lcssa;$i$0 = 0;
      } else {
       $13 = (___cxa_allocate_exception(4)|0);
       HEAP32[$13>>2] = 962;
       ___cxa_throw(($13|0),(8|0),(0|0));
       // unreachable;
      }
      L14: while(1) {
       $14 = $ch$0&255;
       $15 = (-2147483601 - ($14))|0;
       $16 = (($15|0) / 10)&-1;
       $17 = ($16|0)<($i$0|0);
       if ($17) {
        label = 12;
        break;
       }
       $19 = (($14) + -48)|0;
       $20 = ($i$0*10)|0;
       $21 = (($19) + ($20))|0;
       $22 = (_fgetc($f)|0);
       $23 = ($22|0)==(-1);
       if ($23) {
        label = 14;
        break;
       }
       $25 = $22&255;
       $26 = ($25<<24>>24)==(35);
       if ($26) {
        while(1) {
         $27 = (_fgetc($f)|0);
         $28 = ($27|0)==(-1);
         if ($28) {
          label = 17;
          break L14;
         }
         $30 = $27&255;
         $31 = ($30<<24>>24)==(10);
         if ($31) {
          $ch$0$i5 = 10;
          break;
         }
        }
       } else {
        $ch$0$i5 = $25;
       }
       $32 = $ch$0$i5&255;
       $isdigittmp1 = (($32) + -48)|0;
       $isdigit2 = ($isdigittmp1>>>0)<(10);
       if ($isdigit2) {
        $ch$0 = $ch$0$i5;$i$0 = $21;
       } else {
        $$lcssa19 = $21;
        label = 20;
        break;
       }
      }
      if ((label|0) == 12) {
       $18 = (___cxa_allocate_exception(4)|0);
       HEAP32[$18>>2] = 1007;
       ___cxa_throw(($18|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 14) {
       $24 = (___cxa_allocate_exception(4)|0);
       HEAP32[$24>>2] = 872;
       ___cxa_throw(($24|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 17) {
       $29 = (___cxa_allocate_exception(4)|0);
       HEAP32[$29>>2] = 872;
       ___cxa_throw(($29|0),(8|0),(0|0));
       // unreachable;
      }
      else if ((label|0) == 20) {
       return ($$lcssa19|0);
      }
     }
     return (0)|0;
    }
    function __ZN10Page_image7read_p5EP8_IO_FILEb($this,$f,$invert) {
     $this = $this|0;
     $f = $f|0;
     $invert = $invert|0;
     var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
     var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
     var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
     var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
     var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
     var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$02 = 0, $col$02$us = 0, $row$03 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
     $1 = ($0|0)==(0);
     if ($1) {
      $2 = (___cxa_allocate_exception(4)|0);
      HEAP32[$2>>2] = 1035;
      ___cxa_throw(($2|0),(8|0),(0|0));
      // unreachable;
     }
     $3 = ($0|0)>(255);
     if ($3) {
      $4 = (___cxa_allocate_exception(4)|0);
      HEAP32[$4>>2] = 1088;
      ___cxa_throw(($4|0),(8|0),(0|0));
      // unreachable;
     }
     $5 = $0&255;
     $6 = ((($this)) + 28|0);
     HEAP8[$6>>0] = $5;
     $7 = $0 >>> 1;
     $8 = $7 & 127;
     $9 = $8&255;
     $10 = ((($this)) + 29|0);
     HEAP8[$10>>0] = $9;
     $11 = ((($this)) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($this)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($12) + 1)|0;
     $16 = (($15) - ($14))|0;
     $17 = ((($this)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[$this>>2]|0;
     $20 = (($18) + 1)|0;
     $21 = (($20) - ($19))|0;
     $22 = ($16|0)>(0);
     if (!($22)) {
      return;
     }
     $23 = ($21|0)>(0);
     $24 = ((($this)) + 16|0);
     $row$03 = 0;
     L10: while(1) {
      if ($23) {
       if ($invert) {
        $col$02$us = 0;
        while(1) {
         $25 = (_fgetc($f)|0);
         $26 = ($25|0)==(-1);
         if ($26) {
          label = 26;
          break L10;
         }
         $27 = $25&255;
         $28 = HEAP8[$6>>0]|0;
         $29 = ($28&255)<($27&255);
         if ($29) {
          label = 28;
          break L10;
         }
         $30 = $28&255;
         $31 = (($30) - ($25))|0;
         $32 = $31&255;
         $33 = HEAP32[$24>>2]|0;
         $34 = (($33) + (($row$03*12)|0)|0);
         $35 = (((($33) + (($row$03*12)|0)|0)) + 4|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = (((($33) + (($row$03*12)|0)|0)) + 8|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = ($36|0)==($38|0);
         $40 = $38;
         if ($39) {
          $43 = $36;
          $44 = HEAP32[$34>>2]|0;
          $45 = (($43) - ($44))|0;
          $46 = (($45) + 1)|0;
          $47 = ($46|0)<(0);
          if ($47) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($34);
           $$pre$i$i$us = HEAP32[$34>>2]|0;
           $$pre$i$us = HEAP32[$37>>2]|0;
           $$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $37;$50 = $$pre$i$us;
          } else {
           $$in$i$i$us = $44;$$pre$phi$i$usZ2D = $37;$50 = $40;
          }
          $48 = $$in$i$i$us;
          $49 = (($50) - ($$in$i$i$us))|0;
          $51 = ($49>>>0)<(1073741823);
          if ($51) {
           $54 = $49 << 1;
           $55 = ($54>>>0)<($46>>>0);
           $56 = $55 ? $46 : $54;
           $57 = HEAP32[$35>>2]|0;
           $58 = (($57) - ($$in$i$i$us))|0;
           $59 = ($56|0)==(0);
           if ($59) {
            $$0$i2$i$i$us = 0;$62 = 0;$63 = $58;$69 = $57;
           } else {
            $$0$i1$i$i$us = $56;$128 = $57;$129 = $58;
            label = 19;
           }
          } else {
           $52 = HEAP32[$35>>2]|0;
           $53 = (($52) - ($$in$i$i$us))|0;
           $$0$i1$i$i$us = 2147483647;$128 = $52;$129 = $53;
           label = 19;
          }
          if ((label|0) == 19) {
           label = 0;
           $60 = (__Znwj($$0$i1$i$i$us)|0);
           $$0$i2$i$i$us = $$0$i1$i$i$us;$62 = $60;$63 = $129;$69 = $128;
          }
          $61 = (($62) + ($63)|0);
          $64 = (($62) + ($$0$i2$i$i$us)|0);
          $65 = $64;
          HEAP8[$61>>0] = $32;
          $66 = ((($61)) + 1|0);
          $67 = $66;
          $68 = (($69) - ($$in$i$i$us))|0;
          $70 = (0 - ($68))|0;
          $71 = (($61) + ($70)|0);
          $72 = $71;
          _memcpy(($71|0),($48|0),($68|0))|0;
          HEAP32[$34>>2] = $72;
          HEAP32[$35>>2] = $67;
          HEAP32[$$pre$phi$i$usZ2D>>2] = $65;
          $73 = ($$in$i$i$us|0)==(0);
          if (!($73)) {
           __ZdlPv($48);
          }
         } else {
          HEAP8[$36>>0] = $32;
          $41 = HEAP32[$35>>2]|0;
          $42 = ((($41)) + 1|0);
          HEAP32[$35>>2] = $42;
         }
         $74 = (($col$02$us) + 1)|0;
         $75 = ($74|0)<($21|0);
         if ($75) {
          $col$02$us = $74;
         } else {
          break;
         }
        }
       } else {
        $col$02 = 0;
        while(1) {
         $78 = (_fgetc($f)|0);
         $79 = ($78|0)==(-1);
         if ($79) {
          label = 26;
          break L10;
         }
         $81 = $78&255;
         $82 = HEAP8[$6>>0]|0;
         $83 = ($82&255)<($81&255);
         if ($83) {
          label = 28;
          break L10;
         }
         $85 = HEAP32[$24>>2]|0;
         $86 = (($85) + (($row$03*12)|0)|0);
         $87 = (((($85) + (($row$03*12)|0)|0)) + 4|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = (((($85) + (($row$03*12)|0)|0)) + 8|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = ($88|0)==($90|0);
         $92 = $90;
         if ($91) {
          $95 = $88;
          $96 = HEAP32[$86>>2]|0;
          $97 = (($95) - ($96))|0;
          $98 = (($97) + 1)|0;
          $99 = ($98|0)<(0);
          if ($99) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($86);
           $$pre$i$i = HEAP32[$86>>2]|0;
           $$pre$i = HEAP32[$89>>2]|0;
           $$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $89;$102 = $$pre$i;
          } else {
           $$in$i$i = $96;$$pre$phi$iZ2D = $89;$102 = $92;
          }
          $100 = $$in$i$i;
          $101 = (($102) - ($$in$i$i))|0;
          $103 = ($101>>>0)<(1073741823);
          if ($103) {
           $106 = $101 << 1;
           $107 = ($106>>>0)<($98>>>0);
           $108 = $107 ? $98 : $106;
           $109 = HEAP32[$87>>2]|0;
           $110 = (($109) - ($$in$i$i))|0;
           $111 = ($108|0)==(0);
           if ($111) {
            $$0$i2$i$i = 0;$114 = 0;$115 = $110;$121 = $109;
           } else {
            $$0$i1$i$i = $108;$130 = $109;$131 = $110;
            label = 37;
           }
          } else {
           $104 = HEAP32[$87>>2]|0;
           $105 = (($104) - ($$in$i$i))|0;
           $$0$i1$i$i = 2147483647;$130 = $104;$131 = $105;
           label = 37;
          }
          if ((label|0) == 37) {
           label = 0;
           $112 = (__Znwj($$0$i1$i$i)|0);
           $$0$i2$i$i = $$0$i1$i$i;$114 = $112;$115 = $131;$121 = $130;
          }
          $113 = (($114) + ($115)|0);
          $116 = (($114) + ($$0$i2$i$i)|0);
          $117 = $116;
          HEAP8[$113>>0] = $81;
          $118 = ((($113)) + 1|0);
          $119 = $118;
          $120 = (($121) - ($$in$i$i))|0;
          $122 = (0 - ($120))|0;
          $123 = (($113) + ($122)|0);
          $124 = $123;
          _memcpy(($123|0),($100|0),($120|0))|0;
          HEAP32[$86>>2] = $124;
          HEAP32[$87>>2] = $119;
          HEAP32[$$pre$phi$iZ2D>>2] = $117;
          $125 = ($$in$i$i|0)==(0);
          if (!($125)) {
           __ZdlPv($100);
          }
         } else {
          HEAP8[$88>>0] = $81;
          $93 = HEAP32[$87>>2]|0;
          $94 = ((($93)) + 1|0);
          HEAP32[$87>>2] = $94;
         }
         $126 = (($col$02) + 1)|0;
         $127 = ($126|0)<($21|0);
         if ($127) {
          $col$02 = $126;
         } else {
          break;
         }
        }
       }
      }
      $76 = (($row$03) + 1)|0;
      $77 = ($76|0)<($16|0);
      if ($77) {
       $row$03 = $76;
      } else {
       label = 23;
       break;
      }
     }
     if ((label|0) == 23) {
      return;
     }
     else if ((label|0) == 26) {
      $80 = (___cxa_allocate_exception(4)|0);
      HEAP32[$80>>2] = 872;
      ___cxa_throw(($80|0),(8|0),(0|0));
      // unreachable;
     }
     else if ((label|0) == 28) {
      $84 = (___cxa_allocate_exception(4)|0);
      HEAP32[$84>>2] = 1060;
      ___cxa_throw(($84|0),(8|0),(0|0));
      // unreachable;
     }
    }
    function __ZN10Page_image7read_p3EP8_IO_FILEb($this,$f,$invert) {
     $this = $this|0;
     $f = $f|0;
     $invert = $invert|0;
     var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
     var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
     var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
     var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
     var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
     var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
     var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
     var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$06 = 0, $col$06$us = 0, $or$cond = 0;
     var $or$cond$us = 0, $or$cond2 = 0, $or$cond2$us = 0, $row$07 = 0, $val$1 = 0, $val$1$us = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
     $1 = ($0|0)==(0);
     if ($1) {
      $2 = (___cxa_allocate_exception(4)|0);
      HEAP32[$2>>2] = 1119;
      ___cxa_throw(($2|0),(8|0),(0|0));
      // unreachable;
     }
     $3 = ($0|0)>(255);
     $4 = $3 ? 255 : $0;
     $5 = $4&255;
     $6 = ((($this)) + 28|0);
     HEAP8[$6>>0] = $5;
     $7 = $4 >>> 1;
     $8 = $7 & 127;
     $9 = $8&255;
     $10 = ((($this)) + 29|0);
     HEAP8[$10>>0] = $9;
     $11 = ((($this)) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($this)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($12) + 1)|0;
     $16 = (($15) - ($14))|0;
     $17 = ((($this)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[$this>>2]|0;
     $20 = (($18) + 1)|0;
     $21 = (($20) - ($19))|0;
     $22 = ($16|0)>(0);
     if (!($22)) {
      return;
     }
     $23 = ($21|0)>(0);
     $24 = ((($this)) + 16|0);
     $row$07 = 0;
     L7: while(1) {
      if ($23) {
       if ($invert) {
        $col$06$us = 0;
        while(1) {
         $25 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
         $26 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
         $27 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
         $28 = ($25|0)>($0|0);
         $29 = ($26|0)>($0|0);
         $or$cond$us = $28 | $29;
         $30 = ($27|0)>($0|0);
         $or$cond2$us = $or$cond$us | $30;
         if ($or$cond2$us) {
          label = 25;
          break L7;
         }
         $31 = ($26|0)<($27|0);
         $32 = $31 ? $27 : $26;
         $33 = ($25|0)<($32|0);
         $34 = $33 ? $32 : $25;
         $35 = (($0) - ($34))|0;
         if ($3) {
          $36 = ($35*255)|0;
          $37 = (($36|0) / ($0|0))&-1;
          $val$1$us = $37;
         } else {
          $val$1$us = $35;
         }
         $38 = HEAP32[$24>>2]|0;
         $39 = (($38) + (($row$07*12)|0)|0);
         $40 = $val$1$us&255;
         $41 = (((($38) + (($row$07*12)|0)|0)) + 4|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = (((($38) + (($row$07*12)|0)|0)) + 8|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($42|0)==($44|0);
         $46 = $44;
         if ($45) {
          $49 = $42;
          $50 = HEAP32[$39>>2]|0;
          $51 = (($49) - ($50))|0;
          $52 = (($51) + 1)|0;
          $53 = ($52|0)<(0);
          if ($53) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($39);
           $$pre$i$i$us = HEAP32[$39>>2]|0;
           $$pre$i$us = HEAP32[$43>>2]|0;
           $$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $43;$56 = $$pre$i$us;
          } else {
           $$in$i$i$us = $50;$$pre$phi$i$usZ2D = $43;$56 = $46;
          }
          $54 = $$in$i$i$us;
          $55 = (($56) - ($$in$i$i$us))|0;
          $57 = ($55>>>0)<(1073741823);
          if ($57) {
           $60 = $55 << 1;
           $61 = ($60>>>0)<($52>>>0);
           $62 = $61 ? $52 : $60;
           $63 = HEAP32[$41>>2]|0;
           $64 = (($63) - ($$in$i$i$us))|0;
           $65 = ($62|0)==(0);
           if ($65) {
            $$0$i2$i$i$us = 0;$68 = 0;$69 = $64;$75 = $63;
           } else {
            $$0$i1$i$i$us = $62;$141 = $63;$142 = $64;
            label = 18;
           }
          } else {
           $58 = HEAP32[$41>>2]|0;
           $59 = (($58) - ($$in$i$i$us))|0;
           $$0$i1$i$i$us = 2147483647;$141 = $58;$142 = $59;
           label = 18;
          }
          if ((label|0) == 18) {
           label = 0;
           $66 = (__Znwj($$0$i1$i$i$us)|0);
           $$0$i2$i$i$us = $$0$i1$i$i$us;$68 = $66;$69 = $142;$75 = $141;
          }
          $67 = (($68) + ($69)|0);
          $70 = (($68) + ($$0$i2$i$i$us)|0);
          $71 = $70;
          HEAP8[$67>>0] = $40;
          $72 = ((($67)) + 1|0);
          $73 = $72;
          $74 = (($75) - ($$in$i$i$us))|0;
          $76 = (0 - ($74))|0;
          $77 = (($67) + ($76)|0);
          $78 = $77;
          _memcpy(($77|0),($54|0),($74|0))|0;
          HEAP32[$39>>2] = $78;
          HEAP32[$41>>2] = $73;
          HEAP32[$$pre$phi$i$usZ2D>>2] = $71;
          $79 = ($$in$i$i$us|0)==(0);
          if (!($79)) {
           __ZdlPv($54);
          }
         } else {
          HEAP8[$42>>0] = $40;
          $47 = HEAP32[$41>>2]|0;
          $48 = ((($47)) + 1|0);
          HEAP32[$41>>2] = $48;
         }
         $80 = (($col$06$us) + 1)|0;
         $81 = ($80|0)<($21|0);
         if ($81) {
          $col$06$us = $80;
         } else {
          break;
         }
        }
       } else {
        $col$06 = 0;
        while(1) {
         $84 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
         $85 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
         $86 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
         $87 = ($84|0)>($0|0);
         $88 = ($85|0)>($0|0);
         $or$cond = $87 | $88;
         $89 = ($86|0)>($0|0);
         $or$cond2 = $or$cond | $89;
         if ($or$cond2) {
          label = 25;
          break L7;
         }
         $91 = ($86|0)<($85|0);
         $92 = $91 ? $86 : $85;
         $93 = ($92|0)<($84|0);
         $94 = $93 ? $92 : $84;
         if ($3) {
          $95 = ($94*255)|0;
          $96 = (($95|0) / ($0|0))&-1;
          $val$1 = $96;
         } else {
          $val$1 = $94;
         }
         $97 = HEAP32[$24>>2]|0;
         $98 = (($97) + (($row$07*12)|0)|0);
         $99 = $val$1&255;
         $100 = (((($97) + (($row$07*12)|0)|0)) + 4|0);
         $101 = HEAP32[$100>>2]|0;
         $102 = (((($97) + (($row$07*12)|0)|0)) + 8|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ($101|0)==($103|0);
         $105 = $103;
         if ($104) {
          $108 = $101;
          $109 = HEAP32[$98>>2]|0;
          $110 = (($108) - ($109))|0;
          $111 = (($110) + 1)|0;
          $112 = ($111|0)<(0);
          if ($112) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($98);
           $$pre$i$i = HEAP32[$98>>2]|0;
           $$pre$i = HEAP32[$102>>2]|0;
           $$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $102;$115 = $$pre$i;
          } else {
           $$in$i$i = $109;$$pre$phi$iZ2D = $102;$115 = $105;
          }
          $113 = $$in$i$i;
          $114 = (($115) - ($$in$i$i))|0;
          $116 = ($114>>>0)<(1073741823);
          if ($116) {
           $119 = $114 << 1;
           $120 = ($119>>>0)<($111>>>0);
           $121 = $120 ? $111 : $119;
           $122 = HEAP32[$100>>2]|0;
           $123 = (($122) - ($$in$i$i))|0;
           $124 = ($121|0)==(0);
           if ($124) {
            $$0$i2$i$i = 0;$127 = 0;$128 = $123;$134 = $122;
           } else {
            $$0$i1$i$i = $121;$143 = $122;$144 = $123;
            label = 36;
           }
          } else {
           $117 = HEAP32[$100>>2]|0;
           $118 = (($117) - ($$in$i$i))|0;
           $$0$i1$i$i = 2147483647;$143 = $117;$144 = $118;
           label = 36;
          }
          if ((label|0) == 36) {
           label = 0;
           $125 = (__Znwj($$0$i1$i$i)|0);
           $$0$i2$i$i = $$0$i1$i$i;$127 = $125;$128 = $144;$134 = $143;
          }
          $126 = (($127) + ($128)|0);
          $129 = (($127) + ($$0$i2$i$i)|0);
          $130 = $129;
          HEAP8[$126>>0] = $99;
          $131 = ((($126)) + 1|0);
          $132 = $131;
          $133 = (($134) - ($$in$i$i))|0;
          $135 = (0 - ($133))|0;
          $136 = (($126) + ($135)|0);
          $137 = $136;
          _memcpy(($136|0),($113|0),($133|0))|0;
          HEAP32[$98>>2] = $137;
          HEAP32[$100>>2] = $132;
          HEAP32[$$pre$phi$iZ2D>>2] = $130;
          $138 = ($$in$i$i|0)==(0);
          if (!($138)) {
           __ZdlPv($113);
          }
         } else {
          HEAP8[$101>>0] = $99;
          $106 = HEAP32[$100>>2]|0;
          $107 = ((($106)) + 1|0);
          HEAP32[$100>>2] = $107;
         }
         $139 = (($col$06) + 1)|0;
         $140 = ($139|0)<($21|0);
         if ($140) {
          $col$06 = $139;
         } else {
          break;
         }
        }
       }
      }
      $82 = (($row$07) + 1)|0;
      $83 = ($82|0)<($16|0);
      if ($83) {
       $row$07 = $82;
      } else {
       label = 22;
       break;
      }
     }
     if ((label|0) == 22) {
      return;
     }
     else if ((label|0) == 25) {
      $90 = (___cxa_allocate_exception(4)|0);
      HEAP32[$90>>2] = 1144;
      ___cxa_throw(($90|0),(8|0),(0|0));
      // unreachable;
     }
    }
    function __ZN10Page_image7read_p6EP8_IO_FILEb($this,$f,$invert) {
     $this = $this|0;
     $f = $f|0;
     $invert = $invert|0;
     var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
     var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
     var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
     var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0;
     var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
     var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
     var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
     var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
     var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$08 = 0, $col$08$us = 0, $or$cond = 0, $or$cond$us = 0, $or$cond2 = 0, $or$cond2$us = 0, $row$09 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
     $1 = ($0|0)==(0);
     if ($1) {
      $2 = (___cxa_allocate_exception(4)|0);
      HEAP32[$2>>2] = 1119;
      ___cxa_throw(($2|0),(8|0),(0|0));
      // unreachable;
     }
     $3 = ($0|0)>(255);
     if ($3) {
      $4 = (___cxa_allocate_exception(4)|0);
      HEAP32[$4>>2] = 1172;
      ___cxa_throw(($4|0),(8|0),(0|0));
      // unreachable;
     }
     $5 = $0&255;
     $6 = ((($this)) + 28|0);
     HEAP8[$6>>0] = $5;
     $7 = $0 >>> 1;
     $8 = $7 & 127;
     $9 = $8&255;
     $10 = ((($this)) + 29|0);
     HEAP8[$10>>0] = $9;
     $11 = ((($this)) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($this)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($12) + 1)|0;
     $16 = (($15) - ($14))|0;
     $17 = ((($this)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[$this>>2]|0;
     $20 = (($18) + 1)|0;
     $21 = (($20) - ($19))|0;
     $22 = ($16|0)>(0);
     if (!($22)) {
      return;
     }
     $23 = ($21|0)>(0);
     $24 = ((($this)) + 16|0);
     $row$09 = 0;
     L10: while(1) {
      if ($23) {
       if ($invert) {
        $col$08$us = 0;
        while(1) {
         $25 = (_fgetc($f)|0);
         $26 = ($25|0)==(-1);
         if ($26) {
          label = 28;
          break L10;
         }
         $27 = $25&255;
         $28 = (_fgetc($f)|0);
         $29 = ($28|0)==(-1);
         if ($29) {
          label = 30;
          break L10;
         }
         $30 = $28&255;
         $31 = (_fgetc($f)|0);
         $32 = ($31|0)==(-1);
         if ($32) {
          label = 32;
          break L10;
         }
         $33 = $31&255;
         $34 = HEAP8[$6>>0]|0;
         $35 = ($27&255)>($34&255);
         $36 = ($30&255)>($34&255);
         $or$cond$us = $35 | $36;
         $37 = ($33&255)>($34&255);
         $or$cond2$us = $37 | $or$cond$us;
         if ($or$cond2$us) {
          label = 34;
          break L10;
         }
         $38 = $34&255;
         $39 = ($30&255)<($33&255);
         $40 = $39 ? $33 : $30;
         $41 = ($27&255)<($40&255);
         $42 = $41 ? $40 : $27;
         $43 = $42&255;
         $44 = (($38) - ($43))|0;
         $45 = $44&255;
         $46 = HEAP32[$24>>2]|0;
         $47 = (($46) + (($row$09*12)|0)|0);
         $48 = (((($46) + (($row$09*12)|0)|0)) + 4|0);
         $49 = HEAP32[$48>>2]|0;
         $50 = (((($46) + (($row$09*12)|0)|0)) + 8|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($49|0)==($51|0);
         $53 = $51;
         if ($52) {
          $56 = $49;
          $57 = HEAP32[$47>>2]|0;
          $58 = (($56) - ($57))|0;
          $59 = (($58) + 1)|0;
          $60 = ($59|0)<(0);
          if ($60) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($47);
           $$pre$i$i$us = HEAP32[$47>>2]|0;
           $$pre$i$us = HEAP32[$50>>2]|0;
           $$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $50;$63 = $$pre$i$us;
          } else {
           $$in$i$i$us = $57;$$pre$phi$i$usZ2D = $50;$63 = $53;
          }
          $61 = $$in$i$i$us;
          $62 = (($63) - ($$in$i$i$us))|0;
          $64 = ($62>>>0)<(1073741823);
          if ($64) {
           $67 = $62 << 1;
           $68 = ($67>>>0)<($59>>>0);
           $69 = $68 ? $59 : $67;
           $70 = HEAP32[$48>>2]|0;
           $71 = (($70) - ($$in$i$i$us))|0;
           $72 = ($69|0)==(0);
           if ($72) {
            $$0$i2$i$i$us = 0;$75 = 0;$76 = $71;$82 = $70;
           } else {
            $$0$i1$i$i$us = $69;$155 = $70;$156 = $71;
            label = 21;
           }
          } else {
           $65 = HEAP32[$48>>2]|0;
           $66 = (($65) - ($$in$i$i$us))|0;
           $$0$i1$i$i$us = 2147483647;$155 = $65;$156 = $66;
           label = 21;
          }
          if ((label|0) == 21) {
           label = 0;
           $73 = (__Znwj($$0$i1$i$i$us)|0);
           $$0$i2$i$i$us = $$0$i1$i$i$us;$75 = $73;$76 = $156;$82 = $155;
          }
          $74 = (($75) + ($76)|0);
          $77 = (($75) + ($$0$i2$i$i$us)|0);
          $78 = $77;
          HEAP8[$74>>0] = $45;
          $79 = ((($74)) + 1|0);
          $80 = $79;
          $81 = (($82) - ($$in$i$i$us))|0;
          $83 = (0 - ($81))|0;
          $84 = (($74) + ($83)|0);
          $85 = $84;
          _memcpy(($84|0),($61|0),($81|0))|0;
          HEAP32[$47>>2] = $85;
          HEAP32[$48>>2] = $80;
          HEAP32[$$pre$phi$i$usZ2D>>2] = $78;
          $86 = ($$in$i$i$us|0)==(0);
          if (!($86)) {
           __ZdlPv($61);
          }
         } else {
          HEAP8[$49>>0] = $45;
          $54 = HEAP32[$48>>2]|0;
          $55 = ((($54)) + 1|0);
          HEAP32[$48>>2] = $55;
         }
         $87 = (($col$08$us) + 1)|0;
         $88 = ($87|0)<($21|0);
         if ($88) {
          $col$08$us = $87;
         } else {
          break;
         }
        }
       } else {
        $col$08 = 0;
        while(1) {
         $91 = (_fgetc($f)|0);
         $92 = ($91|0)==(-1);
         if ($92) {
          label = 28;
          break L10;
         }
         $94 = $91&255;
         $95 = (_fgetc($f)|0);
         $96 = ($95|0)==(-1);
         if ($96) {
          label = 30;
          break L10;
         }
         $98 = $95&255;
         $99 = (_fgetc($f)|0);
         $100 = ($99|0)==(-1);
         if ($100) {
          label = 32;
          break L10;
         }
         $102 = $99&255;
         $103 = HEAP8[$6>>0]|0;
         $104 = ($94&255)>($103&255);
         $105 = ($98&255)>($103&255);
         $or$cond = $104 | $105;
         $106 = ($102&255)>($103&255);
         $or$cond2 = $106 | $or$cond;
         if ($or$cond2) {
          label = 34;
          break L10;
         }
         $108 = ($102&255)<($98&255);
         $109 = $108 ? $102 : $98;
         $110 = ($109&255)<($94&255);
         $111 = $110 ? $109 : $94;
         $112 = HEAP32[$24>>2]|0;
         $113 = (($112) + (($row$09*12)|0)|0);
         $114 = (((($112) + (($row$09*12)|0)|0)) + 4|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = (((($112) + (($row$09*12)|0)|0)) + 8|0);
         $117 = HEAP32[$116>>2]|0;
         $118 = ($115|0)==($117|0);
         $119 = $117;
         if ($118) {
          $122 = $115;
          $123 = HEAP32[$113>>2]|0;
          $124 = (($122) - ($123))|0;
          $125 = (($124) + 1)|0;
          $126 = ($125|0)<(0);
          if ($126) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($113);
           $$pre$i$i = HEAP32[$113>>2]|0;
           $$pre$i = HEAP32[$116>>2]|0;
           $$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $116;$129 = $$pre$i;
          } else {
           $$in$i$i = $123;$$pre$phi$iZ2D = $116;$129 = $119;
          }
          $127 = $$in$i$i;
          $128 = (($129) - ($$in$i$i))|0;
          $130 = ($128>>>0)<(1073741823);
          if ($130) {
           $133 = $128 << 1;
           $134 = ($133>>>0)<($125>>>0);
           $135 = $134 ? $125 : $133;
           $136 = HEAP32[$114>>2]|0;
           $137 = (($136) - ($$in$i$i))|0;
           $138 = ($135|0)==(0);
           if ($138) {
            $$0$i2$i$i = 0;$141 = 0;$142 = $137;$148 = $136;
           } else {
            $$0$i1$i$i = $135;$157 = $136;$158 = $137;
            label = 43;
           }
          } else {
           $131 = HEAP32[$114>>2]|0;
           $132 = (($131) - ($$in$i$i))|0;
           $$0$i1$i$i = 2147483647;$157 = $131;$158 = $132;
           label = 43;
          }
          if ((label|0) == 43) {
           label = 0;
           $139 = (__Znwj($$0$i1$i$i)|0);
           $$0$i2$i$i = $$0$i1$i$i;$141 = $139;$142 = $158;$148 = $157;
          }
          $140 = (($141) + ($142)|0);
          $143 = (($141) + ($$0$i2$i$i)|0);
          $144 = $143;
          HEAP8[$140>>0] = $111;
          $145 = ((($140)) + 1|0);
          $146 = $145;
          $147 = (($148) - ($$in$i$i))|0;
          $149 = (0 - ($147))|0;
          $150 = (($140) + ($149)|0);
          $151 = $150;
          _memcpy(($150|0),($127|0),($147|0))|0;
          HEAP32[$113>>2] = $151;
          HEAP32[$114>>2] = $146;
          HEAP32[$$pre$phi$iZ2D>>2] = $144;
          $152 = ($$in$i$i|0)==(0);
          if (!($152)) {
           __ZdlPv($127);
          }
         } else {
          HEAP8[$115>>0] = $111;
          $120 = HEAP32[$114>>2]|0;
          $121 = ((($120)) + 1|0);
          HEAP32[$114>>2] = $121;
         }
         $153 = (($col$08) + 1)|0;
         $154 = ($153|0)<($21|0);
         if ($154) {
          $col$08 = $153;
         } else {
          break;
         }
        }
       }
      }
      $89 = (($row$09) + 1)|0;
      $90 = ($89|0)<($16|0);
      if ($90) {
       $row$09 = $89;
      } else {
       label = 25;
       break;
      }
     }
     if ((label|0) == 25) {
      return;
     }
     else if ((label|0) == 28) {
      $93 = (___cxa_allocate_exception(4)|0);
      HEAP32[$93>>2] = 872;
      ___cxa_throw(($93|0),(8|0),(0|0));
      // unreachable;
     }
     else if ((label|0) == 30) {
      $97 = (___cxa_allocate_exception(4)|0);
      HEAP32[$97>>2] = 872;
      ___cxa_throw(($97|0),(8|0),(0|0));
      // unreachable;
     }
     else if ((label|0) == 32) {
      $101 = (___cxa_allocate_exception(4)|0);
      HEAP32[$101>>2] = 872;
      ___cxa_throw(($101|0),(8|0),(0|0));
      // unreachable;
     }
     else if ((label|0) == 34) {
      $107 = (___cxa_allocate_exception(4)|0);
      HEAP32[$107>>2] = 1144;
      ___cxa_throw(($107|0),(8|0),(0|0));
      // unreachable;
     }
    }
    function __ZN10Page_imageC2EP8_IO_FILEb($this,$f,$invert) {
     $this = $this|0;
     $f = $f|0;
     $invert = $invert|0;
     var $$in = 0, $$in$lcssa = 0, $$in17 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i6 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
     var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
     var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
     var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
     var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
     var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
     var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
     var $97 = 0, $98 = 0, $99 = 0, $lpad$phi$index = 0, $lpad$phi$index6 = 0, $row$013 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $vararg_buffer1 = sp + 8|0;
     $vararg_buffer = sp;
     __ZN9RectangleC2Eiiii($this,0,0,0,0);
     $0 = ((($this)) + 16|0);
     HEAP32[$0>>2] = 0;
     $1 = ((($this)) + 20|0);
     HEAP32[$1>>2] = 0;
     $2 = ((($this)) + 24|0);
     HEAP32[$2>>2] = 0;
     $3 = (_fgetc($f)|0);
     $4 = ($3|0)==(-1);
     L1: do {
      if ($4) {
       $5 = (___cxa_allocate_exception(4)|0);
       HEAP32[$5>>2] = 872;
       __THREW__ = 0;
       invoke_viii(34,($5|0),(8|0),(0|0));
       $6 = __THREW__; __THREW__ = 0;
       label = 8;
      } else {
       $7 = $3&255;
       $8 = ($7<<24>>24)==(80);
       if ($8) {
        $9 = (_fgetc($f)|0);
        $10 = ($9|0)==(-1);
        if ($10) {
         $11 = (___cxa_allocate_exception(4)|0);
         HEAP32[$11>>2] = 872;
         __THREW__ = 0;
         invoke_viii(34,($11|0),(8|0),(0|0));
         $12 = __THREW__; __THREW__ = 0;
         label = 8;
         break;
        }
        $13 = $9&255;
        $$off = (($13) + -49)<<24>>24;
        $14 = ($$off&255)<(6);
        if ($14) {
         $35 = $9 & 255;
         __THREW__ = 0;
         $36 = (invoke_ii(35,($f|0))|0);
         $37 = __THREW__; __THREW__ = 0;
         $38 = $37&1;
         if ($38) {
          label = 8;
          break;
         }
         $39 = ($36|0)==(0);
         if ($39) {
          $40 = (___cxa_allocate_exception(4)|0);
          HEAP32[$40>>2] = 1250;
          __THREW__ = 0;
          invoke_viii(34,($40|0),(8|0),(0|0));
          $41 = __THREW__; __THREW__ = 0;
          label = 8;
          break;
         }
         __THREW__ = 0;
         invoke_vii(36,($this|0),($36|0));
         $42 = __THREW__; __THREW__ = 0;
         $43 = $42&1;
         if ($43) {
          label = 8;
          break;
         }
         __THREW__ = 0;
         $44 = (invoke_ii(35,($f|0))|0);
         $45 = __THREW__; __THREW__ = 0;
         $46 = $45&1;
         if ($46) {
          label = 8;
          break;
         }
         $47 = ($44|0)==(0);
         if ($47) {
          $48 = (___cxa_allocate_exception(4)|0);
          HEAP32[$48>>2] = 1274;
          __THREW__ = 0;
          invoke_viii(34,($48|0),(8|0),(0|0));
          $49 = __THREW__; __THREW__ = 0;
          label = 8;
          break;
         }
         __THREW__ = 0;
         invoke_vii(37,($this|0),($44|0));
         $50 = __THREW__; __THREW__ = 0;
         $51 = $50&1;
         if ($51) {
          label = 8;
          break;
         }
         $52 = ((($this)) + 8|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = HEAP32[$this>>2]|0;
         $55 = (($53) + 1)|0;
         $56 = (($55) - ($54))|0;
         $57 = ($56|0)<(3);
         if (!($57)) {
          $58 = ((($this)) + 12|0);
          $59 = HEAP32[$58>>2]|0;
          $60 = ((($this)) + 4|0);
          $61 = HEAP32[$60>>2]|0;
          $62 = (($59) + 1)|0;
          $63 = (($62) - ($61))|0;
          $64 = ($63|0)<(3);
          if (!($64)) {
           $67 = (2147483647 / ($56|0))&-1;
           $68 = ($67|0)<($63|0);
           if ($68) {
            $69 = (___cxa_allocate_exception(4)|0);
            HEAP32[$69>>2] = 1337;
            __THREW__ = 0;
            invoke_viii(34,($69|0),(8|0),(0|0));
            $70 = __THREW__; __THREW__ = 0;
            label = 8;
            break;
           }
           $71 = HEAP32[$1>>2]|0;
           $72 = HEAP32[$0>>2]|0;
           $73 = (($71) - ($72))|0;
           $74 = (($73|0) / 12)&-1;
           $75 = ($63>>>0)>($74>>>0);
           $76 = $72;
           $77 = $71;
           if ($75) {
            $78 = (($63) - ($74))|0;
            __THREW__ = 0;
            invoke_vii(38,($0|0),($78|0));
            $79 = __THREW__; __THREW__ = 0;
            $80 = $79&1;
            if ($80) {
             label = 8;
             break;
            }
            $$pre = HEAP32[$1>>2]|0;
            $91 = $$pre;
           } else {
            $81 = ($63>>>0)<($74>>>0);
            if ($81) {
             $82 = (($76) + (($63*12)|0)|0);
             $83 = ($77|0)==($82|0);
             if ($83) {
              $91 = $71;
             } else {
              $85 = $77;
              while(1) {
               $84 = ((($85)) + -12|0);
               HEAP32[$1>>2] = $84;
               $86 = HEAP32[$84>>2]|0;
               $87 = ($86|0)==(0|0);
               if ($87) {
                $$in = $84;
               } else {
                $93 = ((($85)) + -8|0);
                $94 = HEAP32[$93>>2]|0;
                $95 = ($94|0)==($86|0);
                if (!($95)) {
                 HEAP32[$93>>2] = $86;
                }
                __ZdlPv($86);
                $$pre$i$i$i6 = HEAP32[$1>>2]|0;
                $$in = $$pre$i$i$i6;
               }
               $88 = ($$in|0)==($82|0);
               if ($88) {
                $$in$lcssa = $$in;
                break;
               } else {
                $85 = $$in;
               }
              }
              $89 = $$in$lcssa;
              $91 = $89;
             }
            } else {
             $91 = $71;
            }
           }
           $90 = HEAP32[$0>>2]|0;
           $92 = ($91|0)==($90|0);
           L41: do {
            if (!($92)) {
             $$in17 = $90;$row$013 = 0;
             L42: while(1) {
              $96 = $$in17;
              $97 = (($96) + (($row$013*12)|0)|0);
              $98 = HEAP32[$52>>2]|0;
              $99 = HEAP32[$this>>2]|0;
              $100 = (($98) + 1)|0;
              $101 = (($100) - ($99))|0;
              $102 = (((($96) + (($row$013*12)|0)|0)) + 8|0);
              $103 = HEAP32[$102>>2]|0;
              $104 = HEAP32[$97>>2]|0;
              $105 = (($103) - ($104))|0;
              $106 = ($105>>>0)<($101>>>0);
              $107 = $104;
              do {
               if ($106) {
                $108 = (((($96) + (($row$013*12)|0)|0)) + 4|0);
                $109 = HEAP32[$108>>2]|0;
                $110 = (($109) - ($104))|0;
                $111 = ($100|0)==($99|0);
                if ($111) {
                 $116 = 0;
                } else {
                 __THREW__ = 0;
                 $112 = (invoke_ii(29,($101|0))|0);
                 $113 = __THREW__; __THREW__ = 0;
                 $114 = $113&1;
                 if ($114) {
                  $$lcssa = $96;
                  break L42;
                 } else {
                  $116 = $112;
                 }
                }
                $115 = (($116) + ($110)|0);
                $117 = $115;
                $118 = (($116) + ($101)|0);
                $119 = $118;
                $120 = (0 - ($110))|0;
                $121 = (($115) + ($120)|0);
                $122 = $121;
                _memcpy(($121|0),($107|0),($110|0))|0;
                HEAP32[$97>>2] = $122;
                HEAP32[$108>>2] = $117;
                HEAP32[$102>>2] = $119;
                $123 = ($104|0)==(0);
                if ($123) {
                 break;
                }
                __ZdlPv($107);
               }
              } while(0);
              $124 = (($row$013) + 1)|0;
              $125 = HEAP32[$1>>2]|0;
              $126 = HEAP32[$0>>2]|0;
              $127 = (($125) - ($126))|0;
              $128 = (($127|0) / 12)&-1;
              $129 = ($124>>>0)<($128>>>0);
              if ($129) {
               $$in17 = $126;$row$013 = $124;
              } else {
               break L41;
              }
             }
             $15 = ___cxa_find_matching_catch_2()|0;
             $16 = tempRet0;
             $19 = $$lcssa;$lpad$phi$index = $15;$lpad$phi$index6 = $16;
             break L1;
            }
           } while(0);
           switch ($35|0) {
           case 49:  {
            __THREW__ = 0;
            invoke_viii(39,($this|0),($f|0),($invert|0));
            $130 = __THREW__; __THREW__ = 0;
            $131 = $130&1;
            if ($131) {
             label = 8;
             break L1;
            }
            break;
           }
           case 52:  {
            __THREW__ = 0;
            invoke_viii(40,($this|0),($f|0),($invert|0));
            $132 = __THREW__; __THREW__ = 0;
            $133 = $132&1;
            if ($133) {
             label = 8;
             break L1;
            }
            break;
           }
           case 50:  {
            __THREW__ = 0;
            invoke_viii(41,($this|0),($f|0),($invert|0));
            $134 = __THREW__; __THREW__ = 0;
            $135 = $134&1;
            if ($135) {
             label = 8;
             break L1;
            }
            break;
           }
           case 53:  {
            __THREW__ = 0;
            invoke_viii(42,($this|0),($f|0),($invert|0));
            $136 = __THREW__; __THREW__ = 0;
            $137 = $136&1;
            if ($137) {
             label = 8;
             break L1;
            }
            break;
           }
           case 51:  {
            __THREW__ = 0;
            invoke_viii(43,($this|0),($f|0),($invert|0));
            $138 = __THREW__; __THREW__ = 0;
            $139 = $138&1;
            if ($139) {
             label = 8;
             break L1;
            }
            break;
           }
           case 54:  {
            __THREW__ = 0;
            invoke_viii(44,($this|0),($f|0),($invert|0));
            $140 = __THREW__; __THREW__ = 0;
            $141 = $140&1;
            if ($141) {
             label = 8;
             break L1;
            }
            break;
           }
           default: {
           }
           }
           $142 = HEAP32[1700]|0;
           $143 = ($142|0)>(0);
           if (!($143)) {
            STACKTOP = sp;return;
           }
           $144 = HEAP32[90]|0;
           HEAP32[$vararg_buffer>>2] = $35;
           (_fprintf($144,1373,$vararg_buffer)|0);
           $145 = HEAP32[$52>>2]|0;
           $146 = HEAP32[$this>>2]|0;
           $147 = (($145) + 1)|0;
           $148 = (($147) - ($146))|0;
           $149 = HEAP32[$58>>2]|0;
           $150 = HEAP32[$60>>2]|0;
           $151 = (($149) + 1)|0;
           $152 = (($151) - ($150))|0;
           HEAP32[$vararg_buffer1>>2] = $148;
           $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
           HEAP32[$vararg_ptr4>>2] = $152;
           (_fprintf($144,1391,$vararg_buffer1)|0);
           STACKTOP = sp;return;
          }
         }
         $65 = (___cxa_allocate_exception(4)|0);
         HEAP32[$65>>2] = 1299;
         __THREW__ = 0;
         invoke_viii(34,($65|0),(8|0),(0|0));
         $66 = __THREW__; __THREW__ = 0;
         label = 8;
         break;
        }
       }
       $33 = (___cxa_allocate_exception(4)|0);
       HEAP32[$33>>2] = 1203;
       __THREW__ = 0;
       invoke_viii(34,($33|0),(8|0),(0|0));
       $34 = __THREW__; __THREW__ = 0;
       label = 8;
      }
     } while(0);
     if ((label|0) == 8) {
      $17 = ___cxa_find_matching_catch_2()|0;
      $18 = tempRet0;
      $$pre15 = HEAP32[$0>>2]|0;
      $19 = $$pre15;$lpad$phi$index = $17;$lpad$phi$index6 = $18;
     }
     $20 = ($19|0)==(0|0);
     if ($20) {
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     $21 = HEAP32[$1>>2]|0;
     $22 = ($21|0)==($19|0);
     if ($22) {
      $32 = $19;
     } else {
      $24 = $21;
      while(1) {
       $23 = ((($24)) + -12|0);
       HEAP32[$1>>2] = $23;
       $25 = HEAP32[$23>>2]|0;
       $26 = ($25|0)==(0|0);
       if ($26) {
        $27 = $23;
       } else {
        $29 = ((($24)) + -8|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = ($30|0)==($25|0);
        if (!($31)) {
         HEAP32[$29>>2] = $25;
        }
        __ZdlPv($25);
        $$pre$i$i$i = HEAP32[$1>>2]|0;
        $27 = $$pre$i$i$i;
       }
       $28 = ($27|0)==($19|0);
       if ($28) {
        break;
       } else {
        $24 = $27;
       }
      }
      $$pre$i = HEAP32[$0>>2]|0;
      $32 = $$pre$i;
     }
     __ZdlPv($32);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEj($this,$__n) {
     $this = $this|0;
     $__n = $__n|0;
     var $$0$i = 0, $$0$i10 = 0, $$0$i8 = 0, $$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
     var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
     var $77 = 0, $8 = 0, $9 = 0, $__v = 0, $scevgep$i = 0, $scevgep$i11 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $__v = sp;
     $0 = ((($this)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) - ($3))|0;
     $5 = (($4|0) / 12)&-1;
     $6 = ($5>>>0)<($__n>>>0);
     $7 = $3;
     if (!($6)) {
      $$0$i = $__n;$8 = $7;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = (($$0$i) + -1)|0;
       $13 = ($12|0)==(0);
       if ($13) {
        break;
       } else {
        $$0$i = $12;$8 = $11;
       }
      }
      $scevgep$i = (($7) + (($__n*12)|0)|0);
      HEAP32[$2>>2] = $scevgep$i;
      STACKTOP = sp;return;
     }
     $14 = ((($this)) + 8|0);
     $15 = HEAP32[$this>>2]|0;
     $16 = (($3) - ($15))|0;
     $17 = (($16|0) / 12)&-1;
     $18 = (($17) + ($__n))|0;
     $19 = ($18>>>0)>(357913941);
     if ($19) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$0>>2]|0;
      $$pre20 = HEAP32[$this>>2]|0;
      $21 = $$pre20;$22 = $$pre;
     } else {
      $21 = $15;$22 = $1;
     }
     $20 = (($22) - ($21))|0;
     $23 = (($20|0) / 12)&-1;
     $24 = ($23>>>0)<(178956970);
     if ($24) {
      $25 = $23 << 1;
      $26 = ($25>>>0)<($18>>>0);
      $27 = $26 ? $18 : $25;
      $$0$i8 = $27;
     } else {
      $$0$i8 = 357913941;
     }
     $28 = HEAP32[$2>>2]|0;
     $29 = (($28) - ($21))|0;
     $30 = (($29|0) / 12)&-1;
     $31 = ((($__v)) + 12|0);
     HEAP32[$31>>2] = 0;
     $32 = ((($__v)) + 16|0);
     HEAP32[$32>>2] = $14;
     $33 = ($$0$i8|0)==(0);
     if ($33) {
      $36 = 0;
     } else {
      $34 = ($$0$i8*12)|0;
      $35 = (__Znwj($34)|0);
      $36 = $35;
     }
     HEAP32[$__v>>2] = $36;
     $37 = (($36) + (($30*12)|0)|0);
     $38 = ((($__v)) + 8|0);
     HEAP32[$38>>2] = $37;
     $39 = ((($__v)) + 4|0);
     HEAP32[$39>>2] = $37;
     $40 = (($36) + (($$0$i8*12)|0)|0);
     $41 = ((($__v)) + 12|0);
     HEAP32[$41>>2] = $40;
     $$0$i10 = $__n;$42 = $37;
     while(1) {
      HEAP32[$42>>2] = 0;
      $43 = ((($42)) + 4|0);
      HEAP32[$43>>2] = 0;
      $44 = ((($42)) + 8|0);
      HEAP32[$44>>2] = 0;
      $45 = ((($42)) + 12|0);
      $46 = (($$0$i10) + -1)|0;
      $47 = ($46|0)==(0);
      if ($47) {
       break;
      } else {
       $$0$i10 = $46;$42 = $45;
      }
     }
     $scevgep$i11 = (($37) + (($__n*12)|0)|0);
     HEAP32[$38>>2] = $scevgep$i11;
     __THREW__ = 0;
     invoke_vii(45,($this|0),($__v|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      $63 = ___cxa_find_matching_catch_2()|0;
      $64 = tempRet0;
      $65 = HEAP32[$39>>2]|0;
      $66 = HEAP32[$38>>2]|0;
      $67 = ($66|0)==($65|0);
      if (!($67)) {
       $69 = $66;
       while(1) {
        $68 = ((($69)) + -12|0);
        $70 = HEAP32[$68>>2]|0;
        $71 = ($70|0)==(0|0);
        if (!($71)) {
         $73 = ((($69)) + -8|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($74|0)==($70|0);
         if (!($75)) {
          HEAP32[$73>>2] = $70;
         }
         __ZdlPv($70);
        }
        $72 = ($68|0)==($65|0);
        if ($72) {
         break;
        } else {
         $69 = $68;
        }
       }
       HEAP32[$38>>2] = $65;
      }
      $76 = HEAP32[$__v>>2]|0;
      $77 = ($76|0)==(0|0);
      if ($77) {
       ___resumeException($63|0);
       // unreachable;
      }
      __ZdlPv($76);
      ___resumeException($63|0);
      // unreachable;
     } else {
      $50 = HEAP32[$39>>2]|0;
      $51 = HEAP32[$38>>2]|0;
      $52 = ($51|0)==($50|0);
      if (!($52)) {
       $54 = $51;
       while(1) {
        $53 = ((($54)) + -12|0);
        $55 = HEAP32[$53>>2]|0;
        $56 = ($55|0)==(0|0);
        if (!($56)) {
         $58 = ((($54)) + -8|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = ($59|0)==($55|0);
         if (!($60)) {
          HEAP32[$58>>2] = $55;
         }
         __ZdlPv($55);
        }
        $57 = ($53|0)==($50|0);
        if ($57) {
         break;
        } else {
         $54 = $53;
        }
       }
       HEAP32[$38>>2] = $50;
      }
      $61 = HEAP32[$__v>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       __ZdlPv($61);
      }
      STACKTOP = sp;return;
     }
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EE($this,$__v) {
     $this = $this|0;
     $__v = $__v|0;
     var $$01$i$i$i$i = 0, $$02$i = 0, $$lcssa = 0, $$lcssa25 = 0, $$lcssa27 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
     var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
     var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0;
     var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = ((($this)) + 4|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = ((($__v)) + 4|0);
     $4 = ($2|0)==($0|0);
     do {
      if ($4) {
       $5 = $0;
       $$pre8 = HEAP32[$3>>2]|0;
       $$pre$phi11Z2D = $3;$$pre$phiZ2D = $this;$43 = $$pre8;$44 = $5;
      } else {
       $$pre$i = HEAP32[$3>>2]|0;
       $$02$i = $2;$7 = $$pre$i;
       while(1) {
        $6 = ((($7)) + -12|0);
        $8 = ((($$02$i)) + -12|0);
        HEAP32[$6>>2] = 0;
        $9 = ((($7)) + -8|0);
        HEAP32[$9>>2] = 0;
        $10 = ((($7)) + -4|0);
        HEAP32[$10>>2] = 0;
        $11 = ((($$02$i)) + -8|0);
        $12 = HEAP32[$11>>2]|0;
        $13 = HEAP32[$8>>2]|0;
        $14 = (($12) - ($13))|0;
        $15 = ($12|0)==($13|0);
        if (!($15)) {
         $16 = ($14|0)<(0);
         if ($16) {
          __THREW__ = 0;
          invoke_vi(46,($6|0));
          $17 = __THREW__; __THREW__ = 0;
          $18 = $17&1;
          if ($18) {
           $$lcssa = $6;$$lcssa25 = $9;
           break;
          }
         }
         __THREW__ = 0;
         $19 = (invoke_ii(29,($14|0))|0);
         $20 = __THREW__; __THREW__ = 0;
         $21 = $20&1;
         if ($21) {
          $$lcssa = $6;$$lcssa25 = $9;
          break;
         }
         HEAP32[$9>>2] = $19;
         HEAP32[$6>>2] = $19;
         $22 = (($19) + ($14)|0);
         $23 = ((($7)) + -4|0);
         HEAP32[$23>>2] = $22;
         $24 = HEAP32[$8>>2]|0;
         $25 = HEAP32[$11>>2]|0;
         $26 = ($24|0)==($25|0);
         if (!($26)) {
          $$01$i$i$i$i = $24;$28 = $19;
          while(1) {
           $27 = HEAP8[$$01$i$i$i$i>>0]|0;
           HEAP8[$28>>0] = $27;
           $29 = HEAP32[$9>>2]|0;
           $30 = ((($29)) + 1|0);
           HEAP32[$9>>2] = $30;
           $31 = ((($$01$i$i$i$i)) + 1|0);
           $32 = ($31|0)==($25|0);
           if ($32) {
            break;
           } else {
            $$01$i$i$i$i = $31;$28 = $30;
           }
          }
         }
        }
        $39 = HEAP32[$3>>2]|0;
        $40 = ((($39)) + -12|0);
        HEAP32[$3>>2] = $40;
        $41 = ($8|0)==($0|0);
        if ($41) {
         $$lcssa27 = $40;
         label = 16;
         break;
        } else {
         $$02$i = $8;$7 = $40;
        }
       }
       if ((label|0) == 16) {
        $42 = $$lcssa27;
        $$pre = HEAP32[$this>>2]|0;
        $$pre$phi11Z2D = $3;$$pre$phiZ2D = $this;$43 = $42;$44 = $$pre;
        break;
       }
       $33 = ___cxa_find_matching_catch_2()|0;
       $34 = tempRet0;
       $35 = HEAP32[$$lcssa>>2]|0;
       $36 = ($35|0)==(0|0);
       if ($36) {
        ___resumeException($33|0);
        // unreachable;
       }
       $37 = HEAP32[$$lcssa25>>2]|0;
       $38 = ($37|0)==($35|0);
       if (!($38)) {
        HEAP32[$$lcssa25>>2] = $35;
       }
       __ZdlPv($35);
       ___resumeException($33|0);
       // unreachable;
      }
     } while(0);
     HEAP32[$$pre$phiZ2D>>2] = $43;
     HEAP32[$$pre$phi11Z2D>>2] = $44;
     $45 = ((($__v)) + 8|0);
     $46 = HEAP32[$1>>2]|0;
     $47 = HEAP32[$45>>2]|0;
     HEAP32[$1>>2] = $47;
     HEAP32[$45>>2] = $46;
     $48 = ((($this)) + 8|0);
     $49 = ((($__v)) + 12|0);
     $50 = HEAP32[$48>>2]|0;
     $51 = HEAP32[$49>>2]|0;
     HEAP32[$48>>2] = $51;
     HEAP32[$49>>2] = $50;
     $52 = HEAP32[$$pre$phi11Z2D>>2]|0;
     HEAP32[$__v>>2] = $52;
     return;
    }
    function __ZNK10Page_image4saveEP8_IO_FILEc($this,$f,$filetype) {
     $this = $this|0;
     $f = $f|0;
     $filetype = $filetype|0;
     var $$0 = 0, $$byte$0 = 0, $$lcssa = 0, $$lcssa113 = 0, $$lcssa116 = 0, $$lcssa7 = 0, $$lcssa8 = 0, $$lcssa9 = 0, $$pre = 0, $$pre71 = 0, $$pre72 = 0, $$pre73 = 0, $$pre74 = 0, $$pre75 = 0, $$pre76 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
     var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
     var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
     var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
     var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
     var $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
     var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
     var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
     var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
     var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byte$050 = 0, $byte$2 = 0, $byte$2$lcssa = 0, $col$04299 = 0, $col11$016 = 0, $col2$052 = 0, $col4$024 = 0;
     var $col6$034 = 0, $col8$010 = 0, $filetype$off = 0, $mask$051 = 0, $mask$1 = 0, $mask$1$lcssa = 0, $row$046 = 0, $row1$058 = 0, $row10$020 = 0, $row3$030 = 0, $row5$038 = 0, $row7$012 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0;
     var $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $vararg_buffer22 = sp + 72|0;
     $vararg_buffer17 = sp + 56|0;
     $vararg_buffer12 = sp + 40|0;
     $vararg_buffer9 = sp + 32|0;
     $vararg_buffer6 = sp + 24|0;
     $vararg_buffer3 = sp + 16|0;
     $vararg_buffer = sp;
     $filetype$off = (($filetype) + -49)<<24>>24;
     $0 = ($filetype$off&255)>(5);
     if ($0) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $1 = $filetype << 24 >> 24;
     $2 = ((($this)) + 8|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = HEAP32[$this>>2]|0;
     $5 = (($3) + 1)|0;
     $6 = (($5) - ($4))|0;
     $7 = ((($this)) + 12|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ((($this)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 1)|0;
     $12 = (($11) - ($10))|0;
     HEAP32[$vararg_buffer>>2] = $1;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $6;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $12;
     (_fprintf($f,1415,$vararg_buffer)|0);
     switch ($filetype<<24>>24) {
     case 49:  {
      $16 = HEAP32[$9>>2]|0;
      $17 = HEAP32[$7>>2]|0;
      $18 = ($16|0)>($17|0);
      if ($18) {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
      $19 = ((($this)) + 16|0);
      $20 = ((($this)) + 29|0);
      $row$046 = $16;
      while(1) {
       $21 = HEAP32[$this>>2]|0;
       $22 = HEAP32[$2>>2]|0;
       $23 = ($21|0)>($22|0);
       if (!($23)) {
        $24 = HEAP32[$9>>2]|0;
        $25 = (($row$046) - ($24))|0;
        $26 = HEAP32[$19>>2]|0;
        $27 = (($26) + (($25*12)|0)|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = HEAP8[$28>>0]|0;
        $30 = HEAP8[$20>>0]|0;
        $31 = ($29&255)<=($30&255);
        $32 = $31 ? 49 : 48;
        (_putc($32,$f)|0);
        $33 = HEAP32[$2>>2]|0;
        $34 = ($21|0)<($33|0);
        if ($34) {
         $col$04299 = $21;
         while(1) {
          $38 = (($col$04299) + 1)|0;
          $$pre72 = HEAP32[$this>>2]|0;
          $39 = HEAP32[$9>>2]|0;
          $40 = (($row$046) - ($39))|0;
          $41 = HEAP32[$19>>2]|0;
          $42 = (($38) - ($$pre72))|0;
          $43 = (($41) + (($40*12)|0)|0);
          $44 = HEAP32[$43>>2]|0;
          $45 = (($44) + ($42)|0);
          $46 = HEAP8[$45>>0]|0;
          $47 = HEAP8[$20>>0]|0;
          $48 = ($46&255)<=($47&255);
          $49 = $48 ? 49 : 48;
          (_putc($49,$f)|0);
          $50 = HEAP32[$2>>2]|0;
          $51 = ($38|0)<($50|0);
          if ($51) {
           $col$04299 = $38;
          } else {
           break;
          }
         }
        }
       }
       (_putc(10,$f)|0);
       $35 = (($row$046) + 1)|0;
       $36 = HEAP32[$7>>2]|0;
       $37 = ($row$046|0)<($36|0);
       if ($37) {
        $row$046 = $35;
       } else {
        $$0 = 1;
        break;
       }
      }
      STACKTOP = sp;return ($$0|0);
      break;
     }
     case 52:  {
      $52 = HEAP32[$9>>2]|0;
      $53 = HEAP32[$7>>2]|0;
      $54 = ($52|0)>($53|0);
      if ($54) {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
      $55 = ((($this)) + 16|0);
      $56 = ((($this)) + 29|0);
      $row1$058 = $52;
      while(1) {
       $57 = HEAP32[$this>>2]|0;
       $58 = HEAP32[$2>>2]|0;
       $59 = ($57|0)>($58|0);
       if (!($59)) {
        $173 = $58;$65 = $57;$byte$050 = 0;$col2$052 = $57;$mask$051 = -128;
        while(1) {
         $61 = HEAP32[$9>>2]|0;
         $62 = (($row1$058) - ($61))|0;
         $63 = HEAP32[$55>>2]|0;
         $64 = (($col2$052) - ($65))|0;
         $66 = (($63) + (($62*12)|0)|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = (($67) + ($64)|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = HEAP8[$56>>0]|0;
         $71 = ($69&255)<=($70&255);
         $72 = $71 ? $mask$051 : 0;
         $$byte$0 = $72 | $byte$050;
         $73 = ($mask$051&255) >>> 1;
         $74 = ($73<<24>>24)==(0);
         if ($74) {
          $75 = $$byte$0&255;
          (_putc($75,$f)|0);
          $$pre71 = HEAP32[$2>>2]|0;
          $77 = $$pre71;$byte$2 = 0;$mask$1 = -128;
         } else {
          $77 = $173;$byte$2 = $$byte$0;$mask$1 = $73;
         }
         $76 = ($col2$052|0)<($77|0);
         if (!($76)) {
          $byte$2$lcssa = $byte$2;$mask$1$lcssa = $mask$1;
          break;
         }
         $78 = (($col2$052) + 1)|0;
         $$pre = HEAP32[$this>>2]|0;
         $173 = $77;$65 = $$pre;$byte$050 = $byte$2;$col2$052 = $78;$mask$051 = $mask$1;
        }
        $60 = ($mask$1$lcssa<<24>>24)==(-128);
        if (!($60)) {
         $79 = $byte$2$lcssa&255;
         (_putc($79,$f)|0);
        }
       }
       $80 = (($row1$058) + 1)|0;
       $81 = HEAP32[$7>>2]|0;
       $82 = ($row1$058|0)<($81|0);
       if ($82) {
        $row1$058 = $80;
       } else {
        $$0 = 1;
        break;
       }
      }
      STACKTOP = sp;return ($$0|0);
      break;
     }
     default: {
      $13 = ((($this)) + 28|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = $14&255;
      HEAP32[$vararg_buffer3>>2] = $15;
      (_fprintf($f,1426,$vararg_buffer3)|0);
      switch ($filetype<<24>>24) {
      case 51:  {
       $128 = HEAP32[$9>>2]|0;
       $129 = HEAP32[$7>>2]|0;
       $130 = ($128|0)>($129|0);
       if ($130) {
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $131 = ((($this)) + 16|0);
       $row7$012 = $128;
       while(1) {
        $132 = HEAP32[$this>>2]|0;
        $133 = HEAP32[$2>>2]|0;
        $134 = ($132|0)<($133|0);
        $135 = HEAP32[$131>>2]|0;
        $136 = (($135) + (($row7$012*12)|0)|0);
        $137 = HEAP32[$136>>2]|0;
        if ($134) {
         $145 = $137;$col8$010 = $132;
         while(1) {
          $144 = (($145) + ($col8$010)|0);
          $146 = HEAP8[$144>>0]|0;
          $147 = $146&255;
          HEAP32[$vararg_buffer17>>2] = $147;
          $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
          HEAP32[$vararg_ptr20>>2] = $147;
          $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
          HEAP32[$vararg_ptr21>>2] = $147;
          (_fprintf($f,1444,$vararg_buffer17)|0);
          $148 = (($col8$010) + 1)|0;
          $149 = HEAP32[$2>>2]|0;
          $150 = ($148|0)<($149|0);
          $151 = HEAP32[$131>>2]|0;
          $152 = (($151) + (($row7$012*12)|0)|0);
          $153 = HEAP32[$152>>2]|0;
          if ($150) {
           $145 = $153;$col8$010 = $148;
          } else {
           $$lcssa = $149;$$lcssa7 = $153;
           break;
          }
         }
        } else {
         $$lcssa = $133;$$lcssa7 = $137;
        }
        $138 = (($$lcssa7) + ($$lcssa)|0);
        $139 = HEAP8[$138>>0]|0;
        $140 = $139&255;
        HEAP32[$vararg_buffer12>>2] = $140;
        $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
        HEAP32[$vararg_ptr15>>2] = $140;
        $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
        HEAP32[$vararg_ptr16>>2] = $140;
        (_fprintf($f,1434,$vararg_buffer12)|0);
        $141 = (($row7$012) + 1)|0;
        $142 = HEAP32[$7>>2]|0;
        $143 = ($row7$012|0)<($142|0);
        if ($143) {
         $row7$012 = $141;
        } else {
         $$0 = 1;
         break;
        }
       }
       STACKTOP = sp;return ($$0|0);
       break;
      }
      case 54:  {
       $154 = HEAP32[$9>>2]|0;
       $155 = HEAP32[$7>>2]|0;
       $156 = ($154|0)>($155|0);
       if ($156) {
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $157 = ((($this)) + 16|0);
       $$pre75 = HEAP32[$2>>2]|0;
       $160 = $$pre75;$176 = $155;$row10$020 = $154;
       while(1) {
        $158 = HEAP32[$this>>2]|0;
        $159 = ($158|0)>($160|0);
        if ($159) {
         $163 = $176;$177 = $160;
        } else {
         $col11$016 = $158;
         while(1) {
          $164 = HEAP32[$157>>2]|0;
          $165 = (($164) + (($row10$020*12)|0)|0);
          $166 = HEAP32[$165>>2]|0;
          $167 = (($166) + ($col11$016)|0);
          $168 = HEAP8[$167>>0]|0;
          $169 = $168&255;
          HEAP32[$vararg_buffer22>>2] = $169;
          $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
          HEAP32[$vararg_ptr25>>2] = $169;
          $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
          HEAP32[$vararg_ptr26>>2] = $169;
          (_fprintf($f,1454,$vararg_buffer22)|0);
          $170 = (($col11$016) + 1)|0;
          $171 = HEAP32[$2>>2]|0;
          $172 = ($col11$016|0)<($171|0);
          if ($172) {
           $col11$016 = $170;
          } else {
           $$lcssa113 = $171;
           break;
          }
         }
         $$pre76 = HEAP32[$7>>2]|0;
         $163 = $$pre76;$177 = $$lcssa113;
        }
        $161 = (($row10$020) + 1)|0;
        $162 = ($row10$020|0)<($163|0);
        if ($162) {
         $160 = $177;$176 = $163;$row10$020 = $161;
        } else {
         $$0 = 1;
         break;
        }
       }
       STACKTOP = sp;return ($$0|0);
       break;
      }
      case 50:  {
       $83 = HEAP32[$9>>2]|0;
       $84 = HEAP32[$7>>2]|0;
       $85 = ($83|0)>($84|0);
       if ($85) {
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $86 = ((($this)) + 16|0);
       $row3$030 = $83;
       while(1) {
        $87 = HEAP32[$this>>2]|0;
        $88 = HEAP32[$2>>2]|0;
        $89 = ($87|0)<($88|0);
        $90 = HEAP32[$86>>2]|0;
        $91 = (($90) + (($row3$030*12)|0)|0);
        $92 = HEAP32[$91>>2]|0;
        if ($89) {
         $100 = $92;$col4$024 = $87;
         while(1) {
          $99 = (($100) + ($col4$024)|0);
          $101 = HEAP8[$99>>0]|0;
          $102 = $101&255;
          HEAP32[$vararg_buffer9>>2] = $102;
          (_fprintf($f,1430,$vararg_buffer9)|0);
          $103 = (($col4$024) + 1)|0;
          $104 = HEAP32[$2>>2]|0;
          $105 = ($103|0)<($104|0);
          $106 = HEAP32[$86>>2]|0;
          $107 = (($106) + (($row3$030*12)|0)|0);
          $108 = HEAP32[$107>>2]|0;
          if ($105) {
           $100 = $108;$col4$024 = $103;
          } else {
           $$lcssa8 = $104;$$lcssa9 = $108;
           break;
          }
         }
        } else {
         $$lcssa8 = $88;$$lcssa9 = $92;
        }
        $93 = (($$lcssa9) + ($$lcssa8)|0);
        $94 = HEAP8[$93>>0]|0;
        $95 = $94&255;
        HEAP32[$vararg_buffer6>>2] = $95;
        (_fprintf($f,1426,$vararg_buffer6)|0);
        $96 = (($row3$030) + 1)|0;
        $97 = HEAP32[$7>>2]|0;
        $98 = ($row3$030|0)<($97|0);
        if ($98) {
         $row3$030 = $96;
        } else {
         $$0 = 1;
         break;
        }
       }
       STACKTOP = sp;return ($$0|0);
       break;
      }
      case 53:  {
       $109 = HEAP32[$9>>2]|0;
       $110 = HEAP32[$7>>2]|0;
       $111 = ($109|0)>($110|0);
       if ($111) {
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $112 = ((($this)) + 16|0);
       $$pre73 = HEAP32[$2>>2]|0;
       $115 = $$pre73;$174 = $110;$row5$038 = $109;
       while(1) {
        $113 = HEAP32[$this>>2]|0;
        $114 = ($113|0)>($115|0);
        if ($114) {
         $118 = $174;$175 = $115;
        } else {
         $col6$034 = $113;
         while(1) {
          $119 = HEAP32[$112>>2]|0;
          $120 = (($119) + (($row5$038*12)|0)|0);
          $121 = HEAP32[$120>>2]|0;
          $122 = (($121) + ($col6$034)|0);
          $123 = HEAP8[$122>>0]|0;
          $124 = $123&255;
          (_fputc($124,$f)|0);
          $125 = (($col6$034) + 1)|0;
          $126 = HEAP32[$2>>2]|0;
          $127 = ($col6$034|0)<($126|0);
          if ($127) {
           $col6$034 = $125;
          } else {
           $$lcssa116 = $126;
           break;
          }
         }
         $$pre74 = HEAP32[$7>>2]|0;
         $118 = $$pre74;$175 = $$lcssa116;
        }
        $116 = (($row5$038) + 1)|0;
        $117 = ($row5$038|0)<($118|0);
        if ($117) {
         $115 = $175;$174 = $118;$row5$038 = $116;
        } else {
         $$0 = 1;
         break;
        }
       }
       STACKTOP = sp;return ($$0|0);
       break;
      }
      default: {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
      }
     }
     }
     return (0)|0;
    }
    function __ZN10Page_imageC2ERK12OCRAD_Pixmapb($this,$image,$invert) {
     $this = $this|0;
     $image = $image|0;
     $invert = $invert|0;
     var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i1$i$i12$us = 0, $$0$i1$i$i35$us = 0, $$0$i1$i$i50$us = 0, $$0$i1$i$i65$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$0$i2$i$i13$us = 0, $$0$i2$i$i36$us = 0, $$0$i2$i$i51$us = 0, $$0$i2$i$i66$us = 0, $$in = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$in$i$i32$us = 0, $$in$i$i47$us = 0, $$in$i$i62$us = 0, $$in$i$i9$us = 0, $$lcssa = 0;
     var $$lcssa200 = 0, $$lcssa201 = 0, $$lcssa202 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i$i$us = 0, $$pre$i$i28$us = 0, $$pre$i$i43$us = 0, $$pre$i$i5$us = 0, $$pre$i$i58$us = 0, $$pre$i$us = 0, $$pre$i24 = 0, $$pre$i30$us = 0, $$pre$i45$us = 0, $$pre$i60$us = 0, $$pre$i7$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$i31$usZ2D = 0;
     var $$pre$phi$i46$usZ2D = 0, $$pre$phi$i61$usZ2D = 0, $$pre$phi$i8$usZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi169Z2D = 0, $$pre$phiZ2D = 0, $$pre166 = 0, $$pre167 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
     var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
     var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
     var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
     var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
     var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
     var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
     var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
     var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
     var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
     var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
     var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
     var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
     var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
     var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
     var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
     var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
     var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
     var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
     var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
     var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
     var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
     var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
     var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$0111$us = 0, $col10$0119$us = 0;
     var $col13$0135 = 0, $col13$0135$us = 0, $col4$0106$us = 0, $col7$0127$us = 0, $i$0115$us = 0, $i$1110$us = 0, $i11$0139 = 0, $i11$1$lcssa = 0, $i11$1134 = 0, $i11$1134$us = 0, $i2$0107$us = 0, $i2$1105$us = 0, $i5$0131$us = 0, $i5$1126$us = 0, $i8$0123$us = 0, $i8$1118$us = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $not$$us = 0, $row$0142 = 0;
     var $row1$0116$us = 0, $row12$0140 = 0, $row3$0108$us = 0, $row6$0132$us = 0, $row9$0124$us = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($image)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = (($1) + -1)|0;
     $3 = ((($image)) + 4|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = (($4) + -1)|0;
     __ZN9RectangleC2Eiiii($this,0,0,$2,$5);
     $6 = ((($this)) + 16|0);
     HEAP32[$6>>2] = 0;
     $7 = ((($this)) + 20|0);
     HEAP32[$7>>2] = 0;
     $8 = ((($this)) + 24|0);
     HEAP32[$8>>2] = 0;
     $9 = ((($this)) + 12|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ((($this)) + 4|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($10) + 1)|0;
     $14 = ($13|0)==($12|0);
     L1: do {
      if ($14) {
       label = 4;
      } else {
       $15 = (($13) - ($12))|0;
       __THREW__ = 0;
       invoke_vii(38,($6|0),($15|0));
       $16 = __THREW__; __THREW__ = 0;
       $17 = $16&1;
       if ($17) {
        $34 = ___cxa_find_matching_catch_2()|0;
        $35 = tempRet0;
        $lpad$phi$index = $34;$lpad$phi$index8 = $35;
        break;
       }
       $$pre = HEAP32[$7>>2]|0;
       $$pre166 = HEAP32[$6>>2]|0;
       $18 = ($$pre|0)==($$pre166|0);
       if ($18) {
        label = 4;
       } else {
        $19 = ((($this)) + 8|0);
        $$in = $$pre166;$row$0142 = 0;
        while(1) {
         $50 = $$in;
         $51 = (($50) + (($row$0142*12)|0)|0);
         $52 = HEAP32[$19>>2]|0;
         $53 = HEAP32[$this>>2]|0;
         $54 = (($52) + 1)|0;
         $55 = (($54) - ($53))|0;
         $56 = (((($50) + (($row$0142*12)|0)|0)) + 8|0);
         $57 = HEAP32[$56>>2]|0;
         $58 = HEAP32[$51>>2]|0;
         $59 = (($57) - ($58))|0;
         $60 = ($59>>>0)<($55>>>0);
         $61 = $58;
         if ($60) {
          $62 = (((($50) + (($row$0142*12)|0)|0)) + 4|0);
          $63 = HEAP32[$62>>2]|0;
          $64 = (($63) - ($58))|0;
          $65 = ($54|0)==($53|0);
          if ($65) {
           $70 = 0;
          } else {
           __THREW__ = 0;
           $66 = (invoke_ii(29,($55|0))|0);
           $67 = __THREW__; __THREW__ = 0;
           $68 = $67&1;
           if ($68) {
            break;
           } else {
            $70 = $66;
           }
          }
          $69 = (($70) + ($64)|0);
          $71 = $69;
          $72 = (($70) + ($55)|0);
          $73 = $72;
          $74 = (0 - ($64))|0;
          $75 = (($69) + ($74)|0);
          $76 = $75;
          _memcpy(($75|0),($61|0),($64|0))|0;
          HEAP32[$51>>2] = $76;
          HEAP32[$62>>2] = $71;
          HEAP32[$56>>2] = $73;
          $77 = ($58|0)==(0);
          if (!($77)) {
           __ZdlPv($61);
          }
         }
         $78 = (($row$0142) + 1)|0;
         $79 = HEAP32[$7>>2]|0;
         $80 = HEAP32[$6>>2]|0;
         $81 = (($79) - ($80))|0;
         $82 = (($81|0) / 12)&-1;
         $83 = ($78>>>0)<($82>>>0);
         if ($83) {
          $$in = $80;$row$0142 = $78;
         } else {
          $$pre$phi169Z2D = $this;$$pre$phiZ2D = $19;
          label = 6;
          break L1;
         }
        }
        $32 = ___cxa_find_matching_catch_2()|0;
        $33 = tempRet0;
        $lpad$phi$index = $32;$lpad$phi$index8 = $33;
       }
      }
     } while(0);
     if ((label|0) == 4) {
      $$pre167 = ((($this)) + 8|0);
      $$pre$phi169Z2D = $this;$$pre$phiZ2D = $$pre167;
      label = 6;
     }
     L19: do {
      if ((label|0) == 6) {
       $20 = HEAP32[$9>>2]|0;
       $21 = HEAP32[$11>>2]|0;
       $22 = (($20) + 1)|0;
       $23 = (($22) - ($21))|0;
       $24 = HEAP32[$$pre$phiZ2D>>2]|0;
       $25 = HEAP32[$$pre$phi169Z2D>>2]|0;
       $26 = (($24) + 1)|0;
       $27 = (($26) - ($25))|0;
       $28 = ((($image)) + 12|0);
       $29 = HEAP32[$28>>2]|0;
       switch ($29|0) {
       case 0:  {
        $84 = ((($this)) + 28|0);
        HEAP8[$84>>0] = 1;
        $85 = ((($this)) + 29|0);
        HEAP8[$85>>0] = 0;
        $86 = ($23|0)>(0);
        if ($invert) {
         if (!($86)) {
          return;
         }
         $144 = ($27|0)>(0);
         if ($144) {
          $i2$0107$us = 0;$row3$0108$us = 0;
         } else {
          return;
         }
         L30: while(1) {
          $col4$0106$us = 0;$i2$1105$us = $i2$0107$us;
          while(1) {
           $145 = HEAP32[$6>>2]|0;
           $146 = (($145) + (($row3$0108$us*12)|0)|0);
           $147 = HEAP32[$image>>2]|0;
           $148 = (($147) + ($i2$1105$us)|0);
           $149 = HEAP8[$148>>0]|0;
           $150 = ($149<<24>>24)!=(0);
           $151 = $150&1;
           $152 = (((($145) + (($row3$0108$us*12)|0)|0)) + 4|0);
           $153 = HEAP32[$152>>2]|0;
           $154 = (((($145) + (($row3$0108$us*12)|0)|0)) + 8|0);
           $155 = HEAP32[$154>>2]|0;
           $156 = ($153|0)==($155|0);
           $157 = $155;
           if ($156) {
            $160 = $153;
            $161 = HEAP32[$146>>2]|0;
            $162 = (($160) - ($161))|0;
            $163 = (($162) + 1)|0;
            $164 = ($163|0)<(0);
            if ($164) {
             __THREW__ = 0;
             invoke_vi(46,($146|0));
             $165 = __THREW__; __THREW__ = 0;
             $166 = $165&1;
             if ($166) {
              label = 61;
              break L30;
             }
             $$pre$i$i43$us = HEAP32[$146>>2]|0;
             $$pre$i45$us = HEAP32[$154>>2]|0;
             $$in$i$i47$us = $$pre$i$i43$us;$$pre$phi$i46$usZ2D = $154;$169 = $$pre$i45$us;
            } else {
             $$in$i$i47$us = $161;$$pre$phi$i46$usZ2D = $154;$169 = $157;
            }
            $167 = $$in$i$i47$us;
            $168 = (($169) - ($$in$i$i47$us))|0;
            $170 = ($168>>>0)<(1073741823);
            if ($170) {
             $173 = $168 << 1;
             $174 = ($173>>>0)<($163>>>0);
             $175 = $174 ? $163 : $173;
             $176 = HEAP32[$152>>2]|0;
             $177 = (($176) - ($$in$i$i47$us))|0;
             $178 = ($175|0)==(0);
             if ($178) {
              $$0$i2$i$i51$us = 0;$183 = 0;$184 = $177;$190 = $176;
             } else {
              $$0$i1$i$i50$us = $175;$460 = $176;$461 = $177;
              label = 55;
             }
            } else {
             $171 = HEAP32[$152>>2]|0;
             $172 = (($171) - ($$in$i$i47$us))|0;
             $$0$i1$i$i50$us = 2147483647;$460 = $171;$461 = $172;
             label = 55;
            }
            if ((label|0) == 55) {
             label = 0;
             __THREW__ = 0;
             $179 = (invoke_ii(29,($$0$i1$i$i50$us|0))|0);
             $180 = __THREW__; __THREW__ = 0;
             $181 = $180&1;
             if ($181) {
              label = 61;
              break L30;
             } else {
              $$0$i2$i$i51$us = $$0$i1$i$i50$us;$183 = $179;$184 = $461;$190 = $460;
             }
            }
            $182 = (($183) + ($184)|0);
            $185 = (($183) + ($$0$i2$i$i51$us)|0);
            $186 = $185;
            HEAP8[$182>>0] = $151;
            $187 = ((($182)) + 1|0);
            $188 = $187;
            $189 = (($190) - ($$in$i$i47$us))|0;
            $191 = (0 - ($189))|0;
            $192 = (($182) + ($191)|0);
            $193 = $192;
            _memcpy(($192|0),($167|0),($189|0))|0;
            HEAP32[$146>>2] = $193;
            HEAP32[$152>>2] = $188;
            HEAP32[$$pre$phi$i46$usZ2D>>2] = $186;
            $194 = ($$in$i$i47$us|0)==(0);
            if (!($194)) {
             __ZdlPv($167);
            }
           } else {
            HEAP8[$153>>0] = $151;
            $158 = HEAP32[$152>>2]|0;
            $159 = ((($158)) + 1|0);
            HEAP32[$152>>2] = $159;
           }
           $195 = (($col4$0106$us) + 1)|0;
           $196 = (($i2$1105$us) + 1)|0;
           $197 = ($195|0)<($27|0);
           if ($197) {
            $col4$0106$us = $195;$i2$1105$us = $196;
           } else {
            $$lcssa = $196;
            break;
           }
          }
          $198 = (($row3$0108$us) + 1)|0;
          $199 = ($198|0)<($23|0);
          if ($199) {
           $i2$0107$us = $$lcssa;$row3$0108$us = $198;
          } else {
           label = 131;
           break;
          }
         }
         if ((label|0) == 61) {
          $200 = ___cxa_find_matching_catch_2()|0;
          $201 = tempRet0;
          $lpad$phi$index = $200;$lpad$phi$index8 = $201;
          break L19;
         }
         else if ((label|0) == 131) {
          return;
         }
        } else {
         if (!($86)) {
          return;
         }
         $87 = ($27|0)>(0);
         if ($87) {
          $i$0115$us = 0;$row1$0116$us = 0;
         } else {
          return;
         }
         L60: while(1) {
          $col$0111$us = 0;$i$1110$us = $i$0115$us;
          while(1) {
           $88 = HEAP32[$6>>2]|0;
           $89 = (($88) + (($row1$0116$us*12)|0)|0);
           $90 = HEAP32[$image>>2]|0;
           $91 = (($90) + ($i$1110$us)|0);
           $92 = HEAP8[$91>>0]|0;
           $not$$us = ($92<<24>>24)==(0);
           $93 = $not$$us&1;
           $94 = (((($88) + (($row1$0116$us*12)|0)|0)) + 4|0);
           $95 = HEAP32[$94>>2]|0;
           $96 = (((($88) + (($row1$0116$us*12)|0)|0)) + 8|0);
           $97 = HEAP32[$96>>2]|0;
           $98 = ($95|0)==($97|0);
           $99 = $97;
           if ($98) {
            $102 = $95;
            $103 = HEAP32[$89>>2]|0;
            $104 = (($102) - ($103))|0;
            $105 = (($104) + 1)|0;
            $106 = ($105|0)<(0);
            if ($106) {
             __THREW__ = 0;
             invoke_vi(46,($89|0));
             $107 = __THREW__; __THREW__ = 0;
             $108 = $107&1;
             if ($108) {
              label = 43;
              break L60;
             }
             $$pre$i$i28$us = HEAP32[$89>>2]|0;
             $$pre$i30$us = HEAP32[$96>>2]|0;
             $$in$i$i32$us = $$pre$i$i28$us;$$pre$phi$i31$usZ2D = $96;$111 = $$pre$i30$us;
            } else {
             $$in$i$i32$us = $103;$$pre$phi$i31$usZ2D = $96;$111 = $99;
            }
            $109 = $$in$i$i32$us;
            $110 = (($111) - ($$in$i$i32$us))|0;
            $112 = ($110>>>0)<(1073741823);
            if ($112) {
             $115 = $110 << 1;
             $116 = ($115>>>0)<($105>>>0);
             $117 = $116 ? $105 : $115;
             $118 = HEAP32[$94>>2]|0;
             $119 = (($118) - ($$in$i$i32$us))|0;
             $120 = ($117|0)==(0);
             if ($120) {
              $$0$i2$i$i36$us = 0;$125 = 0;$126 = $119;$132 = $118;
             } else {
              $$0$i1$i$i35$us = $117;$458 = $118;$459 = $119;
              label = 37;
             }
            } else {
             $113 = HEAP32[$94>>2]|0;
             $114 = (($113) - ($$in$i$i32$us))|0;
             $$0$i1$i$i35$us = 2147483647;$458 = $113;$459 = $114;
             label = 37;
            }
            if ((label|0) == 37) {
             label = 0;
             __THREW__ = 0;
             $121 = (invoke_ii(29,($$0$i1$i$i35$us|0))|0);
             $122 = __THREW__; __THREW__ = 0;
             $123 = $122&1;
             if ($123) {
              label = 43;
              break L60;
             } else {
              $$0$i2$i$i36$us = $$0$i1$i$i35$us;$125 = $121;$126 = $459;$132 = $458;
             }
            }
            $124 = (($125) + ($126)|0);
            $127 = (($125) + ($$0$i2$i$i36$us)|0);
            $128 = $127;
            HEAP8[$124>>0] = $93;
            $129 = ((($124)) + 1|0);
            $130 = $129;
            $131 = (($132) - ($$in$i$i32$us))|0;
            $133 = (0 - ($131))|0;
            $134 = (($124) + ($133)|0);
            $135 = $134;
            _memcpy(($134|0),($109|0),($131|0))|0;
            HEAP32[$89>>2] = $135;
            HEAP32[$94>>2] = $130;
            HEAP32[$$pre$phi$i31$usZ2D>>2] = $128;
            $136 = ($$in$i$i32$us|0)==(0);
            if (!($136)) {
             __ZdlPv($109);
            }
           } else {
            HEAP8[$95>>0] = $93;
            $100 = HEAP32[$94>>2]|0;
            $101 = ((($100)) + 1|0);
            HEAP32[$94>>2] = $101;
           }
           $137 = (($col$0111$us) + 1)|0;
           $138 = (($i$1110$us) + 1)|0;
           $139 = ($137|0)<($27|0);
           if ($139) {
            $col$0111$us = $137;$i$1110$us = $138;
           } else {
            $$lcssa200 = $138;
            break;
           }
          }
          $140 = (($row1$0116$us) + 1)|0;
          $141 = ($140|0)<($23|0);
          if ($141) {
           $i$0115$us = $$lcssa200;$row1$0116$us = $140;
          } else {
           label = 131;
           break;
          }
         }
         if ((label|0) == 43) {
          $142 = ___cxa_find_matching_catch_2()|0;
          $143 = tempRet0;
          $lpad$phi$index = $142;$lpad$phi$index8 = $143;
          break L19;
         }
         else if ((label|0) == 131) {
          return;
         }
        }
        break;
       }
       case 1:  {
        $202 = ((($this)) + 28|0);
        HEAP8[$202>>0] = -1;
        $203 = ((($this)) + 29|0);
        HEAP8[$203>>0] = 127;
        $204 = ($23|0)>(0);
        if ($invert) {
         if (!($204)) {
          return;
         }
         $262 = ($27|0)>(0);
         if ($262) {
          $i8$0123$us = 0;$row9$0124$us = 0;
         } else {
          return;
         }
         L92: while(1) {
          $col10$0119$us = 0;$i8$1118$us = $i8$0123$us;
          while(1) {
           $263 = HEAP32[$6>>2]|0;
           $264 = (($263) + (($row9$0124$us*12)|0)|0);
           $265 = HEAP8[$202>>0]|0;
           $266 = $265&255;
           $267 = HEAP32[$image>>2]|0;
           $268 = (($267) + ($i8$1118$us)|0);
           $269 = HEAP8[$268>>0]|0;
           $270 = $269&255;
           $271 = (($266) - ($270))|0;
           $272 = $271&255;
           $273 = (((($263) + (($row9$0124$us*12)|0)|0)) + 4|0);
           $274 = HEAP32[$273>>2]|0;
           $275 = (((($263) + (($row9$0124$us*12)|0)|0)) + 8|0);
           $276 = HEAP32[$275>>2]|0;
           $277 = ($274|0)==($276|0);
           $278 = $276;
           if ($277) {
            $281 = $274;
            $282 = HEAP32[$264>>2]|0;
            $283 = (($281) - ($282))|0;
            $284 = (($283) + 1)|0;
            $285 = ($284|0)<(0);
            if ($285) {
             __THREW__ = 0;
             invoke_vi(46,($264|0));
             $286 = __THREW__; __THREW__ = 0;
             $287 = $286&1;
             if ($287) {
              label = 98;
              break L92;
             }
             $$pre$i$i5$us = HEAP32[$264>>2]|0;
             $$pre$i7$us = HEAP32[$275>>2]|0;
             $$in$i$i9$us = $$pre$i$i5$us;$$pre$phi$i8$usZ2D = $275;$290 = $$pre$i7$us;
            } else {
             $$in$i$i9$us = $282;$$pre$phi$i8$usZ2D = $275;$290 = $278;
            }
            $288 = $$in$i$i9$us;
            $289 = (($290) - ($$in$i$i9$us))|0;
            $291 = ($289>>>0)<(1073741823);
            if ($291) {
             $294 = $289 << 1;
             $295 = ($294>>>0)<($284>>>0);
             $296 = $295 ? $284 : $294;
             $297 = HEAP32[$273>>2]|0;
             $298 = (($297) - ($$in$i$i9$us))|0;
             $299 = ($296|0)==(0);
             if ($299) {
              $$0$i2$i$i13$us = 0;$304 = 0;$305 = $298;$311 = $297;
             } else {
              $$0$i1$i$i12$us = $296;$464 = $297;$465 = $298;
              label = 92;
             }
            } else {
             $292 = HEAP32[$273>>2]|0;
             $293 = (($292) - ($$in$i$i9$us))|0;
             $$0$i1$i$i12$us = 2147483647;$464 = $292;$465 = $293;
             label = 92;
            }
            if ((label|0) == 92) {
             label = 0;
             __THREW__ = 0;
             $300 = (invoke_ii(29,($$0$i1$i$i12$us|0))|0);
             $301 = __THREW__; __THREW__ = 0;
             $302 = $301&1;
             if ($302) {
              label = 98;
              break L92;
             } else {
              $$0$i2$i$i13$us = $$0$i1$i$i12$us;$304 = $300;$305 = $465;$311 = $464;
             }
            }
            $303 = (($304) + ($305)|0);
            $306 = (($304) + ($$0$i2$i$i13$us)|0);
            $307 = $306;
            HEAP8[$303>>0] = $272;
            $308 = ((($303)) + 1|0);
            $309 = $308;
            $310 = (($311) - ($$in$i$i9$us))|0;
            $312 = (0 - ($310))|0;
            $313 = (($303) + ($312)|0);
            $314 = $313;
            _memcpy(($313|0),($288|0),($310|0))|0;
            HEAP32[$264>>2] = $314;
            HEAP32[$273>>2] = $309;
            HEAP32[$$pre$phi$i8$usZ2D>>2] = $307;
            $315 = ($$in$i$i9$us|0)==(0);
            if (!($315)) {
             __ZdlPv($288);
            }
           } else {
            HEAP8[$274>>0] = $272;
            $279 = HEAP32[$273>>2]|0;
            $280 = ((($279)) + 1|0);
            HEAP32[$273>>2] = $280;
           }
           $316 = (($col10$0119$us) + 1)|0;
           $317 = (($i8$1118$us) + 1)|0;
           $318 = ($316|0)<($27|0);
           if ($318) {
            $col10$0119$us = $316;$i8$1118$us = $317;
           } else {
            $$lcssa201 = $317;
            break;
           }
          }
          $319 = (($row9$0124$us) + 1)|0;
          $320 = ($319|0)<($23|0);
          if ($320) {
           $i8$0123$us = $$lcssa201;$row9$0124$us = $319;
          } else {
           label = 131;
           break;
          }
         }
         if ((label|0) == 98) {
          $321 = ___cxa_find_matching_catch_2()|0;
          $322 = tempRet0;
          $lpad$phi$index = $321;$lpad$phi$index8 = $322;
          break L19;
         }
         else if ((label|0) == 131) {
          return;
         }
        } else {
         if (!($204)) {
          return;
         }
         $205 = ($27|0)>(0);
         if ($205) {
          $i5$0131$us = 0;$row6$0132$us = 0;
         } else {
          return;
         }
         L122: while(1) {
          $col7$0127$us = 0;$i5$1126$us = $i5$0131$us;
          while(1) {
           $206 = HEAP32[$6>>2]|0;
           $207 = (($206) + (($row6$0132$us*12)|0)|0);
           $208 = HEAP32[$image>>2]|0;
           $209 = (($208) + ($i5$1126$us)|0);
           $210 = (((($206) + (($row6$0132$us*12)|0)|0)) + 4|0);
           $211 = HEAP32[$210>>2]|0;
           $212 = (((($206) + (($row6$0132$us*12)|0)|0)) + 8|0);
           $213 = HEAP32[$212>>2]|0;
           $214 = ($211|0)==($213|0);
           $215 = $213;
           if ($214) {
            $219 = $211;
            $220 = HEAP32[$207>>2]|0;
            $221 = (($219) - ($220))|0;
            $222 = (($221) + 1)|0;
            $223 = ($222|0)<(0);
            if ($223) {
             __THREW__ = 0;
             invoke_vi(46,($207|0));
             $224 = __THREW__; __THREW__ = 0;
             $225 = $224&1;
             if ($225) {
              label = 80;
              break L122;
             }
             $$pre$i$i58$us = HEAP32[$207>>2]|0;
             $$pre$i60$us = HEAP32[$212>>2]|0;
             $$in$i$i62$us = $$pre$i$i58$us;$$pre$phi$i61$usZ2D = $212;$228 = $$pre$i60$us;
            } else {
             $$in$i$i62$us = $220;$$pre$phi$i61$usZ2D = $212;$228 = $215;
            }
            $226 = $$in$i$i62$us;
            $227 = (($228) - ($$in$i$i62$us))|0;
            $229 = ($227>>>0)<(1073741823);
            if ($229) {
             $232 = $227 << 1;
             $233 = ($232>>>0)<($222>>>0);
             $234 = $233 ? $222 : $232;
             $235 = HEAP32[$210>>2]|0;
             $236 = (($235) - ($$in$i$i62$us))|0;
             $237 = ($234|0)==(0);
             if ($237) {
              $$0$i2$i$i66$us = 0;$242 = 0;$243 = $236;$250 = $235;
             } else {
              $$0$i1$i$i65$us = $234;$462 = $235;$463 = $236;
              label = 74;
             }
            } else {
             $230 = HEAP32[$210>>2]|0;
             $231 = (($230) - ($$in$i$i62$us))|0;
             $$0$i1$i$i65$us = 2147483647;$462 = $230;$463 = $231;
             label = 74;
            }
            if ((label|0) == 74) {
             label = 0;
             __THREW__ = 0;
             $238 = (invoke_ii(29,($$0$i1$i$i65$us|0))|0);
             $239 = __THREW__; __THREW__ = 0;
             $240 = $239&1;
             if ($240) {
              label = 80;
              break L122;
             } else {
              $$0$i2$i$i66$us = $$0$i1$i$i65$us;$242 = $238;$243 = $463;$250 = $462;
             }
            }
            $241 = (($242) + ($243)|0);
            $244 = (($242) + ($$0$i2$i$i66$us)|0);
            $245 = $244;
            $246 = HEAP8[$209>>0]|0;
            HEAP8[$241>>0] = $246;
            $247 = ((($241)) + 1|0);
            $248 = $247;
            $249 = (($250) - ($$in$i$i62$us))|0;
            $251 = (0 - ($249))|0;
            $252 = (($241) + ($251)|0);
            $253 = $252;
            _memcpy(($252|0),($226|0),($249|0))|0;
            HEAP32[$207>>2] = $253;
            HEAP32[$210>>2] = $248;
            HEAP32[$$pre$phi$i61$usZ2D>>2] = $245;
            $254 = ($$in$i$i62$us|0)==(0);
            if (!($254)) {
             __ZdlPv($226);
            }
           } else {
            $216 = HEAP8[$209>>0]|0;
            HEAP8[$211>>0] = $216;
            $217 = HEAP32[$210>>2]|0;
            $218 = ((($217)) + 1|0);
            HEAP32[$210>>2] = $218;
           }
           $255 = (($col7$0127$us) + 1)|0;
           $256 = (($i5$1126$us) + 1)|0;
           $257 = ($255|0)<($27|0);
           if ($257) {
            $col7$0127$us = $255;$i5$1126$us = $256;
           } else {
            $$lcssa202 = $256;
            break;
           }
          }
          $258 = (($row6$0132$us) + 1)|0;
          $259 = ($258|0)<($23|0);
          if ($259) {
           $i5$0131$us = $$lcssa202;$row6$0132$us = $258;
          } else {
           label = 131;
           break;
          }
         }
         if ((label|0) == 80) {
          $260 = ___cxa_find_matching_catch_2()|0;
          $261 = tempRet0;
          $lpad$phi$index = $260;$lpad$phi$index8 = $261;
          break L19;
         }
         else if ((label|0) == 131) {
          return;
         }
        }
        break;
       }
       case 2:  {
        $323 = ((($this)) + 28|0);
        HEAP8[$323>>0] = -1;
        $324 = ((($this)) + 29|0);
        HEAP8[$324>>0] = 127;
        $325 = ($23|0)>(0);
        if (!($325)) {
         return;
        }
        $326 = ($27|0)>(0);
        $i11$0139 = 0;$row12$0140 = 0;
        L150: while(1) {
         if ($326) {
          if ($invert) {
           $col13$0135$us = 0;$i11$1134$us = $i11$0139;
           while(1) {
            $327 = HEAP32[$image>>2]|0;
            $328 = (($327) + ($i11$1134$us)|0);
            $329 = HEAP8[$328>>0]|0;
            $330 = (($i11$1134$us) + 1)|0;
            $331 = (($327) + ($330)|0);
            $332 = HEAP8[$331>>0]|0;
            $333 = (($i11$1134$us) + 2)|0;
            $334 = (($327) + ($333)|0);
            $335 = HEAP8[$334>>0]|0;
            $336 = HEAP8[$323>>0]|0;
            $337 = $336&255;
            $338 = ($332&255)<($335&255);
            $339 = $338 ? $335 : $332;
            $340 = ($329&255)<($339&255);
            $341 = $340 ? $339 : $329;
            $342 = $341&255;
            $343 = (($337) - ($342))|0;
            $344 = $343&255;
            $345 = HEAP32[$6>>2]|0;
            $346 = (($345) + (($row12$0140*12)|0)|0);
            $347 = (((($345) + (($row12$0140*12)|0)|0)) + 4|0);
            $348 = HEAP32[$347>>2]|0;
            $349 = (((($345) + (($row12$0140*12)|0)|0)) + 8|0);
            $350 = HEAP32[$349>>2]|0;
            $351 = ($348|0)==($350|0);
            $352 = $350;
            if ($351) {
             $355 = $348;
             $356 = HEAP32[$346>>2]|0;
             $357 = (($355) - ($356))|0;
             $358 = (($357) + 1)|0;
             $359 = ($358|0)<(0);
             if ($359) {
              __THREW__ = 0;
              invoke_vi(46,($346|0));
              $360 = __THREW__; __THREW__ = 0;
              $361 = $360&1;
              if ($361) {
               label = 116;
               break L150;
              }
              $$pre$i$i$us = HEAP32[$346>>2]|0;
              $$pre$i$us = HEAP32[$349>>2]|0;
              $$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $349;$364 = $$pre$i$us;
             } else {
              $$in$i$i$us = $356;$$pre$phi$i$usZ2D = $349;$364 = $352;
             }
             $362 = $$in$i$i$us;
             $363 = (($364) - ($$in$i$i$us))|0;
             $365 = ($363>>>0)<(1073741823);
             if ($365) {
              $368 = $363 << 1;
              $369 = ($368>>>0)<($358>>>0);
              $370 = $369 ? $358 : $368;
              $371 = HEAP32[$347>>2]|0;
              $372 = (($371) - ($$in$i$i$us))|0;
              $373 = ($370|0)==(0);
              if ($373) {
               $$0$i2$i$i$us = 0;$378 = 0;$379 = $372;$385 = $371;
              } else {
               $$0$i1$i$i$us = $370;$466 = $371;$467 = $372;
               label = 112;
              }
             } else {
              $366 = HEAP32[$347>>2]|0;
              $367 = (($366) - ($$in$i$i$us))|0;
              $$0$i1$i$i$us = 2147483647;$466 = $366;$467 = $367;
              label = 112;
             }
             if ((label|0) == 112) {
              label = 0;
              __THREW__ = 0;
              $374 = (invoke_ii(29,($$0$i1$i$i$us|0))|0);
              $375 = __THREW__; __THREW__ = 0;
              $376 = $375&1;
              if ($376) {
               label = 116;
               break L150;
              } else {
               $$0$i2$i$i$us = $$0$i1$i$i$us;$378 = $374;$379 = $467;$385 = $466;
              }
             }
             $377 = (($378) + ($379)|0);
             $380 = (($378) + ($$0$i2$i$i$us)|0);
             $381 = $380;
             HEAP8[$377>>0] = $344;
             $382 = ((($377)) + 1|0);
             $383 = $382;
             $384 = (($385) - ($$in$i$i$us))|0;
             $386 = (0 - ($384))|0;
             $387 = (($377) + ($386)|0);
             $388 = $387;
             _memcpy(($387|0),($362|0),($384|0))|0;
             HEAP32[$346>>2] = $388;
             HEAP32[$347>>2] = $383;
             HEAP32[$$pre$phi$i$usZ2D>>2] = $381;
             $389 = ($$in$i$i$us|0)==(0);
             if (!($389)) {
              __ZdlPv($362);
             }
            } else {
             HEAP8[$348>>0] = $344;
             $353 = HEAP32[$347>>2]|0;
             $354 = ((($353)) + 1|0);
             HEAP32[$347>>2] = $354;
            }
            $390 = (($col13$0135$us) + 1)|0;
            $391 = (($i11$1134$us) + 3)|0;
            $392 = ($390|0)<($27|0);
            if ($392) {
             $col13$0135$us = $390;$i11$1134$us = $391;
            } else {
             $i11$1$lcssa = $391;
             break;
            }
           }
          } else {
           $col13$0135 = 0;$i11$1134 = $i11$0139;
           while(1) {
            $397 = HEAP32[$image>>2]|0;
            $398 = (($397) + ($i11$1134)|0);
            $399 = HEAP8[$398>>0]|0;
            $400 = (($i11$1134) + 1)|0;
            $401 = (($397) + ($400)|0);
            $402 = HEAP8[$401>>0]|0;
            $403 = (($i11$1134) + 2)|0;
            $404 = (($397) + ($403)|0);
            $405 = HEAP8[$404>>0]|0;
            $406 = ($405&255)<($402&255);
            $407 = $406 ? $405 : $402;
            $408 = ($407&255)<($399&255);
            $409 = $408 ? $407 : $399;
            $410 = HEAP32[$6>>2]|0;
            $411 = (($410) + (($row12$0140*12)|0)|0);
            $412 = (((($410) + (($row12$0140*12)|0)|0)) + 4|0);
            $413 = HEAP32[$412>>2]|0;
            $414 = (((($410) + (($row12$0140*12)|0)|0)) + 8|0);
            $415 = HEAP32[$414>>2]|0;
            $416 = ($413|0)==($415|0);
            $417 = $415;
            if ($416) {
             $420 = $413;
             $421 = HEAP32[$411>>2]|0;
             $422 = (($420) - ($421))|0;
             $423 = (($422) + 1)|0;
             $424 = ($423|0)<(0);
             if ($424) {
              __THREW__ = 0;
              invoke_vi(46,($411|0));
              $425 = __THREW__; __THREW__ = 0;
              $426 = $425&1;
              if ($426) {
               label = 7;
               break L150;
              }
              $$pre$i$i = HEAP32[$411>>2]|0;
              $$pre$i = HEAP32[$414>>2]|0;
              $$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $414;$429 = $$pre$i;
             } else {
              $$in$i$i = $421;$$pre$phi$iZ2D = $414;$429 = $417;
             }
             $427 = $$in$i$i;
             $428 = (($429) - ($$in$i$i))|0;
             $430 = ($428>>>0)<(1073741823);
             if ($430) {
              $433 = $428 << 1;
              $434 = ($433>>>0)<($423>>>0);
              $435 = $434 ? $423 : $433;
              $436 = HEAP32[$412>>2]|0;
              $437 = (($436) - ($$in$i$i))|0;
              $438 = ($435|0)==(0);
              if ($438) {
               $$0$i2$i$i = 0;$443 = 0;$444 = $437;$450 = $436;
              } else {
               $$0$i1$i$i = $435;$468 = $436;$469 = $437;
               label = 127;
              }
             } else {
              $431 = HEAP32[$412>>2]|0;
              $432 = (($431) - ($$in$i$i))|0;
              $$0$i1$i$i = 2147483647;$468 = $431;$469 = $432;
              label = 127;
             }
             if ((label|0) == 127) {
              label = 0;
              __THREW__ = 0;
              $439 = (invoke_ii(29,($$0$i1$i$i|0))|0);
              $440 = __THREW__; __THREW__ = 0;
              $441 = $440&1;
              if ($441) {
               label = 7;
               break L150;
              } else {
               $$0$i2$i$i = $$0$i1$i$i;$443 = $439;$444 = $469;$450 = $468;
              }
             }
             $442 = (($443) + ($444)|0);
             $445 = (($443) + ($$0$i2$i$i)|0);
             $446 = $445;
             HEAP8[$442>>0] = $409;
             $447 = ((($442)) + 1|0);
             $448 = $447;
             $449 = (($450) - ($$in$i$i))|0;
             $451 = (0 - ($449))|0;
             $452 = (($442) + ($451)|0);
             $453 = $452;
             _memcpy(($452|0),($427|0),($449|0))|0;
             HEAP32[$411>>2] = $453;
             HEAP32[$412>>2] = $448;
             HEAP32[$$pre$phi$iZ2D>>2] = $446;
             $454 = ($$in$i$i|0)==(0);
             if (!($454)) {
              __ZdlPv($427);
             }
            } else {
             HEAP8[$413>>0] = $409;
             $418 = HEAP32[$412>>2]|0;
             $419 = ((($418)) + 1|0);
             HEAP32[$412>>2] = $419;
            }
            $455 = (($col13$0135) + 1)|0;
            $456 = (($i11$1134) + 3)|0;
            $457 = ($455|0)<($27|0);
            if ($457) {
             $col13$0135 = $455;$i11$1134 = $456;
            } else {
             $i11$1$lcssa = $456;
             break;
            }
           }
          }
         } else {
          $i11$1$lcssa = $i11$0139;
         }
         $395 = (($row12$0140) + 1)|0;
         $396 = ($395|0)<($23|0);
         if ($396) {
          $i11$0139 = $i11$1$lcssa;$row12$0140 = $395;
         } else {
          label = 131;
          break;
         }
        }
        if ((label|0) == 7) {
         $30 = ___cxa_find_matching_catch_2()|0;
         $31 = tempRet0;
         $lpad$phi$index = $30;$lpad$phi$index8 = $31;
         break L19;
        }
        else if ((label|0) == 116) {
         $393 = ___cxa_find_matching_catch_2()|0;
         $394 = tempRet0;
         $lpad$phi$index = $393;$lpad$phi$index8 = $394;
         break L19;
        }
        else if ((label|0) == 131) {
         return;
        }
        break;
       }
       default: {
        return;
       }
       }
      }
     } while(0);
     $36 = HEAP32[$6>>2]|0;
     $37 = ($36|0)==(0|0);
     if ($37) {
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     $38 = HEAP32[$7>>2]|0;
     $39 = ($38|0)==($36|0);
     if ($39) {
      $49 = $36;
     } else {
      $41 = $38;
      while(1) {
       $40 = ((($41)) + -12|0);
       HEAP32[$7>>2] = $40;
       $42 = HEAP32[$40>>2]|0;
       $43 = ($42|0)==(0|0);
       if ($43) {
        $44 = $40;
       } else {
        $46 = ((($41)) + -8|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ($47|0)==($42|0);
        if (!($48)) {
         HEAP32[$46>>2] = $42;
        }
        __ZdlPv($42);
        $$pre$i$i$i21 = HEAP32[$7>>2]|0;
        $44 = $$pre$i$i$i21;
       }
       $45 = ($44|0)==($36|0);
       if ($45) {
        break;
       } else {
        $41 = $44;
       }
      }
      $$pre$i24 = HEAP32[$6>>2]|0;
      $49 = $$pre$i24;
     }
     __ZdlPv($49);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
    function __ZN10Page_imageC2ERKS_i($this,$source,$scale) {
     $this = $this|0;
     $source = $source|0;
     $scale = $scale|0;
     var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$lcssa74 = 0, $$lcssa74$lcssa = 0, $$phi$trans$insert = 0, $$phi$trans$insert51 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i8 = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$i3 = 0, $$pre52 = 0, $$pre53 = 0;
     var $$pre54 = 0, $$pre55 = 0, $$pre56 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
     var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
     var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
     var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
     var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
     var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
     var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
     var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
     var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
     var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
     var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
     var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
     var $99 = 0, $col$030 = 0, $col$030$us = 0, $i$023$us$us = 0, $j$021$us$us = 0, $lpad$phi$index = 0, $lpad$phi$index4 = 0, $row$034 = 0, $sum$022$us$us = 0, $sum$120$us$us = 0, label = 0, sp = 0;
     sp = STACKTOP;
     ;HEAP32[$this>>2]=HEAP32[$source>>2]|0;HEAP32[$this+4>>2]=HEAP32[$source+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$source+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$source+12>>2]|0;
     $0 = ((($this)) + 16|0);
     HEAP32[$0>>2] = 0;
     $1 = ((($this)) + 20|0);
     HEAP32[$1>>2] = 0;
     $2 = ((($this)) + 24|0);
     HEAP32[$2>>2] = 0;
     $3 = ((($this)) + 28|0);
     $4 = ((($source)) + 28|0);
     $5 = HEAP16[$4>>1]|0;
     $6 = $5&255;
     HEAP8[$3>>0] = $6;
     $7 = ((($this)) + 29|0);
     $8 = ($5&65535) >>> 8;
     $9 = $8&255;
     HEAP8[$7>>0] = $9;
     $10 = ($scale|0)<(2);
     if ($10) {
      label = 4;
     } else {
      $11 = ((($source)) + 8|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = HEAP32[$source>>2]|0;
      $14 = (($12) + 1)|0;
      $15 = (($14) - ($13))|0;
      $16 = ($15|0)<($scale|0);
      if ($16) {
       label = 4;
      } else {
       $17 = ((($source)) + 12|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = ((($source)) + 4|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (($18) + 1)|0;
       $22 = (($21) - ($20))|0;
       $23 = ($22|0)<($scale|0);
       if ($23) {
        label = 4;
       } else {
        $48 = $18;$50 = $20;
        label = 18;
       }
      }
     }
     if ((label|0) == 4) {
      __THREW__ = 0;
      invoke_vi(47,(1464|0));
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 8;
      } else {
       $$phi$trans$insert = ((($source)) + 12|0);
       $$pre = HEAP32[$$phi$trans$insert>>2]|0;
       $$phi$trans$insert51 = ((($source)) + 4|0);
       $$pre52 = HEAP32[$$phi$trans$insert51>>2]|0;
       $48 = $$pre;$50 = $$pre52;
       label = 18;
      }
     }
     do {
      if ((label|0) == 18) {
       $46 = Math_imul($scale, $scale)|0;
       $47 = (($48) + 1)|0;
       $49 = (($47) - ($50))|0;
       $51 = (($49|0) / ($scale|0))&-1;
       __THREW__ = 0;
       invoke_vii(37,($this|0),($51|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 8;
       } else {
        $54 = ((($source)) + 8|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = HEAP32[$source>>2]|0;
        $57 = (($55) + 1)|0;
        $58 = (($57) - ($56))|0;
        $59 = (($58|0) / ($scale|0))&-1;
        __THREW__ = 0;
        invoke_vii(36,($this|0),($59|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         label = 8;
        } else {
         $62 = ((($this)) + 12|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = ((($this)) + 4|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = (($63) + 1)|0;
         $67 = (($66) - ($65))|0;
         $68 = HEAP32[$1>>2]|0;
         $69 = HEAP32[$0>>2]|0;
         $70 = (($68) - ($69))|0;
         $71 = (($70|0) / 12)&-1;
         $72 = ($67>>>0)>($71>>>0);
         $73 = $69;
         $74 = $68;
         if ($72) {
          $75 = (($67) - ($71))|0;
          __THREW__ = 0;
          invoke_vii(38,($0|0),($75|0));
          $76 = __THREW__; __THREW__ = 0;
          $77 = $76&1;
          if ($77) {
           label = 8;
           break;
          }
         } else {
          $78 = ($67>>>0)<($71>>>0);
          if ($78) {
           $79 = (($73) + (($67*12)|0)|0);
           $80 = ($74|0)==($79|0);
           if (!($80)) {
            $82 = $74;
            while(1) {
             $81 = ((($82)) + -12|0);
             HEAP32[$1>>2] = $81;
             $83 = HEAP32[$81>>2]|0;
             $84 = ($83|0)==(0|0);
             if ($84) {
              $85 = $81;
             } else {
              $95 = ((($82)) + -8|0);
              $96 = HEAP32[$95>>2]|0;
              $97 = ($96|0)==($83|0);
              if (!($97)) {
               HEAP32[$95>>2] = $83;
              }
              __ZdlPv($83);
              $$pre$i$i$i8 = HEAP32[$1>>2]|0;
              $85 = $$pre$i$i$i8;
             }
             $86 = ($85|0)==($79|0);
             if ($86) {
              break;
             } else {
              $82 = $85;
             }
            }
           }
          }
         }
         $87 = HEAP32[$62>>2]|0;
         $88 = HEAP32[$64>>2]|0;
         $89 = (($87) + 1)|0;
         $90 = (($89) - ($88))|0;
         $91 = ($90|0)>(0);
         if (!($91)) {
          return;
         }
         $92 = ((($this)) + 8|0);
         $93 = ((($source)) + 16|0);
         $$pre53 = HEAP32[$92>>2]|0;
         $$pre54 = HEAP32[$this>>2]|0;
         $94 = ($scale|0)>(0);
         $103 = $$pre53;$105 = $$pre54;$row$034 = 0;
         L27: while(1) {
          $98 = Math_imul($row$034, $scale)|0;
          $99 = (($98) + ($scale))|0;
          $100 = HEAP32[$0>>2]|0;
          $101 = (($100) + (($row$034*12)|0)|0);
          $102 = (($103) + 1)|0;
          $104 = (($102) - ($105))|0;
          $106 = (((($100) + (($row$034*12)|0)|0)) + 8|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = HEAP32[$101>>2]|0;
          $109 = (($107) - ($108))|0;
          $110 = ($109>>>0)<($104>>>0);
          $111 = $108;
          if ($110) {
           $112 = (((($100) + (($row$034*12)|0)|0)) + 4|0);
           $113 = HEAP32[$112>>2]|0;
           $114 = (($113) - ($108))|0;
           $115 = ($102|0)==($105|0);
           if ($115) {
            $120 = 0;
           } else {
            __THREW__ = 0;
            $116 = (invoke_ii(29,($104|0))|0);
            $117 = __THREW__; __THREW__ = 0;
            $118 = $117&1;
            if ($118) {
             label = 7;
             break;
            } else {
             $120 = $116;
            }
           }
           $119 = (($120) + ($114)|0);
           $121 = $119;
           $122 = (($120) + ($104)|0);
           $123 = $122;
           $124 = (0 - ($114))|0;
           $125 = (($119) + ($124)|0);
           $126 = $125;
           _memcpy(($125|0),($111|0),($114|0))|0;
           HEAP32[$101>>2] = $126;
           HEAP32[$112>>2] = $121;
           HEAP32[$106>>2] = $123;
           $127 = ($108|0)==(0);
           if ($127) {
            $131 = $103;$133 = $105;
           } else {
            __ZdlPv($111);
            $$pre55 = HEAP32[$92>>2]|0;
            $$pre56 = HEAP32[$this>>2]|0;
            $131 = $$pre55;$133 = $$pre56;
           }
          } else {
           $131 = $103;$133 = $105;
          }
          $128 = HEAP32[$0>>2]|0;
          $129 = (($128) + (($row$034*12)|0)|0);
          $130 = (($131) + 1)|0;
          $132 = (($130) - ($133))|0;
          $134 = ($132|0)>(0);
          L36: do {
           if ($134) {
            $135 = (((($128) + (($row$034*12)|0)|0)) + 4|0);
            $136 = (((($128) + (($row$034*12)|0)|0)) + 8|0);
            if ($94) {
             $col$030$us = 0;
            } else {
             $col$030 = 0;
             while(1) {
              $206 = HEAP32[$135>>2]|0;
              $207 = HEAP32[$136>>2]|0;
              $208 = ($206|0)==($207|0);
              if ($208) {
               $211 = $206;
               $212 = HEAP32[$129>>2]|0;
               $213 = (($211) - ($212))|0;
               $214 = (($213) + 1)|0;
               $215 = ($214|0)<(0);
               if ($215) {
                __THREW__ = 0;
                invoke_vi(46,($129|0));
                $216 = __THREW__; __THREW__ = 0;
                $217 = $216&1;
                if ($217) {
                 label = 6;
                 break L27;
                }
                $$pre$i$i = HEAP32[$129>>2]|0;
                $$pre$i = HEAP32[$136>>2]|0;
                $$in$i$i = $$pre$i$i;$220 = $$pre$i;
               } else {
                $$in$i$i = $212;$220 = $211;
               }
               $218 = $$in$i$i;
               $219 = (($220) - ($$in$i$i))|0;
               $221 = ($219>>>0)<(1073741823);
               if ($221) {
                $224 = $219 << 1;
                $225 = ($224>>>0)<($214>>>0);
                $226 = $225 ? $214 : $224;
                $227 = HEAP32[$135>>2]|0;
                $228 = (($227) - ($$in$i$i))|0;
                $229 = ($226|0)==(0);
                if ($229) {
                 $$0$i2$i$i = 0;$234 = 0;$235 = $228;$241 = $227;
                } else {
                 $$0$i1$i$i = $226;$256 = $227;$257 = $228;
                 label = 65;
                }
               } else {
                $222 = HEAP32[$135>>2]|0;
                $223 = (($222) - ($$in$i$i))|0;
                $$0$i1$i$i = 2147483647;$256 = $222;$257 = $223;
                label = 65;
               }
               if ((label|0) == 65) {
                label = 0;
                __THREW__ = 0;
                $230 = (invoke_ii(29,($$0$i1$i$i|0))|0);
                $231 = __THREW__; __THREW__ = 0;
                $232 = $231&1;
                if ($232) {
                 label = 6;
                 break L27;
                } else {
                 $$0$i2$i$i = $$0$i1$i$i;$234 = $230;$235 = $257;$241 = $256;
                }
               }
               $233 = (($234) + ($235)|0);
               $236 = (($234) + ($$0$i2$i$i)|0);
               $237 = $236;
               HEAP8[$233>>0] = 0;
               $238 = ((($233)) + 1|0);
               $239 = $238;
               $240 = (($241) - ($$in$i$i))|0;
               $242 = (0 - ($240))|0;
               $243 = (($233) + ($242)|0);
               $244 = $243;
               _memcpy(($243|0),($218|0),($240|0))|0;
               HEAP32[$129>>2] = $244;
               HEAP32[$135>>2] = $239;
               HEAP32[$136>>2] = $237;
               $245 = ($$in$i$i|0)==(0);
               if (!($245)) {
                __ZdlPv($218);
               }
              } else {
               HEAP8[$206>>0] = 0;
               $209 = HEAP32[$135>>2]|0;
               $210 = ((($209)) + 1|0);
               HEAP32[$135>>2] = $210;
              }
              $246 = (($col$030) + 1)|0;
              $247 = HEAP32[$92>>2]|0;
              $248 = HEAP32[$this>>2]|0;
              $249 = (($247) + 1)|0;
              $250 = (($249) - ($248))|0;
              $251 = ($246|0)<($250|0);
              if ($251) {
               $col$030 = $246;
              } else {
               $252 = $248;$253 = $247;
               break L36;
              }
             }
            }
            while(1) {
             $137 = Math_imul($col$030$us, $scale)|0;
             $138 = (($137) + ($scale))|0;
             $139 = HEAP32[$93>>2]|0;
             $i$023$us$us = $98;$sum$022$us$us = 0;
             while(1) {
              $188 = (($139) + (($i$023$us$us*12)|0)|0);
              $189 = HEAP32[$188>>2]|0;
              $j$021$us$us = $137;$sum$120$us$us = $sum$022$us$us;
              while(1) {
               $192 = (($189) + ($j$021$us$us)|0);
               $193 = HEAP8[$192>>0]|0;
               $194 = $193&255;
               $195 = (($194) + ($sum$120$us$us))|0;
               $196 = (($j$021$us$us) + 1)|0;
               $197 = ($196|0)<($138|0);
               if ($197) {
                $j$021$us$us = $196;$sum$120$us$us = $195;
               } else {
                $$lcssa74 = $195;
                break;
               }
              }
              $190 = (($i$023$us$us) + 1)|0;
              $191 = ($190|0)<($99|0);
              if ($191) {
               $i$023$us$us = $190;$sum$022$us$us = $$lcssa74;
              } else {
               $$lcssa74$lcssa = $$lcssa74;
               break;
              }
             }
             $185 = (($$lcssa74$lcssa|0) / ($46|0))&-1;
             $140 = $185&255;
             $141 = HEAP32[$135>>2]|0;
             $186 = HEAP32[$136>>2]|0;
             $187 = ($141|0)==($186|0);
             if ($187) {
              $144 = $141;
              $145 = HEAP32[$129>>2]|0;
              $146 = (($144) - ($145))|0;
              $147 = (($146) + 1)|0;
              $148 = ($147|0)<(0);
              if ($148) {
               __THREW__ = 0;
               invoke_vi(46,($129|0));
               $149 = __THREW__; __THREW__ = 0;
               $150 = $149&1;
               if ($150) {
                label = 55;
                break L27;
               }
               $$pre$i$i$us = HEAP32[$129>>2]|0;
               $$pre$i$us = HEAP32[$136>>2]|0;
               $$in$i$i$us = $$pre$i$i$us;$153 = $$pre$i$us;
              } else {
               $$in$i$i$us = $145;$153 = $144;
              }
              $151 = $$in$i$i$us;
              $152 = (($153) - ($$in$i$i$us))|0;
              $154 = ($152>>>0)<(1073741823);
              if ($154) {
               $157 = $152 << 1;
               $158 = ($157>>>0)<($147>>>0);
               $159 = $158 ? $147 : $157;
               $160 = HEAP32[$135>>2]|0;
               $161 = (($160) - ($$in$i$i$us))|0;
               $162 = ($159|0)==(0);
               if ($162) {
                $$0$i2$i$i$us = 0;$167 = 0;$168 = $161;$174 = $160;
               } else {
                $$0$i1$i$i$us = $159;$254 = $160;$255 = $161;
                label = 47;
               }
              } else {
               $155 = HEAP32[$135>>2]|0;
               $156 = (($155) - ($$in$i$i$us))|0;
               $$0$i1$i$i$us = 2147483647;$254 = $155;$255 = $156;
               label = 47;
              }
              if ((label|0) == 47) {
               label = 0;
               __THREW__ = 0;
               $163 = (invoke_ii(29,($$0$i1$i$i$us|0))|0);
               $164 = __THREW__; __THREW__ = 0;
               $165 = $164&1;
               if ($165) {
                label = 55;
                break L27;
               } else {
                $$0$i2$i$i$us = $$0$i1$i$i$us;$167 = $163;$168 = $255;$174 = $254;
               }
              }
              $166 = (($167) + ($168)|0);
              $169 = (($167) + ($$0$i2$i$i$us)|0);
              $170 = $169;
              HEAP8[$166>>0] = $140;
              $171 = ((($166)) + 1|0);
              $172 = $171;
              $173 = (($174) - ($$in$i$i$us))|0;
              $175 = (0 - ($173))|0;
              $176 = (($166) + ($175)|0);
              $177 = $176;
              _memcpy(($176|0),($151|0),($173|0))|0;
              HEAP32[$129>>2] = $177;
              HEAP32[$135>>2] = $172;
              HEAP32[$136>>2] = $170;
              $178 = ($$in$i$i$us|0)==(0);
              if (!($178)) {
               __ZdlPv($151);
              }
             } else {
              HEAP8[$141>>0] = $140;
              $142 = HEAP32[$135>>2]|0;
              $143 = ((($142)) + 1|0);
              HEAP32[$135>>2] = $143;
             }
             $179 = (($col$030$us) + 1)|0;
             $180 = HEAP32[$92>>2]|0;
             $181 = HEAP32[$this>>2]|0;
             $182 = (($180) + 1)|0;
             $183 = (($182) - ($181))|0;
             $184 = ($179|0)<($183|0);
             if ($184) {
              $col$030$us = $179;
             } else {
              $252 = $181;$253 = $180;
              break;
             }
            }
           } else {
            $252 = $133;$253 = $131;
           }
          } while(0);
          $200 = (($row$034) + 1)|0;
          $201 = HEAP32[$62>>2]|0;
          $202 = HEAP32[$64>>2]|0;
          $203 = (($201) + 1)|0;
          $204 = (($203) - ($202))|0;
          $205 = ($200|0)<($204|0);
          if ($205) {
           $103 = $253;$105 = $252;$row$034 = $200;
          } else {
           label = 31;
           break;
          }
         }
         if ((label|0) == 6) {
          $26 = ___cxa_find_matching_catch_2()|0;
          $27 = tempRet0;
          $lpad$phi$index = $26;$lpad$phi$index4 = $27;
          break;
         }
         else if ((label|0) == 7) {
          $28 = ___cxa_find_matching_catch_2()|0;
          $29 = tempRet0;
          $lpad$phi$index = $28;$lpad$phi$index4 = $29;
          break;
         }
         else if ((label|0) == 31) {
          return;
         }
         else if ((label|0) == 55) {
          $198 = ___cxa_find_matching_catch_2()|0;
          $199 = tempRet0;
          $lpad$phi$index = $198;$lpad$phi$index4 = $199;
          break;
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 8) {
      $30 = ___cxa_find_matching_catch_2()|0;
      $31 = tempRet0;
      $lpad$phi$index = $30;$lpad$phi$index4 = $31;
     }
     $32 = HEAP32[$0>>2]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     $34 = HEAP32[$1>>2]|0;
     $35 = ($34|0)==($32|0);
     if ($35) {
      $45 = $32;
     } else {
      $37 = $34;
      while(1) {
       $36 = ((($37)) + -12|0);
       HEAP32[$1>>2] = $36;
       $38 = HEAP32[$36>>2]|0;
       $39 = ($38|0)==(0|0);
       if ($39) {
        $40 = $36;
       } else {
        $42 = ((($37)) + -8|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = ($43|0)==($38|0);
        if (!($44)) {
         HEAP32[$42>>2] = $38;
        }
        __ZdlPv($38);
        $$pre$i$i$i = HEAP32[$1>>2]|0;
        $40 = $$pre$i$i$i;
       }
       $41 = ($40|0)==($32|0);
       if ($41) {
        break;
       } else {
        $37 = $40;
       }
      }
      $$pre$i3 = HEAP32[$0>>2]|0;
      $45 = $$pre$i3;
     }
     __ZdlPv($45);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
    function __ZN12_GLOBAL__N_17otsu_thERKNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEERK9Rectanglei($data,$re,$maxval) {
     $data = $data|0;
     $re = $re|0;
     $maxval = $maxval|0;
     var $$0 = 0, $$01 = 0, $$02 = 0, $$lcssa = 0, $$pre = 0, $$pre49 = 0, $$pre50 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0;
     var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
     var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
     var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
     var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
     var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
     var $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
     var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
     var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0;
     var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
     var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
     var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
     var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bvar_max$035 = 0.0;
     var $bvar_max$1 = 0.0, $bvar_max$2 = 0.0, $chist = 0, $cmom = 0, $col$040 = 0, $exitcond = 0, $hist = 0, $i$038 = 0, $i1$037 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $row$044 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i14 = 0, $scevgep$i$i$i19 = 0, $scevgep$i$i$i29 = 0, $scevgep$i$i$i4 = 0, $scevgep$i$i$i9 = 0;
     var $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i10 = 0, $scevgep4$i$i$i15 = 0, $scevgep4$i$i$i20 = 0, $scevgep4$i$i$i30 = 0, $scevgep4$i$i$i5 = 0, $threshold$0$lcssa = 0, $threshold$036 = 0, $threshold$1 = 0, $threshold$2 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $hist = sp + 44|0;
     $chist = sp + 32|0;
     $cmom = sp + 20|0;
     $0 = sp + 8|0;
     $1 = sp + 16|0;
     $2 = sp;
     $3 = ($maxval|0)==(1);
     if ($3) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $4 = (($maxval) + 1)|0;
     HEAP32[$hist>>2] = 0;
     $5 = ((($hist)) + 4|0);
     HEAP32[$5>>2] = 0;
     $6 = ((($hist)) + 8|0);
     HEAP32[$6>>2] = 0;
     $7 = ($4|0)==(0);
     do {
      if ($7) {
       $49 = 0;
      } else {
       $8 = ($4>>>0)>(1073741823);
       if ($8) {
        __THREW__ = 0;
        invoke_vi(46,($hist|0));
        $9 = __THREW__; __THREW__ = 0;
        $10 = $9&1;
        if (!($10)) {
         label = 5;
        }
       } else {
        label = 5;
       }
       if ((label|0) == 5) {
        $11 = $4 << 2;
        __THREW__ = 0;
        $12 = (invoke_ii(29,($11|0))|0);
        $13 = __THREW__; __THREW__ = 0;
        $14 = $13&1;
        if (!($14)) {
         HEAP32[$hist>>2] = $12;
         $15 = (($12) + ($4<<2)|0);
         $16 = ((($hist)) + 8|0);
         HEAP32[$16>>2] = $15;
         $17 = $maxval << 2;
         $18 = (($17) + 4)|0;
         _memset(($12|0),0,($18|0))|0;
         HEAP32[$5>>2] = $15;
         $49 = $12;
         break;
        }
       }
       $19 = ___cxa_find_matching_catch_2()|0;
       $20 = tempRet0;
       $21 = HEAP32[$hist>>2]|0;
       $22 = ($21|0)==(0|0);
       $23 = $21;
       if ($22) {
        ___resumeException($19|0);
        // unreachable;
       }
       $24 = HEAP32[$5>>2]|0;
       $25 = ($24|0)==($21|0);
       if (!($25)) {
        $scevgep$i$i$i$i = ((($24)) + -4|0);
        $26 = $scevgep$i$i$i$i;
        $27 = (($26) - ($23))|0;
        $28 = $27 >>> 2;
        $29 = $28 ^ -1;
        $scevgep4$i$i$i$i = (($24) + ($29<<2)|0);
        HEAP32[$5>>2] = $scevgep4$i$i$i$i;
       }
       __ZdlPv($21);
       ___resumeException($19|0);
       // unreachable;
      }
     } while(0);
     $30 = ((($re)) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($re)) + 12|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($31|0)>($33|0);
     if (!($34)) {
      $35 = ((($re)) + 8|0);
      $$pre = HEAP32[$35>>2]|0;
      $250 = $33;$38 = $$pre;$row$044 = $31;
      while(1) {
       $36 = HEAP32[$re>>2]|0;
       $37 = ($36|0)>($38|0);
       if ($37) {
        $251 = $38;$41 = $250;
       } else {
        $col$040 = $36;
        while(1) {
         $42 = HEAP32[$data>>2]|0;
         $43 = (($42) + (($row$044*12)|0)|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = (($44) + ($col$040)|0);
         $46 = HEAP8[$45>>0]|0;
         $47 = $46&255;
         $48 = (($49) + ($47<<2)|0);
         $50 = HEAP32[$48>>2]|0;
         $51 = (($50) + 1)|0;
         HEAP32[$48>>2] = $51;
         $52 = (($col$040) + 1)|0;
         $53 = HEAP32[$35>>2]|0;
         $54 = ($col$040|0)<($53|0);
         if ($54) {
          $col$040 = $52;
         } else {
          $$lcssa = $53;
          break;
         }
        }
        $$pre49 = HEAP32[$32>>2]|0;
        $251 = $$lcssa;$41 = $$pre49;
       }
       $39 = (($row$044) + 1)|0;
       $40 = ($row$044|0)<($41|0);
       if ($40) {
        $250 = $41;$38 = $251;$row$044 = $39;
       } else {
        break;
       }
      }
     }
     HEAP32[$chist>>2] = 0;
     $55 = ((($chist)) + 4|0);
     HEAP32[$55>>2] = 0;
     $56 = ((($chist)) + 8|0);
     HEAP32[$56>>2] = 0;
     $57 = ((($chist)) + 8|0);
     $58 = ($4|0)!=(0);
     if ($58) {
      $59 = $4 << 2;
      __THREW__ = 0;
      $60 = (invoke_ii(29,($59|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 33;
      } else {
       $63 = $60;
       $64 = (($60) + ($4<<2)|0);
       $65 = $64;
       HEAP32[$chist>>2] = $63;
       HEAP32[$55>>2] = $63;
       HEAP32[$57>>2] = $65;
       $66 = ($60|0)==($64|0);
       if ($66) {
        label = 22;
       } else {
        $67 = HEAP32[$49>>2]|0;
        HEAP32[$60>>2] = $67;
        $68 = ((($60)) + 4|0);
        HEAP32[$55>>2] = $68;
        label = 23;
       }
      }
     } else {
      label = 22;
     }
     if ((label|0) == 22) {
      __THREW__ = 0;
      invoke_vii(48,($chist|0),($49|0));
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       label = 33;
      } else {
       label = 23;
      }
     }
     if ((label|0) == 23) {
      HEAP32[$cmom>>2] = 0;
      $71 = ((($cmom)) + 4|0);
      HEAP32[$71>>2] = 0;
      $72 = ((($cmom)) + 8|0);
      HEAP32[$72>>2] = 0;
      $73 = ((($cmom)) + 8|0);
      if ($58) {
       $78 = $4 << 3;
       __THREW__ = 0;
       $79 = (invoke_ii(29,($78|0))|0);
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       if ($81) {
        label = 35;
       } else {
        $82 = $79;
        $83 = (($79) + ($4<<3)|0);
        $84 = $83;
        HEAP32[$cmom>>2] = $82;
        HEAP32[$71>>2] = $82;
        HEAP32[$73>>2] = $84;
        $85 = $0;
        $86 = $85;
        HEAP32[$86>>2] = 0;
        $87 = (($85) + 4)|0;
        $88 = $87;
        HEAP32[$88>>2] = 0;
        $89 = ($79|0)==($83|0);
        if ($89) {
         label = 28;
        } else {
         $90 = $79;
         $91 = $90;
         HEAP32[$91>>2] = 0;
         $92 = (($90) + 4)|0;
         $93 = $92;
         HEAP32[$93>>2] = 0;
         $94 = ((($79)) + 8|0);
         HEAP32[$71>>2] = $94;
         label = 29;
        }
       }
      } else {
       $74 = $0;
       $75 = $74;
       HEAP32[$75>>2] = 0;
       $76 = (($74) + 4)|0;
       $77 = $76;
       HEAP32[$77>>2] = 0;
       label = 28;
      }
      if ((label|0) == 28) {
       __THREW__ = 0;
       invoke_vii(49,($cmom|0),($0|0));
       $95 = __THREW__; __THREW__ = 0;
       $96 = $95&1;
       if ($96) {
        label = 35;
       } else {
        label = 29;
       }
      }
      do {
       if ((label|0) == 29) {
        $97 = ($maxval|0)<(1);
        if ($97) {
         $98 = HEAP32[$cmom>>2]|0;
         $181 = $98;$threshold$0$lcssa = 0;
        } else {
         $i$038 = 1;
         while(1) {
          $135 = (($i$038) + -1)|0;
          $136 = HEAP32[$chist>>2]|0;
          $137 = (($136) + ($135<<2)|0);
          $138 = HEAP32[$137>>2]|0;
          $139 = HEAP32[$hist>>2]|0;
          $140 = (($139) + ($i$038<<2)|0);
          $141 = HEAP32[$140>>2]|0;
          $142 = (($141) + ($138))|0;
          HEAP32[$1>>2] = $142;
          $143 = HEAP32[$55>>2]|0;
          $144 = HEAP32[$57>>2]|0;
          $145 = ($143|0)==($144|0);
          if ($145) {
           __THREW__ = 0;
           invoke_vii(48,($chist|0),($1|0));
           $147 = __THREW__; __THREW__ = 0;
           $148 = $147&1;
           if ($148) {
            label = 34;
            break;
           }
           $$pre50 = HEAP32[$hist>>2]|0;
           $158 = $$pre50;
          } else {
           HEAP32[$143>>2] = $142;
           $146 = ((($143)) + 4|0);
           HEAP32[$55>>2] = $146;
           $158 = $139;
          }
          $149 = HEAP32[$cmom>>2]|0;
          $150 = (($149) + ($135<<3)|0);
          $151 = $150;
          $152 = $151;
          $153 = HEAP32[$152>>2]|0;
          $154 = (($151) + 4)|0;
          $155 = $154;
          $156 = HEAP32[$155>>2]|0;
          $157 = (($158) + ($i$038<<2)|0);
          $159 = HEAP32[$157>>2]|0;
          $160 = Math_imul($159, $i$038)|0;
          $161 = ($160|0)<(0);
          $162 = $161 << 31 >> 31;
          $163 = (_i64Add(($160|0),($162|0),($153|0),($156|0))|0);
          $164 = tempRet0;
          $165 = $2;
          $166 = $165;
          HEAP32[$166>>2] = $163;
          $167 = (($165) + 4)|0;
          $168 = $167;
          HEAP32[$168>>2] = $164;
          $169 = HEAP32[$71>>2]|0;
          $170 = HEAP32[$73>>2]|0;
          $171 = ($169|0)==($170|0);
          if ($171) {
           __THREW__ = 0;
           invoke_vii(49,($cmom|0),($2|0));
           $177 = __THREW__; __THREW__ = 0;
           $178 = $177&1;
           if ($178) {
            label = 34;
            break;
           }
          } else {
           $172 = $169;
           $173 = $172;
           HEAP32[$173>>2] = $163;
           $174 = (($172) + 4)|0;
           $175 = $174;
           HEAP32[$175>>2] = $164;
           $176 = ((($169)) + 8|0);
           HEAP32[$71>>2] = $176;
          }
          $179 = (($i$038) + 1)|0;
          $180 = ($i$038|0)<($maxval|0);
          if ($180) {
           $i$038 = $179;
          } else {
           break;
          }
         }
         if ((label|0) == 34) {
          $122 = ___cxa_find_matching_catch_2()|0;
          $123 = tempRet0;
          $lpad$phi$index = $122;$lpad$phi$index2 = $123;
          break;
         }
         $99 = HEAP32[$cmom>>2]|0;
         $100 = (($99) + ($maxval<<3)|0);
         $101 = $100;
         $102 = $101;
         $103 = HEAP32[$102>>2]|0;
         $104 = (($101) + 4)|0;
         $105 = $104;
         $106 = HEAP32[$105>>2]|0;
         $107 = (+($103>>>0)) + (4294967296.0*(+($106|0)));
         $108 = ($maxval|0)>(0);
         if ($108) {
          $109 = HEAP32[$chist>>2]|0;
          $110 = HEAP32[$30>>2]|0;
          $111 = ((($re)) + 8|0);
          $112 = HEAP32[$111>>2]|0;
          $113 = HEAP32[$re>>2]|0;
          $114 = (($112) + 1)|0;
          $115 = (($114) - ($113))|0;
          $116 = HEAP32[$32>>2]|0;
          $117 = (($116) + 1)|0;
          $118 = (($117) - ($110))|0;
          $119 = Math_imul($115, $118)|0;
          $bvar_max$035 = 0.0;$i1$037 = 0;$threshold$036 = 0;
          while(1) {
           $190 = (($109) + ($i1$037<<2)|0);
           $191 = HEAP32[$190>>2]|0;
           $192 = ($191|0)>(0);
           $193 = ($119|0)>($191|0);
           $or$cond = $192 & $193;
           if ($or$cond) {
            $194 = (($99) + ($i1$037<<3)|0);
            $195 = $194;
            $196 = $195;
            $197 = HEAP32[$196>>2]|0;
            $198 = (($195) + 4)|0;
            $199 = $198;
            $200 = HEAP32[$199>>2]|0;
            $201 = (+($197>>>0)) + (4294967296.0*(+($200|0)));
            $202 = (+($191|0));
            $203 = $201 / $202;
            $204 = $107 - $201;
            $205 = (($119) - ($191))|0;
            $206 = (+($205|0));
            $207 = $204 / $206;
            $208 = $203 - $207;
            $209 = $208 * $208;
            $210 = $202 * $209;
            $211 = $206 * $210;
            $212 = $211 > $bvar_max$035;
            $bvar_max$1 = $212 ? $211 : $bvar_max$035;
            $threshold$1 = $212 ? $i1$037 : $threshold$036;
            $bvar_max$2 = $bvar_max$1;$threshold$2 = $threshold$1;
           } else {
            $bvar_max$2 = $bvar_max$035;$threshold$2 = $threshold$036;
           }
           $213 = (($i1$037) + 1)|0;
           $exitcond = ($213|0)==($maxval|0);
           if ($exitcond) {
            $181 = $99;$threshold$0$lcssa = $threshold$2;
            break;
           } else {
            $bvar_max$035 = $bvar_max$2;$i1$037 = $213;$threshold$036 = $threshold$2;
           }
          }
         } else {
          $181 = $99;$threshold$0$lcssa = 0;
         }
        }
        $182 = ($181|0)==(0|0);
        $183 = $181;
        if (!($182)) {
         $184 = HEAP32[$71>>2]|0;
         $185 = ($184|0)==($181|0);
         if (!($185)) {
          $scevgep$i$i$i19 = ((($184)) + -8|0);
          $186 = $scevgep$i$i$i19;
          $187 = (($186) - ($183))|0;
          $188 = $187 >>> 3;
          $189 = $188 ^ -1;
          $scevgep4$i$i$i20 = (($184) + ($189<<3)|0);
          HEAP32[$71>>2] = $scevgep4$i$i$i20;
         }
         __ZdlPv($181);
        }
        $214 = HEAP32[$chist>>2]|0;
        $215 = ($214|0)==(0|0);
        $216 = $214;
        if (!($215)) {
         $217 = HEAP32[$55>>2]|0;
         $218 = ($217|0)==($214|0);
         if (!($218)) {
          $scevgep$i$i$i14 = ((($217)) + -4|0);
          $219 = $scevgep$i$i$i14;
          $220 = (($219) - ($216))|0;
          $221 = $220 >>> 2;
          $222 = $221 ^ -1;
          $scevgep4$i$i$i15 = (($217) + ($222<<2)|0);
          HEAP32[$55>>2] = $scevgep4$i$i$i15;
         }
         __ZdlPv($214);
        }
        $223 = HEAP32[$hist>>2]|0;
        $224 = ($223|0)==(0|0);
        $225 = $223;
        if (!($224)) {
         $226 = HEAP32[$5>>2]|0;
         $227 = ($226|0)==($223|0);
         if (!($227)) {
          $scevgep$i$i$i9 = ((($226)) + -4|0);
          $228 = $scevgep$i$i$i9;
          $229 = (($228) - ($225))|0;
          $230 = $229 >>> 2;
          $231 = $230 ^ -1;
          $scevgep4$i$i$i10 = (($226) + ($231<<2)|0);
          HEAP32[$5>>2] = $scevgep4$i$i$i10;
         }
         __ZdlPv($223);
        }
        $$0 = $threshold$0$lcssa;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 35) {
        $124 = ___cxa_find_matching_catch_2()|0;
        $125 = tempRet0;
        $lpad$phi$index = $124;$lpad$phi$index2 = $125;
       }
      } while(0);
      $126 = HEAP32[$cmom>>2]|0;
      $127 = ($126|0)==(0|0);
      $128 = $126;
      if ($127) {
       $$01 = $lpad$phi$index2;$$02 = $lpad$phi$index;
      } else {
       $129 = HEAP32[$71>>2]|0;
       $130 = ($129|0)==($126|0);
       if (!($130)) {
        $scevgep$i$i$i29 = ((($129)) + -8|0);
        $131 = $scevgep$i$i$i29;
        $132 = (($131) - ($128))|0;
        $133 = $132 >>> 3;
        $134 = $133 ^ -1;
        $scevgep4$i$i$i30 = (($129) + ($134<<3)|0);
        HEAP32[$71>>2] = $scevgep4$i$i$i30;
       }
       __ZdlPv($126);
       $$01 = $lpad$phi$index2;$$02 = $lpad$phi$index;
      }
     }
     else if ((label|0) == 33) {
      $120 = ___cxa_find_matching_catch_2()|0;
      $121 = tempRet0;
      $$01 = $121;$$02 = $120;
     }
     $232 = HEAP32[$chist>>2]|0;
     $233 = ($232|0)==(0|0);
     $234 = $232;
     if (!($233)) {
      $235 = HEAP32[$55>>2]|0;
      $236 = ($235|0)==($232|0);
      if (!($236)) {
       $scevgep$i$i$i4 = ((($235)) + -4|0);
       $237 = $scevgep$i$i$i4;
       $238 = (($237) - ($234))|0;
       $239 = $238 >>> 2;
       $240 = $239 ^ -1;
       $scevgep4$i$i$i5 = (($235) + ($240<<2)|0);
       HEAP32[$55>>2] = $scevgep4$i$i$i5;
      }
      __ZdlPv($232);
     }
     $241 = HEAP32[$hist>>2]|0;
     $242 = ($241|0)==(0|0);
     $243 = $241;
     if ($242) {
      ___resumeException($$02|0);
      // unreachable;
     }
     $244 = HEAP32[$5>>2]|0;
     $245 = ($244|0)==($241|0);
     if (!($245)) {
      $scevgep$i$i$i = ((($244)) + -4|0);
      $246 = $scevgep$i$i$i;
      $247 = (($246) - ($243))|0;
      $248 = $247 >>> 2;
      $249 = $248 ^ -1;
      $scevgep4$i$i$i = (($244) + ($249<<2)|0);
      HEAP32[$5>>2] = $scevgep4$i$i$i;
     }
     __ZdlPv($241);
     ___resumeException($$02|0);
     // unreachable;
     return (0)|0;
    }
    function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = (($1) - ($2))|0;
     $4 = $3 >> 2;
     $5 = (($4) + 1)|0;
     $6 = ($5>>>0)>(1073741823);
     if ($6) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$this>>2]|0;
      $$in = $$pre;
     } else {
      $$in = $2;
     }
     $7 = ((($this)) + 8|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) - ($$in))|0;
     $10 = $9 >> 2;
     $11 = ($10>>>0)<(536870911);
     if ($11) {
      $15 = $9 >> 1;
      $16 = ($15>>>0)<($5>>>0);
      $17 = $16 ? $5 : $15;
      $18 = HEAP32[$0>>2]|0;
      $19 = (($18) - ($$in))|0;
      $20 = $19 >> 2;
      $21 = ($17|0)==(0);
      if ($21) {
       $$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
      } else {
       $$0$i1 = $17;$41 = $18;$42 = $20;
       label = 6;
      }
     } else {
      $12 = HEAP32[$0>>2]|0;
      $13 = (($12) - ($$in))|0;
      $14 = $13 >> 2;
      $$0$i1 = 1073741823;$41 = $12;$42 = $14;
      label = 6;
     }
     if ((label|0) == 6) {
      $22 = $$0$i1 << 2;
      $23 = (__Znwj($22)|0);
      $$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
     }
     $24 = (($25) + ($26<<2)|0);
     $27 = (($25) + ($$0$i2<<2)|0);
     $28 = $27;
     $29 = HEAP32[$__x>>2]|0;
     HEAP32[$24>>2] = $29;
     $30 = ((($24)) + 4|0);
     $31 = $30;
     $32 = (($33) - ($$in))|0;
     $34 = $32 >> 2;
     $35 = (0 - ($34))|0;
     $36 = (($24) + ($35<<2)|0);
     $37 = $36;
     $38 = $$in;
     _memcpy(($36|0),($38|0),($32|0))|0;
     HEAP32[$this>>2] = $37;
     HEAP32[$0>>2] = $31;
     HEAP32[$7>>2] = $28;
     $39 = ($$in|0)==(0);
     if ($39) {
      return;
     }
     $40 = $$in;
     __ZdlPv($40);
     return;
    }
    function __ZNSt3__16vectorIxNS_9allocatorIxEEE21__push_back_slow_pathIKxEEvRT_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = (($1) - ($2))|0;
     $4 = $3 >> 3;
     $5 = (($4) + 1)|0;
     $6 = ($5>>>0)>(536870911);
     if ($6) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$this>>2]|0;
      $$in = $$pre;
     } else {
      $$in = $2;
     }
     $7 = ((($this)) + 8|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) - ($$in))|0;
     $10 = $9 >> 3;
     $11 = ($10>>>0)<(268435455);
     if ($11) {
      $15 = $9 >> 2;
      $16 = ($15>>>0)<($5>>>0);
      $17 = $16 ? $5 : $15;
      $18 = HEAP32[$0>>2]|0;
      $19 = (($18) - ($$in))|0;
      $20 = $19 >> 3;
      $21 = ($17|0)==(0);
      if ($21) {
       $$0$i2 = 0;$25 = 0;$26 = $20;$42 = $18;
      } else {
       $$0$i1 = $17;$50 = $18;$51 = $20;
       label = 6;
      }
     } else {
      $12 = HEAP32[$0>>2]|0;
      $13 = (($12) - ($$in))|0;
      $14 = $13 >> 3;
      $$0$i1 = 536870911;$50 = $12;$51 = $14;
      label = 6;
     }
     if ((label|0) == 6) {
      $22 = $$0$i1 << 3;
      $23 = (__Znwj($22)|0);
      $$0$i2 = $$0$i1;$25 = $23;$26 = $51;$42 = $50;
     }
     $24 = (($25) + ($26<<3)|0);
     $27 = (($25) + ($$0$i2<<3)|0);
     $28 = $27;
     $29 = $__x;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = $24;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
     $39 = ((($24)) + 8|0);
     $40 = $39;
     $41 = (($42) - ($$in))|0;
     $43 = $41 >> 3;
     $44 = (0 - ($43))|0;
     $45 = (($24) + ($44<<3)|0);
     $46 = $45;
     $47 = $$in;
     _memcpy(($45|0),($47|0),($41|0))|0;
     HEAP32[$this>>2] = $46;
     HEAP32[$0>>2] = $40;
     HEAP32[$7>>2] = $28;
     $48 = ($$in|0)==(0);
     if ($48) {
      return;
     }
     $49 = $$in;
     __ZdlPv($49);
     return;
    }
    function __ZN10Page_image9thresholdEi($this,$th) {
     $this = $this|0;
     $th = $th|0;
     var $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($th>>>0)<(256);
     $1 = ((($this)) + 28|0);
     $2 = HEAP8[$1>>0]|0;
     if ($0) {
      $3 = $2&255;
      $4 = Math_imul($3, $th)|0;
      $5 = (($4|0) / 255)&-1;
      $$sink$in = $5;
     } else {
      $6 = ((($this)) + 16|0);
      $7 = $2&255;
      $8 = (__ZN12_GLOBAL__N_17otsu_thERKNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEERK9Rectanglei($6,$this,$7)|0);
      $$sink$in = $8;
     }
     $$sink = $$sink$in&255;
     $9 = ((($this)) + 29|0);
     HEAP8[$9>>0] = $$sink;
     return;
    }
    function __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj($this,$__n) {
     $this = $this|0;
     $__n = $__n|0;
     var $$0$i = 0, $$0$i2 = 0, $$0$i34 = 0, $$0$i35 = 0, $$lcssa = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
     var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
     var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v$sroa$12$0 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) - ($3))|0;
     $5 = ($4>>>0)<($__n>>>0);
     if (!($5)) {
      $6 = $3;
      $$0$i = $__n;$7 = $6;
      while(1) {
       HEAP8[$7>>0] = 0;
       $8 = HEAP32[$2>>2]|0;
       $9 = ((($8)) + 1|0);
       HEAP32[$2>>2] = $9;
       $10 = (($$0$i) + -1)|0;
       $11 = ($10|0)==(0);
       if ($11) {
        break;
       } else {
        $$0$i = $10;$7 = $9;
       }
      }
      return;
     }
     $12 = HEAP32[$this>>2]|0;
     $13 = (($3) - ($12))|0;
     $14 = (($13) + ($__n))|0;
     $15 = ($14|0)<(0);
     if ($15) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$0>>2]|0;
      $$pre6 = HEAP32[$this>>2]|0;
      $17 = $$pre6;$18 = $$pre;
     } else {
      $17 = $12;$18 = $1;
     }
     $16 = (($18) - ($17))|0;
     $19 = ($16>>>0)<(1073741823);
     if ($19) {
      $22 = $16 << 1;
      $23 = ($22>>>0)<($14>>>0);
      $24 = $23 ? $14 : $22;
      $25 = HEAP32[$2>>2]|0;
      $26 = (($25) - ($17))|0;
      $27 = ($24|0)==(0);
      if ($27) {
       $$0$i35 = 0;$30 = 0;$31 = $26;
      } else {
       $$0$i34 = $24;$49 = $26;
       label = 9;
      }
     } else {
      $20 = HEAP32[$2>>2]|0;
      $21 = (($20) - ($17))|0;
      $$0$i34 = 2147483647;$49 = $21;
      label = 9;
     }
     if ((label|0) == 9) {
      $28 = (__Znwj($$0$i34)|0);
      $$0$i35 = $$0$i34;$30 = $28;$31 = $49;
     }
     $29 = (($30) + ($31)|0);
     $32 = $29;
     $33 = (($30) + ($$0$i35)|0);
     $$0$i2 = $__n;$34 = $29;$__v$sroa$12$0 = $32;
     while(1) {
      HEAP8[$34>>0] = 0;
      $35 = $__v$sroa$12$0;
      $36 = ((($35)) + 1|0);
      $37 = $36;
      $38 = (($$0$i2) + -1)|0;
      $39 = ($38|0)==(0);
      if ($39) {
       $$lcssa = $37;
       break;
      } else {
       $$0$i2 = $38;$34 = $36;$__v$sroa$12$0 = $37;
      }
     }
     $40 = $33;
     $41 = HEAP32[$this>>2]|0;
     $42 = HEAP32[$2>>2]|0;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = (0 - ($44))|0;
     $46 = (($29) + ($45)|0);
     $47 = $46;
     _memcpy(($46|0),($41|0),($44|0))|0;
     HEAP32[$this>>2] = $47;
     HEAP32[$2>>2] = $$lcssa;
     HEAP32[$0>>2] = $40;
     $48 = ($41|0)==(0|0);
     if ($48) {
      return;
     }
     __ZdlPv($41);
     return;
    }
    function __ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($this,$__first,$__last) {
     $this = $this|0;
     $__first = $__first|0;
     $__last = $__last|0;
     var $$0$i5 = 0, $$01$i = 0, $$01$i3 = 0, $$__last = 0, $$mux = 0, $$not = 0, $$not10 = 0, $$pre = 0, $$pre$i1 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
     var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
     var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = $__last;
     $1 = $__first;
     $2 = (($0) - ($1))|0;
     $3 = ((($this)) + 8|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP32[$this>>2]|0;
     $6 = (($4) - ($5))|0;
     $7 = ($2>>>0)>($6>>>0);
     $8 = $5;
     if (!($7)) {
      $9 = ((($this)) + 4|0);
      $10 = HEAP32[$9>>2]|0;
      $11 = (($10) - ($5))|0;
      $12 = ($2>>>0)>($11>>>0);
      $13 = (($__first) + ($11)|0);
      $$__last = $12 ? $13 : $__last;
      $14 = $$__last;
      $15 = (($14) - ($1))|0;
      _memmove(($8|0),($__first|0),($15|0))|0;
      $16 = (($8) + ($15)|0);
      if (!($12)) {
       $24 = HEAP32[$9>>2]|0;
       $25 = ($24|0)==($16|0);
       if ($25) {
        return;
       }
       HEAP32[$9>>2] = $16;
       return;
      }
      $17 = ($$__last|0)==($__last|0);
      if ($17) {
       return;
      }
      $$pre$i1 = HEAP32[$9>>2]|0;
      $$01$i3 = $13;$19 = $$pre$i1;
      while(1) {
       $18 = HEAP8[$$01$i3>>0]|0;
       HEAP8[$19>>0] = $18;
       $20 = HEAP32[$9>>2]|0;
       $21 = ((($20)) + 1|0);
       HEAP32[$9>>2] = $21;
       $22 = ((($$01$i3)) + 1|0);
       $23 = ($22|0)==($__last|0);
       if ($23) {
        break;
       } else {
        $$01$i3 = $22;$19 = $21;
       }
      }
      return;
     }
     $26 = ($5|0)==(0);
     if ($26) {
      $46 = $4;
     } else {
      $27 = ((($this)) + 4|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($8|0);
      if (!($29)) {
       HEAP32[$27>>2] = $8;
      }
      __ZdlPv($8);
      HEAP32[$3>>2] = 0;
      HEAP32[$27>>2] = 0;
      HEAP32[$this>>2] = 0;
      $46 = 0;
     }
     $30 = ($2|0)<(0);
     if ($30) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$3>>2]|0;
      $$pre8 = HEAP32[$this>>2]|0;
      $32 = $$pre8;$33 = $$pre;
     } else {
      $32 = 0;$33 = $46;
     }
     $31 = (($33) - ($32))|0;
     $34 = ($31>>>0)<(1073741823);
     if ($34) {
      $35 = $31 << 1;
      $$not = ($35>>>0)>=($2>>>0);
      $$not10 = $30 ^ 1;
      $brmerge = $$not | $$not10;
      $$mux = $$not ? $35 : $2;
      if ($brmerge) {
       $$0$i5 = $$mux;
      } else {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
       $$0$i5 = $2;
      }
     } else {
      $$0$i5 = 2147483647;
     }
     $36 = (__Znwj($$0$i5)|0);
     $37 = ((($this)) + 4|0);
     HEAP32[$37>>2] = $36;
     HEAP32[$this>>2] = $36;
     $38 = (($36) + ($$0$i5)|0);
     HEAP32[$3>>2] = $38;
     $39 = ($__first|0)==($__last|0);
     if ($39) {
      return;
     } else {
      $$01$i = $__first;$41 = $36;
     }
     while(1) {
      $40 = HEAP8[$$01$i>>0]|0;
      HEAP8[$41>>0] = $40;
      $42 = HEAP32[$37>>2]|0;
      $43 = ((($42)) + 1|0);
      HEAP32[$37>>2] = $43;
      $44 = ((($$01$i)) + 1|0);
      $45 = ($44|0)==($__last|0);
      if ($45) {
       break;
      } else {
       $$01$i = $44;$41 = $43;
      }
     }
     return;
    }
    function __ZN10Page_image9draw_maskERK4Mask($this,$m) {
     $this = $this|0;
     $m = $m|0;
     var $$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
     var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
     var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
     var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
     var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$018 = 0, $col1$015 = 0, $col2$0722 = 0, $col5$0823 = 0, $lprev$0$ = 0, $lprev$012 = 0, $rnew$0 = 0, $row$013 = 0, $row$013$in = 0, $rprev$011 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($m)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($1|0)<($3|0);
     $5 = $4 ? $3 : $1;
     $6 = ((($this)) + 12|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ((($m)) + 12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)<($7|0);
     $11 = $10 ? $9 : $7;
     $12 = ($5|0)==($3|0);
     if ($12) {
      $13 = (__ZNK4Mask4leftEi($m,$3)|0);
      $14 = ($13|0)>(-1);
      if ($14) {
       $15 = (__ZNK4Mask5rightEi($m,$3)|0);
       $16 = ($15|0)>(-1);
       if ($16) {
        $17 = (__ZNK4Mask4leftEi($m,$3)|0);
        $18 = (__ZNK4Mask5rightEi($m,$3)|0);
        $19 = ($17|0)>($18|0);
        if (!($19)) {
         $20 = ((($this)) + 16|0);
         $col$018 = $17;
         while(1) {
          $21 = HEAP32[$0>>2]|0;
          $22 = (($3) - ($21))|0;
          $23 = HEAP32[$20>>2]|0;
          $24 = HEAP32[$this>>2]|0;
          $25 = (($col$018) - ($24))|0;
          $26 = (($23) + (($22*12)|0)|0);
          $27 = HEAP32[$26>>2]|0;
          $28 = (($27) + ($25)|0);
          HEAP8[$28>>0] = 0;
          $29 = (($col$018) + 1)|0;
          $30 = (__ZNK4Mask5rightEi($m,$3)|0);
          $31 = ($col$018|0)<($30|0);
          if ($31) {
           $col$018 = $29;
          } else {
           break;
          }
         }
        }
       }
      }
     }
     $32 = HEAP32[$8>>2]|0;
     $33 = ($11|0)==($32|0);
     if ($33) {
      $34 = (__ZNK4Mask4leftEi($m,$11)|0);
      $35 = ($34|0)>(-1);
      if ($35) {
       $36 = (__ZNK4Mask5rightEi($m,$11)|0);
       $37 = ($36|0)>(-1);
       if ($37) {
        $38 = (__ZNK4Mask4leftEi($m,$11)|0);
        $39 = (__ZNK4Mask5rightEi($m,$11)|0);
        $40 = ($38|0)>($39|0);
        if (!($40)) {
         $41 = ((($this)) + 16|0);
         $col1$015 = $38;
         while(1) {
          $42 = HEAP32[$0>>2]|0;
          $43 = (($11) - ($42))|0;
          $44 = HEAP32[$41>>2]|0;
          $45 = HEAP32[$this>>2]|0;
          $46 = (($col1$015) - ($45))|0;
          $47 = (($44) + (($43*12)|0)|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = (($48) + ($46)|0);
          HEAP8[$49>>0] = 0;
          $50 = (($col1$015) + 1)|0;
          $51 = (__ZNK4Mask5rightEi($m,$11)|0);
          $52 = ($col1$015|0)<($51|0);
          if ($52) {
           $col1$015 = $50;
          } else {
           break;
          }
         }
        }
       }
      }
     }
     $53 = (__ZNK4Mask4leftEi($m,$5)|0);
     $54 = (__ZNK4Mask5rightEi($m,$5)|0);
     $55 = ($5|0)<($11|0);
     if (!($55)) {
      return;
     }
     $56 = ((($this)) + 8|0);
     $57 = ((($this)) + 16|0);
     $lprev$012 = $53;$row$013$in = $5;$rprev$011 = $54;
     while(1) {
      $row$013 = (($row$013$in) + 1)|0;
      $58 = (__ZNK4Mask4leftEi($m,$row$013)|0);
      $59 = (__ZNK4Mask5rightEi($m,$row$013)|0);
      $60 = ($58|0)<(0);
      $lprev$0$ = $60 ? $lprev$012 : $58;
      $61 = ($59|0)<(0);
      $rnew$0 = $61 ? $rprev$011 : $59;
      $62 = $lprev$0$ | $lprev$012;
      $63 = ($62|0)>(-1);
      if ($63) {
       $64 = HEAP32[$this>>2]|0;
       $65 = ($lprev$0$|0)<($lprev$012|0);
       $66 = $65 ? $lprev$0$ : $lprev$012;
       $67 = ($64|0)<($66|0);
       $68 = $67 ? $66 : $64;
       $69 = HEAP32[$56>>2]|0;
       $70 = ($lprev$012|0)<($lprev$0$|0);
       $71 = $70 ? $lprev$0$ : $lprev$012;
       $72 = ($71|0)<($69|0);
       $73 = $72 ? $71 : $69;
       $74 = ($68|0)>($73|0);
       if (!($74)) {
        $75 = HEAP32[$0>>2]|0;
        $76 = (($row$013) - ($75))|0;
        $77 = HEAP32[$57>>2]|0;
        $78 = (($68) - ($64))|0;
        $79 = (($77) + (($76*12)|0)|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = (($80) + ($78)|0);
        HEAP8[$81>>0] = 0;
        $82 = ($68|0)<($73|0);
        if ($82) {
         $col2$0722 = $68;
         while(1) {
          $83 = (($col2$0722) + 1)|0;
          $$pre = HEAP32[$this>>2]|0;
          $84 = HEAP32[$0>>2]|0;
          $85 = (($row$013) - ($84))|0;
          $86 = HEAP32[$57>>2]|0;
          $87 = (($83) - ($$pre))|0;
          $88 = (($86) + (($85*12)|0)|0);
          $89 = HEAP32[$88>>2]|0;
          $90 = (($89) + ($87)|0);
          HEAP8[$90>>0] = 0;
          $91 = ($83|0)<($73|0);
          if ($91) {
           $col2$0722 = $83;
          } else {
           break;
          }
         }
        }
       }
      }
      $92 = $rnew$0 | $rprev$011;
      $93 = ($92|0)>(-1);
      if ($93) {
       $95 = HEAP32[$this>>2]|0;
       $96 = ($rnew$0|0)<($rprev$011|0);
       $97 = $96 ? $rnew$0 : $rprev$011;
       $98 = ($95|0)<($97|0);
       $99 = $98 ? $97 : $95;
       $100 = HEAP32[$56>>2]|0;
       $101 = ($rprev$011|0)<($rnew$0|0);
       $102 = $101 ? $rnew$0 : $rprev$011;
       $103 = ($102|0)<($100|0);
       $104 = $103 ? $102 : $100;
       $105 = ($99|0)>($104|0);
       if (!($105)) {
        $106 = HEAP32[$0>>2]|0;
        $107 = (($row$013) - ($106))|0;
        $108 = HEAP32[$57>>2]|0;
        $109 = (($99) - ($95))|0;
        $110 = (($108) + (($107*12)|0)|0);
        $111 = HEAP32[$110>>2]|0;
        $112 = (($111) + ($109)|0);
        HEAP8[$112>>0] = 0;
        $113 = ($99|0)<($104|0);
        if ($113) {
         $col5$0823 = $99;
         while(1) {
          $114 = (($col5$0823) + 1)|0;
          $$pre21 = HEAP32[$this>>2]|0;
          $115 = HEAP32[$0>>2]|0;
          $116 = (($row$013) - ($115))|0;
          $117 = HEAP32[$57>>2]|0;
          $118 = (($114) - ($$pre21))|0;
          $119 = (($117) + (($116*12)|0)|0);
          $120 = HEAP32[$119>>2]|0;
          $121 = (($120) + ($118)|0);
          HEAP8[$121>>0] = 0;
          $122 = ($114|0)<($104|0);
          if ($122) {
           $col5$0823 = $114;
          } else {
           break;
          }
         }
        }
       }
      }
      $94 = ($row$013|0)<($11|0);
      if ($94) {
       $lprev$012 = $lprev$0$;$row$013$in = $row$013;$rprev$011 = $rnew$0;
      } else {
       break;
      }
     }
     return;
    }
    function __ZN10Page_image14draw_rectangleERK9Rectangle($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $$pre = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
     var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
     var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
     var $79 = 0, $8 = 0, $9 = 0, $col$010 = 0, $col2$07 = 0, $or$cond = 0, $or$cond14 = 0, $or$cond15 = 0, $or$cond16 = 0, $row$01219 = 0, $row1$08 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = HEAP32[$re>>2]|0;
     $2 = ($1|0)>($0|0);
     $3 = $2 ? $1 : $0;
     $4 = ((($this)) + 4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = ((($re)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($5|0)<($7|0);
     $9 = $8 ? $7 : $5;
     $10 = ((($this)) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($re)) + 8|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)<($11|0);
     $15 = $14 ? $13 : $11;
     $16 = ((($this)) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($re)) + 12|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)<($17|0);
     $21 = $20 ? $19 : $17;
     $22 = ($3|0)!=($1|0);
     $23 = ($9|0)>($21|0);
     $or$cond = $22 | $23;
     if ($or$cond) {
      $41 = $7;
     } else {
      $24 = ((($this)) + 16|0);
      $25 = (($9) - ($5))|0;
      $26 = HEAP32[$24>>2]|0;
      $27 = (($1) - ($0))|0;
      $28 = (($26) + (($25*12)|0)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + ($27)|0);
      HEAP8[$30>>0] = 0;
      $31 = ($9|0)<($21|0);
      if ($31) {
       $row$01219 = $9;
       while(1) {
        $32 = (($row$01219) + 1)|0;
        $$pre = HEAP32[$4>>2]|0;
        $$pre17 = HEAP32[$this>>2]|0;
        $33 = (($32) - ($$pre))|0;
        $34 = HEAP32[$24>>2]|0;
        $35 = (($1) - ($$pre17))|0;
        $36 = (($34) + (($33*12)|0)|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = (($37) + ($35)|0);
        HEAP8[$38>>0] = 0;
        $39 = ($32|0)<($21|0);
        if ($39) {
         $row$01219 = $32;
        } else {
         break;
        }
       }
      }
      $$pre18 = HEAP32[$6>>2]|0;
      $41 = $$pre18;
     }
     $40 = ($9|0)!=($41|0);
     $42 = ($3|0)>($15|0);
     $or$cond14 = $40 | $42;
     if (!($or$cond14)) {
      $43 = ((($this)) + 16|0);
      $col$010 = $3;
      while(1) {
       $44 = HEAP32[$4>>2]|0;
       $45 = (($9) - ($44))|0;
       $46 = HEAP32[$43>>2]|0;
       $47 = HEAP32[$this>>2]|0;
       $48 = (($col$010) - ($47))|0;
       $49 = (($46) + (($45*12)|0)|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = (($50) + ($48)|0);
       HEAP8[$51>>0] = 0;
       $52 = (($col$010) + 1)|0;
       $53 = ($col$010|0)<($15|0);
       if ($53) {
        $col$010 = $52;
       } else {
        break;
       }
      }
     }
     $54 = HEAP32[$12>>2]|0;
     $55 = ($15|0)!=($54|0);
     $or$cond15 = $55 | $23;
     if (!($or$cond15)) {
      $56 = ((($this)) + 16|0);
      $row1$08 = $9;
      while(1) {
       $57 = HEAP32[$4>>2]|0;
       $58 = (($row1$08) - ($57))|0;
       $59 = HEAP32[$56>>2]|0;
       $60 = HEAP32[$this>>2]|0;
       $61 = (($15) - ($60))|0;
       $62 = (($59) + (($58*12)|0)|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = (($63) + ($61)|0);
       HEAP8[$64>>0] = 0;
       $65 = (($row1$08) + 1)|0;
       $66 = ($row1$08|0)<($21|0);
       if ($66) {
        $row1$08 = $65;
       } else {
        break;
       }
      }
     }
     $67 = HEAP32[$18>>2]|0;
     $68 = ($21|0)!=($67|0);
     $or$cond16 = $68 | $42;
     if ($or$cond16) {
      return;
     }
     $69 = ((($this)) + 16|0);
     $col2$07 = $3;
     while(1) {
      $70 = HEAP32[$4>>2]|0;
      $71 = (($21) - ($70))|0;
      $72 = HEAP32[$69>>2]|0;
      $73 = HEAP32[$this>>2]|0;
      $74 = (($col2$07) - ($73))|0;
      $75 = (($72) + (($71*12)|0)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($76) + ($74)|0);
      HEAP8[$77>>0] = 0;
      $78 = (($col2$07) + 1)|0;
      $79 = ($col2$07|0)<($15|0);
      if ($79) {
       $col2$07 = $78;
      } else {
       break;
      }
     }
     return;
    }
    function __ZN10Page_image10draw_trackERK5Track($this,$tr) {
     $this = $this|0;
     $tr = $tr|0;
     var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
     var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
     var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
     var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
     var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
     var $98 = 0, $99 = 0, $col$03 = 0, $row$07 = 0, $row1$04 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = HEAP32[$tr>>2]|0;
     $2 = ((($tr)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($1|0)==($3|0);
     if ($4) {
      $5 = ($0|0)<(0);
      $6 = $5 ? 0 : $0;
      $7 = ((($this)) + 8|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = ($8|0)>(0);
      $10 = $9 ? 0 : $8;
      $21 = $6;$23 = 0;$49 = $10;
     } else {
      $11 = HEAP32[$1>>2]|0;
      $12 = ($0|0)<($11|0);
      $13 = $12 ? $11 : $0;
      $14 = ((($this)) + 8|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = ((($3)) + -12|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($17|0)<($15|0);
      $19 = $18 ? $17 : $15;
      $20 = HEAP32[$1>>2]|0;
      $21 = $13;$23 = $20;$49 = $19;
     }
     $22 = ($21|0)==($23|0);
     if ($22) {
      $24 = (__ZNK5Track3topEi($tr,$21)|0);
      $25 = (__ZNK5Track6bottomEi($tr,$21)|0);
      $26 = ($24|0)>($25|0);
      if (!($26)) {
       $27 = ((($this)) + 4|0);
       $28 = ((($this)) + 12|0);
       $29 = ((($this)) + 16|0);
       $row$07 = $24;
       while(1) {
        $30 = HEAP32[$27>>2]|0;
        $31 = ($row$07|0)<($30|0);
        if (!($31)) {
         $32 = HEAP32[$28>>2]|0;
         $33 = ($row$07|0)>($32|0);
         if (!($33)) {
          $34 = (($row$07) - ($30))|0;
          $35 = HEAP32[$29>>2]|0;
          $36 = HEAP32[$this>>2]|0;
          $37 = (($21) - ($36))|0;
          $38 = (($35) + (($34*12)|0)|0);
          $39 = HEAP32[$38>>2]|0;
          $40 = (($39) + ($37)|0);
          HEAP8[$40>>0] = 0;
         }
        }
        $41 = (($row$07) + 1)|0;
        $42 = (__ZNK5Track6bottomEi($tr,$21)|0);
        $43 = ($row$07|0)<($42|0);
        if ($43) {
         $row$07 = $41;
        } else {
         break;
        }
       }
      }
     }
     $44 = HEAP32[$tr>>2]|0;
     $45 = HEAP32[$2>>2]|0;
     $46 = ($44|0)==($45|0);
     if ($46) {
      $51 = 0;
     } else {
      $47 = ((($45)) + -12|0);
      $48 = HEAP32[$47>>2]|0;
      $51 = $48;
     }
     $50 = ($49|0)==($51|0);
     if ($50) {
      $56 = (__ZNK5Track3topEi($tr,$49)|0);
      $57 = (__ZNK5Track6bottomEi($tr,$49)|0);
      $58 = ($56|0)>($57|0);
      if (!($58)) {
       $59 = ((($this)) + 4|0);
       $60 = ((($this)) + 12|0);
       $61 = ((($this)) + 16|0);
       $row1$04 = $56;
       while(1) {
        $62 = HEAP32[$59>>2]|0;
        $63 = ($row1$04|0)<($62|0);
        if (!($63)) {
         $64 = HEAP32[$60>>2]|0;
         $65 = ($row1$04|0)>($64|0);
         if (!($65)) {
          $66 = (($row1$04) - ($62))|0;
          $67 = HEAP32[$61>>2]|0;
          $68 = HEAP32[$this>>2]|0;
          $69 = (($49) - ($68))|0;
          $70 = (($67) + (($66*12)|0)|0);
          $71 = HEAP32[$70>>2]|0;
          $72 = (($71) + ($69)|0);
          HEAP8[$72>>0] = 0;
         }
        }
        $73 = (($row1$04) + 1)|0;
        $74 = (__ZNK5Track6bottomEi($tr,$49)|0);
        $75 = ($row1$04|0)<($74|0);
        if ($75) {
         $row1$04 = $73;
        } else {
         break;
        }
       }
      }
     }
     $52 = ($21|0)>($49|0);
     if ($52) {
      return;
     }
     $53 = ((($this)) + 4|0);
     $54 = ((($this)) + 12|0);
     $55 = ((($this)) + 16|0);
     $col$03 = $21;
     while(1) {
      $76 = (__ZNK5Track3topEi($tr,$col$03)|0);
      $77 = HEAP32[$53>>2]|0;
      $78 = ($76|0)<($77|0);
      if (!($78)) {
       $79 = HEAP32[$54>>2]|0;
       $80 = ($76|0)>($79|0);
       if (!($80)) {
        $81 = (($76) - ($77))|0;
        $82 = HEAP32[$55>>2]|0;
        $83 = HEAP32[$this>>2]|0;
        $84 = (($col$03) - ($83))|0;
        $85 = (($82) + (($81*12)|0)|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = (($86) + ($84)|0);
        HEAP8[$87>>0] = 0;
       }
      }
      $88 = (__ZNK5Track6bottomEi($tr,$col$03)|0);
      $89 = HEAP32[$53>>2]|0;
      $90 = ($88|0)<($89|0);
      if (!($90)) {
       $91 = HEAP32[$54>>2]|0;
       $92 = ($88|0)>($91|0);
       if (!($92)) {
        $93 = (($88) - ($89))|0;
        $94 = HEAP32[$55>>2]|0;
        $95 = HEAP32[$this>>2]|0;
        $96 = (($col$03) - ($95))|0;
        $97 = (($94) + (($93*12)|0)|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = (($98) + ($96)|0);
        HEAP8[$99>>0] = 0;
       }
      }
      $100 = (($col$03) + 1)|0;
      $101 = ($col$03|0)<($49|0);
      if ($101) {
       $col$03 = $100;
      } else {
       break;
      }
     }
     return;
    }
    function __ZN10Page_image12change_scaleEi($this,$n) {
     $this = $this|0;
     $n = $n|0;
     var $$0 = 0, $$0$i1$i$i$i = 0, $$0$i1$i$i$i137 = 0, $$0$i1$i$i$us$i = 0, $$0$i1$i$i15$i = 0, $$0$i1$i$i26$i = 0, $$0$i1$i$i26$us$i = 0, $$0$i1$i$i43$i = 0, $$0$i1$i$i43$i125 = 0, $$0$i1$i$i58$i = 0, $$0$i2$i$i$i = 0, $$0$i2$i$i$i138 = 0, $$0$i2$i$i$us$i = 0, $$0$i2$i$i16$i = 0, $$0$i2$i$i27$i = 0, $$0$i2$i$i27$us$i = 0, $$0$i2$i$i44$i = 0, $$0$i2$i$i44$i126 = 0, $$0$i2$i$i59$i = 0, $$01 = 0;
     var $$01$i$i$i$i$i = 0, $$01150 = 0, $$cast$i = 0, $$cast$i101 = 0, $$cast$i25 = 0, $$cast$i40 = 0, $$cast$i83 = 0, $$in$i$i$i = 0, $$in$i$i$i134 = 0, $$in$i$i$us$i = 0, $$in$i$i12$i = 0, $$in$i$i23$i = 0, $$in$i$i23$us$i = 0, $$in$i$i40$i = 0, $$in$i$i40$i121 = 0, $$in$i$i55$i = 0, $$lcssa211 = 0, $$lcssa211$lcssa = 0, $$lcssa212 = 0, $$lcssa213 = 0;
     var $$lcssa75$i = 0, $$not$i = 0, $$not$i47 = 0, $$not23$i = 0, $$not34$i = 0, $$not4$i = 0, $$not4$i53 = 0, $$not5$i = 0, $$not5$i48 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i143 = 0, $$pre$i$i$i$i18 = 0, $$pre$i$i$i$i32 = 0, $$pre$i$i$i$i75 = 0, $$pre$i$i$i$i8 = 0, $$pre$i$i$i$i93 = 0;
     var $$pre$i$i$i130 = 0, $$pre$i$i$i26$i = 0, $$pre$i$i$i27$i = 0, $$pre$i$i$i5$i = 0, $$pre$i$i$i59$i = 0, $$pre$i$i$i9$i = 0, $$pre$i$i$us$i = 0, $$pre$i$i11 = 0, $$pre$i$i146 = 0, $$pre$i$i19$i = 0, $$pre$i$i19$us$i = 0, $$pre$i$i21 = 0, $$pre$i$i35 = 0, $$pre$i$i36$i = 0, $$pre$i$i36$i118 = 0, $$pre$i$i51$i = 0, $$pre$i$i78 = 0, $$pre$i$i8$i = 0, $$pre$i$i96 = 0, $$pre$i10$i = 0;
     var $$pre$i103 = 0, $$pre$i12$i = 0, $$pre$i21$i = 0, $$pre$i21$us$i = 0, $$pre$i27$us$i = 0, $$pre$i29$i = 0, $$pre$i3$i = 0, $$pre$i3$i132 = 0, $$pre$i30$i = 0, $$pre$i38$i = 0, $$pre$i38$i119 = 0, $$pre$i42 = 0, $$pre$i53$i = 0, $$pre$i62$i = 0, $$pre$i8$i = 0, $$pre$i84 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i$us$iZ2D = 0, $$pre$phi$i27Z2D = 0, $$pre$phi$i54$iZ2D = 0;
     var $$pre$phi175Z2D = 0, $$pre$phi177Z2D = 0, $$pre$phi179Z2D = 0, $$pre$phi51$iZ2D = 0, $$pre$phi87$iZ2D = 0, $$pre172 = 0, $$pre47$i = 0, $$pre48$i = 0, $$pre49$i = 0, $$pre82$i = 0, $$pre83$i = 0, $$pre85$i = 0, $$pre86$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
     var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
     var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
     var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
     var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
     var $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0;
     var $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0;
     var $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0;
     var $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
     var $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0;
     var $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0;
     var $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0;
     var $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0;
     var $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0;
     var $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0;
     var $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0;
     var $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0;
     var $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0;
     var $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0;
     var $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0;
     var $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0;
     var $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0;
     var $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
     var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
     var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
     var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
     var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
     var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
     var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
     var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
     var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
     var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
     var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
     var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
     var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
     var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
     var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
     var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
     var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
     var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
     var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
     var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
     var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
     var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
     var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
     var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
     var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
     var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
     var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
     var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
     var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
     var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
     var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
     var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
     var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
     var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
     var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
     var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
     var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
     var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
     var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
     var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
     var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
     var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
     var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
     var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
     var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
     var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
     var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
     var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
     var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $brmerge$i = 0, $brmerge$i54 = 0, $brmerge10$i = 0, $brmerge10$i60 = 0, $brmerge11$i = 0, $brmerge11$i61 = 0, $brmerge12$i = 0, $brmerge12$i62 = 0, $brmerge12$not$i = 0, $brmerge12$not$i63 = 0, $brmerge13$i = 0, $brmerge13$i64 = 0, $brmerge14$i = 0, $brmerge14$i65 = 0;
     var $brmerge15$i = 0, $brmerge15$i66 = 0, $brmerge15$not$i = 0, $brmerge15$not$i67 = 0, $brmerge17$i = 0, $brmerge17$i68 = 0, $brmerge18$i = 0, $brmerge18$i69 = 0, $brmerge18$not$i = 0, $brmerge18$not$i70 = 0, $brmerge22$demorgan$i = 0, $brmerge22$i = 0, $brmerge24$i = 0, $brmerge27$demorgan$i = 0, $brmerge30$not$i = 0, $brmerge32$not$i = 0, $brmerge35$i = 0, $brmerge38$not$i = 0, $brmerge40$not$i = 0, $brmerge46$demorgan$i = 0;
     var $brmerge48$demorgan$i = 0, $brmerge51$i = 0, $brmerge7$i = 0, $brmerge7$i56 = 0, $brmerge8$i = 0, $brmerge8$i57 = 0, $brmerge9$i = 0, $brmerge9$i58 = 0, $brmerge9$not$i = 0, $brmerge9$not$i59 = 0, $c$069$us$us$i = 0, $col$037$i = 0, $col$038$us$i = 0, $col$067$i = 0, $col$073$i = 0, $col$078$i = 0, $col2$077$i = 0, $col4$076$i = 0, $col4$076$us$i = 0, $col5$080$i = 0;
     var $eh$lpad$body$sink$i$index6Z2D = 0, $eh$lpad$body$sink$i$indexZ2D = 0, $exitcond$i = 0, $exitcond$i105 = 0, $exitcond$i71 = 0, $exitcond113$i = 0, $exitcond114$i = 0, $exitcond115$i = 0, $i$037$us$i = 0, $i1$040$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index31 = 0, $lpad$phi$i112$index = 0, $lpad$phi$i112$index18 = 0, $new_data$i = 0, $new_data$i100 = 0, $new_data$i24 = 0, $new_data$i39 = 0, $new_data$i82 = 0, $or$cond$i102 = 0;
     var $or$cond$i28 = 0, $or$cond$i52 = 0, $or$cond1$i = 0, $or$cond20$i = 0, $or$cond21$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond3$i55 = 0, $or$cond52$i = 0, $or$cond53$i = 0, $or$cond54$i = 0, $or$cond55$i = 0, $or$cond66$i = 0, $or$cond67$i = 0, $or$cond68$i = 0, $or$cond69$i = 0, $r$072$us$us$i = 0, $reduced = 0, $row$043$i = 0;
     var $row$043$i86 = 0, $row$078$i = 0, $row$082$i = 0, $row$082$us$i = 0, $row$093$i = 0, $row1$039$i = 0, $row1$074$i = 0, $row1$080$i = 0, $row1$090$i = 0, $row1$090$us$i = 0, $row2$088$i = 0, $row3$083$i = 0, $sum$071$us$us$i = 0, $sum$168$us$us$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $new_data$i100 = sp + 92|0;
     $new_data$i82 = sp + 80|0;
     $0 = sp + 68|0;
     $new_data$i39 = sp + 56|0;
     $1 = sp + 105|0;
     $new_data$i24 = sp + 44|0;
     $2 = sp + 104|0;
     $new_data$i = sp + 32|0;
     $reduced = sp;
     $3 = ($n|0)<(-1);
     if ($3) {
      $4 = (0 - ($n))|0;
      __ZN10Page_imageC2ERKS_i($reduced,$this,$4);
      ;HEAP32[$this>>2]=HEAP32[$reduced>>2]|0;HEAP32[$this+4>>2]=HEAP32[$reduced+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$reduced+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$reduced+12>>2]|0;
      $5 = ($reduced|0)==($this|0);
      if (!($5)) {
       $6 = ((($this)) + 16|0);
       $7 = ((($reduced)) + 16|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = ((($reduced)) + 20|0);
       $10 = HEAP32[$9>>2]|0;
       __THREW__ = 0;
       invoke_viii(50,($6|0),($8|0),($10|0));
       $11 = __THREW__; __THREW__ = 0;
       $12 = $11&1;
       if ($12) {
        $32 = ___cxa_find_matching_catch_2()|0;
        $33 = tempRet0;
        $34 = ((($reduced)) + 16|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = ($35|0)==(0|0);
        if ($36) {
         ___resumeException($32|0);
         // unreachable;
        }
        $37 = HEAP32[$9>>2]|0;
        $38 = ($37|0)==($35|0);
        if ($38) {
         $48 = $35;
        } else {
         $40 = $37;
         while(1) {
          $39 = ((($40)) + -12|0);
          HEAP32[$9>>2] = $39;
          $41 = HEAP32[$39>>2]|0;
          $42 = ($41|0)==(0|0);
          if ($42) {
           $43 = $39;
          } else {
           $45 = ((($40)) + -8|0);
           $46 = HEAP32[$45>>2]|0;
           $47 = ($46|0)==($41|0);
           if (!($47)) {
            HEAP32[$45>>2] = $41;
           }
           __ZdlPv($41);
           $$pre$i$i$i$i8 = HEAP32[$9>>2]|0;
           $43 = $$pre$i$i$i$i8;
          }
          $44 = ($43|0)==($35|0);
          if ($44) {
           break;
          } else {
           $40 = $43;
          }
         }
         $$pre$i$i11 = HEAP32[$34>>2]|0;
         $48 = $$pre$i$i11;
        }
        __ZdlPv($48);
        ___resumeException($32|0);
        // unreachable;
       }
      }
      $13 = ((($this)) + 28|0);
      $14 = ((($reduced)) + 28|0);
      $15 = HEAP16[$14>>1]|0;
      HEAP16[$13>>1] = $15;
      $16 = ((($reduced)) + 16|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($17|0)==(0|0);
      if (!($18)) {
       $19 = ((($reduced)) + 20|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = ($20|0)==($17|0);
       if ($21) {
        $31 = $17;
       } else {
        $23 = $20;
        while(1) {
         $22 = ((($23)) + -12|0);
         HEAP32[$19>>2] = $22;
         $24 = HEAP32[$22>>2]|0;
         $25 = ($24|0)==(0|0);
         if ($25) {
          $26 = $22;
         } else {
          $28 = ((($23)) + -8|0);
          $29 = HEAP32[$28>>2]|0;
          $30 = ($29|0)==($24|0);
          if (!($30)) {
           HEAP32[$28>>2] = $24;
          }
          __ZdlPv($24);
          $$pre$i$i$i$i = HEAP32[$19>>2]|0;
          $26 = $$pre$i$i$i$i;
         }
         $27 = ($26|0)==($17|0);
         if ($27) {
          break;
         } else {
          $23 = $26;
         }
        }
        $$pre$i$i = HEAP32[$16>>2]|0;
        $31 = $$pre$i$i;
       }
       __ZdlPv($31);
      }
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
     $49 = ($n|0)>(1);
     if (!($49)) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $50 = (2147483647 / ($n|0))&-1;
     $51 = ((($this)) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = HEAP32[$this>>2]|0;
     $54 = (($52) + 1)|0;
     $55 = (($54) - ($53))|0;
     $56 = ((($this)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($this)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($57) + 1)|0;
     $61 = (($60) - ($59))|0;
     $62 = Math_imul($61, $55)|0;
     $63 = ($50|0)<($62|0);
     if ($63) {
      $64 = (___cxa_allocate_exception(4)|0);
      HEAP32[$64>>2] = 1509;
      ___cxa_throw(($64|0),(8|0),(0|0));
      // unreachable;
     }
     $65 = ((($this)) + 28|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = ($66<<24>>24)==(1);
     do {
      if ($67) {
       $68 = $n & 1;
       $69 = ($68|0)==(0);
       if ($69) {
        $70 = ((($this)) + 16|0);
        $71 = ((($this)) + 20|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = HEAP32[$70>>2]|0;
        $74 = (($72) - ($73))|0;
        $75 = (($74|0) / 12)&-1;
        $$cast$i25 = $73;
        $76 = ((($$cast$i25)) + 4|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = $73;
        $79 = HEAP32[$78>>2]|0;
        $80 = (($77) - ($79))|0;
        $81 = $75 << 1;
        __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($new_data$i24,$81);
        $82 = ((($new_data$i24)) + 4|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = HEAP32[$new_data$i24>>2]|0;
        $85 = ($83|0)==($84|0);
        $86 = $84;
        L48: do {
         if ($85) {
          $1364 = $86;
         } else {
          $87 = $80 << 1;
          $1365 = $86;$1366 = $84;$1367 = $83;$93 = $86;$row$043$i = 0;
          while(1) {
           $92 = (($93) + (($row$043$i*12)|0)|0);
           HEAP8[$2>>0] = 1;
           $94 = (((($93) + (($row$043$i*12)|0)|0)) + 4|0);
           $95 = HEAP32[$94>>2]|0;
           $96 = HEAP32[$92>>2]|0;
           $97 = (($95) - ($96))|0;
           $98 = ($87>>>0)>($97>>>0);
           $99 = $96;
           $100 = $95;
           if ($98) {
            $101 = (($87) - ($97))|0;
            __THREW__ = 0;
            invoke_viii(51,($92|0),($101|0),($2|0));
            $102 = __THREW__; __THREW__ = 0;
            $103 = $102&1;
            if ($103) {
             break;
            }
            $$pre$i = HEAP32[$82>>2]|0;
            $$pre47$i = HEAP32[$new_data$i24>>2]|0;
            $104 = $$pre47$i;
            $110 = $$pre47$i;$111 = $$pre$i;$1368 = $104;
           } else {
            $105 = ($87>>>0)<($97>>>0);
            if ($105) {
             $106 = (($99) + ($87)|0);
             $107 = ($100|0)==($106|0);
             if ($107) {
              $110 = $1366;$111 = $1367;$1368 = $1365;
             } else {
              HEAP32[$94>>2] = $106;
              $110 = $1366;$111 = $1367;$1368 = $1365;
             }
            } else {
             $110 = $1366;$111 = $1367;$1368 = $1365;
            }
           }
           $108 = (($row$043$i) + 1)|0;
           $109 = (($111) - ($110))|0;
           $112 = (($109|0) / 12)&-1;
           $113 = ($108>>>0)<($112>>>0);
           $114 = $110;
           if ($113) {
            $1365 = $1368;$1366 = $110;$1367 = $111;$93 = $114;$row$043$i = $108;
           } else {
            $1364 = $1368;
            break L48;
           }
          }
          $115 = ___cxa_find_matching_catch_2()|0;
          $116 = tempRet0;
          $117 = HEAP32[$new_data$i24>>2]|0;
          $118 = ($117|0)==(0|0);
          if ($118) {
           ___resumeException($115|0);
           // unreachable;
          }
          $119 = HEAP32[$82>>2]|0;
          $120 = ($119|0)==($117|0);
          if ($120) {
           $130 = $117;
          } else {
           $122 = $119;
           while(1) {
            $121 = ((($122)) + -12|0);
            HEAP32[$82>>2] = $121;
            $123 = HEAP32[$121>>2]|0;
            $124 = ($123|0)==(0|0);
            if ($124) {
             $125 = $121;
            } else {
             $127 = ((($122)) + -8|0);
             $128 = HEAP32[$127>>2]|0;
             $129 = ($128|0)==($123|0);
             if (!($129)) {
              HEAP32[$127>>2] = $123;
             }
             __ZdlPv($123);
             $$pre$i$i$i27$i = HEAP32[$82>>2]|0;
             $125 = $$pre$i$i$i27$i;
            }
            $126 = ($125|0)==($117|0);
            if ($126) {
             break;
            } else {
             $122 = $125;
            }
           }
           $$pre$i30$i = HEAP32[$new_data$i24>>2]|0;
           $130 = $$pre$i30$i;
          }
          __ZdlPv($130);
          ___resumeException($115|0);
          // unreachable;
         }
        } while(0);
        $88 = ($74|0)>(0);
        L76: do {
         if ($88) {
          $89 = ($80|0)>(0);
          $90 = (($80) + -1)|0;
          $91 = (($75) + -1)|0;
          $140 = $1364;$row1$039$i = 0;
          while(1) {
           $131 = $row1$039$i << 1;
           if ($89) {
            $132 = $131 | 1;
            $133 = HEAP32[$70>>2]|0;
            $134 = (($133) + (($row1$039$i*12)|0)|0);
            $135 = ($row1$039$i|0)>(0);
            $136 = (($row1$039$i) + -1)|0;
            $137 = ($row1$039$i|0)<($91|0);
            $138 = (($row1$039$i) + 1)|0;
            $$not$i = $135 ^ 1;
            $$not5$i = $137 ^ 1;
            $139 = (($140) + (($132*12)|0)|0);
            $141 = (($140) + (($131*12)|0)|0);
            $col$037$i = 0;
            while(1) {
             $143 = HEAP32[$134>>2]|0;
             $144 = (($143) + ($col$037$i)|0);
             $145 = HEAP8[$144>>0]|0;
             $146 = ($145<<24>>24)==(0);
             do {
              if ($146) {
               $147 = ($col$037$i|0)>(0);
               if ($147) {
                $148 = (($col$037$i) + -1)|0;
                $149 = (($143) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = ($150<<24>>24)==(0);
                $198 = $151;
               } else {
                $198 = 0;
               }
               if ($135) {
                $152 = HEAP32[$70>>2]|0;
                $153 = (($152) + (($136*12)|0)|0);
                $154 = HEAP32[$153>>2]|0;
                $155 = (($154) + ($col$037$i)|0);
                $156 = HEAP8[$155>>0]|0;
                $157 = ($156<<24>>24)==(0);
                $197 = $157;
               } else {
                $197 = 0;
               }
               $158 = ($col$037$i|0)<($90|0);
               if ($158) {
                $159 = (($col$037$i) + 1)|0;
                $160 = (($143) + ($159)|0);
                $161 = HEAP8[$160>>0]|0;
                $162 = ($161<<24>>24)==(0);
                $205 = $162;
               } else {
                $205 = 0;
               }
               if ($137) {
                $163 = HEAP32[$70>>2]|0;
                $164 = (($163) + (($138*12)|0)|0);
                $165 = HEAP32[$164>>2]|0;
                $166 = (($165) + ($col$037$i)|0);
                $167 = HEAP8[$166>>0]|0;
                $168 = ($167<<24>>24)==(0);
                $211 = $168;
               } else {
                $211 = 0;
               }
               $or$cond$i28 = $135 & $147;
               if ($or$cond$i28) {
                $169 = HEAP32[$70>>2]|0;
                $170 = (($col$037$i) + -1)|0;
                $171 = (($169) + (($136*12)|0)|0);
                $172 = HEAP32[$171>>2]|0;
                $173 = (($172) + ($170)|0);
                $174 = HEAP8[$173>>0]|0;
                $175 = ($174<<24>>24)==(0);
                $199 = $175;
               } else {
                $199 = 0;
               }
               $$not4$i = $158 ^ 1;
               $brmerge$i = $$not$i | $$not4$i;
               if ($brmerge$i) {
                $201 = 0;
               } else {
                $176 = HEAP32[$70>>2]|0;
                $177 = (($col$037$i) + 1)|0;
                $178 = (($176) + (($136*12)|0)|0);
                $179 = HEAP32[$178>>2]|0;
                $180 = (($179) + ($177)|0);
                $181 = HEAP8[$180>>0]|0;
                $182 = ($181<<24>>24)==(0);
                $201 = $182;
               }
               $or$cond3$i = $137 & $147;
               if ($or$cond3$i) {
                $183 = HEAP32[$70>>2]|0;
                $184 = (($col$037$i) + -1)|0;
                $185 = (($183) + (($138*12)|0)|0);
                $186 = HEAP32[$185>>2]|0;
                $187 = (($186) + ($184)|0);
                $188 = HEAP8[$187>>0]|0;
                $189 = ($188<<24>>24)==(0);
                $200 = $189;
               } else {
                $200 = 0;
               }
               $brmerge7$i = $$not5$i | $$not4$i;
               if ($brmerge7$i) {
                $206 = 0;
               } else {
                $190 = HEAP32[$70>>2]|0;
                $191 = (($col$037$i) + 1)|0;
                $192 = (($190) + (($138*12)|0)|0);
                $193 = HEAP32[$192>>2]|0;
                $194 = (($193) + ($191)|0);
                $195 = HEAP8[$194>>0]|0;
                $196 = ($195<<24>>24)==(0);
                $206 = $196;
               }
               $brmerge8$i = $198 | $197;
               $brmerge9$i = $brmerge8$i | $199;
               $brmerge9$not$i = $brmerge9$i ^ 1;
               $brmerge10$i = $201 | $200;
               $or$cond20$i = $brmerge10$i & $brmerge9$not$i;
               if (!($or$cond20$i)) {
                $202 = $col$037$i << 1;
                $203 = HEAP32[$141>>2]|0;
                $204 = (($203) + ($202)|0);
                HEAP8[$204>>0] = 0;
               }
               $brmerge11$i = $197 | $205;
               $brmerge12$i = $brmerge11$i | $201;
               $brmerge12$not$i = $brmerge12$i ^ 1;
               $brmerge13$i = $199 | $206;
               $or$cond21$i = $brmerge13$i & $brmerge12$not$i;
               if (!($or$cond21$i)) {
                $207 = $col$037$i << 1;
                $208 = $207 | 1;
                $209 = HEAP32[$141>>2]|0;
                $210 = (($209) + ($208)|0);
                HEAP8[$210>>0] = 0;
               }
               $brmerge14$i = $198 | $211;
               $brmerge15$i = $brmerge14$i | $200;
               $brmerge15$not$i = $brmerge15$i ^ 1;
               $or$cond22$i = $brmerge13$i & $brmerge15$not$i;
               if (!($or$cond22$i)) {
                $212 = $col$037$i << 1;
                $213 = HEAP32[$139>>2]|0;
                $214 = (($213) + ($212)|0);
                HEAP8[$214>>0] = 0;
               }
               $brmerge17$i = $205 | $211;
               $brmerge18$i = $brmerge17$i | $206;
               $brmerge18$not$i = $brmerge18$i ^ 1;
               $or$cond23$i = $brmerge10$i & $brmerge18$not$i;
               if ($or$cond23$i) {
                break;
               }
               $215 = $col$037$i << 1;
               $216 = $215 | 1;
               $217 = HEAP32[$139>>2]|0;
               $218 = (($217) + ($216)|0);
               HEAP8[$218>>0] = 0;
              }
             } while(0);
             $219 = (($col$037$i) + 1)|0;
             $exitcond$i = ($219|0)==($80|0);
             if ($exitcond$i) {
              $$pre$phi$i27Z2D = $138;
              break;
             } else {
              $col$037$i = $219;
             }
            }
           } else {
            $$pre49$i = (($row1$039$i) + 1)|0;
            $$pre$phi$i27Z2D = $$pre49$i;
           }
           $142 = ($$pre$phi$i27Z2D|0)<($75|0);
           if (!($142)) {
            break L76;
           }
           $$pre48$i = HEAP32[$new_data$i24>>2]|0;
           $140 = $$pre48$i;$row1$039$i = $$pre$phi$i27Z2D;
          }
         }
        } while(0);
        $220 = HEAP32[$70>>2]|0;
        $221 = HEAP32[$new_data$i24>>2]|0;
        HEAP32[$70>>2] = $221;
        HEAP32[$new_data$i24>>2] = $220;
        $222 = HEAP32[$71>>2]|0;
        $223 = HEAP32[$82>>2]|0;
        HEAP32[$71>>2] = $223;
        HEAP32[$82>>2] = $222;
        $224 = ((($this)) + 24|0);
        $225 = ((($new_data$i24)) + 8|0);
        $226 = HEAP32[$224>>2]|0;
        $227 = HEAP32[$225>>2]|0;
        HEAP32[$224>>2] = $227;
        HEAP32[$225>>2] = $226;
        $228 = $220;
        $229 = ($220|0)==(0);
        $230 = $222;
        if (!($229)) {
         $231 = $220;
         $232 = ($230|0)==($228|0);
         if ($232) {
          $242 = $231;
         } else {
          $234 = $230;
          while(1) {
           $233 = ((($234)) + -12|0);
           HEAP32[$82>>2] = $233;
           $235 = HEAP32[$233>>2]|0;
           $236 = ($235|0)==(0|0);
           if ($236) {
            $237 = $233;
           } else {
            $239 = ((($234)) + -8|0);
            $240 = HEAP32[$239>>2]|0;
            $241 = ($240|0)==($235|0);
            if (!($241)) {
             HEAP32[$239>>2] = $235;
            }
            __ZdlPv($235);
            $$pre$i$i$i$i32 = HEAP32[$82>>2]|0;
            $237 = $$pre$i$i$i$i32;
           }
           $238 = ($237|0)==($228|0);
           if ($238) {
            break;
           } else {
            $234 = $237;
           }
          }
          $$pre$i$i35 = HEAP32[$new_data$i24>>2]|0;
          $242 = $$pre$i$i35;
         }
         __ZdlPv($242);
        }
        $243 = (($n|0) / 2)&-1;
        $$01 = $243;
       } else {
        $244 = (($n|0) % 3)&-1;
        $245 = ($244|0)==(0);
        if (!($245)) {
         $$01150 = $n;
         label = 163;
         break;
        }
        $246 = ((($this)) + 16|0);
        $247 = ((($this)) + 20|0);
        $248 = HEAP32[$247>>2]|0;
        $249 = HEAP32[$246>>2]|0;
        $250 = (($248) - ($249))|0;
        $251 = (($250|0) / 12)&-1;
        $$cast$i40 = $249;
        $252 = ((($$cast$i40)) + 4|0);
        $253 = HEAP32[$252>>2]|0;
        $254 = $249;
        $255 = HEAP32[$254>>2]|0;
        $256 = (($253) - ($255))|0;
        $257 = ($251*3)|0;
        __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($new_data$i39,$257);
        $258 = ((($new_data$i39)) + 4|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = HEAP32[$new_data$i39>>2]|0;
        $261 = ($259|0)==($260|0);
        $262 = $260;
        L141: do {
         if ($261) {
          $1369 = $262;
         } else {
          $263 = ($256*3)|0;
          $1370 = $262;$1371 = $260;$1372 = $259;$269 = $262;$row$078$i = 0;
          while(1) {
           $268 = (($269) + (($row$078$i*12)|0)|0);
           HEAP8[$1>>0] = 1;
           $270 = (((($269) + (($row$078$i*12)|0)|0)) + 4|0);
           $271 = HEAP32[$270>>2]|0;
           $272 = HEAP32[$268>>2]|0;
           $273 = (($271) - ($272))|0;
           $274 = ($263>>>0)>($273>>>0);
           $275 = $272;
           $276 = $271;
           if ($274) {
            $277 = (($263) - ($273))|0;
            __THREW__ = 0;
            invoke_viii(51,($268|0),($277|0),($1|0));
            $278 = __THREW__; __THREW__ = 0;
            $279 = $278&1;
            if ($279) {
             break;
            }
            $$pre$i42 = HEAP32[$258>>2]|0;
            $$pre82$i = HEAP32[$new_data$i39>>2]|0;
            $280 = $$pre82$i;
            $1373 = $280;$286 = $$pre82$i;$287 = $$pre$i42;
           } else {
            $281 = ($263>>>0)<($273>>>0);
            if ($281) {
             $282 = (($275) + ($263)|0);
             $283 = ($276|0)==($282|0);
             if ($283) {
              $1373 = $1370;$286 = $1371;$287 = $1372;
             } else {
              HEAP32[$270>>2] = $282;
              $1373 = $1370;$286 = $1371;$287 = $1372;
             }
            } else {
             $1373 = $1370;$286 = $1371;$287 = $1372;
            }
           }
           $284 = (($row$078$i) + 1)|0;
           $285 = (($287) - ($286))|0;
           $288 = (($285|0) / 12)&-1;
           $289 = ($284>>>0)<($288>>>0);
           $290 = $286;
           if ($289) {
            $1370 = $1373;$1371 = $286;$1372 = $287;$269 = $290;$row$078$i = $284;
           } else {
            $1369 = $1373;
            break L141;
           }
          }
          $291 = ___cxa_find_matching_catch_2()|0;
          $292 = tempRet0;
          $293 = HEAP32[$new_data$i39>>2]|0;
          $294 = ($293|0)==(0|0);
          if ($294) {
           ___resumeException($291|0);
           // unreachable;
          }
          $295 = HEAP32[$258>>2]|0;
          $296 = ($295|0)==($293|0);
          if ($296) {
           $306 = $293;
          } else {
           $298 = $295;
           while(1) {
            $297 = ((($298)) + -12|0);
            HEAP32[$258>>2] = $297;
            $299 = HEAP32[$297>>2]|0;
            $300 = ($299|0)==(0|0);
            if ($300) {
             $301 = $297;
            } else {
             $303 = ((($298)) + -8|0);
             $304 = HEAP32[$303>>2]|0;
             $305 = ($304|0)==($299|0);
             if (!($305)) {
              HEAP32[$303>>2] = $299;
             }
             __ZdlPv($299);
             $$pre$i$i$i59$i = HEAP32[$258>>2]|0;
             $301 = $$pre$i$i$i59$i;
            }
            $302 = ($301|0)==($293|0);
            if ($302) {
             break;
            } else {
             $298 = $301;
            }
           }
           $$pre$i62$i = HEAP32[$new_data$i39>>2]|0;
           $306 = $$pre$i62$i;
          }
          __ZdlPv($306);
          ___resumeException($291|0);
          // unreachable;
         }
        } while(0);
        $264 = ($250|0)>(0);
        L169: do {
         if ($264) {
          $265 = ($256|0)>(0);
          $266 = (($256) + -1)|0;
          $267 = (($251) + -1)|0;
          $317 = $1369;$row1$074$i = 0;
          while(1) {
           $307 = ($row1$074$i*3)|0;
           if ($265) {
            $308 = (($307) + 2)|0;
            $309 = HEAP32[$246>>2]|0;
            $310 = (($307) + 1)|0;
            $311 = (($309) + (($row1$074$i*12)|0)|0);
            $312 = ($row1$074$i|0)>(0);
            $313 = (($row1$074$i) + -1)|0;
            $314 = ($row1$074$i|0)<($267|0);
            $315 = (($row1$074$i) + 1)|0;
            $$not$i47 = $312 ^ 1;
            $$not5$i48 = $314 ^ 1;
            $316 = (($317) + (($307*12)|0)|0);
            $318 = (($317) + (($310*12)|0)|0);
            $319 = (($317) + (($308*12)|0)|0);
            $col$073$i = 0;
            while(1) {
             $321 = ($col$073$i*3)|0;
             $322 = ($col$073$i|0)>(0);
             if ($322) {
              $323 = (($col$073$i) + -1)|0;
              $324 = HEAP32[$311>>2]|0;
              $325 = (($324) + ($323)|0);
              $326 = HEAP8[$325>>0]|0;
              $327 = ($326<<24>>24)==(0);
              $379 = $327;
             } else {
              $379 = 0;
             }
             if ($312) {
              $328 = HEAP32[$246>>2]|0;
              $329 = (($328) + (($313*12)|0)|0);
              $330 = HEAP32[$329>>2]|0;
              $331 = (($330) + ($col$073$i)|0);
              $332 = HEAP8[$331>>0]|0;
              $333 = ($332<<24>>24)==(0);
              $378 = $333;
             } else {
              $378 = 0;
             }
             $334 = ($col$073$i|0)<($266|0);
             if ($334) {
              $335 = (($col$073$i) + 1)|0;
              $336 = HEAP32[$311>>2]|0;
              $337 = (($336) + ($335)|0);
              $338 = HEAP8[$337>>0]|0;
              $339 = ($338<<24>>24)==(0);
              $388 = $339;
             } else {
              $388 = 0;
             }
             if ($314) {
              $340 = HEAP32[$246>>2]|0;
              $341 = (($340) + (($315*12)|0)|0);
              $342 = HEAP32[$341>>2]|0;
              $343 = (($342) + ($col$073$i)|0);
              $344 = HEAP8[$343>>0]|0;
              $345 = ($344<<24>>24)==(0);
              $398 = $345;
             } else {
              $398 = 0;
             }
             $or$cond$i52 = $312 & $322;
             if ($or$cond$i52) {
              $346 = HEAP32[$246>>2]|0;
              $347 = (($col$073$i) + -1)|0;
              $348 = (($346) + (($313*12)|0)|0);
              $349 = HEAP32[$348>>2]|0;
              $350 = (($349) + ($347)|0);
              $351 = HEAP8[$350>>0]|0;
              $352 = ($351<<24>>24)==(0);
              $380 = $352;
             } else {
              $380 = 0;
             }
             $$not4$i53 = $334 ^ 1;
             $brmerge$i54 = $$not$i47 | $$not4$i53;
             if ($brmerge$i54) {
              $382 = 0;
             } else {
              $353 = HEAP32[$246>>2]|0;
              $354 = (($col$073$i) + 1)|0;
              $355 = (($353) + (($313*12)|0)|0);
              $356 = HEAP32[$355>>2]|0;
              $357 = (($356) + ($354)|0);
              $358 = HEAP8[$357>>0]|0;
              $359 = ($358<<24>>24)==(0);
              $382 = $359;
             }
             $or$cond3$i55 = $314 & $322;
             if ($or$cond3$i55) {
              $360 = HEAP32[$246>>2]|0;
              $361 = (($col$073$i) + -1)|0;
              $362 = (($360) + (($315*12)|0)|0);
              $363 = HEAP32[$362>>2]|0;
              $364 = (($363) + ($361)|0);
              $365 = HEAP8[$364>>0]|0;
              $366 = ($365<<24>>24)==(0);
              $381 = $366;
             } else {
              $381 = 0;
             }
             $brmerge7$i56 = $$not5$i48 | $$not4$i53;
             if ($brmerge7$i56) {
              $389 = 0;
             } else {
              $367 = HEAP32[$246>>2]|0;
              $368 = (($col$073$i) + 1)|0;
              $369 = (($367) + (($315*12)|0)|0);
              $370 = HEAP32[$369>>2]|0;
              $371 = (($370) + ($368)|0);
              $372 = HEAP8[$371>>0]|0;
              $373 = ($372<<24>>24)==(0);
              $389 = $373;
             }
             $374 = HEAP32[$311>>2]|0;
             $375 = (($374) + ($col$073$i)|0);
             $376 = HEAP8[$375>>0]|0;
             $377 = ($376<<24>>24)==(0);
             do {
              if ($377) {
               $brmerge8$i57 = $379 | $378;
               $brmerge9$i58 = $brmerge8$i57 | $380;
               $brmerge9$not$i59 = $brmerge9$i58 ^ 1;
               $brmerge10$i60 = $382 | $381;
               $or$cond52$i = $brmerge10$i60 & $brmerge9$not$i59;
               if (!($or$cond52$i)) {
                $383 = HEAP32[$316>>2]|0;
                $384 = (($383) + ($321)|0);
                HEAP8[$384>>0] = 0;
               }
               $385 = (($321) + 1)|0;
               $386 = HEAP32[$316>>2]|0;
               $387 = (($386) + ($385)|0);
               HEAP8[$387>>0] = 0;
               $brmerge11$i61 = $378 | $388;
               $brmerge12$i62 = $brmerge11$i61 | $382;
               $brmerge12$not$i63 = $brmerge12$i62 ^ 1;
               $brmerge13$i64 = $380 | $389;
               $or$cond53$i = $brmerge13$i64 & $brmerge12$not$i63;
               $$pre85$i = (($321) + 2)|0;
               if (!($or$cond53$i)) {
                $390 = HEAP32[$316>>2]|0;
                $391 = (($390) + ($$pre85$i)|0);
                HEAP8[$391>>0] = 0;
               }
               $392 = HEAP32[$318>>2]|0;
               $393 = (($392) + ($$pre85$i)|0);
               HEAP8[$393>>0] = 0;
               $394 = HEAP32[$318>>2]|0;
               $395 = (($394) + ($385)|0);
               HEAP8[$395>>0] = 0;
               $396 = HEAP32[$318>>2]|0;
               $397 = (($396) + ($321)|0);
               HEAP8[$397>>0] = 0;
               $brmerge14$i65 = $379 | $398;
               $brmerge15$i66 = $brmerge14$i65 | $381;
               $brmerge15$not$i67 = $brmerge15$i66 ^ 1;
               $or$cond54$i = $brmerge13$i64 & $brmerge15$not$i67;
               if (!($or$cond54$i)) {
                $399 = HEAP32[$319>>2]|0;
                $400 = (($399) + ($321)|0);
                HEAP8[$400>>0] = 0;
               }
               $401 = HEAP32[$319>>2]|0;
               $402 = (($401) + ($385)|0);
               HEAP8[$402>>0] = 0;
               $brmerge17$i68 = $388 | $398;
               $brmerge18$i69 = $brmerge17$i68 | $389;
               $brmerge18$not$i70 = $brmerge18$i69 ^ 1;
               $or$cond55$i = $brmerge10$i60 & $brmerge18$not$i70;
               if ($or$cond55$i) {
                break;
               }
               $403 = HEAP32[$319>>2]|0;
               $404 = (($403) + ($$pre85$i)|0);
               HEAP8[$404>>0] = 0;
              } else {
               $brmerge22$demorgan$i = $379 & $378;
               $brmerge22$i = $brmerge22$demorgan$i ^ 1;
               $$not23$i = $380 ^ 1;
               $brmerge24$i = $brmerge22$i | $$not23$i;
               $brmerge27$demorgan$i = $382 & $381;
               $or$cond69$i = $brmerge24$i | $brmerge27$demorgan$i;
               if (!($or$cond69$i)) {
                $405 = HEAP32[$316>>2]|0;
                $406 = (($405) + ($321)|0);
                HEAP8[$406>>0] = 0;
               }
               $brmerge30$not$i = $378 & $388;
               $brmerge32$not$i = $brmerge30$not$i & $382;
               $$not34$i = $389 ^ 1;
               $brmerge35$i = $$not23$i | $$not34$i;
               $or$cond66$i = $brmerge32$not$i & $brmerge35$i;
               if ($or$cond66$i) {
                $407 = (($321) + 2)|0;
                $408 = HEAP32[$316>>2]|0;
                $409 = (($408) + ($407)|0);
                HEAP8[$409>>0] = 0;
               }
               $brmerge38$not$i = $379 & $398;
               $brmerge40$not$i = $brmerge38$not$i & $381;
               $or$cond67$i = $brmerge40$not$i & $brmerge35$i;
               if ($or$cond67$i) {
                $410 = HEAP32[$319>>2]|0;
                $411 = (($410) + ($321)|0);
                HEAP8[$411>>0] = 0;
               }
               $brmerge46$demorgan$i = $388 & $398;
               $brmerge48$demorgan$i = $brmerge46$demorgan$i & $389;
               $brmerge51$i = $brmerge27$demorgan$i ^ 1;
               $or$cond68$i = $brmerge48$demorgan$i & $brmerge51$i;
               if (!($or$cond68$i)) {
                break;
               }
               $412 = (($321) + 2)|0;
               $413 = HEAP32[$319>>2]|0;
               $414 = (($413) + ($412)|0);
               HEAP8[$414>>0] = 0;
              }
             } while(0);
             $415 = (($col$073$i) + 1)|0;
             $exitcond$i71 = ($415|0)==($256|0);
             if ($exitcond$i71) {
              $$pre$phi87$iZ2D = $315;
              break;
             } else {
              $col$073$i = $415;
             }
            }
           } else {
            $$pre86$i = (($row1$074$i) + 1)|0;
            $$pre$phi87$iZ2D = $$pre86$i;
           }
           $320 = ($$pre$phi87$iZ2D|0)<($251|0);
           if (!($320)) {
            break L169;
           }
           $$pre83$i = HEAP32[$new_data$i39>>2]|0;
           $317 = $$pre83$i;$row1$074$i = $$pre$phi87$iZ2D;
          }
         }
        } while(0);
        $416 = HEAP32[$246>>2]|0;
        $417 = HEAP32[$new_data$i39>>2]|0;
        HEAP32[$246>>2] = $417;
        HEAP32[$new_data$i39>>2] = $416;
        $418 = HEAP32[$247>>2]|0;
        $419 = HEAP32[$258>>2]|0;
        HEAP32[$247>>2] = $419;
        HEAP32[$258>>2] = $418;
        $420 = ((($this)) + 24|0);
        $421 = ((($new_data$i39)) + 8|0);
        $422 = HEAP32[$420>>2]|0;
        $423 = HEAP32[$421>>2]|0;
        HEAP32[$420>>2] = $423;
        HEAP32[$421>>2] = $422;
        $424 = $416;
        $425 = ($416|0)==(0);
        $426 = $418;
        if (!($425)) {
         $427 = $416;
         $428 = ($426|0)==($424|0);
         if ($428) {
          $438 = $427;
         } else {
          $430 = $426;
          while(1) {
           $429 = ((($430)) + -12|0);
           HEAP32[$258>>2] = $429;
           $431 = HEAP32[$429>>2]|0;
           $432 = ($431|0)==(0|0);
           if ($432) {
            $433 = $429;
           } else {
            $435 = ((($430)) + -8|0);
            $436 = HEAP32[$435>>2]|0;
            $437 = ($436|0)==($431|0);
            if (!($437)) {
             HEAP32[$435>>2] = $431;
            }
            __ZdlPv($431);
            $$pre$i$i$i$i75 = HEAP32[$258>>2]|0;
            $433 = $$pre$i$i$i$i75;
           }
           $434 = ($433|0)==($424|0);
           if ($434) {
            break;
           } else {
            $430 = $433;
           }
          }
          $$pre$i$i78 = HEAP32[$new_data$i39>>2]|0;
          $438 = $$pre$i$i78;
         }
         __ZdlPv($438);
        }
        $439 = (($n|0) / 3)&-1;
        $$01 = $439;
       }
       $440 = ($$01|0)>(1);
       if ($440) {
        $$01150 = $$01;
        label = 163;
       } else {
        $$pre = ((($this)) + 16|0);
        $$pre172 = ((($this)) + 20|0);
        $$pre$phi175Z2D = $$pre172;$$pre$phi177Z2D = $$pre;$$pre$phi179Z2D = $$pre;
       }
      } else {
       $$01150 = $n;
       label = 163;
      }
     } while(0);
     L245: do {
      if ((label|0) == 163) {
       $441 = ((($this)) + 16|0);
       $442 = ((($this)) + 20|0);
       $443 = HEAP32[$442>>2]|0;
       $444 = HEAP32[$441>>2]|0;
       $445 = (($443) - ($444))|0;
       $446 = (($445|0) / 12)&-1;
       $$cast$i83 = $444;
       $447 = ((($$cast$i83)) + 4|0);
       $448 = HEAP32[$447>>2]|0;
       $449 = $444;
       $450 = HEAP32[$449>>2]|0;
       $451 = (($448) - ($450))|0;
       HEAP32[$new_data$i82>>2] = 0;
       $452 = ((($new_data$i82)) + 4|0);
       HEAP32[$452>>2] = 0;
       $453 = ((($new_data$i82)) + 8|0);
       HEAP32[$453>>2] = 0;
       $454 = Math_imul($446, $$01150)|0;
       __THREW__ = 0;
       invoke_vii(52,($new_data$i82|0),($454|0));
       $455 = __THREW__; __THREW__ = 0;
       $456 = $455&1;
       L247: do {
        if ($456) {
         $464 = ___cxa_find_matching_catch_2()|0;
         $465 = tempRet0;
         $eh$lpad$body$sink$i$index6Z2D = $465;$eh$lpad$body$sink$i$indexZ2D = $464;
        } else {
         $457 = ($445|0)>(0);
         L250: do {
          if ($457) {
           $458 = ((($0)) + 4|0);
           $459 = ((($0)) + 8|0);
           $460 = ((($new_data$i82)) + 8|0);
           $461 = ($451|0)>(0);
           $row$043$i86 = 0;
           L252: while(1) {
            $466 = HEAP32[$441>>2]|0;
            HEAP32[$0>>2] = 0;
            HEAP32[$458>>2] = 0;
            HEAP32[$459>>2] = 0;
            $467 = HEAP32[$452>>2]|0;
            $468 = HEAP32[$460>>2]|0;
            $469 = ($467|0)==($468|0);
            if ($469) {
             __THREW__ = 0;
             invoke_vii(53,($new_data$i82|0),($0|0));
             $473 = __THREW__; __THREW__ = 0;
             $474 = $473&1;
             if ($474) {
              label = 190;
              break;
             }
            } else {
             HEAP32[$467>>2] = 0;
             $470 = ((($467)) + 4|0);
             HEAP32[$470>>2] = 0;
             $471 = ((($467)) + 8|0);
             HEAP32[$471>>2] = 0;
             $472 = ((($467)) + 12|0);
             HEAP32[$452>>2] = $472;
            }
            if ($461) {
             $475 = (($466) + (($row$043$i86*12)|0)|0);
             $col$038$us$i = 0;
             while(1) {
              $476 = HEAP32[$475>>2]|0;
              $477 = (($476) + ($col$038$us$i)|0);
              $478 = HEAP8[$477>>0]|0;
              $i$037$us$i = 0;
              while(1) {
               $479 = HEAP32[$452>>2]|0;
               $480 = ((($479)) + -12|0);
               $481 = ((($479)) + -8|0);
               $482 = HEAP32[$481>>2]|0;
               $483 = ((($479)) + -4|0);
               $484 = HEAP32[$483>>2]|0;
               $485 = ($482|0)==($484|0);
               $486 = $484;
               if ($485) {
                $489 = $482;
                $490 = HEAP32[$480>>2]|0;
                $491 = (($489) - ($490))|0;
                $492 = (($491) + 1)|0;
                $493 = ($492|0)<(0);
                if ($493) {
                 __THREW__ = 0;
                 invoke_vi(46,($480|0));
                 $494 = __THREW__; __THREW__ = 0;
                 $495 = $494&1;
                 if ($495) {
                  label = 189;
                  break L252;
                 }
                 $$pre$i$i$us$i = HEAP32[$480>>2]|0;
                 $$pre$i27$us$i = HEAP32[$483>>2]|0;
                 $$in$i$i$us$i = $$pre$i$i$us$i;$$pre$phi$i$us$iZ2D = $483;$498 = $$pre$i27$us$i;
                } else {
                 $$in$i$i$us$i = $490;$$pre$phi$i$us$iZ2D = $483;$498 = $486;
                }
                $496 = $$in$i$i$us$i;
                $497 = (($498) - ($$in$i$i$us$i))|0;
                $499 = ($497>>>0)<(1073741823);
                if ($499) {
                 $502 = $497 << 1;
                 $503 = ($502>>>0)<($492>>>0);
                 $504 = $503 ? $492 : $502;
                 $505 = HEAP32[$481>>2]|0;
                 $506 = (($505) - ($$in$i$i$us$i))|0;
                 $507 = ($504|0)==(0);
                 if ($507) {
                  $$0$i2$i$i$us$i = 0;$512 = 0;$513 = $506;$519 = $505;
                 } else {
                  $$0$i1$i$i$us$i = $504;$1374 = $505;$1375 = $506;
                  label = 184;
                 }
                } else {
                 $500 = HEAP32[$481>>2]|0;
                 $501 = (($500) - ($$in$i$i$us$i))|0;
                 $$0$i1$i$i$us$i = 2147483647;$1374 = $500;$1375 = $501;
                 label = 184;
                }
                if ((label|0) == 184) {
                 label = 0;
                 __THREW__ = 0;
                 $508 = (invoke_ii(29,($$0$i1$i$i$us$i|0))|0);
                 $509 = __THREW__; __THREW__ = 0;
                 $510 = $509&1;
                 if ($510) {
                  label = 189;
                  break L252;
                 } else {
                  $$0$i2$i$i$us$i = $$0$i1$i$i$us$i;$512 = $508;$513 = $1375;$519 = $1374;
                 }
                }
                $511 = (($512) + ($513)|0);
                $514 = (($512) + ($$0$i2$i$i$us$i)|0);
                $515 = $514;
                HEAP8[$511>>0] = $478;
                $516 = ((($511)) + 1|0);
                $517 = $516;
                $518 = (($519) - ($$in$i$i$us$i))|0;
                $520 = (0 - ($518))|0;
                $521 = (($511) + ($520)|0);
                $522 = $521;
                _memcpy(($521|0),($496|0),($518|0))|0;
                HEAP32[$480>>2] = $522;
                HEAP32[$481>>2] = $517;
                HEAP32[$$pre$phi$i$us$iZ2D>>2] = $515;
                $523 = ($$in$i$i$us$i|0)==(0);
                if (!($523)) {
                 __ZdlPv($496);
                }
               } else {
                HEAP8[$482>>0] = $478;
                $487 = HEAP32[$481>>2]|0;
                $488 = ((($487)) + 1|0);
                HEAP32[$481>>2] = $488;
               }
               $524 = (($i$037$us$i) + 1)|0;
               $525 = ($524|0)<($$01150|0);
               if ($525) {
                $i$037$us$i = $524;
               } else {
                break;
               }
              }
              $526 = (($col$038$us$i) + 1)|0;
              $527 = ($526|0)<($451|0);
              if ($527) {
               $col$038$us$i = $526;
              } else {
               $i1$040$i = 1;
               break;
              }
             }
            } else {
             $i1$040$i = 1;
            }
            while(1) {
             $534 = HEAP32[$452>>2]|0;
             $535 = ((($534)) + -12|0);
             $536 = HEAP32[$460>>2]|0;
             $537 = ($534|0)==($536|0);
             if ($537) {
              __THREW__ = 0;
              invoke_vii(53,($new_data$i82|0),($535|0));
              $570 = __THREW__; __THREW__ = 0;
              $571 = $570&1;
              if ($571) {
               label = 167;
               break L252;
              }
             } else {
              HEAP32[$534>>2] = 0;
              $538 = ((($534)) + 4|0);
              HEAP32[$538>>2] = 0;
              $539 = ((($534)) + 8|0);
              HEAP32[$539>>2] = 0;
              $540 = ((($534)) + -8|0);
              $541 = HEAP32[$540>>2]|0;
              $542 = HEAP32[$535>>2]|0;
              $543 = (($541) - ($542))|0;
              $544 = ($541|0)==($542|0);
              if (!($544)) {
               $545 = ($543|0)<(0);
               if ($545) {
                __THREW__ = 0;
                invoke_vi(46,($534|0));
                $546 = __THREW__; __THREW__ = 0;
                $547 = $546&1;
                if ($547) {
                 $$lcssa212 = $534;$$lcssa213 = $538;
                 label = 199;
                 break L252;
                }
               }
               __THREW__ = 0;
               $548 = (invoke_ii(29,($543|0))|0);
               $549 = __THREW__; __THREW__ = 0;
               $550 = $549&1;
               if ($550) {
                $$lcssa212 = $534;$$lcssa213 = $538;
                label = 199;
                break L252;
               }
               HEAP32[$538>>2] = $548;
               HEAP32[$534>>2] = $548;
               $551 = (($548) + ($543)|0);
               $552 = ((($534)) + 8|0);
               HEAP32[$552>>2] = $551;
               $553 = HEAP32[$535>>2]|0;
               $554 = HEAP32[$540>>2]|0;
               $555 = ($553|0)==($554|0);
               if (!($555)) {
                $$01$i$i$i$i$i = $553;$557 = $548;
                while(1) {
                 $556 = HEAP8[$$01$i$i$i$i$i>>0]|0;
                 HEAP8[$557>>0] = $556;
                 $558 = HEAP32[$538>>2]|0;
                 $559 = ((($558)) + 1|0);
                 HEAP32[$538>>2] = $559;
                 $560 = ((($$01$i$i$i$i$i)) + 1|0);
                 $561 = ($560|0)==($554|0);
                 if ($561) {
                  break;
                 } else {
                  $$01$i$i$i$i$i = $560;$557 = $559;
                 }
                }
               }
              }
              $568 = HEAP32[$452>>2]|0;
              $569 = ((($568)) + 12|0);
              HEAP32[$452>>2] = $569;
             }
             $572 = (($i1$040$i) + 1)|0;
             $573 = ($572|0)<($$01150|0);
             if ($573) {
              $i1$040$i = $572;
             } else {
              break;
             }
            }
            $532 = (($row$043$i86) + 1)|0;
            $533 = ($532|0)<($446|0);
            if ($533) {
             $row$043$i86 = $532;
            } else {
             $$pre$phi51$iZ2D = $460;
             break L250;
            }
           }
           if ((label|0) == 167) {
            $462 = ___cxa_find_matching_catch_2()|0;
            $463 = tempRet0;
            $eh$lpad$body$sink$i$index6Z2D = $463;$eh$lpad$body$sink$i$indexZ2D = $462;
            break L247;
           }
           else if ((label|0) == 189) {
            $528 = ___cxa_find_matching_catch_2()|0;
            $529 = tempRet0;
            $eh$lpad$body$sink$i$index6Z2D = $529;$eh$lpad$body$sink$i$indexZ2D = $528;
            break L247;
           }
           else if ((label|0) == 190) {
            $530 = ___cxa_find_matching_catch_2()|0;
            $531 = tempRet0;
            $eh$lpad$body$sink$i$index6Z2D = $531;$eh$lpad$body$sink$i$indexZ2D = $530;
            break L247;
           }
           else if ((label|0) == 199) {
            $562 = ___cxa_find_matching_catch_2()|0;
            $563 = tempRet0;
            $564 = HEAP32[$$lcssa212>>2]|0;
            $565 = ($564|0)==(0|0);
            if ($565) {
             $eh$lpad$body$sink$i$index6Z2D = $563;$eh$lpad$body$sink$i$indexZ2D = $562;
             break L247;
            }
            $566 = HEAP32[$$lcssa213>>2]|0;
            $567 = ($566|0)==($564|0);
            if (!($567)) {
             HEAP32[$$lcssa213>>2] = $564;
            }
            __ZdlPv($564);
            $eh$lpad$body$sink$i$index6Z2D = $563;$eh$lpad$body$sink$i$indexZ2D = $562;
            break L247;
           }
          } else {
           $$pre$i84 = ((($new_data$i82)) + 8|0);
           $$pre$phi51$iZ2D = $$pre$i84;
          }
         } while(0);
         $574 = HEAP32[$441>>2]|0;
         $575 = HEAP32[$new_data$i82>>2]|0;
         HEAP32[$441>>2] = $575;
         HEAP32[$new_data$i82>>2] = $574;
         $576 = HEAP32[$442>>2]|0;
         $577 = HEAP32[$452>>2]|0;
         HEAP32[$442>>2] = $577;
         HEAP32[$452>>2] = $576;
         $578 = ((($this)) + 24|0);
         $579 = HEAP32[$578>>2]|0;
         $580 = HEAP32[$$pre$phi51$iZ2D>>2]|0;
         HEAP32[$578>>2] = $580;
         HEAP32[$$pre$phi51$iZ2D>>2] = $579;
         $581 = $574;
         $582 = ($574|0)==(0);
         $583 = $576;
         if (!($582)) {
          $584 = $574;
          $585 = ($583|0)==($581|0);
          if ($585) {
           $595 = $584;
          } else {
           $587 = $583;
           while(1) {
            $586 = ((($587)) + -12|0);
            HEAP32[$452>>2] = $586;
            $588 = HEAP32[$586>>2]|0;
            $589 = ($588|0)==(0|0);
            if ($589) {
             $590 = $586;
            } else {
             $592 = ((($587)) + -8|0);
             $593 = HEAP32[$592>>2]|0;
             $594 = ($593|0)==($588|0);
             if (!($594)) {
              HEAP32[$592>>2] = $588;
             }
             __ZdlPv($588);
             $$pre$i$i$i5$i = HEAP32[$452>>2]|0;
             $590 = $$pre$i$i$i5$i;
            }
            $591 = ($590|0)==($581|0);
            if ($591) {
             break;
            } else {
             $587 = $590;
            }
           }
           $$pre$i8$i = HEAP32[$new_data$i82>>2]|0;
           $595 = $$pre$i8$i;
          }
          __ZdlPv($595);
         }
         $610 = HEAP8[$65>>0]|0;
         $611 = ($610&255)>(1);
         if (!($611)) {
          $$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
          break L245;
         }
         $612 = ($$01150|0)<(4);
         if ($612) {
          $613 = HEAP32[$442>>2]|0;
          $614 = HEAP32[$441>>2]|0;
          $615 = (($613) - ($614))|0;
          $616 = (($615|0) / 12)&-1;
          $$cast$i101 = $614;
          $617 = ((($$cast$i101)) + 4|0);
          $618 = HEAP32[$617>>2]|0;
          $619 = $614;
          $620 = HEAP32[$619>>2]|0;
          $621 = (($618) - ($620))|0;
          $622 = ($615|0)<(36);
          $623 = ($621|0)<(3);
          $or$cond$i102 = $622 | $623;
          if ($or$cond$i102) {
           $$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
           break L245;
          }
          __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($new_data$i100,$616);
          $624 = HEAP32[$new_data$i100>>2]|0;
          $625 = HEAP32[$441>>2]|0;
          $626 = ($624|0)==($625|0);
          if ($626) {
           $1376 = $624;
           label = 231;
          } else {
           $627 = HEAP32[$625>>2]|0;
           $628 = ((($625)) + 4|0);
           $629 = HEAP32[$628>>2]|0;
           __THREW__ = 0;
           invoke_viii(54,($624|0),($627|0),($629|0));
           $630 = __THREW__; __THREW__ = 0;
           $631 = $630&1;
           if ($631) {
            label = 246;
           } else {
            $$pre$i103 = HEAP32[$new_data$i100>>2]|0;
            $1376 = $$pre$i103;
            label = 231;
           }
          }
          L329: do {
           if ((label|0) == 231) {
            $632 = (($616) + -1)|0;
            $633 = ($632|0)>(1);
            L331: do {
             if ($633) {
              $634 = ($618|0)==($620|0);
              if ($634) {
               $635 = (0 + ($621)|0);
               $636 = $635;
               $638 = $1376;$row$082$us$i = 1;
               while(1) {
                $637 = (($638) + (($row$082$us$i*12)|0)|0);
                $639 = (((($638) + (($row$082$us$i*12)|0)|0)) + 8|0);
                $640 = HEAP32[$639>>2]|0;
                $641 = HEAP32[$637>>2]|0;
                $642 = (($640) - ($641))|0;
                $643 = ($642>>>0)<($621>>>0);
                $644 = $641;
                do {
                 if ($643) {
                  $645 = (((($638) + (($row$082$us$i*12)|0)|0)) + 4|0);
                  $646 = HEAP32[$645>>2]|0;
                  $647 = (($646) - ($641))|0;
                  $648 = (0 + ($647)|0);
                  $649 = $648;
                  $650 = (0 - ($647))|0;
                  $651 = (($648) + ($650)|0);
                  $652 = $651;
                  _memcpy(($651|0),($644|0),($647|0))|0;
                  HEAP32[$637>>2] = $652;
                  HEAP32[$645>>2] = $649;
                  HEAP32[$639>>2] = $636;
                  $653 = ($641|0)==(0);
                  if ($653) {
                   break;
                  }
                  __ZdlPv($644);
                 }
                } while(0);
                $654 = (($row$082$us$i) + 1)|0;
                $655 = HEAP32[$new_data$i100>>2]|0;
                $exitcond$i105 = ($654|0)==($632|0);
                if ($exitcond$i105) {
                 $$lcssa75$i = $655;
                 break L331;
                } else {
                 $638 = $655;$row$082$us$i = $654;
                }
               }
              } else {
               $694 = $1376;$row$082$i = 1;
              }
              L341: while(1) {
               $693 = (($694) + (($row$082$i*12)|0)|0);
               $695 = (((($694) + (($row$082$i*12)|0)|0)) + 8|0);
               $696 = HEAP32[$695>>2]|0;
               $697 = HEAP32[$693>>2]|0;
               $698 = (($696) - ($697))|0;
               $699 = ($698>>>0)<($621>>>0);
               $700 = $697;
               do {
                if ($699) {
                 $701 = (((($694) + (($row$082$i*12)|0)|0)) + 4|0);
                 $702 = HEAP32[$701>>2]|0;
                 $703 = (($702) - ($697))|0;
                 __THREW__ = 0;
                 $704 = (invoke_ii(29,($621|0))|0);
                 $705 = __THREW__; __THREW__ = 0;
                 $706 = $705&1;
                 if ($706) {
                  break L341;
                 }
                 $707 = (($704) + ($703)|0);
                 $708 = $707;
                 $709 = (($704) + ($621)|0);
                 $710 = $709;
                 $711 = (0 - ($703))|0;
                 $712 = (($707) + ($711)|0);
                 $713 = $712;
                 _memcpy(($712|0),($700|0),($703|0))|0;
                 HEAP32[$693>>2] = $713;
                 HEAP32[$701>>2] = $708;
                 HEAP32[$695>>2] = $710;
                 $714 = ($697|0)==(0);
                 if ($714) {
                  break;
                 }
                 __ZdlPv($700);
                }
               } while(0);
               $715 = (($row$082$i) + 1)|0;
               $716 = ($715|0)<($632|0);
               $717 = HEAP32[$new_data$i100>>2]|0;
               if ($716) {
                $694 = $717;$row$082$i = $715;
               } else {
                $$lcssa75$i = $717;
                break L331;
               }
              }
              $674 = ___cxa_find_matching_catch_2()|0;
              $675 = tempRet0;
              $lpad$phi$i112$index = $674;$lpad$phi$i112$index18 = $675;
              break L329;
             } else {
              $$lcssa75$i = $1376;
             }
            } while(0);
            $656 = HEAP32[$441>>2]|0;
            $657 = ($$lcssa75$i|0)==($656|0);
            if (!($657)) {
             $661 = (($$lcssa75$i) + (($632*12)|0)|0);
             $662 = (($656) + (($632*12)|0)|0);
             $663 = HEAP32[$662>>2]|0;
             $664 = (((($656) + (($632*12)|0)|0)) + 4|0);
             $665 = HEAP32[$664>>2]|0;
             __THREW__ = 0;
             invoke_viii(54,($661|0),($663|0),($665|0));
             $666 = __THREW__; __THREW__ = 0;
             $667 = $666&1;
             if ($667) {
              label = 246;
              break;
             }
            }
            L353: do {
             if ($633) {
              $658 = ($$01150|0)<(3);
              $659 = (($621) + -1)|0;
              $660 = ($659|0)>(1);
              $row1$080$i = 1;
              L355: while(1) {
               $718 = (($row1$080$i) + -1)|0;
               $719 = HEAP32[$441>>2]|0;
               $720 = (($719) + (($718*12)|0)|0);
               $721 = (($row1$080$i) + 1)|0;
               $722 = (($719) + (($721*12)|0)|0);
               $723 = HEAP32[$new_data$i100>>2]|0;
               $724 = (($723) + (($row1$080$i*12)|0)|0);
               $725 = (($719) + (($row1$080$i*12)|0)|0);
               $726 = HEAP32[$725>>2]|0;
               $727 = (((($723) + (($row1$080$i*12)|0)|0)) + 4|0);
               $728 = HEAP32[$727>>2]|0;
               $729 = (((($723) + (($row1$080$i*12)|0)|0)) + 8|0);
               $730 = HEAP32[$729>>2]|0;
               $731 = ($728|0)==($730|0);
               $732 = $730;
               do {
                if ($731) {
                 $736 = $728;
                 $737 = HEAP32[$724>>2]|0;
                 $738 = (($736) - ($737))|0;
                 $739 = (($738) + 1)|0;
                 $740 = ($739|0)<(0);
                 if ($740) {
                  __THREW__ = 0;
                  invoke_vi(46,($724|0));
                  $741 = __THREW__; __THREW__ = 0;
                  $742 = $741&1;
                  if ($742) {
                   label = 244;
                   break L355;
                  }
                  $$pre$i$i51$i = HEAP32[$724>>2]|0;
                  $$pre$i53$i = HEAP32[$729>>2]|0;
                  $$in$i$i55$i = $$pre$i$i51$i;$$pre$phi$i54$iZ2D = $729;$745 = $$pre$i53$i;
                 } else {
                  $$in$i$i55$i = $737;$$pre$phi$i54$iZ2D = $729;$745 = $732;
                 }
                 $743 = $$in$i$i55$i;
                 $744 = (($745) - ($$in$i$i55$i))|0;
                 $746 = ($744>>>0)<(1073741823);
                 if ($746) {
                  $749 = $744 << 1;
                  $750 = ($749>>>0)<($739>>>0);
                  $751 = $750 ? $739 : $749;
                  $752 = HEAP32[$727>>2]|0;
                  $753 = (($752) - ($$in$i$i55$i))|0;
                  $754 = ($751|0)==(0);
                  if ($754) {
                   $$0$i2$i$i59$i = 0;$759 = 0;$760 = $753;$767 = $752;
                  } else {
                   $$0$i1$i$i58$i = $751;$1377 = $752;$1378 = $753;
                   label = 270;
                  }
                 } else {
                  $747 = HEAP32[$727>>2]|0;
                  $748 = (($747) - ($$in$i$i55$i))|0;
                  $$0$i1$i$i58$i = 2147483647;$1377 = $747;$1378 = $748;
                  label = 270;
                 }
                 if ((label|0) == 270) {
                  label = 0;
                  __THREW__ = 0;
                  $755 = (invoke_ii(29,($$0$i1$i$i58$i|0))|0);
                  $756 = __THREW__; __THREW__ = 0;
                  $757 = $756&1;
                  if ($757) {
                   label = 244;
                   break L355;
                  } else {
                   $$0$i2$i$i59$i = $$0$i1$i$i58$i;$759 = $755;$760 = $1378;$767 = $1377;
                  }
                 }
                 $758 = (($759) + ($760)|0);
                 $761 = (($759) + ($$0$i2$i$i59$i)|0);
                 $762 = $761;
                 $763 = HEAP8[$726>>0]|0;
                 HEAP8[$758>>0] = $763;
                 $764 = ((($758)) + 1|0);
                 $765 = $764;
                 $766 = (($767) - ($$in$i$i55$i))|0;
                 $768 = (0 - ($766))|0;
                 $769 = (($758) + ($768)|0);
                 $770 = $769;
                 _memcpy(($769|0),($743|0),($766|0))|0;
                 HEAP32[$724>>2] = $770;
                 HEAP32[$727>>2] = $765;
                 HEAP32[$$pre$phi$i54$iZ2D>>2] = $762;
                 $771 = ($$in$i$i55$i|0)==(0);
                 if ($771) {
                  break;
                 }
                 __ZdlPv($743);
                } else {
                 $733 = HEAP8[$726>>0]|0;
                 HEAP8[$728>>0] = $733;
                 $734 = HEAP32[$727>>2]|0;
                 $735 = ((($734)) + 1|0);
                 HEAP32[$727>>2] = $735;
                }
               } while(0);
               do {
                if ($658) {
                 if (!($660)) {
                  break;
                 }
                 $col$078$i = 1;
                 while(1) {
                  $772 = (($col$078$i) + -1)|0;
                  $773 = HEAP32[$720>>2]|0;
                  $774 = (($773) + ($772)|0);
                  $775 = HEAP8[$774>>0]|0;
                  $776 = $775&255;
                  $777 = (($773) + ($col$078$i)|0);
                  $778 = HEAP8[$777>>0]|0;
                  $779 = $778&255;
                  $780 = (($col$078$i) + 1)|0;
                  $781 = (($773) + ($780)|0);
                  $782 = HEAP8[$781>>0]|0;
                  $783 = $782&255;
                  $784 = HEAP32[$725>>2]|0;
                  $785 = (($784) + ($772)|0);
                  $786 = HEAP8[$785>>0]|0;
                  $787 = $786&255;
                  $788 = (($784) + ($col$078$i)|0);
                  $789 = HEAP8[$788>>0]|0;
                  $790 = $789&255;
                  $791 = $790 << 1;
                  $792 = (($784) + ($780)|0);
                  $793 = HEAP8[$792>>0]|0;
                  $794 = $793&255;
                  $795 = HEAP32[$722>>2]|0;
                  $796 = (($795) + ($772)|0);
                  $797 = HEAP8[$796>>0]|0;
                  $798 = $797&255;
                  $799 = (($795) + ($col$078$i)|0);
                  $800 = HEAP8[$799>>0]|0;
                  $801 = $800&255;
                  $802 = (($795) + ($780)|0);
                  $803 = HEAP8[$802>>0]|0;
                  $804 = $803&255;
                  $805 = (($776) + 5)|0;
                  $806 = (($805) + ($779))|0;
                  $807 = (($806) + ($783))|0;
                  $808 = (($807) + ($787))|0;
                  $809 = (($808) + ($791))|0;
                  $810 = (($809) + ($794))|0;
                  $811 = (($810) + ($798))|0;
                  $812 = (($811) + ($801))|0;
                  $813 = (($812) + ($804))|0;
                  $814 = (($813|0) / 10)&-1;
                  $815 = $814&255;
                  $816 = HEAP32[$727>>2]|0;
                  $817 = HEAP32[$729>>2]|0;
                  $818 = ($816|0)==($817|0);
                  do {
                   if ($818) {
                    $822 = $816;
                    $823 = HEAP32[$724>>2]|0;
                    $824 = (($822) - ($823))|0;
                    $825 = (($824) + 1)|0;
                    $826 = ($825|0)<(0);
                    if ($826) {
                     __THREW__ = 0;
                     invoke_vi(46,($724|0));
                     $827 = __THREW__; __THREW__ = 0;
                     $828 = $827&1;
                     if ($828) {
                      label = 242;
                      break L355;
                     }
                     $$pre$i$i36$i118 = HEAP32[$724>>2]|0;
                     $$pre$i38$i119 = HEAP32[$729>>2]|0;
                     $$in$i$i40$i121 = $$pre$i$i36$i118;$831 = $$pre$i38$i119;
                    } else {
                     $$in$i$i40$i121 = $823;$831 = $822;
                    }
                    $829 = $$in$i$i40$i121;
                    $830 = (($831) - ($$in$i$i40$i121))|0;
                    $832 = ($830>>>0)<(1073741823);
                    if ($832) {
                     $835 = $830 << 1;
                     $836 = ($835>>>0)<($825>>>0);
                     $837 = $836 ? $825 : $835;
                     $838 = HEAP32[$727>>2]|0;
                     $839 = (($838) - ($$in$i$i40$i121))|0;
                     $840 = ($837|0)==(0);
                     if ($840) {
                      $$0$i2$i$i44$i126 = 0;$845 = 0;$846 = $839;$852 = $838;
                     } else {
                      $$0$i1$i$i43$i125 = $837;$1379 = $838;$1380 = $839;
                      label = 287;
                     }
                    } else {
                     $833 = HEAP32[$727>>2]|0;
                     $834 = (($833) - ($$in$i$i40$i121))|0;
                     $$0$i1$i$i43$i125 = 2147483647;$1379 = $833;$1380 = $834;
                     label = 287;
                    }
                    if ((label|0) == 287) {
                     label = 0;
                     __THREW__ = 0;
                     $841 = (invoke_ii(29,($$0$i1$i$i43$i125|0))|0);
                     $842 = __THREW__; __THREW__ = 0;
                     $843 = $842&1;
                     if ($843) {
                      label = 242;
                      break L355;
                     } else {
                      $$0$i2$i$i44$i126 = $$0$i1$i$i43$i125;$845 = $841;$846 = $1380;$852 = $1379;
                     }
                    }
                    $844 = (($845) + ($846)|0);
                    $847 = (($845) + ($$0$i2$i$i44$i126)|0);
                    $848 = $847;
                    HEAP8[$844>>0] = $815;
                    $849 = ((($844)) + 1|0);
                    $850 = $849;
                    $851 = (($852) - ($$in$i$i40$i121))|0;
                    $853 = (0 - ($851))|0;
                    $854 = (($844) + ($853)|0);
                    $855 = $854;
                    _memcpy(($854|0),($829|0),($851|0))|0;
                    HEAP32[$724>>2] = $855;
                    HEAP32[$727>>2] = $850;
                    HEAP32[$729>>2] = $848;
                    $856 = ($$in$i$i40$i121|0)==(0);
                    if ($856) {
                     break;
                    }
                    __ZdlPv($829);
                   } else {
                    HEAP8[$816>>0] = $815;
                    $819 = HEAP32[$727>>2]|0;
                    $820 = ((($819)) + 1|0);
                    HEAP32[$727>>2] = $820;
                   }
                  } while(0);
                  $821 = ($780|0)<($659|0);
                  if ($821) {
                   $col$078$i = $780;
                  } else {
                   break;
                  }
                 }
                } else {
                 if (!($660)) {
                  break;
                 }
                 $col2$077$i = 1;
                 while(1) {
                  $857 = (($col2$077$i) + -1)|0;
                  $858 = HEAP32[$720>>2]|0;
                  $859 = (($858) + ($857)|0);
                  $860 = HEAP8[$859>>0]|0;
                  $861 = $860&255;
                  $862 = (($858) + ($col2$077$i)|0);
                  $863 = HEAP8[$862>>0]|0;
                  $864 = $863&255;
                  $865 = (($864) + ($861))|0;
                  $866 = (($col2$077$i) + 1)|0;
                  $867 = (($858) + ($866)|0);
                  $868 = HEAP8[$867>>0]|0;
                  $869 = $868&255;
                  $870 = (($865) + ($869))|0;
                  $871 = HEAP32[$725>>2]|0;
                  $872 = (($871) + ($857)|0);
                  $873 = HEAP8[$872>>0]|0;
                  $874 = $873&255;
                  $875 = (($870) + ($874))|0;
                  $876 = (($871) + ($col2$077$i)|0);
                  $877 = HEAP8[$876>>0]|0;
                  $878 = $877&255;
                  $879 = (($875) + ($878))|0;
                  $880 = (($871) + ($866)|0);
                  $881 = HEAP8[$880>>0]|0;
                  $882 = $881&255;
                  $883 = (($879) + ($882))|0;
                  $884 = HEAP32[$722>>2]|0;
                  $885 = (($884) + ($857)|0);
                  $886 = HEAP8[$885>>0]|0;
                  $887 = $886&255;
                  $888 = (($883) + ($887))|0;
                  $889 = (($884) + ($col2$077$i)|0);
                  $890 = HEAP8[$889>>0]|0;
                  $891 = $890&255;
                  $892 = (($888) + ($891))|0;
                  $893 = (($884) + ($866)|0);
                  $894 = HEAP8[$893>>0]|0;
                  $895 = $894&255;
                  $896 = (($892) + ($895))|0;
                  $897 = $896 << 1;
                  $898 = (($897) + 9)|0;
                  $899 = (($898|0) / 18)&-1;
                  $900 = $899&255;
                  $901 = HEAP32[$727>>2]|0;
                  $902 = HEAP32[$729>>2]|0;
                  $903 = ($901|0)==($902|0);
                  do {
                   if ($903) {
                    $907 = $901;
                    $908 = HEAP32[$724>>2]|0;
                    $909 = (($907) - ($908))|0;
                    $910 = (($909) + 1)|0;
                    $911 = ($910|0)<(0);
                    if ($911) {
                     __THREW__ = 0;
                     invoke_vi(46,($724|0));
                     $912 = __THREW__; __THREW__ = 0;
                     $913 = $912&1;
                     if ($913) {
                      label = 243;
                      break L355;
                     }
                     $$pre$i$i8$i = HEAP32[$724>>2]|0;
                     $$pre$i10$i = HEAP32[$729>>2]|0;
                     $$in$i$i12$i = $$pre$i$i8$i;$916 = $$pre$i10$i;
                    } else {
                     $$in$i$i12$i = $908;$916 = $907;
                    }
                    $914 = $$in$i$i12$i;
                    $915 = (($916) - ($$in$i$i12$i))|0;
                    $917 = ($915>>>0)<(1073741823);
                    if ($917) {
                     $920 = $915 << 1;
                     $921 = ($920>>>0)<($910>>>0);
                     $922 = $921 ? $910 : $920;
                     $923 = HEAP32[$727>>2]|0;
                     $924 = (($923) - ($$in$i$i12$i))|0;
                     $925 = ($922|0)==(0);
                     if ($925) {
                      $$0$i2$i$i16$i = 0;$930 = 0;$931 = $924;$937 = $923;
                     } else {
                      $$0$i1$i$i15$i = $922;$1381 = $923;$1382 = $924;
                      label = 299;
                     }
                    } else {
                     $918 = HEAP32[$727>>2]|0;
                     $919 = (($918) - ($$in$i$i12$i))|0;
                     $$0$i1$i$i15$i = 2147483647;$1381 = $918;$1382 = $919;
                     label = 299;
                    }
                    if ((label|0) == 299) {
                     label = 0;
                     __THREW__ = 0;
                     $926 = (invoke_ii(29,($$0$i1$i$i15$i|0))|0);
                     $927 = __THREW__; __THREW__ = 0;
                     $928 = $927&1;
                     if ($928) {
                      label = 243;
                      break L355;
                     } else {
                      $$0$i2$i$i16$i = $$0$i1$i$i15$i;$930 = $926;$931 = $1382;$937 = $1381;
                     }
                    }
                    $929 = (($930) + ($931)|0);
                    $932 = (($930) + ($$0$i2$i$i16$i)|0);
                    $933 = $932;
                    HEAP8[$929>>0] = $900;
                    $934 = ((($929)) + 1|0);
                    $935 = $934;
                    $936 = (($937) - ($$in$i$i12$i))|0;
                    $938 = (0 - ($936))|0;
                    $939 = (($929) + ($938)|0);
                    $940 = $939;
                    _memcpy(($939|0),($914|0),($936|0))|0;
                    HEAP32[$724>>2] = $940;
                    HEAP32[$727>>2] = $935;
                    HEAP32[$729>>2] = $933;
                    $941 = ($$in$i$i12$i|0)==(0);
                    if ($941) {
                     break;
                    }
                    __ZdlPv($914);
                   } else {
                    HEAP8[$901>>0] = $900;
                    $904 = HEAP32[$727>>2]|0;
                    $905 = ((($904)) + 1|0);
                    HEAP32[$727>>2] = $905;
                   }
                  } while(0);
                  $906 = ($866|0)<($659|0);
                  if ($906) {
                   $col2$077$i = $866;
                  } else {
                   break;
                  }
                 }
                }
               } while(0);
               $942 = HEAP32[$725>>2]|0;
               $943 = (($942) + ($659)|0);
               $944 = HEAP32[$727>>2]|0;
               $945 = HEAP32[$729>>2]|0;
               $946 = ($944|0)==($945|0);
               $947 = $945;
               do {
                if ($946) {
                 $952 = $944;
                 $953 = HEAP32[$724>>2]|0;
                 $954 = (($952) - ($953))|0;
                 $955 = (($954) + 1)|0;
                 $956 = ($955|0)<(0);
                 if ($956) {
                  __THREW__ = 0;
                  invoke_vi(46,($724|0));
                  $957 = __THREW__; __THREW__ = 0;
                  $958 = $957&1;
                  if ($958) {
                   label = 244;
                   break L355;
                  }
                  $$pre$i$i$i130 = HEAP32[$724>>2]|0;
                  $$pre$i3$i132 = HEAP32[$729>>2]|0;
                  $$in$i$i$i134 = $$pre$i$i$i130;$$pre$phi$i$iZ2D = $729;$961 = $$pre$i3$i132;
                 } else {
                  $$in$i$i$i134 = $953;$$pre$phi$i$iZ2D = $729;$961 = $947;
                 }
                 $959 = $$in$i$i$i134;
                 $960 = (($961) - ($$in$i$i$i134))|0;
                 $962 = ($960>>>0)<(1073741823);
                 if ($962) {
                  $965 = $960 << 1;
                  $966 = ($965>>>0)<($955>>>0);
                  $967 = $966 ? $955 : $965;
                  $968 = HEAP32[$727>>2]|0;
                  $969 = (($968) - ($$in$i$i$i134))|0;
                  $970 = ($967|0)==(0);
                  if ($970) {
                   $$0$i2$i$i$i138 = 0;$975 = 0;$976 = $969;$983 = $968;
                  } else {
                   $$0$i1$i$i$i137 = $967;$1383 = $968;$1384 = $969;
                   label = 312;
                  }
                 } else {
                  $963 = HEAP32[$727>>2]|0;
                  $964 = (($963) - ($$in$i$i$i134))|0;
                  $$0$i1$i$i$i137 = 2147483647;$1383 = $963;$1384 = $964;
                  label = 312;
                 }
                 if ((label|0) == 312) {
                  label = 0;
                  __THREW__ = 0;
                  $971 = (invoke_ii(29,($$0$i1$i$i$i137|0))|0);
                  $972 = __THREW__; __THREW__ = 0;
                  $973 = $972&1;
                  if ($973) {
                   label = 244;
                   break L355;
                  } else {
                   $$0$i2$i$i$i138 = $$0$i1$i$i$i137;$975 = $971;$976 = $1384;$983 = $1383;
                  }
                 }
                 $974 = (($975) + ($976)|0);
                 $977 = (($975) + ($$0$i2$i$i$i138)|0);
                 $978 = $977;
                 $979 = HEAP8[$943>>0]|0;
                 HEAP8[$974>>0] = $979;
                 $980 = ((($974)) + 1|0);
                 $981 = $980;
                 $982 = (($983) - ($$in$i$i$i134))|0;
                 $984 = (0 - ($982))|0;
                 $985 = (($974) + ($984)|0);
                 $986 = $985;
                 _memcpy(($985|0),($959|0),($982|0))|0;
                 HEAP32[$724>>2] = $986;
                 HEAP32[$727>>2] = $981;
                 HEAP32[$$pre$phi$i$iZ2D>>2] = $978;
                 $987 = ($$in$i$i$i134|0)==(0);
                 if ($987) {
                  break;
                 }
                 __ZdlPv($959);
                } else {
                 $948 = HEAP8[$943>>0]|0;
                 HEAP8[$944>>0] = $948;
                 $949 = HEAP32[$727>>2]|0;
                 $950 = ((($949)) + 1|0);
                 HEAP32[$727>>2] = $950;
                }
               } while(0);
               $951 = ($721|0)<($632|0);
               if ($951) {
                $row1$080$i = $721;
               } else {
                break L353;
               }
              }
              if ((label|0) == 242) {
               $668 = ___cxa_find_matching_catch_2()|0;
               $669 = tempRet0;
               $lpad$phi$i112$index = $668;$lpad$phi$i112$index18 = $669;
               break L329;
              }
              else if ((label|0) == 243) {
               $670 = ___cxa_find_matching_catch_2()|0;
               $671 = tempRet0;
               $lpad$phi$i112$index = $670;$lpad$phi$i112$index18 = $671;
               break L329;
              }
              else if ((label|0) == 244) {
               $672 = ___cxa_find_matching_catch_2()|0;
               $673 = tempRet0;
               $lpad$phi$i112$index = $672;$lpad$phi$i112$index18 = $673;
               break L329;
              }
             }
            } while(0);
            $988 = HEAP32[$441>>2]|0;
            $989 = HEAP32[$new_data$i100>>2]|0;
            HEAP32[$441>>2] = $989;
            HEAP32[$new_data$i100>>2] = $988;
            $990 = ((($new_data$i100)) + 4|0);
            $991 = HEAP32[$442>>2]|0;
            $992 = HEAP32[$990>>2]|0;
            HEAP32[$442>>2] = $992;
            HEAP32[$990>>2] = $991;
            $993 = ((($new_data$i100)) + 8|0);
            $994 = HEAP32[$578>>2]|0;
            $995 = HEAP32[$993>>2]|0;
            HEAP32[$578>>2] = $995;
            HEAP32[$993>>2] = $994;
            $996 = $988;
            $997 = ($988|0)==(0);
            $998 = $991;
            if (!($997)) {
             $999 = $988;
             $1000 = ($998|0)==($996|0);
             if ($1000) {
              $1010 = $999;
             } else {
              $1002 = $998;
              while(1) {
               $1001 = ((($1002)) + -12|0);
               HEAP32[$990>>2] = $1001;
               $1003 = HEAP32[$1001>>2]|0;
               $1004 = ($1003|0)==(0|0);
               if ($1004) {
                $1005 = $1001;
               } else {
                $1007 = ((($1002)) + -8|0);
                $1008 = HEAP32[$1007>>2]|0;
                $1009 = ($1008|0)==($1003|0);
                if (!($1009)) {
                 HEAP32[$1007>>2] = $1003;
                }
                __ZdlPv($1003);
                $$pre$i$i$i$i143 = HEAP32[$990>>2]|0;
                $1005 = $$pre$i$i$i$i143;
               }
               $1006 = ($1005|0)==($996|0);
               if ($1006) {
                break;
               } else {
                $1002 = $1005;
               }
              }
              $$pre$i$i146 = HEAP32[$new_data$i100>>2]|0;
              $1010 = $$pre$i$i146;
             }
             __ZdlPv($1010);
            }
            $$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
            break L245;
           }
          } while(0);
          if ((label|0) == 246) {
           $676 = ___cxa_find_matching_catch_2()|0;
           $677 = tempRet0;
           $lpad$phi$i112$index = $676;$lpad$phi$i112$index18 = $677;
          }
          $678 = HEAP32[$new_data$i100>>2]|0;
          $679 = ($678|0)==(0|0);
          if ($679) {
           ___resumeException($lpad$phi$i112$index|0);
           // unreachable;
          }
          $680 = ((($new_data$i100)) + 4|0);
          $681 = HEAP32[$680>>2]|0;
          $682 = ($681|0)==($678|0);
          if ($682) {
           $692 = $678;
          } else {
           $684 = $681;
           while(1) {
            $683 = ((($684)) + -12|0);
            HEAP32[$680>>2] = $683;
            $685 = HEAP32[$683>>2]|0;
            $686 = ($685|0)==(0|0);
            if ($686) {
             $687 = $683;
            } else {
             $689 = ((($684)) + -8|0);
             $690 = HEAP32[$689>>2]|0;
             $691 = ($690|0)==($685|0);
             if (!($691)) {
              HEAP32[$689>>2] = $685;
             }
             __ZdlPv($685);
             $$pre$i$i$i26$i = HEAP32[$680>>2]|0;
             $687 = $$pre$i$i$i26$i;
            }
            $688 = ($687|0)==($678|0);
            if ($688) {
             break;
            } else {
             $684 = $687;
            }
           }
           $$pre$i29$i = HEAP32[$new_data$i100>>2]|0;
           $692 = $$pre$i29$i;
          }
          __ZdlPv($692);
          ___resumeException($lpad$phi$i112$index|0);
          // unreachable;
         }
         $1011 = (($$01150|0) / 2)&-1;
         $1012 = $1011 << 1;
         $1013 = $1012 | 1;
         $1014 = Math_imul($1013, $1013)|0;
         $1015 = HEAP32[$442>>2]|0;
         $1016 = HEAP32[$441>>2]|0;
         $1017 = (($1015) - ($1016))|0;
         $1018 = (($1017|0) / 12)&-1;
         $$cast$i = $1016;
         $1019 = ((($$cast$i)) + 4|0);
         $1020 = HEAP32[$1019>>2]|0;
         $1021 = $1016;
         $1022 = HEAP32[$1021>>2]|0;
         $1023 = (($1020) - ($1022))|0;
         $1024 = ($1018|0)<($1013|0);
         $1025 = ($1023|0)<($1013|0);
         $or$cond1$i = $1024 | $1025;
         if ($or$cond1$i) {
          $$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
          break L245;
         }
         __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($new_data$i,$1018);
         $row$093$i = 0;
         while(1) {
          $1049 = HEAP32[$new_data$i>>2]|0;
          $1050 = HEAP32[$441>>2]|0;
          $1051 = ($1049|0)==($1050|0);
          if (!($1051)) {
           $1052 = (($1049) + (($row$093$i*12)|0)|0);
           $1053 = (($1050) + (($row$093$i*12)|0)|0);
           $1054 = HEAP32[$1053>>2]|0;
           $1055 = (((($1050) + (($row$093$i*12)|0)|0)) + 4|0);
           $1056 = HEAP32[$1055>>2]|0;
           __THREW__ = 0;
           invoke_viii(54,($1052|0),($1054|0),($1056|0));
           $1057 = __THREW__; __THREW__ = 0;
           $1058 = $1057&1;
           if ($1058) {
            label = 343;
            break;
           }
          }
          $1059 = (($row$093$i) + 1)|0;
          $1060 = ($1059|0)<($1011|0);
          if ($1060) {
           $row$093$i = $1059;
          } else {
           label = 328;
           break;
          }
         }
         L473: do {
          if ((label|0) == 328) {
           $1026 = (($1018) - ($1011))|0;
           $1027 = ($1011|0)<($1026|0);
           L475: do {
            if ($1027) {
             $1028 = ($1020|0)==($1022|0);
             if ($1028) {
              $1029 = (0 + ($1023)|0);
              $1030 = $1029;
              $row1$090$us$i = $1011;
              while(1) {
               $1031 = HEAP32[$new_data$i>>2]|0;
               $1032 = (($1031) + (($row1$090$us$i*12)|0)|0);
               $1033 = (((($1031) + (($row1$090$us$i*12)|0)|0)) + 8|0);
               $1034 = HEAP32[$1033>>2]|0;
               $1035 = HEAP32[$1032>>2]|0;
               $1036 = (($1034) - ($1035))|0;
               $1037 = ($1036>>>0)<($1023>>>0);
               $1038 = $1035;
               do {
                if ($1037) {
                 $1039 = (((($1031) + (($row1$090$us$i*12)|0)|0)) + 4|0);
                 $1040 = HEAP32[$1039>>2]|0;
                 $1041 = (($1040) - ($1035))|0;
                 $1042 = (0 + ($1041)|0);
                 $1043 = $1042;
                 $1044 = (0 - ($1041))|0;
                 $1045 = (($1042) + ($1044)|0);
                 $1046 = $1045;
                 _memcpy(($1045|0),($1038|0),($1041|0))|0;
                 HEAP32[$1032>>2] = $1046;
                 HEAP32[$1039>>2] = $1043;
                 HEAP32[$1033>>2] = $1030;
                 $1047 = ($1035|0)==(0);
                 if ($1047) {
                  break;
                 }
                 __ZdlPv($1038);
                }
               } while(0);
               $1048 = (($row1$090$us$i) + 1)|0;
               $exitcond115$i = ($1048|0)==($1026|0);
               if ($exitcond115$i) {
                $row2$088$i = $1026;
                break L475;
               } else {
                $row1$090$us$i = $1048;
               }
              }
             } else {
              $row1$090$i = $1011;
             }
             L485: while(1) {
              $1088 = HEAP32[$new_data$i>>2]|0;
              $1089 = (($1088) + (($row1$090$i*12)|0)|0);
              $1090 = (((($1088) + (($row1$090$i*12)|0)|0)) + 8|0);
              $1091 = HEAP32[$1090>>2]|0;
              $1092 = HEAP32[$1089>>2]|0;
              $1093 = (($1091) - ($1092))|0;
              $1094 = ($1093>>>0)<($1023>>>0);
              $1095 = $1092;
              do {
               if ($1094) {
                $1096 = (((($1088) + (($row1$090$i*12)|0)|0)) + 4|0);
                $1097 = HEAP32[$1096>>2]|0;
                $1098 = (($1097) - ($1092))|0;
                __THREW__ = 0;
                $1099 = (invoke_ii(29,($1023|0))|0);
                $1100 = __THREW__; __THREW__ = 0;
                $1101 = $1100&1;
                if ($1101) {
                 break L485;
                }
                $1102 = (($1099) + ($1098)|0);
                $1103 = $1102;
                $1104 = (($1099) + ($1023)|0);
                $1105 = $1104;
                $1106 = (0 - ($1098))|0;
                $1107 = (($1102) + ($1106)|0);
                $1108 = $1107;
                _memcpy(($1107|0),($1095|0),($1098|0))|0;
                HEAP32[$1089>>2] = $1108;
                HEAP32[$1096>>2] = $1103;
                HEAP32[$1090>>2] = $1105;
                $1109 = ($1092|0)==(0);
                if ($1109) {
                 break;
                }
                __ZdlPv($1095);
               }
              } while(0);
              $1110 = (($row1$090$i) + 1)|0;
              $1111 = ($1110|0)<($1026|0);
              if ($1111) {
               $row1$090$i = $1110;
              } else {
               $row2$088$i = $1026;
               break L475;
              }
             }
             $1069 = ___cxa_find_matching_catch_2()|0;
             $1070 = tempRet0;
             $lpad$phi$i$index = $1069;$lpad$phi$i$index31 = $1070;
             break L473;
            } else {
             $row2$088$i = $1026;
            }
           } while(0);
           while(1) {
            $1117 = HEAP32[$new_data$i>>2]|0;
            $1118 = HEAP32[$441>>2]|0;
            $1119 = ($1117|0)==($1118|0);
            if (!($1119)) {
             $1120 = (($1117) + (($row2$088$i*12)|0)|0);
             $1121 = (($1118) + (($row2$088$i*12)|0)|0);
             $1122 = HEAP32[$1121>>2]|0;
             $1123 = (((($1118) + (($row2$088$i*12)|0)|0)) + 4|0);
             $1124 = HEAP32[$1123>>2]|0;
             __THREW__ = 0;
             invoke_viii(54,($1120|0),($1122|0),($1124|0));
             $1125 = __THREW__; __THREW__ = 0;
             $1126 = $1125&1;
             if ($1126) {
              label = 341;
              break;
             }
            }
            $1127 = (($row2$088$i) + 1)|0;
            $1128 = ($1127|0)<($1018|0);
            if ($1128) {
             $row2$088$i = $1127;
            } else {
             break;
            }
           }
           if ((label|0) == 341) {
            $1067 = ___cxa_find_matching_catch_2()|0;
            $1068 = tempRet0;
            $lpad$phi$i$index = $1067;$lpad$phi$i$index31 = $1068;
            break;
           }
           L501: do {
            if ($1027) {
             $1112 = (($1023) - ($1011))|0;
             $1113 = ($1011|0)<($1112|0);
             $1114 = (0 - ($1011))|0;
             $1115 = ($1011|0)>($1114|0);
             $1116 = $1014 << 1;
             $row3$083$i = $1011;
             L503: while(1) {
              $1129 = HEAP32[$441>>2]|0;
              $1130 = HEAP32[$new_data$i>>2]|0;
              $1131 = (($1130) + (($row3$083$i*12)|0)|0);
              $1132 = (($1129) + (($row3$083$i*12)|0)|0);
              $1133 = (((($1130) + (($row3$083$i*12)|0)|0)) + 4|0);
              $1134 = (((($1130) + (($row3$083$i*12)|0)|0)) + 8|0);
              $col$067$i = 0;
              while(1) {
               $1196 = HEAP32[$1132>>2]|0;
               $1197 = (($1196) + ($col$067$i)|0);
               $1198 = HEAP32[$1133>>2]|0;
               $1199 = HEAP32[$1134>>2]|0;
               $1200 = ($1198|0)==($1199|0);
               do {
                if ($1200) {
                 $1204 = $1198;
                 $1205 = HEAP32[$1131>>2]|0;
                 $1206 = (($1204) - ($1205))|0;
                 $1207 = (($1206) + 1)|0;
                 $1208 = ($1207|0)<(0);
                 if ($1208) {
                  __THREW__ = 0;
                  invoke_vi(46,($1131|0));
                  $1209 = __THREW__; __THREW__ = 0;
                  $1210 = $1209&1;
                  if ($1210) {
                   label = 340;
                   break L503;
                  }
                  $$pre$i$i36$i = HEAP32[$1131>>2]|0;
                  $$pre$i38$i = HEAP32[$1134>>2]|0;
                  $$in$i$i40$i = $$pre$i$i36$i;$1213 = $$pre$i38$i;
                 } else {
                  $$in$i$i40$i = $1205;$1213 = $1204;
                 }
                 $1211 = $$in$i$i40$i;
                 $1212 = (($1213) - ($$in$i$i40$i))|0;
                 $1214 = ($1212>>>0)<(1073741823);
                 if ($1214) {
                  $1217 = $1212 << 1;
                  $1218 = ($1217>>>0)<($1207>>>0);
                  $1219 = $1218 ? $1207 : $1217;
                  $1220 = HEAP32[$1133>>2]|0;
                  $1221 = (($1220) - ($$in$i$i40$i))|0;
                  $1222 = ($1219|0)==(0);
                  if ($1222) {
                   $$0$i2$i$i44$i = 0;$1227 = 0;$1228 = $1221;$1235 = $1220;
                  } else {
                   $$0$i1$i$i43$i = $1219;$1387 = $1220;$1388 = $1221;
                   label = 392;
                  }
                 } else {
                  $1215 = HEAP32[$1133>>2]|0;
                  $1216 = (($1215) - ($$in$i$i40$i))|0;
                  $$0$i1$i$i43$i = 2147483647;$1387 = $1215;$1388 = $1216;
                  label = 392;
                 }
                 if ((label|0) == 392) {
                  label = 0;
                  __THREW__ = 0;
                  $1223 = (invoke_ii(29,($$0$i1$i$i43$i|0))|0);
                  $1224 = __THREW__; __THREW__ = 0;
                  $1225 = $1224&1;
                  if ($1225) {
                   label = 340;
                   break L503;
                  } else {
                   $$0$i2$i$i44$i = $$0$i1$i$i43$i;$1227 = $1223;$1228 = $1388;$1235 = $1387;
                  }
                 }
                 $1226 = (($1227) + ($1228)|0);
                 $1229 = (($1227) + ($$0$i2$i$i44$i)|0);
                 $1230 = $1229;
                 $1231 = HEAP8[$1197>>0]|0;
                 HEAP8[$1226>>0] = $1231;
                 $1232 = ((($1226)) + 1|0);
                 $1233 = $1232;
                 $1234 = (($1235) - ($$in$i$i40$i))|0;
                 $1236 = (0 - ($1234))|0;
                 $1237 = (($1226) + ($1236)|0);
                 $1238 = $1237;
                 _memcpy(($1237|0),($1211|0),($1234|0))|0;
                 HEAP32[$1131>>2] = $1238;
                 HEAP32[$1133>>2] = $1233;
                 HEAP32[$1134>>2] = $1230;
                 $1239 = ($$in$i$i40$i|0)==(0);
                 if ($1239) {
                  break;
                 }
                 __ZdlPv($1211);
                } else {
                 $1201 = HEAP8[$1197>>0]|0;
                 HEAP8[$1198>>0] = $1201;
                 $1202 = HEAP32[$1133>>2]|0;
                 $1203 = ((($1202)) + 1|0);
                 HEAP32[$1133>>2] = $1203;
                }
               } while(0);
               $1240 = (($col$067$i) + 1)|0;
               $1241 = ($1240|0)<($1011|0);
               if ($1241) {
                $col$067$i = $1240;
               } else {
                break;
               }
              }
              L523: do {
               if ($1113) {
                if ($1115) {
                 $col4$076$us$i = $1011;
                } else {
                 $1135 = (($1014|0) / ($1116|0))&-1;
                 $1136 = $1135&255;
                 $col4$076$i = $1011;
                 while(1) {
                  $1242 = HEAP32[$1133>>2]|0;
                  $1243 = HEAP32[$1134>>2]|0;
                  $1244 = ($1242|0)==($1243|0);
                  do {
                   if ($1244) {
                    $1247 = $1242;
                    $1248 = HEAP32[$1131>>2]|0;
                    $1249 = (($1247) - ($1248))|0;
                    $1250 = (($1249) + 1)|0;
                    $1251 = ($1250|0)<(0);
                    if ($1251) {
                     __THREW__ = 0;
                     invoke_vi(46,($1131|0));
                     $1252 = __THREW__; __THREW__ = 0;
                     $1253 = $1252&1;
                     if ($1253) {
                      label = 339;
                      break L503;
                     }
                     $$pre$i$i19$i = HEAP32[$1131>>2]|0;
                     $$pre$i21$i = HEAP32[$1134>>2]|0;
                     $$in$i$i23$i = $$pre$i$i19$i;$1256 = $$pre$i21$i;
                    } else {
                     $$in$i$i23$i = $1248;$1256 = $1247;
                    }
                    $1254 = $$in$i$i23$i;
                    $1255 = (($1256) - ($$in$i$i23$i))|0;
                    $1257 = ($1255>>>0)<(1073741823);
                    if ($1257) {
                     $1260 = $1255 << 1;
                     $1261 = ($1260>>>0)<($1250>>>0);
                     $1262 = $1261 ? $1250 : $1260;
                     $1263 = HEAP32[$1133>>2]|0;
                     $1264 = (($1263) - ($$in$i$i23$i))|0;
                     $1265 = ($1262|0)==(0);
                     if ($1265) {
                      $$0$i2$i$i27$i = 0;$1270 = 0;$1271 = $1264;$1277 = $1263;
                     } else {
                      $$0$i1$i$i26$i = $1262;$1389 = $1263;$1390 = $1264;
                      label = 404;
                     }
                    } else {
                     $1258 = HEAP32[$1133>>2]|0;
                     $1259 = (($1258) - ($$in$i$i23$i))|0;
                     $$0$i1$i$i26$i = 2147483647;$1389 = $1258;$1390 = $1259;
                     label = 404;
                    }
                    if ((label|0) == 404) {
                     label = 0;
                     __THREW__ = 0;
                     $1266 = (invoke_ii(29,($$0$i1$i$i26$i|0))|0);
                     $1267 = __THREW__; __THREW__ = 0;
                     $1268 = $1267&1;
                     if ($1268) {
                      label = 339;
                      break L503;
                     } else {
                      $$0$i2$i$i27$i = $$0$i1$i$i26$i;$1270 = $1266;$1271 = $1390;$1277 = $1389;
                     }
                    }
                    $1269 = (($1270) + ($1271)|0);
                    $1272 = (($1270) + ($$0$i2$i$i27$i)|0);
                    $1273 = $1272;
                    HEAP8[$1269>>0] = $1136;
                    $1274 = ((($1269)) + 1|0);
                    $1275 = $1274;
                    $1276 = (($1277) - ($$in$i$i23$i))|0;
                    $1278 = (0 - ($1276))|0;
                    $1279 = (($1269) + ($1278)|0);
                    $1280 = $1279;
                    _memcpy(($1279|0),($1254|0),($1276|0))|0;
                    HEAP32[$1131>>2] = $1280;
                    HEAP32[$1133>>2] = $1275;
                    HEAP32[$1134>>2] = $1273;
                    $1281 = ($$in$i$i23$i|0)==(0);
                    if ($1281) {
                     break;
                    }
                    __ZdlPv($1254);
                   } else {
                    HEAP8[$1242>>0] = $1136;
                    $1245 = HEAP32[$1133>>2]|0;
                    $1246 = ((($1245)) + 1|0);
                    HEAP32[$1133>>2] = $1246;
                   }
                  } while(0);
                  $1282 = (($col4$076$i) + 1)|0;
                  $1283 = ($1282|0)<($1112|0);
                  if ($1283) {
                   $col4$076$i = $1282;
                  } else {
                   $col5$080$i = $1112;
                   break L523;
                  }
                 }
                }
                while(1) {
                 $1178 = HEAP32[$441>>2]|0;
                 $r$072$us$us$i = $1114;$sum$071$us$us$i = 0;
                 while(1) {
                  $1184 = (($r$072$us$us$i) + ($row3$083$i))|0;
                  $1185 = (($1178) + (($1184*12)|0)|0);
                  $1186 = HEAP32[$1185>>2]|0;
                  $c$069$us$us$i = $1114;$sum$168$us$us$i = $sum$071$us$us$i;
                  while(1) {
                   $1188 = (($c$069$us$us$i) + ($col4$076$us$i))|0;
                   $1189 = (($1186) + ($1188)|0);
                   $1190 = HEAP8[$1189>>0]|0;
                   $1191 = $1190&255;
                   $1192 = (($1191) + ($sum$168$us$us$i))|0;
                   $1193 = (($c$069$us$us$i) + 1)|0;
                   $exitcond113$i = ($1193|0)==($1011|0);
                   if ($exitcond113$i) {
                    $$lcssa211 = $1192;
                    break;
                   } else {
                    $c$069$us$us$i = $1193;$sum$168$us$us$i = $1192;
                   }
                  }
                  $1187 = (($r$072$us$us$i) + 1)|0;
                  $exitcond114$i = ($1187|0)==($1011|0);
                  if ($exitcond114$i) {
                   $$lcssa211$lcssa = $$lcssa211;
                   break;
                  } else {
                   $r$072$us$us$i = $1187;$sum$071$us$us$i = $$lcssa211;
                  }
                 }
                 $1179 = $$lcssa211$lcssa << 1;
                 $1180 = (($1179) + ($1014))|0;
                 $1181 = (($1180|0) / ($1116|0))&-1;
                 $1137 = $1181&255;
                 $1138 = HEAP32[$1133>>2]|0;
                 $1182 = HEAP32[$1134>>2]|0;
                 $1183 = ($1138|0)==($1182|0);
                 do {
                  if ($1183) {
                   $1141 = $1138;
                   $1142 = HEAP32[$1131>>2]|0;
                   $1143 = (($1141) - ($1142))|0;
                   $1144 = (($1143) + 1)|0;
                   $1145 = ($1144|0)<(0);
                   if ($1145) {
                    __THREW__ = 0;
                    invoke_vi(46,($1131|0));
                    $1146 = __THREW__; __THREW__ = 0;
                    $1147 = $1146&1;
                    if ($1147) {
                     label = 383;
                     break L503;
                    }
                    $$pre$i$i19$us$i = HEAP32[$1131>>2]|0;
                    $$pre$i21$us$i = HEAP32[$1134>>2]|0;
                    $$in$i$i23$us$i = $$pre$i$i19$us$i;$1150 = $$pre$i21$us$i;
                   } else {
                    $$in$i$i23$us$i = $1142;$1150 = $1141;
                   }
                   $1148 = $$in$i$i23$us$i;
                   $1149 = (($1150) - ($$in$i$i23$us$i))|0;
                   $1151 = ($1149>>>0)<(1073741823);
                   if ($1151) {
                    $1154 = $1149 << 1;
                    $1155 = ($1154>>>0)<($1144>>>0);
                    $1156 = $1155 ? $1144 : $1154;
                    $1157 = HEAP32[$1133>>2]|0;
                    $1158 = (($1157) - ($$in$i$i23$us$i))|0;
                    $1159 = ($1156|0)==(0);
                    if ($1159) {
                     $$0$i2$i$i27$us$i = 0;$1164 = 0;$1165 = $1158;$1171 = $1157;
                    } else {
                     $$0$i1$i$i26$us$i = $1156;$1385 = $1157;$1386 = $1158;
                     label = 374;
                    }
                   } else {
                    $1152 = HEAP32[$1133>>2]|0;
                    $1153 = (($1152) - ($$in$i$i23$us$i))|0;
                    $$0$i1$i$i26$us$i = 2147483647;$1385 = $1152;$1386 = $1153;
                    label = 374;
                   }
                   if ((label|0) == 374) {
                    label = 0;
                    __THREW__ = 0;
                    $1160 = (invoke_ii(29,($$0$i1$i$i26$us$i|0))|0);
                    $1161 = __THREW__; __THREW__ = 0;
                    $1162 = $1161&1;
                    if ($1162) {
                     label = 383;
                     break L503;
                    } else {
                     $$0$i2$i$i27$us$i = $$0$i1$i$i26$us$i;$1164 = $1160;$1165 = $1386;$1171 = $1385;
                    }
                   }
                   $1163 = (($1164) + ($1165)|0);
                   $1166 = (($1164) + ($$0$i2$i$i27$us$i)|0);
                   $1167 = $1166;
                   HEAP8[$1163>>0] = $1137;
                   $1168 = ((($1163)) + 1|0);
                   $1169 = $1168;
                   $1170 = (($1171) - ($$in$i$i23$us$i))|0;
                   $1172 = (0 - ($1170))|0;
                   $1173 = (($1163) + ($1172)|0);
                   $1174 = $1173;
                   _memcpy(($1173|0),($1148|0),($1170|0))|0;
                   HEAP32[$1131>>2] = $1174;
                   HEAP32[$1133>>2] = $1169;
                   HEAP32[$1134>>2] = $1167;
                   $1175 = ($$in$i$i23$us$i|0)==(0);
                   if ($1175) {
                    break;
                   }
                   __ZdlPv($1148);
                  } else {
                   HEAP8[$1138>>0] = $1137;
                   $1139 = HEAP32[$1133>>2]|0;
                   $1140 = ((($1139)) + 1|0);
                   HEAP32[$1133>>2] = $1140;
                  }
                 } while(0);
                 $1176 = (($col4$076$us$i) + 1)|0;
                 $1177 = ($1176|0)<($1112|0);
                 if ($1177) {
                  $col4$076$us$i = $1176;
                 } else {
                  $col5$080$i = $1112;
                  break;
                 }
                }
               } else {
                $col5$080$i = $1112;
               }
              } while(0);
              while(1) {
               $1286 = HEAP32[$1132>>2]|0;
               $1287 = (($1286) + ($col5$080$i)|0);
               $1288 = HEAP32[$1133>>2]|0;
               $1289 = HEAP32[$1134>>2]|0;
               $1290 = ($1288|0)==($1289|0);
               do {
                if ($1290) {
                 $1294 = $1288;
                 $1295 = HEAP32[$1131>>2]|0;
                 $1296 = (($1294) - ($1295))|0;
                 $1297 = (($1296) + 1)|0;
                 $1298 = ($1297|0)<(0);
                 if ($1298) {
                  __THREW__ = 0;
                  invoke_vi(46,($1131|0));
                  $1299 = __THREW__; __THREW__ = 0;
                  $1300 = $1299&1;
                  if ($1300) {
                   label = 338;
                   break L503;
                  }
                  $$pre$i$i$i = HEAP32[$1131>>2]|0;
                  $$pre$i3$i = HEAP32[$1134>>2]|0;
                  $$in$i$i$i = $$pre$i$i$i;$1303 = $$pre$i3$i;
                 } else {
                  $$in$i$i$i = $1295;$1303 = $1294;
                 }
                 $1301 = $$in$i$i$i;
                 $1302 = (($1303) - ($$in$i$i$i))|0;
                 $1304 = ($1302>>>0)<(1073741823);
                 if ($1304) {
                  $1307 = $1302 << 1;
                  $1308 = ($1307>>>0)<($1297>>>0);
                  $1309 = $1308 ? $1297 : $1307;
                  $1310 = HEAP32[$1133>>2]|0;
                  $1311 = (($1310) - ($$in$i$i$i))|0;
                  $1312 = ($1309|0)==(0);
                  if ($1312) {
                   $$0$i2$i$i$i = 0;$1317 = 0;$1318 = $1311;$1325 = $1310;
                  } else {
                   $$0$i1$i$i$i = $1309;$1391 = $1310;$1392 = $1311;
                   label = 417;
                  }
                 } else {
                  $1305 = HEAP32[$1133>>2]|0;
                  $1306 = (($1305) - ($$in$i$i$i))|0;
                  $$0$i1$i$i$i = 2147483647;$1391 = $1305;$1392 = $1306;
                  label = 417;
                 }
                 if ((label|0) == 417) {
                  label = 0;
                  __THREW__ = 0;
                  $1313 = (invoke_ii(29,($$0$i1$i$i$i|0))|0);
                  $1314 = __THREW__; __THREW__ = 0;
                  $1315 = $1314&1;
                  if ($1315) {
                   label = 338;
                   break L503;
                  } else {
                   $$0$i2$i$i$i = $$0$i1$i$i$i;$1317 = $1313;$1318 = $1392;$1325 = $1391;
                  }
                 }
                 $1316 = (($1317) + ($1318)|0);
                 $1319 = (($1317) + ($$0$i2$i$i$i)|0);
                 $1320 = $1319;
                 $1321 = HEAP8[$1287>>0]|0;
                 HEAP8[$1316>>0] = $1321;
                 $1322 = ((($1316)) + 1|0);
                 $1323 = $1322;
                 $1324 = (($1325) - ($$in$i$i$i))|0;
                 $1326 = (0 - ($1324))|0;
                 $1327 = (($1316) + ($1326)|0);
                 $1328 = $1327;
                 _memcpy(($1327|0),($1301|0),($1324|0))|0;
                 HEAP32[$1131>>2] = $1328;
                 HEAP32[$1133>>2] = $1323;
                 HEAP32[$1134>>2] = $1320;
                 $1329 = ($$in$i$i$i|0)==(0);
                 if ($1329) {
                  break;
                 }
                 __ZdlPv($1301);
                } else {
                 $1291 = HEAP8[$1287>>0]|0;
                 HEAP8[$1288>>0] = $1291;
                 $1292 = HEAP32[$1133>>2]|0;
                 $1293 = ((($1292)) + 1|0);
                 HEAP32[$1133>>2] = $1293;
                }
               } while(0);
               $1330 = (($col5$080$i) + 1)|0;
               $1331 = ($1330|0)<($1023|0);
               if ($1331) {
                $col5$080$i = $1330;
               } else {
                break;
               }
              }
              $1284 = (($row3$083$i) + 1)|0;
              $1285 = ($1284|0)<($1026|0);
              if ($1285) {
               $row3$083$i = $1284;
              } else {
               break L501;
              }
             }
             if ((label|0) == 338) {
              $1061 = ___cxa_find_matching_catch_2()|0;
              $1062 = tempRet0;
              $lpad$phi$i$index = $1061;$lpad$phi$i$index31 = $1062;
              break L473;
             }
             else if ((label|0) == 339) {
              $1063 = ___cxa_find_matching_catch_2()|0;
              $1064 = tempRet0;
              $lpad$phi$i$index = $1063;$lpad$phi$i$index31 = $1064;
              break L473;
             }
             else if ((label|0) == 340) {
              $1065 = ___cxa_find_matching_catch_2()|0;
              $1066 = tempRet0;
              $lpad$phi$i$index = $1065;$lpad$phi$i$index31 = $1066;
              break L473;
             }
             else if ((label|0) == 383) {
              $1194 = ___cxa_find_matching_catch_2()|0;
              $1195 = tempRet0;
              $lpad$phi$i$index = $1194;$lpad$phi$i$index31 = $1195;
              break L473;
             }
            }
           } while(0);
           $1332 = HEAP32[$441>>2]|0;
           $1333 = HEAP32[$new_data$i>>2]|0;
           HEAP32[$441>>2] = $1333;
           HEAP32[$new_data$i>>2] = $1332;
           $1334 = ((($new_data$i)) + 4|0);
           $1335 = HEAP32[$442>>2]|0;
           $1336 = HEAP32[$1334>>2]|0;
           HEAP32[$442>>2] = $1336;
           HEAP32[$1334>>2] = $1335;
           $1337 = ((($new_data$i)) + 8|0);
           $1338 = HEAP32[$578>>2]|0;
           $1339 = HEAP32[$1337>>2]|0;
           HEAP32[$578>>2] = $1339;
           HEAP32[$1337>>2] = $1338;
           $1340 = $1332;
           $1341 = ($1332|0)==(0);
           $1342 = $1335;
           if (!($1341)) {
            $1343 = $1332;
            $1344 = ($1342|0)==($1340|0);
            if ($1344) {
             $1354 = $1343;
            } else {
             $1346 = $1342;
             while(1) {
              $1345 = ((($1346)) + -12|0);
              HEAP32[$1334>>2] = $1345;
              $1347 = HEAP32[$1345>>2]|0;
              $1348 = ($1347|0)==(0|0);
              if ($1348) {
               $1349 = $1345;
              } else {
               $1351 = ((($1346)) + -8|0);
               $1352 = HEAP32[$1351>>2]|0;
               $1353 = ($1352|0)==($1347|0);
               if (!($1353)) {
                HEAP32[$1351>>2] = $1347;
               }
               __ZdlPv($1347);
               $$pre$i$i$i$i18 = HEAP32[$1334>>2]|0;
               $1349 = $$pre$i$i$i$i18;
              }
              $1350 = ($1349|0)==($1340|0);
              if ($1350) {
               break;
              } else {
               $1346 = $1349;
              }
             }
             $$pre$i$i21 = HEAP32[$new_data$i>>2]|0;
             $1354 = $$pre$i$i21;
            }
            __ZdlPv($1354);
           }
           $$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
           break L245;
          }
          else if ((label|0) == 343) {
           $1071 = ___cxa_find_matching_catch_2()|0;
           $1072 = tempRet0;
           $lpad$phi$i$index = $1071;$lpad$phi$i$index31 = $1072;
          }
         } while(0);
         $1073 = HEAP32[$new_data$i>>2]|0;
         $1074 = ($1073|0)==(0|0);
         if ($1074) {
          ___resumeException($lpad$phi$i$index|0);
          // unreachable;
         }
         $1075 = ((($new_data$i)) + 4|0);
         $1076 = HEAP32[$1075>>2]|0;
         $1077 = ($1076|0)==($1073|0);
         if ($1077) {
          $1087 = $1073;
         } else {
          $1079 = $1076;
          while(1) {
           $1078 = ((($1079)) + -12|0);
           HEAP32[$1075>>2] = $1078;
           $1080 = HEAP32[$1078>>2]|0;
           $1081 = ($1080|0)==(0|0);
           if ($1081) {
            $1082 = $1078;
           } else {
            $1084 = ((($1079)) + -8|0);
            $1085 = HEAP32[$1084>>2]|0;
            $1086 = ($1085|0)==($1080|0);
            if (!($1086)) {
             HEAP32[$1084>>2] = $1080;
            }
            __ZdlPv($1080);
            $$pre$i$i$i9$i = HEAP32[$1075>>2]|0;
            $1082 = $$pre$i$i$i9$i;
           }
           $1083 = ($1082|0)==($1073|0);
           if ($1083) {
            break;
           } else {
            $1079 = $1082;
           }
          }
          $$pre$i12$i = HEAP32[$new_data$i>>2]|0;
          $1087 = $$pre$i12$i;
         }
         __ZdlPv($1087);
         ___resumeException($lpad$phi$i$index|0);
         // unreachable;
        }
       } while(0);
       $596 = HEAP32[$new_data$i82>>2]|0;
       $597 = ($596|0)==(0|0);
       if ($597) {
        ___resumeException($eh$lpad$body$sink$i$indexZ2D|0);
        // unreachable;
       }
       $598 = HEAP32[$452>>2]|0;
       $599 = ($598|0)==($596|0);
       if ($599) {
        $609 = $596;
       } else {
        $601 = $598;
        while(1) {
         $600 = ((($601)) + -12|0);
         HEAP32[$452>>2] = $600;
         $602 = HEAP32[$600>>2]|0;
         $603 = ($602|0)==(0|0);
         if ($603) {
          $604 = $600;
         } else {
          $606 = ((($601)) + -8|0);
          $607 = HEAP32[$606>>2]|0;
          $608 = ($607|0)==($602|0);
          if (!($608)) {
           HEAP32[$606>>2] = $602;
          }
          __ZdlPv($602);
          $$pre$i$i$i$i93 = HEAP32[$452>>2]|0;
          $604 = $$pre$i$i$i$i93;
         }
         $605 = ($604|0)==($596|0);
         if ($605) {
          break;
         } else {
          $601 = $604;
         }
        }
        $$pre$i$i96 = HEAP32[$new_data$i82>>2]|0;
        $609 = $$pre$i$i96;
       }
       __ZdlPv($609);
       ___resumeException($eh$lpad$body$sink$i$indexZ2D|0);
       // unreachable;
      }
     } while(0);
     $1355 = HEAP32[$$pre$phi175Z2D>>2]|0;
     $1356 = HEAP32[$$pre$phi177Z2D>>2]|0;
     $1357 = (($1355) - ($1356))|0;
     $1358 = (($1357|0) / 12)&-1;
     __ZN9Rectangle6heightEi($this,$1358);
     $1359 = HEAP32[$$pre$phi179Z2D>>2]|0;
     $1360 = ((($1359)) + 4|0);
     $1361 = HEAP32[$1360>>2]|0;
     $1362 = HEAP32[$1359>>2]|0;
     $1363 = (($1361) - ($1362))|0;
     __ZN9Rectangle5widthEi($this,$1363);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last) {
     $this = $this|0;
     $__first = $__first|0;
     $__last = $__last|0;
     var $$0$i2 = 0, $$0$lcssa$i$i = 0, $$012$i$i = 0, $$03$i$i = 0, $$__last = 0, $$mux = 0, $$not = 0, $$not7 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
     var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
     var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
     var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = $__first;
     $1 = $__last;
     $2 = (($1) - ($0))|0;
     $3 = (($2|0) / 12)&-1;
     $4 = ((($this)) + 8|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = HEAP32[$this>>2]|0;
     $7 = (($5) - ($6))|0;
     $8 = (($7|0) / 12)&-1;
     $9 = ($3>>>0)>($8>>>0);
     $10 = $6;
     if (!($9)) {
      $11 = ((($this)) + 4|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($12) - ($6))|0;
      $14 = (($13|0) / 12)&-1;
      $15 = ($3>>>0)>($14>>>0);
      $16 = (($__first) + (($14*12)|0)|0);
      $$__last = $15 ? $16 : $__last;
      $17 = ($$__last|0)==($__first|0);
      if ($17) {
       $$0$lcssa$i$i = $10;
      } else {
       $$012$i$i = $__first;$$03$i$i = $10;
       while(1) {
        $18 = ($$03$i$i|0)==($$012$i$i|0);
        if (!($18)) {
         $19 = HEAP32[$$012$i$i>>2]|0;
         $20 = ((($$012$i$i)) + 4|0);
         $21 = HEAP32[$20>>2]|0;
         __ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($$03$i$i,$19,$21);
        }
        $22 = ((($$012$i$i)) + 12|0);
        $23 = ((($$03$i$i)) + 12|0);
        $24 = ($22|0)==($$__last|0);
        if ($24) {
         $$0$lcssa$i$i = $23;
         break;
        } else {
         $$012$i$i = $22;$$03$i$i = $23;
        }
       }
      }
      if ($15) {
       __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$$__last,$__last);
       return;
      }
      $25 = HEAP32[$11>>2]|0;
      $26 = ($25|0)==($$0$lcssa$i$i|0);
      if ($26) {
       return;
      } else {
       $28 = $25;
      }
      while(1) {
       $27 = ((($28)) + -12|0);
       HEAP32[$11>>2] = $27;
       $29 = HEAP32[$27>>2]|0;
       $30 = ($29|0)==(0|0);
       if ($30) {
        $31 = $27;
       } else {
        $33 = ((($28)) + -8|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = ($34|0)==($29|0);
        if (!($35)) {
         HEAP32[$33>>2] = $29;
        }
        __ZdlPv($29);
        $$pre$i$i = HEAP32[$11>>2]|0;
        $31 = $$pre$i$i;
       }
       $32 = ($31|0)==($$0$lcssa$i$i|0);
       if ($32) {
        break;
       } else {
        $28 = $31;
       }
      }
      return;
     }
     $36 = ($6|0)==(0);
     if ($36) {
      $62 = $5;
     } else {
      $37 = $6;
      $38 = ((($this)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==($10|0);
      if ($40) {
       $50 = $37;
      } else {
       $42 = $39;
       while(1) {
        $41 = ((($42)) + -12|0);
        HEAP32[$38>>2] = $41;
        $43 = HEAP32[$41>>2]|0;
        $44 = ($43|0)==(0|0);
        if ($44) {
         $45 = $41;
        } else {
         $47 = ((($42)) + -8|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = ($48|0)==($43|0);
         if (!($49)) {
          HEAP32[$47>>2] = $43;
         }
         __ZdlPv($43);
         $$pre$i$i$i$i = HEAP32[$38>>2]|0;
         $45 = $$pre$i$i$i$i;
        }
        $46 = ($45|0)==($10|0);
        if ($46) {
         break;
        } else {
         $42 = $45;
        }
       }
       $$pre$i = HEAP32[$this>>2]|0;
       $50 = $$pre$i;
      }
      __ZdlPv($50);
      HEAP32[$4>>2] = 0;
      HEAP32[$38>>2] = 0;
      HEAP32[$this>>2] = 0;
      $62 = 0;
     }
     $51 = ($3>>>0)>(357913941);
     if ($51) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$4>>2]|0;
      $$pre6 = HEAP32[$this>>2]|0;
      $53 = $$pre6;$54 = $$pre;
     } else {
      $53 = 0;$54 = $62;
     }
     $52 = (($54) - ($53))|0;
     $55 = (($52|0) / 12)&-1;
     $56 = ($55>>>0)<(178956970);
     if ($56) {
      $57 = $55 << 1;
      $$not = ($57>>>0)>=($3>>>0);
      $$not7 = $51 ^ 1;
      $brmerge = $$not | $$not7;
      $$mux = $$not ? $57 : $3;
      if ($brmerge) {
       $$0$i2 = $$mux;
      } else {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
       $$0$i2 = $3;
      }
     } else {
      $$0$i2 = 357913941;
     }
     $58 = ($$0$i2*12)|0;
     $59 = (__Znwj($58)|0);
     $60 = ((($this)) + 4|0);
     HEAP32[$60>>2] = $59;
     HEAP32[$this>>2] = $59;
     $61 = (($59) + (($$0$i2*12)|0)|0);
     HEAP32[$4>>2] = $61;
     __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last);
     return;
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
     $this = $this|0;
     $__first = $__first|0;
     $__last = $__last|0;
     var $$01$i$i$i = 0, $$02 = 0, $$lcssa = 0, $$lcssa17 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
     var $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($__first|0)==($__last|0);
     if ($0) {
      return;
     }
     $1 = ((($this)) + 4|0);
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $__first;$2 = $$pre;
     while(1) {
      HEAP32[$2>>2] = 0;
      $3 = ((($2)) + 4|0);
      HEAP32[$3>>2] = 0;
      $4 = ((($2)) + 8|0);
      HEAP32[$4>>2] = 0;
      $5 = ((($$02)) + 4|0);
      $6 = HEAP32[$5>>2]|0;
      $7 = HEAP32[$$02>>2]|0;
      $8 = (($6) - ($7))|0;
      $9 = ($6|0)==($7|0);
      if (!($9)) {
       $10 = ($8|0)<(0);
       if ($10) {
        __THREW__ = 0;
        invoke_vi(46,($2|0));
        $11 = __THREW__; __THREW__ = 0;
        $12 = $11&1;
        if ($12) {
         $$lcssa = $2;$$lcssa17 = $3;
         break;
        }
       }
       __THREW__ = 0;
       $13 = (invoke_ii(29,($8|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if ($15) {
        $$lcssa = $2;$$lcssa17 = $3;
        break;
       }
       HEAP32[$3>>2] = $13;
       HEAP32[$2>>2] = $13;
       $16 = (($13) + ($8)|0);
       $17 = ((($2)) + 8|0);
       HEAP32[$17>>2] = $16;
       $18 = HEAP32[$$02>>2]|0;
       $19 = HEAP32[$5>>2]|0;
       $20 = ($18|0)==($19|0);
       if (!($20)) {
        $$01$i$i$i = $18;$22 = $13;
        while(1) {
         $21 = HEAP8[$$01$i$i$i>>0]|0;
         HEAP8[$22>>0] = $21;
         $23 = HEAP32[$3>>2]|0;
         $24 = ((($23)) + 1|0);
         HEAP32[$3>>2] = $24;
         $25 = ((($$01$i$i$i)) + 1|0);
         $26 = ($25|0)==($19|0);
         if ($26) {
          break;
         } else {
          $$01$i$i$i = $25;$22 = $24;
         }
        }
       }
      }
      $33 = HEAP32[$1>>2]|0;
      $34 = ((($33)) + 12|0);
      HEAP32[$1>>2] = $34;
      $35 = ((($$02)) + 12|0);
      $36 = ($35|0)==($__last|0);
      if ($36) {
       label = 15;
       break;
      } else {
       $$02 = $35;$2 = $34;
      }
     }
     if ((label|0) == 15) {
      return;
     }
     $27 = ___cxa_find_matching_catch_2()|0;
     $28 = tempRet0;
     $29 = HEAP32[$$lcssa>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      ___resumeException($27|0);
      // unreachable;
     }
     $31 = HEAP32[$$lcssa17>>2]|0;
     $32 = ($31|0)==($29|0);
     if (!($32)) {
      HEAP32[$$lcssa17>>2] = $29;
     }
     __ZdlPv($29);
     ___resumeException($27|0);
     // unreachable;
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($this,$__n) {
     $this = $this|0;
     $__n = $__n|0;
     var $$0$i = 0, $$pre$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     HEAP32[$this>>2] = 0;
     $0 = ((($this)) + 4|0);
     HEAP32[$0>>2] = 0;
     $1 = ((($this)) + 8|0);
     HEAP32[$1>>2] = 0;
     $2 = ($__n|0)==(0);
     if ($2) {
      return;
     }
     $3 = ($__n>>>0)>(357913941);
     if ($3) {
      __THREW__ = 0;
      invoke_vi(46,($this|0));
      $4 = __THREW__; __THREW__ = 0;
      $5 = $4&1;
      if (!($5)) {
       label = 4;
      }
     } else {
      label = 4;
     }
     if ((label|0) == 4) {
      $6 = ($__n*12)|0;
      __THREW__ = 0;
      $7 = (invoke_ii(29,($6|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if (!($9)) {
       HEAP32[$0>>2] = $7;
       HEAP32[$this>>2] = $7;
       $10 = (($7) + (($__n*12)|0)|0);
       $11 = ((($this)) + 8|0);
       HEAP32[$11>>2] = $10;
       $$0$i = $__n;$12 = $7;
       while(1) {
        HEAP32[$12>>2] = 0;
        $13 = ((($12)) + 4|0);
        HEAP32[$13>>2] = 0;
        $14 = ((($12)) + 8|0);
        HEAP32[$14>>2] = 0;
        $15 = ((($12)) + 12|0);
        $16 = (($$0$i) + -1)|0;
        $17 = ($16|0)==(0);
        if ($17) {
         break;
        } else {
         $$0$i = $16;$12 = $15;
        }
       }
       HEAP32[$0>>2] = $10;
       return;
      }
     }
     $18 = ___cxa_find_matching_catch_2()|0;
     $19 = tempRet0;
     $20 = HEAP32[$this>>2]|0;
     $21 = ($20|0)==(0|0);
     if ($21) {
      ___resumeException($18|0);
      // unreachable;
     }
     $22 = HEAP32[$0>>2]|0;
     $23 = ($22|0)==($20|0);
     if ($23) {
      $33 = $20;
     } else {
      $25 = $22;
      while(1) {
       $24 = ((($25)) + -12|0);
       HEAP32[$0>>2] = $24;
       $26 = HEAP32[$24>>2]|0;
       $27 = ($26|0)==(0|0);
       if ($27) {
        $28 = $24;
       } else {
        $30 = ((($25)) + -8|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = ($31|0)==($26|0);
        if (!($32)) {
         HEAP32[$30>>2] = $26;
        }
        __ZdlPv($26);
        $$pre$i$i$i = HEAP32[$0>>2]|0;
        $28 = $$pre$i$i$i;
       }
       $29 = ($28|0)==($20|0);
       if ($29) {
        break;
       } else {
        $25 = $28;
       }
      }
      $$pre$i = HEAP32[$this>>2]|0;
      $33 = $$pre$i;
     }
     __ZdlPv($33);
     ___resumeException($18|0);
     // unreachable;
    }
    function __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($this,$__n,$__x) {
     $this = $this|0;
     $__n = $__n|0;
     $__x = $__x|0;
     var $$0$i = 0, $$0$i2 = 0, $$0$i34 = 0, $$0$i35 = 0, $$lcssa = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
     var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
     var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v$sroa$12$0 = 0;
     var label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) - ($3))|0;
     $5 = ($4>>>0)<($__n>>>0);
     if (!($5)) {
      $6 = $3;
      $$0$i = $__n;$8 = $6;
      while(1) {
       $7 = HEAP8[$__x>>0]|0;
       HEAP8[$8>>0] = $7;
       $9 = HEAP32[$2>>2]|0;
       $10 = ((($9)) + 1|0);
       HEAP32[$2>>2] = $10;
       $11 = (($$0$i) + -1)|0;
       $12 = ($11|0)==(0);
       if ($12) {
        break;
       } else {
        $$0$i = $11;$8 = $10;
       }
      }
      return;
     }
     $13 = HEAP32[$this>>2]|0;
     $14 = (($3) - ($13))|0;
     $15 = (($14) + ($__n))|0;
     $16 = ($15|0)<(0);
     if ($16) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$0>>2]|0;
      $$pre6 = HEAP32[$this>>2]|0;
      $18 = $$pre6;$19 = $$pre;
     } else {
      $18 = $13;$19 = $1;
     }
     $17 = (($19) - ($18))|0;
     $20 = ($17>>>0)<(1073741823);
     if ($20) {
      $23 = $17 << 1;
      $24 = ($23>>>0)<($15>>>0);
      $25 = $24 ? $15 : $23;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($26) - ($18))|0;
      $28 = ($25|0)==(0);
      if ($28) {
       $$0$i35 = 0;$31 = 0;$32 = $27;
      } else {
       $$0$i34 = $25;$51 = $27;
       label = 9;
      }
     } else {
      $21 = HEAP32[$2>>2]|0;
      $22 = (($21) - ($18))|0;
      $$0$i34 = 2147483647;$51 = $22;
      label = 9;
     }
     if ((label|0) == 9) {
      $29 = (__Znwj($$0$i34)|0);
      $$0$i35 = $$0$i34;$31 = $29;$32 = $51;
     }
     $30 = (($31) + ($32)|0);
     $33 = $30;
     $34 = (($31) + ($$0$i35)|0);
     $$0$i2 = $__n;$36 = $30;$__v$sroa$12$0 = $33;
     while(1) {
      $35 = HEAP8[$__x>>0]|0;
      HEAP8[$36>>0] = $35;
      $37 = $__v$sroa$12$0;
      $38 = ((($37)) + 1|0);
      $39 = $38;
      $40 = (($$0$i2) + -1)|0;
      $41 = ($40|0)==(0);
      if ($41) {
       $$lcssa = $39;
       break;
      } else {
       $$0$i2 = $40;$36 = $38;$__v$sroa$12$0 = $39;
      }
     }
     $42 = $34;
     $43 = HEAP32[$this>>2]|0;
     $44 = HEAP32[$2>>2]|0;
     $45 = $43;
     $46 = (($44) - ($45))|0;
     $47 = (0 - ($46))|0;
     $48 = (($30) + ($47)|0);
     $49 = $48;
     _memcpy(($48|0),($43|0),($46|0))|0;
     HEAP32[$this>>2] = $49;
     HEAP32[$2>>2] = $$lcssa;
     HEAP32[$0>>2] = $42;
     $50 = ($43|0)==(0|0);
     if ($50) {
      return;
     }
     __ZdlPv($43);
     return;
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE7reserveEj($this,$__n) {
     $this = $this|0;
     $__n = $__n|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
     var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
     var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $__v = sp;
     $0 = ((($this)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = (($1) - ($2))|0;
     $4 = (($3|0) / 12)&-1;
     $5 = ($4>>>0)<($__n>>>0);
     if (!($5)) {
      STACKTOP = sp;return;
     }
     $6 = ((($this)) + 8|0);
     $7 = ((($this)) + 4|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) - ($2))|0;
     $10 = (($9|0) / 12)&-1;
     $11 = ((($__v)) + 12|0);
     HEAP32[$11>>2] = 0;
     $12 = ((($__v)) + 16|0);
     HEAP32[$12>>2] = $6;
     $13 = ($__n|0)==(0);
     if ($13) {
      $16 = 0;
     } else {
      $14 = ($__n*12)|0;
      $15 = (__Znwj($14)|0);
      $16 = $15;
     }
     HEAP32[$__v>>2] = $16;
     $17 = (($16) + (($10*12)|0)|0);
     $18 = ((($__v)) + 8|0);
     HEAP32[$18>>2] = $17;
     $19 = ((($__v)) + 4|0);
     HEAP32[$19>>2] = $17;
     $20 = (($16) + (($__n*12)|0)|0);
     $21 = ((($__v)) + 12|0);
     HEAP32[$21>>2] = $20;
     __THREW__ = 0;
     invoke_vii(45,($this|0),($__v|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $37 = ___cxa_find_matching_catch_2()|0;
      $38 = tempRet0;
      $39 = HEAP32[$19>>2]|0;
      $40 = HEAP32[$18>>2]|0;
      $41 = ($40|0)==($39|0);
      if (!($41)) {
       $43 = $40;
       while(1) {
        $42 = ((($43)) + -12|0);
        $44 = HEAP32[$42>>2]|0;
        $45 = ($44|0)==(0|0);
        if (!($45)) {
         $47 = ((($43)) + -8|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = ($48|0)==($44|0);
         if (!($49)) {
          HEAP32[$47>>2] = $44;
         }
         __ZdlPv($44);
        }
        $46 = ($42|0)==($39|0);
        if ($46) {
         break;
        } else {
         $43 = $42;
        }
       }
       HEAP32[$18>>2] = $39;
      }
      $50 = HEAP32[$__v>>2]|0;
      $51 = ($50|0)==(0|0);
      if ($51) {
       ___resumeException($37|0);
       // unreachable;
      }
      __ZdlPv($50);
      ___resumeException($37|0);
      // unreachable;
     } else {
      $24 = HEAP32[$19>>2]|0;
      $25 = HEAP32[$18>>2]|0;
      $26 = ($25|0)==($24|0);
      if (!($26)) {
       $28 = $25;
       while(1) {
        $27 = ((($28)) + -12|0);
        $29 = HEAP32[$27>>2]|0;
        $30 = ($29|0)==(0|0);
        if (!($30)) {
         $32 = ((($28)) + -8|0);
         $33 = HEAP32[$32>>2]|0;
         $34 = ($33|0)==($29|0);
         if (!($34)) {
          HEAP32[$32>>2] = $29;
         }
         __ZdlPv($29);
        }
        $31 = ($27|0)==($24|0);
        if ($31) {
         break;
        } else {
         $28 = $27;
        }
       }
       HEAP32[$18>>2] = $24;
      }
      $35 = HEAP32[$__v>>2]|0;
      $36 = ($35|0)==(0|0);
      if (!($36)) {
       __ZdlPv($35);
      }
      STACKTOP = sp;return;
     }
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$0$i = 0, $$01$i$i$i = 0, $$pre = 0, $$pre16 = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
     var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
     var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__v = 0, $eh$lpad$body18$index4Z2D = 0, $eh$lpad$body18$indexZ2D = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $__v = sp;
     $0 = ((($this)) + 8|0);
     $1 = ((($this)) + 4|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$this>>2]|0;
     $4 = (($2) - ($3))|0;
     $5 = (($4|0) / 12)&-1;
     $6 = (($5) + 1)|0;
     $7 = ($6>>>0)>(357913941);
     if ($7) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$this>>2]|0;
      $11 = $$pre;
     } else {
      $11 = $3;
     }
     $8 = ((($this)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (($9) - ($11))|0;
     $12 = (($10|0) / 12)&-1;
     $13 = ($12>>>0)<(178956970);
     if ($13) {
      $14 = $12 << 1;
      $15 = ($14>>>0)<($6>>>0);
      $16 = $15 ? $6 : $14;
      $$0$i = $16;
     } else {
      $$0$i = 357913941;
     }
     $17 = HEAP32[$1>>2]|0;
     $18 = (($17) - ($11))|0;
     $19 = (($18|0) / 12)&-1;
     $20 = ((($__v)) + 12|0);
     HEAP32[$20>>2] = 0;
     $21 = ((($__v)) + 16|0);
     HEAP32[$21>>2] = $0;
     $22 = ($$0$i|0)==(0);
     if ($22) {
      $25 = 0;
     } else {
      $23 = ($$0$i*12)|0;
      $24 = (__Znwj($23)|0);
      $25 = $24;
     }
     HEAP32[$__v>>2] = $25;
     $26 = (($25) + (($19*12)|0)|0);
     $27 = ((($__v)) + 8|0);
     HEAP32[$27>>2] = $26;
     $28 = ((($__v)) + 4|0);
     HEAP32[$28>>2] = $26;
     $29 = (($25) + (($$0$i*12)|0)|0);
     $30 = ((($__v)) + 12|0);
     HEAP32[$30>>2] = $29;
     HEAP32[$26>>2] = 0;
     $31 = (((($25) + (($19*12)|0)|0)) + 4|0);
     HEAP32[$31>>2] = 0;
     $32 = (((($25) + (($19*12)|0)|0)) + 8|0);
     HEAP32[$32>>2] = 0;
     $33 = ((($__x)) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = HEAP32[$__x>>2]|0;
     $36 = (($34) - ($35))|0;
     $37 = ($34|0)==($35|0);
     L10: do {
      if ($37) {
       label = 17;
      } else {
       $38 = ($36|0)<(0);
       if ($38) {
        __THREW__ = 0;
        invoke_vi(46,($26|0));
        $39 = __THREW__; __THREW__ = 0;
        $40 = $39&1;
        if (!($40)) {
         label = 10;
        }
       } else {
        label = 10;
       }
       if ((label|0) == 10) {
        __THREW__ = 0;
        $41 = (invoke_ii(29,($36|0))|0);
        $42 = __THREW__; __THREW__ = 0;
        $43 = $42&1;
        if (!($43)) {
         HEAP32[$31>>2] = $41;
         HEAP32[$26>>2] = $41;
         $44 = (($41) + ($36)|0);
         $45 = (((($25) + (($19*12)|0)|0)) + 8|0);
         HEAP32[$45>>2] = $44;
         $46 = HEAP32[$__x>>2]|0;
         $47 = HEAP32[$33>>2]|0;
         $48 = ($46|0)==($47|0);
         if ($48) {
          label = 17;
          break;
         } else {
          $$01$i$i$i = $46;$50 = $41;
         }
         while(1) {
          $49 = HEAP8[$$01$i$i$i>>0]|0;
          HEAP8[$50>>0] = $49;
          $51 = HEAP32[$31>>2]|0;
          $52 = ((($51)) + 1|0);
          HEAP32[$31>>2] = $52;
          $53 = ((($$01$i$i$i)) + 1|0);
          $54 = ($53|0)==($47|0);
          if ($54) {
           label = 17;
           break L10;
          } else {
           $$01$i$i$i = $53;$50 = $52;
          }
         }
        }
       }
       $55 = ___cxa_find_matching_catch_2()|0;
       $56 = tempRet0;
       $57 = HEAP32[$26>>2]|0;
       $58 = ($57|0)==(0|0);
       if ($58) {
        $eh$lpad$body18$index4Z2D = $56;$eh$lpad$body18$indexZ2D = $55;
       } else {
        $59 = HEAP32[$31>>2]|0;
        $60 = ($59|0)==($57|0);
        if (!($60)) {
         HEAP32[$31>>2] = $57;
        }
        __ZdlPv($57);
        $eh$lpad$body18$index4Z2D = $56;$eh$lpad$body18$indexZ2D = $55;
       }
      }
     } while(0);
     do {
      if ((label|0) == 17) {
       $61 = ((($26)) + 12|0);
       HEAP32[$27>>2] = $61;
       __THREW__ = 0;
       invoke_vii(45,($this|0),($__v|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        $77 = ___cxa_find_matching_catch_2()|0;
        $78 = tempRet0;
        $$pre16 = HEAP32[$28>>2]|0;
        $$pre17 = HEAP32[$27>>2]|0;
        $79 = ($$pre17|0)==($$pre16|0);
        if ($79) {
         $eh$lpad$body18$index4Z2D = $78;$eh$lpad$body18$indexZ2D = $77;
         break;
        } else {
         $81 = $$pre17;
        }
        while(1) {
         $80 = ((($81)) + -12|0);
         $82 = HEAP32[$80>>2]|0;
         $83 = ($82|0)==(0|0);
         if (!($83)) {
          $85 = ((($81)) + -8|0);
          $86 = HEAP32[$85>>2]|0;
          $87 = ($86|0)==($82|0);
          if (!($87)) {
           HEAP32[$85>>2] = $82;
          }
          __ZdlPv($82);
         }
         $84 = ($80|0)==($$pre16|0);
         if ($84) {
          break;
         } else {
          $81 = $80;
         }
        }
        HEAP32[$27>>2] = $$pre16;
        $eh$lpad$body18$index4Z2D = $78;$eh$lpad$body18$indexZ2D = $77;
        break;
       }
       $64 = HEAP32[$28>>2]|0;
       $65 = HEAP32[$27>>2]|0;
       $66 = ($65|0)==($64|0);
       if (!($66)) {
        $68 = $65;
        while(1) {
         $67 = ((($68)) + -12|0);
         $69 = HEAP32[$67>>2]|0;
         $70 = ($69|0)==(0|0);
         if (!($70)) {
          $72 = ((($68)) + -8|0);
          $73 = HEAP32[$72>>2]|0;
          $74 = ($73|0)==($69|0);
          if (!($74)) {
           HEAP32[$72>>2] = $69;
          }
          __ZdlPv($69);
         }
         $71 = ($67|0)==($64|0);
         if ($71) {
          break;
         } else {
          $68 = $67;
         }
        }
        HEAP32[$27>>2] = $64;
       }
       $75 = HEAP32[$__v>>2]|0;
       $76 = ($75|0)==(0|0);
       if ($76) {
        STACKTOP = sp;return;
       }
       __ZdlPv($75);
       STACKTOP = sp;return;
      }
     } while(0);
     $88 = HEAP32[$__v>>2]|0;
     $89 = ($88|0)==(0|0);
     if ($89) {
      ___resumeException($eh$lpad$body18$indexZ2D|0);
      // unreachable;
     }
     __ZdlPv($88);
     ___resumeException($eh$lpad$body18$indexZ2D|0);
     // unreachable;
    }
    function __ZN10Page_image9transformERK14Transformation($this,$t) {
     $this = $this|0;
     $t = $t|0;
     var $$pre = 0, $$pre$i = 0, $$pre$i16 = 0, $$pre$i2 = 0, $$pre$i24 = 0, $$pre$i32 = 0, $$pre$i40 = 0, $$pre$i48 = 0, $$pre$i8 = 0, $$pre61 = 0, $$pre62 = 0, $$pre63 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
     var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
     var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
     var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
     var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
     var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
     var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
     var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
     var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
     var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
     var $98 = 0, $99 = 0, $d$0$i = 0, $d$0$i23 = 0, $d$0$i47 = 0, $d$0$i7 = 0, $d$01$i = 0, $d$01$i19 = 0, $d$01$i3 = 0, $d$01$i43 = 0, $d$03$i = 0, $d$03$i21 = 0, $d$03$i45 = 0, $d$03$i5 = 0, $row$04$i = 0, $row$04$i12 = 0, $row$04$i28 = 0, $row$04$i36 = 0, $u$02$i = 0, $u$02$i22 = 0;
     var $u$02$i46 = 0, $u$02$i6 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$t>>2]|0;
     switch ($0|0) {
     case 7:  {
      $144 = ((($this)) + 16|0);
      __ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($144,$this);
      $145 = ((($this)) + 20|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = HEAP32[$144>>2]|0;
      $148 = (($146) - ($147))|0;
      $149 = (($148|0) / 12)&-1;
      $150 = ($148|0)>(0);
      if ($150) {
       $151 = $147;
       $153 = $151;$row$04$i = 0;
       while(1) {
        $152 = (($153) + (($row$04$i*12)|0)|0);
        $154 = HEAP32[$152>>2]|0;
        $155 = (((($153) + (($row$04$i*12)|0)|0)) + 4|0);
        $156 = HEAP32[$155>>2]|0;
        $157 = ($154|0)==($156|0);
        if (!($157)) {
         $158 = ((($156)) + -1|0);
         $159 = ($154>>>0)<($158>>>0);
         if ($159) {
          $161 = $154;$163 = $158;
          while(1) {
           $160 = HEAP8[$161>>0]|0;
           $162 = HEAP8[$163>>0]|0;
           HEAP8[$161>>0] = $162;
           HEAP8[$163>>0] = $160;
           $164 = ((($161)) + 1|0);
           $165 = ((($163)) + -1|0);
           $166 = ($164>>>0)<($165>>>0);
           if ($166) {
            $161 = $164;$163 = $165;
           } else {
            break;
           }
          }
         }
        }
        $167 = (($row$04$i) + 1)|0;
        $168 = ($167|0)<($149|0);
        if (!($168)) {
         break;
        }
        $$pre$i2 = HEAP32[$144>>2]|0;
        $153 = $$pre$i2;$row$04$i = $167;
       }
       $$pre62 = HEAP32[$145>>2]|0;
       $$pre63 = HEAP32[$144>>2]|0;
       $170 = $$pre63;$171 = $$pre62;
      } else {
       $170 = $147;$171 = $146;
      }
      $169 = (($171) - ($170))|0;
      $172 = ($169|0)>(12);
      if (!($172)) {
       return;
      }
      $173 = $170;
      $174 = (($169|0) / 12)&-1;
      $d$01$i = (($174) + -1)|0;
      $176 = $173;$d$03$i = $d$01$i;$u$02$i = 0;
      while(1) {
       $175 = (($176) + (($u$02$i*12)|0)|0);
       $177 = (($176) + (($d$03$i*12)|0)|0);
       $178 = HEAP32[$175>>2]|0;
       $179 = HEAP32[$177>>2]|0;
       HEAP32[$175>>2] = $179;
       HEAP32[$177>>2] = $178;
       $180 = (((($176) + (($u$02$i*12)|0)|0)) + 4|0);
       $181 = (((($176) + (($d$03$i*12)|0)|0)) + 4|0);
       $182 = HEAP32[$180>>2]|0;
       $183 = HEAP32[$181>>2]|0;
       HEAP32[$180>>2] = $183;
       HEAP32[$181>>2] = $182;
       $184 = (((($176) + (($u$02$i*12)|0)|0)) + 8|0);
       $185 = (((($176) + (($d$03$i*12)|0)|0)) + 8|0);
       $186 = HEAP32[$184>>2]|0;
       $187 = HEAP32[$185>>2]|0;
       HEAP32[$184>>2] = $187;
       HEAP32[$185>>2] = $186;
       $188 = (($u$02$i) + 1)|0;
       $d$0$i = (($d$03$i) + -1)|0;
       $189 = ($188|0)<($d$0$i|0);
       if (!($189)) {
        break;
       }
       $$pre$i = HEAP32[$144>>2]|0;
       $176 = $$pre$i;$d$03$i = $d$0$i;$u$02$i = $188;
      }
      return;
      break;
     }
     case 1:  {
      $1 = ((($this)) + 16|0);
      __ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($1,$this);
      $2 = ((($this)) + 20|0);
      $3 = HEAP32[$2>>2]|0;
      $4 = HEAP32[$1>>2]|0;
      $5 = (($3) - ($4))|0;
      $6 = ($5|0)>(12);
      if (!($6)) {
       return;
      }
      $7 = $4;
      $8 = (($5|0) / 12)&-1;
      $d$01$i3 = (($8) + -1)|0;
      $10 = $7;$d$03$i5 = $d$01$i3;$u$02$i6 = 0;
      while(1) {
       $9 = (($10) + (($u$02$i6*12)|0)|0);
       $11 = (($10) + (($d$03$i5*12)|0)|0);
       $12 = HEAP32[$9>>2]|0;
       $13 = HEAP32[$11>>2]|0;
       HEAP32[$9>>2] = $13;
       HEAP32[$11>>2] = $12;
       $14 = (((($10) + (($u$02$i6*12)|0)|0)) + 4|0);
       $15 = (((($10) + (($d$03$i5*12)|0)|0)) + 4|0);
       $16 = HEAP32[$14>>2]|0;
       $17 = HEAP32[$15>>2]|0;
       HEAP32[$14>>2] = $17;
       HEAP32[$15>>2] = $16;
       $18 = (((($10) + (($u$02$i6*12)|0)|0)) + 8|0);
       $19 = (((($10) + (($d$03$i5*12)|0)|0)) + 8|0);
       $20 = HEAP32[$18>>2]|0;
       $21 = HEAP32[$19>>2]|0;
       HEAP32[$18>>2] = $21;
       HEAP32[$19>>2] = $20;
       $22 = (($u$02$i6) + 1)|0;
       $d$0$i7 = (($d$03$i5) + -1)|0;
       $23 = ($22|0)<($d$0$i7|0);
       if (!($23)) {
        break;
       }
       $$pre$i8 = HEAP32[$1>>2]|0;
       $10 = $$pre$i8;$d$03$i5 = $d$0$i7;$u$02$i6 = $22;
      }
      return;
      break;
     }
     case 2:  {
      $24 = ((($this)) + 16|0);
      $25 = ((($this)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = HEAP32[$24>>2]|0;
      $28 = (($26) - ($27))|0;
      $29 = (($28|0) / 12)&-1;
      $30 = ($28|0)>(0);
      if ($30) {
       $31 = $27;
       $33 = $31;$row$04$i12 = 0;
       while(1) {
        $32 = (($33) + (($row$04$i12*12)|0)|0);
        $34 = HEAP32[$32>>2]|0;
        $35 = (((($33) + (($row$04$i12*12)|0)|0)) + 4|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = ($34|0)==($36|0);
        if (!($37)) {
         $38 = ((($36)) + -1|0);
         $39 = ($34>>>0)<($38>>>0);
         if ($39) {
          $41 = $34;$43 = $38;
          while(1) {
           $40 = HEAP8[$41>>0]|0;
           $42 = HEAP8[$43>>0]|0;
           HEAP8[$41>>0] = $42;
           HEAP8[$43>>0] = $40;
           $44 = ((($41)) + 1|0);
           $45 = ((($43)) + -1|0);
           $46 = ($44>>>0)<($45>>>0);
           if ($46) {
            $41 = $44;$43 = $45;
           } else {
            break;
           }
          }
         }
        }
        $47 = (($row$04$i12) + 1)|0;
        $48 = ($47|0)<($29|0);
        if (!($48)) {
         break;
        }
        $$pre$i16 = HEAP32[$24>>2]|0;
        $33 = $$pre$i16;$row$04$i12 = $47;
       }
       $$pre = HEAP32[$25>>2]|0;
       $$pre61 = HEAP32[$24>>2]|0;
       $50 = $$pre61;$51 = $$pre;
      } else {
       $50 = $27;$51 = $26;
      }
      $49 = (($51) - ($50))|0;
      $52 = ($49|0)>(12);
      if (!($52)) {
       return;
      }
      $53 = $50;
      $54 = (($49|0) / 12)&-1;
      $d$01$i43 = (($54) + -1)|0;
      $56 = $53;$d$03$i45 = $d$01$i43;$u$02$i46 = 0;
      while(1) {
       $55 = (($56) + (($u$02$i46*12)|0)|0);
       $57 = (($56) + (($d$03$i45*12)|0)|0);
       $58 = HEAP32[$55>>2]|0;
       $59 = HEAP32[$57>>2]|0;
       HEAP32[$55>>2] = $59;
       HEAP32[$57>>2] = $58;
       $60 = (((($56) + (($u$02$i46*12)|0)|0)) + 4|0);
       $61 = (((($56) + (($d$03$i45*12)|0)|0)) + 4|0);
       $62 = HEAP32[$60>>2]|0;
       $63 = HEAP32[$61>>2]|0;
       HEAP32[$60>>2] = $63;
       HEAP32[$61>>2] = $62;
       $64 = (((($56) + (($u$02$i46*12)|0)|0)) + 8|0);
       $65 = (((($56) + (($d$03$i45*12)|0)|0)) + 8|0);
       $66 = HEAP32[$64>>2]|0;
       $67 = HEAP32[$65>>2]|0;
       HEAP32[$64>>2] = $67;
       HEAP32[$65>>2] = $66;
       $68 = (($u$02$i46) + 1)|0;
       $d$0$i47 = (($d$03$i45) + -1)|0;
       $69 = ($68|0)<($d$0$i47|0);
       if (!($69)) {
        break;
       }
       $$pre$i48 = HEAP32[$24>>2]|0;
       $56 = $$pre$i48;$d$03$i45 = $d$0$i47;$u$02$i46 = $68;
      }
      return;
      break;
     }
     case 3:  {
      $70 = ((($this)) + 16|0);
      __ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($70,$this);
      $71 = ((($this)) + 20|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = HEAP32[$70>>2]|0;
      $74 = (($72) - ($73))|0;
      $75 = (($74|0) / 12)&-1;
      $76 = ($74|0)>(0);
      if (!($76)) {
       return;
      }
      $77 = $73;
      $79 = $77;$row$04$i36 = 0;
      while(1) {
       $78 = (($79) + (($row$04$i36*12)|0)|0);
       $80 = HEAP32[$78>>2]|0;
       $81 = (((($79) + (($row$04$i36*12)|0)|0)) + 4|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($80|0)==($82|0);
       if (!($83)) {
        $84 = ((($82)) + -1|0);
        $85 = ($80>>>0)<($84>>>0);
        if ($85) {
         $87 = $80;$89 = $84;
         while(1) {
          $86 = HEAP8[$87>>0]|0;
          $88 = HEAP8[$89>>0]|0;
          HEAP8[$87>>0] = $88;
          HEAP8[$89>>0] = $86;
          $90 = ((($87)) + 1|0);
          $91 = ((($89)) + -1|0);
          $92 = ($90>>>0)<($91>>>0);
          if ($92) {
           $87 = $90;$89 = $91;
          } else {
           break;
          }
         }
        }
       }
       $93 = (($row$04$i36) + 1)|0;
       $94 = ($93|0)<($75|0);
       if (!($94)) {
        break;
       }
       $$pre$i40 = HEAP32[$70>>2]|0;
       $79 = $$pre$i40;$row$04$i36 = $93;
      }
      return;
      break;
     }
     case 4:  {
      $95 = ((($this)) + 16|0);
      $96 = ((($this)) + 20|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = HEAP32[$95>>2]|0;
      $99 = (($97) - ($98))|0;
      $100 = (($99|0) / 12)&-1;
      $101 = ($99|0)>(0);
      if (!($101)) {
       return;
      }
      $102 = $98;
      $104 = $102;$row$04$i28 = 0;
      while(1) {
       $103 = (($104) + (($row$04$i28*12)|0)|0);
       $105 = HEAP32[$103>>2]|0;
       $106 = (((($104) + (($row$04$i28*12)|0)|0)) + 4|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ($105|0)==($107|0);
       if (!($108)) {
        $109 = ((($107)) + -1|0);
        $110 = ($105>>>0)<($109>>>0);
        if ($110) {
         $112 = $105;$114 = $109;
         while(1) {
          $111 = HEAP8[$112>>0]|0;
          $113 = HEAP8[$114>>0]|0;
          HEAP8[$112>>0] = $113;
          HEAP8[$114>>0] = $111;
          $115 = ((($112)) + 1|0);
          $116 = ((($114)) + -1|0);
          $117 = ($115>>>0)<($116>>>0);
          if ($117) {
           $112 = $115;$114 = $116;
          } else {
           break;
          }
         }
        }
       }
       $118 = (($row$04$i28) + 1)|0;
       $119 = ($118|0)<($100|0);
       if (!($119)) {
        break;
       }
       $$pre$i32 = HEAP32[$95>>2]|0;
       $104 = $$pre$i32;$row$04$i28 = $118;
      }
      return;
      break;
     }
     case 5:  {
      $120 = ((($this)) + 16|0);
      $121 = ((($this)) + 20|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = HEAP32[$120>>2]|0;
      $124 = (($122) - ($123))|0;
      $125 = ($124|0)>(12);
      if (!($125)) {
       return;
      }
      $126 = $123;
      $127 = (($124|0) / 12)&-1;
      $d$01$i19 = (($127) + -1)|0;
      $129 = $126;$d$03$i21 = $d$01$i19;$u$02$i22 = 0;
      while(1) {
       $128 = (($129) + (($u$02$i22*12)|0)|0);
       $130 = (($129) + (($d$03$i21*12)|0)|0);
       $131 = HEAP32[$128>>2]|0;
       $132 = HEAP32[$130>>2]|0;
       HEAP32[$128>>2] = $132;
       HEAP32[$130>>2] = $131;
       $133 = (((($129) + (($u$02$i22*12)|0)|0)) + 4|0);
       $134 = (((($129) + (($d$03$i21*12)|0)|0)) + 4|0);
       $135 = HEAP32[$133>>2]|0;
       $136 = HEAP32[$134>>2]|0;
       HEAP32[$133>>2] = $136;
       HEAP32[$134>>2] = $135;
       $137 = (((($129) + (($u$02$i22*12)|0)|0)) + 8|0);
       $138 = (((($129) + (($d$03$i21*12)|0)|0)) + 8|0);
       $139 = HEAP32[$137>>2]|0;
       $140 = HEAP32[$138>>2]|0;
       HEAP32[$137>>2] = $140;
       HEAP32[$138>>2] = $139;
       $141 = (($u$02$i22) + 1)|0;
       $d$0$i23 = (($d$03$i21) + -1)|0;
       $142 = ($141|0)<($d$0$i23|0);
       if (!($142)) {
        break;
       }
       $$pre$i24 = HEAP32[$120>>2]|0;
       $129 = $$pre$i24;$d$03$i21 = $d$0$i23;$u$02$i22 = $141;
      }
      return;
      break;
     }
     case 6:  {
      $143 = ((($this)) + 16|0);
      __ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($143,$this);
      return;
      break;
     }
     default: {
      return;
     }
     }
    }
    function __ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($data,$re) {
     $data = $data|0;
     $re = $re|0;
     var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i6 = 0, $$pre39 = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
     var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
     var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
     var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
     var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
     var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
     var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
     var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
     var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond51 = 0, $indvars$iv = 0;
     var $indvars$iv$next = 0, $or$cond = 0, $or$cond48 = 0, $row$032 = 0, $row1$035 = 0, $row3$025 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($re)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($re)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) + 1)|0;
     $5 = (($4) - ($3))|0;
     $6 = ((($re)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = HEAP32[$re>>2]|0;
     $9 = (($7) + 1)|0;
     $10 = (($9) - ($8))|0;
     $11 = ($5|0)<($10|0);
     $12 = $11 ? $10 : $5;
     if ($11) {
      $13 = ((($data)) + 4|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = HEAP32[$data>>2]|0;
      $16 = (($14) - ($15))|0;
      $17 = (($16|0) / 12)&-1;
      $18 = ($12>>>0)>($17>>>0);
      $19 = $15;
      $20 = $14;
      if ($18) {
       $21 = (($12) - ($17))|0;
       __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEj($data,$21);
      } else {
       $22 = ($12>>>0)<($17>>>0);
       if ($22) {
        $23 = (($19) + (($12*12)|0)|0);
        $24 = ($20|0)==($23|0);
        if (!($24)) {
         $26 = $20;
         while(1) {
          $25 = ((($26)) + -12|0);
          HEAP32[$13>>2] = $25;
          $27 = HEAP32[$25>>2]|0;
          $28 = ($27|0)==(0|0);
          if ($28) {
           $29 = $25;
          } else {
           $31 = ((($26)) + -8|0);
           $32 = HEAP32[$31>>2]|0;
           $33 = ($32|0)==($27|0);
           if (!($33)) {
            HEAP32[$31>>2] = $27;
           }
           __ZdlPv($27);
           $$pre$i$i$i6 = HEAP32[$13>>2]|0;
           $29 = $$pre$i$i$i6;
          }
          $30 = ($29|0)==($23|0);
          if ($30) {
           break;
          } else {
           $26 = $29;
          }
         }
        }
       }
      }
      $34 = HEAP32[$0>>2]|0;
      $35 = HEAP32[$2>>2]|0;
      $36 = (($34) + 1)|0;
      $37 = (($36) - ($35))|0;
      $38 = ($37|0)<($12|0);
      if ($38) {
       $row$032 = $37;
       while(1) {
        $39 = HEAP32[$data>>2]|0;
        $40 = (($39) + (($row$032*12)|0)|0);
        $41 = (((($39) + (($row$032*12)|0)|0)) + 4|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = HEAP32[$40>>2]|0;
        $44 = (($42) - ($43))|0;
        $45 = ($12>>>0)>($44>>>0);
        $46 = $43;
        $47 = $42;
        if ($45) {
         $48 = (($12) - ($44))|0;
         __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj($40,$48);
        } else {
         $49 = ($12>>>0)<($44>>>0);
         if ($49) {
          $50 = (($46) + ($12)|0);
          $51 = ($47|0)==($50|0);
          if (!($51)) {
           HEAP32[$41>>2] = $50;
          }
         }
        }
        $52 = (($row$032) + 1)|0;
        $53 = ($52|0)<($12|0);
        if ($53) {
         $row$032 = $52;
        } else {
         break;
        }
       }
      }
     } else {
      $54 = ($10|0)<($12|0);
      $55 = ($5|0)>(0);
      $or$cond = $54 & $55;
      if ($or$cond) {
       $164 = $3;$165 = $1;$row1$035 = 0;
       while(1) {
        $57 = HEAP32[$data>>2]|0;
        $58 = (($57) + (($row1$035*12)|0)|0);
        $59 = (((($57) + (($row1$035*12)|0)|0)) + 4|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = HEAP32[$58>>2]|0;
        $62 = (($60) - ($61))|0;
        $63 = ($12>>>0)>($62>>>0);
        $64 = $61;
        $65 = $60;
        if ($63) {
         $66 = (($12) - ($62))|0;
         __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj($58,$66);
         $$pre = HEAP32[$0>>2]|0;
         $$pre39 = HEAP32[$2>>2]|0;
         $72 = $$pre;$74 = $$pre39;
        } else {
         $67 = ($12>>>0)<($62>>>0);
         if ($67) {
          $68 = (($64) + ($12)|0);
          $69 = ($65|0)==($68|0);
          if ($69) {
           $72 = $165;$74 = $164;
          } else {
           HEAP32[$59>>2] = $68;
           $72 = $165;$74 = $164;
          }
         } else {
          $72 = $165;$74 = $164;
         }
        }
        $70 = (($row1$035) + 1)|0;
        $71 = (($72) + 1)|0;
        $73 = (($71) - ($74))|0;
        $75 = ($70|0)<($73|0);
        if ($75) {
         $164 = $74;$165 = $72;$row1$035 = $70;
        } else {
         break;
        }
       }
      }
     }
     $56 = ($12|0)>(0);
     if ($56) {
      $indvars$iv = 0;
      while(1) {
       $89 = ($indvars$iv|0)>(0);
       if ($89) {
        $90 = HEAP32[$data>>2]|0;
        $91 = (($90) + (($indvars$iv*12)|0)|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = HEAP8[$92>>0]|0;
        $94 = HEAP32[$90>>2]|0;
        $95 = (($94) + ($indvars$iv)|0);
        $96 = HEAP8[$95>>0]|0;
        HEAP8[$92>>0] = $96;
        $97 = HEAP32[$data>>2]|0;
        $98 = HEAP32[$97>>2]|0;
        $99 = (($98) + ($indvars$iv)|0);
        HEAP8[$99>>0] = $93;
        $exitcond51 = ($indvars$iv|0)==(1);
        if (!($exitcond51)) {
         $103 = 1;
         while(1) {
          $$pre41 = HEAP32[$data>>2]|0;
          $101 = HEAP32[$91>>2]|0;
          $102 = (($101) + ($103)|0);
          $104 = HEAP8[$102>>0]|0;
          $105 = (($$pre41) + (($103*12)|0)|0);
          $106 = HEAP32[$105>>2]|0;
          $107 = (($106) + ($indvars$iv)|0);
          $108 = HEAP8[$107>>0]|0;
          HEAP8[$102>>0] = $108;
          $109 = HEAP32[$data>>2]|0;
          $110 = (($109) + (($103*12)|0)|0);
          $111 = HEAP32[$110>>2]|0;
          $112 = (($111) + ($indvars$iv)|0);
          HEAP8[$112>>0] = $104;
          $113 = (($103) + 1)|0;
          $exitcond = ($113|0)==($indvars$iv|0);
          if ($exitcond) {
           break;
          } else {
           $103 = $113;
          }
         }
        }
       }
       $indvars$iv$next = (($indvars$iv) + 1)|0;
       $100 = ($indvars$iv$next|0)<($12|0);
       if ($100) {
        $indvars$iv = $indvars$iv$next;
       } else {
        break;
       }
      }
     }
     $76 = HEAP32[$0>>2]|0;
     $77 = HEAP32[$2>>2]|0;
     $78 = (($76) + 1)|0;
     $79 = (($78) - ($77))|0;
     $80 = HEAP32[$6>>2]|0;
     $81 = HEAP32[$re>>2]|0;
     $82 = (($80) + 1)|0;
     $83 = (($82) - ($81))|0;
     __ZN9Rectangle6heightEi($re,$83);
     __ZN9Rectangle5widthEi($re,$79);
     $84 = HEAP32[$0>>2]|0;
     $85 = HEAP32[$2>>2]|0;
     $86 = (($84) + 1)|0;
     $87 = (($86) - ($85))|0;
     $88 = ($87|0)<($12|0);
     if (!($88)) {
      $135 = HEAP32[$6>>2]|0;
      $136 = HEAP32[$re>>2]|0;
      $137 = (($135) + 1)|0;
      $138 = (($137) - ($136))|0;
      $139 = ($138|0)<($12|0);
      $140 = ($87|0)>(0);
      $or$cond48 = $139 & $140;
      if (!($or$cond48)) {
       return;
      }
      $144 = $135;$146 = $136;$166 = $85;$167 = $84;$row3$025 = 0;
      while(1) {
       $141 = HEAP32[$data>>2]|0;
       $142 = (($141) + (($row3$025*12)|0)|0);
       $143 = (($144) + 1)|0;
       $145 = (($143) - ($146))|0;
       $147 = (((($141) + (($row3$025*12)|0)|0)) + 4|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = HEAP32[$142>>2]|0;
       $150 = (($148) - ($149))|0;
       $151 = ($145>>>0)>($150>>>0);
       $152 = $149;
       $153 = $148;
       if ($151) {
        $154 = (($145) - ($150))|0;
        __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj($142,$154);
        $$pre44 = HEAP32[$0>>2]|0;
        $$pre45 = HEAP32[$2>>2]|0;
        $160 = $$pre44;$162 = $$pre45;
       } else {
        $155 = ($145>>>0)<($150>>>0);
        if ($155) {
         $156 = (($152) + ($145)|0);
         $157 = ($153|0)==($156|0);
         if ($157) {
          $160 = $167;$162 = $166;
         } else {
          HEAP32[$147>>2] = $156;
          $160 = $167;$162 = $166;
         }
        } else {
         $160 = $167;$162 = $166;
        }
       }
       $158 = (($row3$025) + 1)|0;
       $159 = (($160) + 1)|0;
       $161 = (($159) - ($162))|0;
       $163 = ($158|0)<($161|0);
       if (!($163)) {
        break;
       }
       $$pre42 = HEAP32[$6>>2]|0;
       $$pre43 = HEAP32[$re>>2]|0;
       $144 = $$pre42;$146 = $$pre43;$166 = $162;$167 = $160;$row3$025 = $158;
      }
      return;
     }
     $114 = ((($data)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = HEAP32[$data>>2]|0;
     $117 = (($115) - ($116))|0;
     $118 = (($117|0) / 12)&-1;
     $119 = ($87>>>0)>($118>>>0);
     $120 = $116;
     $121 = $115;
     if ($119) {
      $122 = (($87) - ($118))|0;
      __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEj($data,$122);
      return;
     }
     $123 = ($87>>>0)<($118>>>0);
     if (!($123)) {
      return;
     }
     $124 = (($120) + (($87*12)|0)|0);
     $125 = ($121|0)==($124|0);
     if ($125) {
      return;
     } else {
      $127 = $121;
     }
     while(1) {
      $126 = ((($127)) + -12|0);
      HEAP32[$114>>2] = $126;
      $128 = HEAP32[$126>>2]|0;
      $129 = ($128|0)==(0|0);
      if ($129) {
       $130 = $126;
      } else {
       $132 = ((($127)) + -8|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==($128|0);
       if (!($134)) {
        HEAP32[$132>>2] = $128;
       }
       __ZdlPv($128);
       $$pre$i$i$i = HEAP32[$114>>2]|0;
       $130 = $$pre$i$i$i;
      }
      $131 = ($130|0)==($124|0);
      if ($131) {
       break;
      } else {
       $127 = $130;
      }
     }
     return;
    }
    function __ZN9RectangleC2Eiiii($this,$l,$t,$r,$b) {
     $this = $this|0;
     $l = $l|0;
     $t = $t|0;
     $r = $r|0;
     $b = $b|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $vararg_buffer = sp;
     $0 = ($r|0)<($l|0);
     $1 = ($b|0)<($t|0);
     $or$cond = $0 | $1;
     if ($or$cond) {
      $2 = HEAP32[1700]|0;
      $3 = ($2|0)>(-1);
      if ($3) {
       $4 = HEAP32[90]|0;
       HEAP32[$vararg_buffer>>2] = $l;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $t;
       $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
       HEAP32[$vararg_ptr2>>2] = $r;
       $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
       HEAP32[$vararg_ptr3>>2] = $b;
       (_fprintf($4,1552,$vararg_buffer)|0);
      }
      __ZN5Ocrad14internal_errorEPKc(1584);
     }
     HEAP32[$this>>2] = $l;
     $5 = ((($this)) + 4|0);
     HEAP32[$5>>2] = $t;
     $6 = ((($this)) + 8|0);
     HEAP32[$6>>2] = $r;
     $7 = ((($this)) + 12|0);
     HEAP32[$7>>2] = $b;
     STACKTOP = sp;return;
    }
    function __ZN9Rectangle4leftEi($this,$l) {
     $this = $this|0;
     $l = $l|0;
     var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ($1|0)<($l|0);
     if ($2) {
      __ZN5Ocrad14internal_errorEPKc(1620);
     }
     HEAP32[$this>>2] = $l;
     return;
    }
    function __ZN9Rectangle3topEi($this,$t) {
     $this = $this|0;
     $t = $t|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ($1|0)<($t|0);
     if ($2) {
      __ZN5Ocrad14internal_errorEPKc(1662);
     }
     $3 = ((($this)) + 4|0);
     HEAP32[$3>>2] = $t;
     return;
    }
    function __ZN9Rectangle5rightEi($this,$r) {
     $this = $this|0;
     $r = $r|0;
     var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = ($0|0)>($r|0);
     if ($1) {
      __ZN5Ocrad14internal_errorEPKc(1703);
     }
     $2 = ((($this)) + 8|0);
     HEAP32[$2>>2] = $r;
     return;
    }
    function __ZN9Rectangle6bottomEi($this,$b) {
     $this = $this|0;
     $b = $b|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ($1|0)>($b|0);
     if ($2) {
      __ZN5Ocrad14internal_errorEPKc(1746);
     }
     $3 = ((($this)) + 12|0);
     HEAP32[$3>>2] = $b;
     return;
    }
    function __ZN9Rectangle6heightEi($this,$h) {
     $this = $this|0;
     $h = $h|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($h|0)<(1);
     if ($0) {
      __ZN5Ocrad14internal_errorEPKc(1790);
     }
     $1 = ((($this)) + 4|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = (($h) + -1)|0;
     $4 = (($3) + ($2))|0;
     $5 = ((($this)) + 12|0);
     HEAP32[$5>>2] = $4;
     return;
    }
    function __ZN9Rectangle5widthEi($this,$w) {
     $this = $this|0;
     $w = $w|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($w|0)<(1);
     if ($0) {
      __ZN5Ocrad14internal_errorEPKc(1834);
     }
     $1 = HEAP32[$this>>2]|0;
     $2 = (($w) + -1)|0;
     $3 = (($2) + ($1))|0;
     $4 = ((($this)) + 8|0);
     HEAP32[$4>>2] = $3;
     return;
    }
    function __ZN9Rectangle13add_rectangleERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$re>>2]|0;
     $1 = HEAP32[$this>>2]|0;
     $2 = ($0|0)<($1|0);
     if ($2) {
      HEAP32[$this>>2] = $0;
     }
     $3 = ((($re)) + 4|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = ((($this)) + 4|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($4|0)<($6|0);
     if ($7) {
      HEAP32[$5>>2] = $4;
     }
     $8 = ((($re)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($this)) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($9|0)>($11|0);
     if ($12) {
      HEAP32[$10>>2] = $9;
     }
     $13 = ((($re)) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($this)) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)>($16|0);
     if (!($17)) {
      return;
     }
     HEAP32[$15>>2] = $14;
     return;
    }
    function __ZNK9Rectangle8includesERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
     var sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = HEAP32[$re>>2]|0;
     $2 = ($0|0)>($1|0);
     if ($2) {
      $18 = 0;
      return ($18|0);
     }
     $3 = ((($this)) + 4|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = ((($re)) + 4|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($4|0)>($6|0);
     if ($7) {
      $18 = 0;
      return ($18|0);
     }
     $8 = ((($this)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($re)) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($9|0)<($11|0);
     if ($12) {
      $18 = 0;
      return ($18|0);
     }
     $13 = ((($this)) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($re)) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)>=($16|0);
     $18 = $17;
     return ($18|0);
    }
    function __ZNK9Rectangle8includesEii($this,$row,$col) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = ($0|0)>($col|0);
     if ($1) {
      $11 = 0;
      return ($11|0);
     }
     $2 = ((($this)) + 8|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($3|0)<($col|0);
     if ($4) {
      $11 = 0;
      return ($11|0);
     }
     $5 = ((($this)) + 4|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($6|0)>($row|0);
     if ($7) {
      $11 = 0;
      return ($11|0);
     }
     $8 = ((($this)) + 12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)>=($row|0);
     $11 = $10;
     return ($11|0);
    }
    function __ZNK9Rectangle17strictly_includesERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
     var sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = HEAP32[$re>>2]|0;
     $2 = ($0|0)<($1|0);
     if (!($2)) {
      $18 = 0;
      return ($18|0);
     }
     $3 = ((($this)) + 4|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = ((($re)) + 4|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($4|0)<($6|0);
     if (!($7)) {
      $18 = 0;
      return ($18|0);
     }
     $8 = ((($this)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($re)) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($9|0)>($11|0);
     if (!($12)) {
      $18 = 0;
      return ($18|0);
     }
     $13 = ((($this)) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($re)) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)>($16|0);
     $18 = $17;
     return ($18|0);
    }
    function __ZNK9Rectangle16includes_hcenterERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = HEAP32[$re>>2]|0;
     $2 = ((($re)) + 8|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($3) + ($1))|0;
     $5 = (($4|0) / 2)&-1;
     $6 = ($0|0)>($5|0);
     if ($6) {
      $10 = 0;
      return ($10|0);
     }
     $7 = ((($this)) + 8|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ($8|0)>=($5|0);
     $10 = $9;
     return ($10|0);
    }
    function __ZNK9Rectangle16includes_vcenterERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($re)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ((($re)) + 12|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = (($5) + ($3))|0;
     $7 = (($6|0) / 2)&-1;
     $8 = ($1|0)>($7|0);
     if ($8) {
      $12 = 0;
      return ($12|0);
     }
     $9 = ((($this)) + 12|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)>=($7|0);
     $12 = $11;
     return ($12|0);
    }
    function __ZNK9Rectangle10h_includesERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = HEAP32[$re>>2]|0;
     $2 = ($0|0)>($1|0);
     if ($2) {
      $8 = 0;
      return ($8|0);
     }
     $3 = ((($this)) + 8|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = ((($re)) + 8|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($4|0)>=($6|0);
     $8 = $7;
     return ($8|0);
    }
    function __ZNK9Rectangle10h_includesEi($this,$col) {
     $this = $this|0;
     $col = $col|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = ($0|0)>($col|0);
     if ($1) {
      $5 = 0;
      return ($5|0);
     }
     $2 = ((($this)) + 8|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($3|0)>=($col|0);
     $5 = $4;
     return ($5|0);
    }
    function __ZNK9Rectangle10v_includesEi($this,$row) {
     $this = $this|0;
     $row = $row|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ($1|0)>($row|0);
     if ($2) {
      $6 = 0;
      return ($6|0);
     }
     $3 = ((($this)) + 12|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = ($4|0)>=($row|0);
     $6 = $5;
     return ($6|0);
    }
    function __ZNK9Rectangle10h_overlapsERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = ((($re)) + 8|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = ($0|0)>($2|0);
     if ($3) {
      $8 = 0;
      return ($8|0);
     }
     $4 = ((($this)) + 8|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = HEAP32[$re>>2]|0;
     $7 = ($5|0)>=($6|0);
     $8 = $7;
     return ($8|0);
    }
    function __ZNK9Rectangle10v_overlapsERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($re)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($1|0)>($3|0);
     if ($4) {
      $10 = 0;
      return ($10|0);
     }
     $5 = ((($this)) + 12|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ((($re)) + 4|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ($6|0)>=($8|0);
     $10 = $9;
     return ($10|0);
    }
    function __ZNK9Rectangle17v_overlap_percentERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
     var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ov$0 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 12|0);
     $1 = ((($re)) + 12|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$0>>2]|0;
     $4 = ($2|0)<($3|0);
     $5 = $4 ? $2 : $3;
     $6 = ((($this)) + 4|0);
     $7 = ((($re)) + 4|0);
     $8 = HEAP32[$6>>2]|0;
     $9 = HEAP32[$7>>2]|0;
     $10 = ($8|0)<($9|0);
     $11 = $10 ? $9 : $8;
     $12 = (($5) - ($11))|0;
     $13 = ($12|0)>(-1);
     if (!($13)) {
      $ov$0 = 0;
      return ($ov$0|0);
     }
     $14 = ($12*100)|0;
     $15 = (($14) + 100)|0;
     $16 = (($3) + 1)|0;
     $17 = (($16) - ($8))|0;
     $18 = (($2) + 1)|0;
     $19 = (($18) - ($9))|0;
     $20 = ($19|0)<($17|0);
     $21 = $20 ? $19 : $17;
     $22 = (($15|0) / ($21|0))&-1;
     $23 = ($22|0)>(1);
     $24 = $23 ? $22 : 1;
     $ov$0 = $24;
     return ($ov$0|0);
    }
    function __ZNK9Rectangle14is_hcentred_inERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $$2 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$or$cond = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$re>>2]|0;
     $1 = ((($re)) + 8|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = (($2) + ($0))|0;
     $4 = (($3|0) / 2)&-1;
     $5 = HEAP32[$this>>2]|0;
     $6 = ($5|0)>($4|0);
     $$phi$trans$insert = ((($this)) + 8|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $7 = ($$pre|0)<($4|0);
     $or$cond = $6 | $7;
     if (!($or$cond)) {
      $$2 = 1;
      return ($$2|0);
     }
     $8 = ((($re)) + 12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($re)) + 4|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($9) + 1)|0;
     $13 = (($12) - ($11))|0;
     $14 = (($2) + 1)|0;
     $15 = (($14) - ($0))|0;
     $16 = ($15|0)<($13|0);
     $17 = $16 ? $15 : $13;
     $18 = (($17|0) / 2)&-1;
     $19 = (($$pre) + 1)|0;
     $20 = (($19) - ($5))|0;
     $21 = ($20|0)<($18|0);
     if ($21) {
      $22 = (($18) + 1)|0;
      $23 = (($22|0) / 2)&-1;
      $24 = (($5) + ($$pre))|0;
      $25 = (($24|0) / 2)&-1;
      $26 = (($25) - ($23))|0;
      $27 = (($23) + ($25))|0;
      $notlhs = ($26|0)<=($4|0);
      $notrhs = ($27|0)>=($4|0);
      $not$or$cond = $notrhs & $notlhs;
      return ($not$or$cond|0);
     } else {
      $$2 = 0;
      return ($$2|0);
     }
     return (0)|0;
    }
    function __ZNK9Rectangle14is_vcentred_inERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $$2 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$or$cond = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($re)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($re)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($3) + ($1))|0;
     $5 = (($4|0) / 2)&-1;
     $6 = ((($this)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($7|0)>($5|0);
     $$phi$trans$insert = ((($this)) + 12|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $9 = ($$pre|0)<($5|0);
     $or$cond = $8 | $9;
     if (!($or$cond)) {
      $$2 = 1;
      return ($$2|0);
     }
     $10 = (($3) + 1)|0;
     $11 = (($10) - ($1))|0;
     $12 = ((($re)) + 8|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = HEAP32[$re>>2]|0;
     $15 = (($13) + 1)|0;
     $16 = (($15) - ($14))|0;
     $17 = ($16|0)<($11|0);
     $18 = $17 ? $16 : $11;
     $19 = (($18|0) / 2)&-1;
     $20 = (($$pre) + 1)|0;
     $21 = (($20) - ($7))|0;
     $22 = ($21|0)<($19|0);
     if ($22) {
      $23 = (($19) + 1)|0;
      $24 = (($23|0) / 2)&-1;
      $25 = (($7) + ($$pre))|0;
      $26 = (($25|0) / 2)&-1;
      $27 = (($26) - ($24))|0;
      $28 = (($24) + ($26))|0;
      $notlhs = ($27|0)<=($5|0);
      $notrhs = ($28|0)>=($5|0);
      $not$or$cond = $notrhs & $notlhs;
      return ($not$or$cond|0);
     } else {
      $$2 = 0;
      return ($$2|0);
     }
     return (0)|0;
    }
    function __ZNK9Rectangle8precedesERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$re>>2]|0;
     $3 = ($1|0)<($2|0);
     if ($3) {
      $$0 = 1;
      return ($$0|0);
     }
     $4 = HEAP32[$this>>2]|0;
     $5 = ((($re)) + 8|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($4|0)>($6|0);
     if (!($7)) {
      $8 = ((($this)) + 4|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = ((($re)) + 4|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($9|0)<($11|0);
      if ($12) {
       $$0 = 1;
       return ($$0|0);
      }
      $13 = ($9|0)==($11|0);
      $14 = ($4|0)<($2|0);
      $or$cond = $13 & $14;
      if ($or$cond) {
       $$0 = 1;
       return ($$0|0);
      }
     }
     $$0 = 0;
     return ($$0|0);
    }
    function __ZNK9Rectangle10h_precedesERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = ((($this)) + 8|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = (($2) + ($0))|0;
     $4 = (($3|0) / 2)&-1;
     $5 = HEAP32[$re>>2]|0;
     $6 = ((($re)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = (($7) + ($5))|0;
     $9 = (($8|0) / 2)&-1;
     $10 = ($4|0)<($9|0);
     return ($10|0);
    }
    function __ZN9Rectangle6hypotiEii($c1,$c2) {
     $c1 = $c1|0;
     $c2 = $c2|0;
     var $$lower$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
     var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos1 = 0, $lower$0$lcssa = 0, $lower$0$upper$0 = 0, $lower$03 = 0, $neg = 0, $neg2 = 0, $upper$0$ = 0, $upper$0$lcssa = 0, $upper$04 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($c1|0)<(0);
     $1 = $0 << 31 >> 31;
     $2 = (___muldi3(($c1|0),($1|0),($c1|0),($1|0))|0);
     $3 = tempRet0;
     $4 = ($c2|0)<(0);
     $5 = $4 << 31 >> 31;
     $6 = (___muldi3(($c2|0),($5|0),($c2|0),($5|0))|0);
     $7 = tempRet0;
     $8 = (_i64Add(($6|0),($7|0),($2|0),($3|0))|0);
     $9 = tempRet0;
     $ispos = ($c1|0)>(-1);
     $neg = (0 - ($c1))|0;
     $10 = $ispos ? $c1 : $neg;
     $ispos1 = ($c2|0)>(-1);
     $neg2 = (0 - ($c2))|0;
     $11 = $ispos1 ? $c2 : $neg2;
     $12 = ($10|0)<($11|0);
     $13 = $12 ? $11 : $10;
     $14 = (($11) + ($10))|0;
     $15 = (($14) - ($13))|0;
     $16 = ($15|0)>(1);
     if ($16) {
      $lower$03 = $13;$upper$04 = $14;
      while(1) {
       $17 = (($upper$04) + ($lower$03))|0;
       $18 = (($17|0) / 2)&-1;
       $19 = ($18|0)<(0);
       $20 = $19 << 31 >> 31;
       $21 = (___muldi3(($18|0),($20|0),($18|0),($20|0))|0);
       $22 = tempRet0;
       $23 = ($22>>>0)<($9>>>0);
       $24 = ($21>>>0)<($8>>>0);
       $25 = ($22|0)==($9|0);
       $26 = $25 & $24;
       $27 = $23 | $26;
       $$lower$0 = $27 ? $18 : $lower$03;
       $upper$0$ = $27 ? $upper$04 : $18;
       $28 = (($upper$0$) - ($$lower$0))|0;
       $29 = ($28|0)>(1);
       if ($29) {
        $lower$03 = $$lower$0;$upper$04 = $upper$0$;
       } else {
        $lower$0$lcssa = $$lower$0;$upper$0$lcssa = $upper$0$;
        break;
       }
      }
     } else {
      $lower$0$lcssa = $13;$upper$0$lcssa = $14;
     }
     $30 = ($lower$0$lcssa|0)<(0);
     $31 = $30 << 31 >> 31;
     $32 = (___muldi3(($lower$0$lcssa|0),($31|0),($lower$0$lcssa|0),($31|0))|0);
     $33 = tempRet0;
     $34 = (_bitshift64Shl(($8|0),($9|0),1)|0);
     $35 = tempRet0;
     $36 = (_i64Subtract(($34|0),($35|0),($32|0),($33|0))|0);
     $37 = tempRet0;
     $38 = ($upper$0$lcssa|0)<(0);
     $39 = $38 << 31 >> 31;
     $40 = (___muldi3(($upper$0$lcssa|0),($39|0),($upper$0$lcssa|0),($39|0))|0);
     $41 = tempRet0;
     $42 = ($37|0)<($41|0);
     $43 = ($36>>>0)<($40>>>0);
     $44 = ($37|0)==($41|0);
     $45 = $44 & $43;
     $46 = $42 | $45;
     $lower$0$upper$0 = $46 ? $lower$0$lcssa : $upper$0$lcssa;
     return ($lower$0$upper$0|0);
    }
    function __ZNK9Rectangle10v_distanceERKS_($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($re)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($3|0)<($1|0);
     if ($4) {
      $6 = ((($re)) + 4|0);
      $7 = HEAP32[$6>>2]|0;
      $8 = ((($this)) + 12|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = ($7|0)<($9|0);
      $11 = (($7) - ($9))|0;
      $$ = $10 ? 0 : $11;
      return ($$|0);
     } else {
      $5 = (($3) - ($1))|0;
      return ($5|0);
     }
     return (0)|0;
    }
    function __ZNK9Rectangle10v_distanceEi($this,$row) {
     $this = $this|0;
     $row = $row|0;
     var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ($1|0)<($row|0);
     if ($2) {
      $4 = ((($this)) + 12|0);
      $5 = HEAP32[$4>>2]|0;
      $6 = ($5|0)>($row|0);
      $7 = (($row) - ($5))|0;
      $$ = $6 ? 0 : $7;
      return ($$|0);
     } else {
      $3 = (($1) - ($row))|0;
      return ($3|0);
     }
     return (0)|0;
    }
    function __ZN8TextpageC2ERK10Page_imagePKcRK7Controlb($this,$page_image,$filename,$control,$layout) {
     $this = $this|0;
     $page_image = $page_image|0;
     $filename = $filename|0;
     $control = $control|0;
     $layout = $layout|0;
     var $$0 = 0, $$06 = 0, $$in = 0, $$in$i = 0, $$in108 = 0, $$in109 = 0, $$index = 0, $$index30 = 0, $$index34 = 0, $$index38 = 0, $$lcssa = 0, $$lcssa154 = 0, $$lcssa157 = 0, $$lcssa159 = 0, $$lcssa163 = 0, $$lcssa73 = 0, $$lcssa75 = 0, $$off = 0, $$off41 = 0, $$pr = 0;
     var $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i34 = 0, $$pre$i$i37 = 0, $$pre$i27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
     var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
     var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
     var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
     var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
     var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
     var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
     var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
     var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
     var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
     var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
     var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
     var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
     var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
     var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
     var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
     var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
     var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
     var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
     var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
     var $99 = 0, $i$02$i$i = 0, $i$04$i = 0, $i$083 = 0, $i$083$us = 0, $i1$076 = 0, $i2$081 = 0, $i2$081$us = 0, $i3$079 = 0, $i4$077 = 0, $lpad$phi$index = 0, $lpad$phi$index22 = 0, $lpad$phi51$index = 0, $lpad$phi51$index46 = 0, $or$cond = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i22 = 0, $scevgep$i$i$i$i$i$i$i$i$i16 = 0;
     var $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i23 = 0, $scevgep4$i$i$i$i$i$i$i$i$i17 = 0, $sum$0$lcssa$i$i = 0, $sum$01$i$i = 0, $tbp = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $zindex$05$i = 0, $zone_vector = 0, $zone_vector$idx$val$i = 0;
     var $zone_vector$idx11$val = 0, $zone_vector$idx11$val$us = 0, $zone_vector$idx12$val = 0, $zone_vector$idx12$val$us = 0, $zone_vector$idx2$val$i = 0, $zone_vector$idx2$val$in$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $vararg_buffer15 = sp + 40|0;
     $vararg_buffer11 = sp + 32|0;
     $vararg_buffer7 = sp + 24|0;
     $vararg_buffer4 = sp + 16|0;
     $vararg_buffer1 = sp + 8|0;
     $vararg_buffer = sp;
     $zone_vector = sp + 84|0;
     $tbp = sp + 80|0;
     $tmp = sp + 48|0;
     ;HEAP32[$this>>2]=HEAP32[$page_image>>2]|0;HEAP32[$this+4>>2]=HEAP32[$page_image+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$page_image+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$page_image+12>>2]|0;
     $0 = ((($this)) + 16|0);
     $1 = (_strlen($filename)|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$filename,$1);
     $2 = ((($this)) + 28|0);
     HEAP32[$2>>2] = 0;
     $3 = ((($this)) + 32|0);
     HEAP32[$3>>2] = 0;
     $4 = ((($this)) + 36|0);
     HEAP32[$4>>2] = 0;
     $5 = ((($control)) + 24|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($6>>>0)>(100);
     if ($7) {
      STACKTOP = sp;return;
     }
     HEAP32[$zone_vector>>2] = 0;
     $8 = ((($zone_vector)) + 4|0);
     HEAP32[$8>>2] = 0;
     $9 = ((($zone_vector)) + 8|0);
     HEAP32[$9>>2] = 0;
     __THREW__ = 0;
     invoke_viiii(55,($page_image|0),($zone_vector|0),($6|0),($layout|0));
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     L4: do {
      if ($11) {
       label = 8;
      } else {
       $12 = HEAP32[1700]|0;
       $13 = ($12|0)>(0);
       if ($13) {
        $14 = HEAP32[90]|0;
        $15 = HEAP32[$8>>2]|0;
        $16 = HEAP32[$zone_vector>>2]|0;
        $17 = (($15) - ($16))|0;
        $18 = (($17|0) / 40)&-1;
        HEAP32[$vararg_buffer>>2] = $18;
        (_fprintf($14,1900,$vararg_buffer)|0);
       }
       $27 = ($6|0)>(97);
       L9: do {
        if ($27) {
         $28 = ((($control)) + 16|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = ($29|0)==(0|0);
         if ($30) {
          label = 99;
         } else {
          $31 = HEAP32[$8>>2]|0;
          $32 = HEAP32[$zone_vector>>2]|0;
          $33 = (($31) - ($32))|0;
          $34 = (($33|0) / 40)&-1;
          HEAP32[$vararg_buffer1>>2] = $34;
          (_fprintf($29,1928,$vararg_buffer1)|0);
          $35 = HEAP32[$8>>2]|0;
          $36 = HEAP32[$zone_vector>>2]|0;
          $37 = ($35|0)==($36|0);
          $38 = $36;
          if ($37) {
           $sum$0$lcssa$i$i = 0;
          } else {
           $39 = (($35) - ($36))|0;
           $40 = (($39|0) / 40)&-1;
           $i$02$i$i = 0;$sum$01$i$i = 0;
           while(1) {
            $41 = (((($38) + (($i$02$i$i*40)|0)|0)) + 28|0);
            $42 = (((($38) + (($i$02$i$i*40)|0)|0)) + 32|0);
            $43 = HEAP32[$42>>2]|0;
            $44 = HEAP32[$41>>2]|0;
            $45 = (($43) - ($44))|0;
            $46 = $45 >> 2;
            $47 = (($46) + ($sum$01$i$i))|0;
            $48 = (($i$02$i$i) + 1)|0;
            $49 = ($48>>>0)<($40>>>0);
            if ($49) {
             $i$02$i$i = $48;$sum$01$i$i = $47;
            } else {
             $sum$0$lcssa$i$i = $47;
             break;
            }
           }
          }
          HEAP32[$vararg_buffer4>>2] = $sum$0$lcssa$i$i;
          (_fprintf($29,1952,$vararg_buffer4)|0);
          $50 = HEAP32[$8>>2]|0;
          $51 = HEAP32[$zone_vector>>2]|0;
          $52 = ($50|0)==($51|0);
          $53 = $51;
          if ($52) {
           $320 = $53;
          } else {
           $54 = (($50) - ($51))|0;
           $55 = (($54|0) / 40)&-1;
           $63 = $55;$zindex$05$i = 0;$zone_vector$idx2$val$in$i = $51;
           L18: while(1) {
            $zone_vector$idx2$val$i = $zone_vector$idx2$val$in$i;
            $62 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 28|0);
            $60 = (($zindex$05$i) + 1)|0;
            HEAP32[$vararg_buffer7>>2] = $60;
            $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
            HEAP32[$vararg_ptr10>>2] = $63;
            (_fprintf($29,1977,$vararg_buffer7)|0);
            $64 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 8|0);
            $65 = HEAP32[$64>>2]|0;
            $66 = (($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0);
            $67 = HEAP32[$66>>2]|0;
            $68 = (($65) + 1)|0;
            $69 = (($68) - ($67))|0;
            $70 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 12|0);
            $71 = HEAP32[$70>>2]|0;
            $72 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 4|0);
            $73 = HEAP32[$72>>2]|0;
            $74 = (($71) + 1)|0;
            $75 = (($74) - ($73))|0;
            HEAP32[$vararg_buffer11>>2] = $69;
            $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
            HEAP32[$vararg_ptr14>>2] = $75;
            (_fprintf($29,1992,$vararg_buffer11)|0);
            $zone_vector$idx$val$i = HEAP32[$zone_vector>>2]|0;
            $76 = (((($zone_vector$idx$val$i) + (($zindex$05$i*40)|0)|0)) + 28|0);
            $77 = (((($zone_vector$idx$val$i) + (($zindex$05$i*40)|0)|0)) + 32|0);
            $78 = HEAP32[$77>>2]|0;
            $79 = HEAP32[$76>>2]|0;
            $80 = (($78) - ($79))|0;
            $81 = $80 >> 2;
            HEAP32[$vararg_buffer15>>2] = $81;
            (_fprintf($29,2013,$vararg_buffer15)|0);
            $82 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 32|0);
            $83 = HEAP32[$82>>2]|0;
            $84 = HEAP32[$62>>2]|0;
            $85 = ($83|0)==($84|0);
            if (!($85)) {
             $$in$i = $84;$i$04$i = 0;
             while(1) {
              $86 = $$in$i;
              $87 = (($86) + ($i$04$i<<2)|0);
              $88 = HEAP32[$87>>2]|0;
              __THREW__ = 0;
              invoke_vii(56,($88|0),($29|0));
              $89 = __THREW__; __THREW__ = 0;
              $90 = $89&1;
              if ($90) {
               label = 5;
               break L18;
              }
              $91 = (($i$04$i) + 1)|0;
              $92 = HEAP32[$82>>2]|0;
              $93 = HEAP32[$62>>2]|0;
              $94 = (($92) - ($93))|0;
              $95 = $94 >> 2;
              $96 = ($91>>>0)<($95>>>0);
              if ($96) {
               $$in$i = $93;$i$04$i = $91;
              } else {
               break;
              }
             }
            }
            $56 = HEAP32[$8>>2]|0;
            $57 = HEAP32[$zone_vector>>2]|0;
            $58 = (($56) - ($57))|0;
            $59 = (($58|0) / 40)&-1;
            $61 = ($60>>>0)<($59>>>0);
            if ($61) {
             $63 = $59;$zindex$05$i = $60;$zone_vector$idx2$val$in$i = $57;
            } else {
             $$lcssa = $57;
             label = 100;
             break;
            }
           }
           if ((label|0) == 5) {
            $19 = ___cxa_find_matching_catch_2()|0;
            $20 = tempRet0;
            $lpad$phi$index = $19;$lpad$phi$index22 = $20;
            label = 9;
            break L4;
           }
           else if ((label|0) == 100) {
            $319 = $$lcssa;
            $320 = $319;
            break;
           }
          }
         }
        } else {
         $97 = ($6|0)>(95);
         $$off = (($6) + -90)|0;
         $98 = ($$off>>>0)<(4);
         $or$cond = $97 | $98;
         if ($or$cond) {
          label = 99;
         } else {
          $99 = HEAP32[$8>>2]|0;
          $100 = HEAP32[$zone_vector>>2]|0;
          $101 = ($99|0)==($100|0);
          $102 = $100;
          L30: do {
           if (!($101)) {
            $103 = ($6|0)<(90);
            $104 = ((($this)) + 36|0);
            do {
             if ($103) {
              $i$083$us = 0;$zone_vector$idx11$val$us = $102;
              L33: while(1) {
               __THREW__ = 0;
               $105 = (invoke_ii(29,28)|0);
               $106 = __THREW__; __THREW__ = 0;
               $107 = $106&1;
               if ($107) {
                label = 36;
                break;
               }
               $108 = (($zone_vector$idx11$val$us) + (($i$083$us*40)|0)|0);
               $109 = (((($zone_vector$idx11$val$us) + (($i$083$us*40)|0)|0)) + 28|0);
               __THREW__ = 0;
               invoke_viiii(57,($105|0),($page_image|0),($108|0),($109|0));
               $110 = __THREW__; __THREW__ = 0;
               $111 = $110&1;
               if ($111) {
                $$lcssa154 = $105;
                label = 35;
                break;
               }
               HEAP32[$tbp>>2] = $105;
               $112 = ((($105)) + 16|0);
               $113 = ((($105)) + 20|0);
               $114 = HEAP32[$113>>2]|0;
               $115 = HEAP32[$112>>2]|0;
               $116 = ($114|0)==($115|0);
               $117 = $105;
               if (!($116)) {
                __THREW__ = 0;
                invoke_vii(58,($105|0),($control|0));
                $118 = __THREW__; __THREW__ = 0;
                $119 = $118&1;
                if ($119) {
                 label = 36;
                 break;
                }
               }
               $120 = ((($105)) + 16|0);
               $121 = ((($105)) + 20|0);
               $122 = HEAP32[$121>>2]|0;
               $123 = HEAP32[$120>>2]|0;
               $124 = ($122|0)==($123|0);
               do {
                if ($124) {
                 __THREW__ = 0;
                 invoke_vi(60,($105|0));
                 $132 = __THREW__; __THREW__ = 0;
                 $133 = $132&1;
                 if ($133) {
                  $$lcssa157 = $105;
                  label = 37;
                  break L33;
                 }
                 __ZdlPv($105);
                } else {
                 $125 = HEAP32[$3>>2]|0;
                 $126 = HEAP32[$104>>2]|0;
                 $127 = ($125|0)==($126|0);
                 if ($127) {
                  __THREW__ = 0;
                  invoke_vii(59,($2|0),($tbp|0));
                  $130 = __THREW__; __THREW__ = 0;
                  $131 = $130&1;
                  if ($131) {
                   label = 36;
                   break L33;
                  } else {
                   break;
                  }
                 } else {
                  HEAP32[$125>>2] = $117;
                  $128 = HEAP32[$3>>2]|0;
                  $129 = ((($128)) + 4|0);
                  HEAP32[$3>>2] = $129;
                  break;
                 }
                }
               } while(0);
               $134 = (($i$083$us) + 1)|0;
               $135 = HEAP32[$8>>2]|0;
               $136 = HEAP32[$zone_vector>>2]|0;
               $137 = (($135) - ($136))|0;
               $138 = (($137|0) / 40)&-1;
               $139 = ($134>>>0)<($138>>>0);
               $140 = $136;
               if ($139) {
                $i$083$us = $134;$zone_vector$idx11$val$us = $140;
               } else {
                break L30;
               }
              }
              if ((label|0) == 35) {
               $141 = ___cxa_find_matching_catch_2()|0;
               $142 = tempRet0;
               $$index = $141;$$index30 = $142;$$lcssa73 = $$lcssa154;
               label = 43;
               break;
              }
              else if ((label|0) == 36) {
               $143 = ___cxa_find_matching_catch_2()|0;
               $144 = tempRet0;
               $lpad$phi$index = $143;$lpad$phi$index22 = $144;
               label = 9;
               break L4;
              }
              else if ((label|0) == 37) {
               $145 = ___cxa_find_matching_catch_2()|0;
               $146 = tempRet0;
               $$index34 = $145;$$index38 = $146;$$lcssa75 = $$lcssa157;
               label = 50;
               break;
              }
             } else {
              $i$083 = 0;$zone_vector$idx11$val = $102;
              L52: while(1) {
               __THREW__ = 0;
               $148 = (invoke_ii(29,28)|0);
               $149 = __THREW__; __THREW__ = 0;
               $150 = $149&1;
               if ($150) {
                label = 7;
                break;
               }
               $151 = (($zone_vector$idx11$val) + (($i$083*40)|0)|0);
               $152 = (((($zone_vector$idx11$val) + (($i$083*40)|0)|0)) + 28|0);
               __THREW__ = 0;
               invoke_viiii(57,($148|0),($page_image|0),($151|0),($152|0));
               $153 = __THREW__; __THREW__ = 0;
               $154 = $153&1;
               if ($154) {
                $$lcssa159 = $148;
                label = 42;
                break;
               }
               HEAP32[$tbp>>2] = $148;
               $155 = ((($148)) + 16|0);
               $156 = ((($148)) + 20|0);
               $157 = HEAP32[$156>>2]|0;
               $158 = HEAP32[$155>>2]|0;
               $159 = ($157|0)==($158|0);
               $160 = $148;
               do {
                if ($159) {
                 __THREW__ = 0;
                 invoke_vi(60,($148|0));
                 $170 = __THREW__; __THREW__ = 0;
                 $171 = $170&1;
                 if ($171) {
                  $$lcssa163 = $148;
                  label = 49;
                  break L52;
                 }
                 __ZdlPv($148);
                } else {
                 $163 = HEAP32[$3>>2]|0;
                 $164 = HEAP32[$104>>2]|0;
                 $165 = ($163|0)==($164|0);
                 if ($165) {
                  __THREW__ = 0;
                  invoke_vii(59,($2|0),($tbp|0));
                  $168 = __THREW__; __THREW__ = 0;
                  $169 = $168&1;
                  if ($169) {
                   label = 7;
                   break L52;
                  } else {
                   break;
                  }
                 } else {
                  HEAP32[$163>>2] = $160;
                  $166 = HEAP32[$3>>2]|0;
                  $167 = ((($166)) + 4|0);
                  HEAP32[$3>>2] = $167;
                  break;
                 }
                }
               } while(0);
               $174 = (($i$083) + 1)|0;
               $175 = HEAP32[$8>>2]|0;
               $176 = HEAP32[$zone_vector>>2]|0;
               $177 = (($175) - ($176))|0;
               $178 = (($177|0) / 40)&-1;
               $179 = ($174>>>0)<($178>>>0);
               $180 = $176;
               if ($179) {
                $i$083 = $174;$zone_vector$idx11$val = $180;
               } else {
                break L30;
               }
              }
              if ((label|0) == 7) {
               $23 = ___cxa_find_matching_catch_2()|0;
               $24 = tempRet0;
               $lpad$phi$index = $23;$lpad$phi$index22 = $24;
               label = 9;
               break L4;
              }
              else if ((label|0) == 42) {
               $161 = ___cxa_find_matching_catch_2()|0;
               $162 = tempRet0;
               $$index = $161;$$index30 = $162;$$lcssa73 = $$lcssa159;
               label = 43;
               break;
              }
              else if ((label|0) == 49) {
               $172 = ___cxa_find_matching_catch_2()|0;
               $173 = tempRet0;
               $$index34 = $172;$$index38 = $173;$$lcssa75 = $$lcssa163;
               label = 50;
               break;
              }
             }
            } while(0);
            if ((label|0) == 43) {
             __ZdlPv($$lcssa73);
             $$0 = $$index;$$06 = $$index30;
             break L4;
            }
            else if ((label|0) == 50) {
             __ZdlPv($$lcssa75);
             $$0 = $$index34;$$06 = $$index38;
             break L4;
            }
           }
          } while(0);
          $147 = ($6|0)==(0);
          if ($147) {
           label = 99;
          } else {
           $181 = ((($control)) + 16|0);
           $182 = HEAP32[$181>>2]|0;
           $183 = ($182|0)==(0|0);
           if ($183) {
            label = 99;
           } else {
            $184 = ($6|0)>(85);
            if ($184) {
             $185 = ($6|0)>(87);
             $186 = $6 & 1;
             $187 = ($186|0)!=(0);
             $188 = HEAP32[$3>>2]|0;
             $189 = HEAP32[$2>>2]|0;
             $190 = (($188) - ($189))|0;
             $191 = ($190|0)>(0);
             if ($191) {
              $$in109 = $189;$i1$076 = 0;
             } else {
              label = 99;
              break;
             }
             while(1) {
              $192 = $$in109;
              $193 = (($192) + ($i1$076<<2)|0);
              $194 = HEAP32[$193>>2]|0;
              __THREW__ = 0;
              invoke_viiii(61,($194|0),($control|0),($185|0),($187|0));
              $195 = __THREW__; __THREW__ = 0;
              $196 = $195&1;
              if ($196) {
               break;
              }
              $197 = (($i1$076) + 1)|0;
              $198 = HEAP32[$3>>2]|0;
              $199 = HEAP32[$2>>2]|0;
              $200 = (($198) - ($199))|0;
              $201 = $200 >> 2;
              $202 = ($197|0)<($201|0);
              if ($202) {
               $$in109 = $199;$i1$076 = $197;
              } else {
               label = 99;
               break L9;
              }
             }
             $21 = ___cxa_find_matching_catch_2()|0;
             $22 = tempRet0;
             $lpad$phi$index = $21;$lpad$phi$index22 = $22;
             label = 9;
             break L4;
            }
            $$off41 = (($6) + -70)|0;
            $203 = ($$off41>>>0)<(8);
            if ($203) {
             ;HEAP32[$tmp>>2]=HEAP32[$page_image>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$page_image+4>>2]|0;HEAP32[$tmp+8>>2]=HEAP32[$page_image+8>>2]|0;HEAP32[$tmp+12>>2]=HEAP32[$page_image+12>>2]|0;
             $204 = ((($tmp)) + 16|0);
             $205 = ((($page_image)) + 16|0);
             __THREW__ = 0;
             invoke_vii(62,($204|0),($205|0));
             $206 = __THREW__; __THREW__ = 0;
             $207 = $206&1;
             if ($207) {
              label = 8;
              break L4;
             }
             $208 = ((($tmp)) + 28|0);
             $209 = ((($page_image)) + 28|0);
             $210 = HEAP16[$209>>1]|0;
             HEAP16[$208>>1] = $210;
             $211 = $$off41 & 1;
             $212 = ($211|0)==(0);
             L83: do {
              if ($212) {
               label = 80;
              } else {
               $213 = HEAP32[$8>>2]|0;
               $214 = HEAP32[$zone_vector>>2]|0;
               $215 = ($213|0)==($214|0);
               $216 = $214;
               if ($215) {
                label = 80;
               } else {
                $217 = ($6|0)==(71);
                if ($217) {
                 $i2$081$us = 0;$zone_vector$idx12$val$us = $216;
                 while(1) {
                  $218 = (($zone_vector$idx12$val$us) + (($i2$081$us*40)|0)|0);
                  __THREW__ = 0;
                  invoke_vii(63,($tmp|0),($218|0));
                  $219 = __THREW__; __THREW__ = 0;
                  $220 = $219&1;
                  if ($220) {
                   break;
                  }
                  $221 = (($i2$081$us) + 1)|0;
                  $222 = HEAP32[$8>>2]|0;
                  $223 = HEAP32[$zone_vector>>2]|0;
                  $224 = (($222) - ($223))|0;
                  $225 = (($224|0) / 40)&-1;
                  $226 = ($221>>>0)<($225>>>0);
                  $227 = $223;
                  if ($226) {
                   $i2$081$us = $221;$zone_vector$idx12$val$us = $227;
                  } else {
                   label = 80;
                   break L83;
                  }
                 }
                 $228 = ___cxa_find_matching_catch_2()|0;
                 $229 = tempRet0;
                 $lpad$phi51$index = $228;$lpad$phi51$index46 = $229;
                 break;
                } else {
                 $i2$081 = 0;$zone_vector$idx12$val = $216;
                 while(1) {
                  $230 = (($zone_vector$idx12$val) + (($i2$081*40)|0)|0);
                  __THREW__ = 0;
                  invoke_vii(64,($tmp|0),($230|0));
                  $231 = __THREW__; __THREW__ = 0;
                  $232 = $231&1;
                  if ($232) {
                   break;
                  }
                  $257 = (($i2$081) + 1)|0;
                  $258 = HEAP32[$8>>2]|0;
                  $259 = HEAP32[$zone_vector>>2]|0;
                  $260 = (($258) - ($259))|0;
                  $261 = (($260|0) / 40)&-1;
                  $262 = ($257>>>0)<($261>>>0);
                  $263 = $259;
                  if ($262) {
                   $i2$081 = $257;$zone_vector$idx12$val = $263;
                  } else {
                   label = 80;
                   break L83;
                  }
                 }
                 $237 = ___cxa_find_matching_catch_2()|0;
                 $238 = tempRet0;
                 $lpad$phi51$index = $237;$lpad$phi51$index46 = $238;
                 break;
                }
               }
              }
             } while(0);
             L95: do {
              if ((label|0) == 80) {
               $264 = $$off41 & 2;
               $265 = ($264|0)==(0);
               L97: do {
                if (!($265)) {
                 $266 = HEAP32[$3>>2]|0;
                 $267 = HEAP32[$2>>2]|0;
                 $268 = (($266) - ($267))|0;
                 $269 = ($268|0)>(0);
                 if ($269) {
                  $$in108 = $267;$i3$079 = 0;
                  while(1) {
                   $270 = $$in108;
                   $271 = (($270) + ($i3$079<<2)|0);
                   $272 = HEAP32[$271>>2]|0;
                   __THREW__ = 0;
                   invoke_vii(65,($272|0),($tmp|0));
                   $273 = __THREW__; __THREW__ = 0;
                   $274 = $273&1;
                   if ($274) {
                    break;
                   }
                   $275 = (($i3$079) + 1)|0;
                   $276 = HEAP32[$3>>2]|0;
                   $277 = HEAP32[$2>>2]|0;
                   $278 = (($276) - ($277))|0;
                   $279 = $278 >> 2;
                   $280 = ($275|0)<($279|0);
                   if ($280) {
                    $$in108 = $277;$i3$079 = $275;
                   } else {
                    break L97;
                   }
                  }
                  $235 = ___cxa_find_matching_catch_2()|0;
                  $236 = tempRet0;
                  $lpad$phi51$index = $235;$lpad$phi51$index46 = $236;
                  break L95;
                 }
                }
               } while(0);
               $281 = $$off41 & 4;
               $282 = ($281|0)==(0);
               L104: do {
                if (!($282)) {
                 $283 = HEAP32[$3>>2]|0;
                 $284 = HEAP32[$2>>2]|0;
                 $285 = (($283) - ($284))|0;
                 $286 = ($285|0)>(0);
                 if ($286) {
                  $$in = $284;$i4$077 = 0;
                  while(1) {
                   $287 = $$in;
                   $288 = (($287) + ($i4$077<<2)|0);
                   $289 = HEAP32[$288>>2]|0;
                   __THREW__ = 0;
                   invoke_vii(66,($289|0),($tmp|0));
                   $290 = __THREW__; __THREW__ = 0;
                   $291 = $290&1;
                   if ($291) {
                    break;
                   }
                   $292 = (($i4$077) + 1)|0;
                   $293 = HEAP32[$3>>2]|0;
                   $294 = HEAP32[$2>>2]|0;
                   $295 = (($293) - ($294))|0;
                   $296 = $295 >> 2;
                   $297 = ($292|0)<($296|0);
                   if ($297) {
                    $$in = $294;$i4$077 = $292;
                   } else {
                    break L104;
                   }
                  }
                  $233 = ___cxa_find_matching_catch_2()|0;
                  $234 = tempRet0;
                  $lpad$phi51$index = $233;$lpad$phi51$index46 = $234;
                  break L95;
                 }
                }
               } while(0);
               $298 = HEAP32[$181>>2]|0;
               $299 = ((($control)) + 28|0);
               $300 = HEAP8[$299>>0]|0;
               __THREW__ = 0;
               (invoke_iiii(67,($tmp|0),($298|0),($300|0))|0);
               $301 = __THREW__; __THREW__ = 0;
               $302 = $301&1;
               if ($302) {
                $239 = ___cxa_find_matching_catch_2()|0;
                $240 = tempRet0;
                $lpad$phi51$index = $239;$lpad$phi51$index46 = $240;
                break;
               }
               $303 = ((($tmp)) + 16|0);
               $304 = HEAP32[$303>>2]|0;
               $305 = ($304|0)==(0|0);
               if (!($305)) {
                $306 = ((($tmp)) + 20|0);
                $307 = HEAP32[$306>>2]|0;
                $308 = ($307|0)==($304|0);
                if ($308) {
                 $318 = $304;
                } else {
                 $310 = $307;
                 while(1) {
                  $309 = ((($310)) + -12|0);
                  HEAP32[$306>>2] = $309;
                  $311 = HEAP32[$309>>2]|0;
                  $312 = ($311|0)==(0|0);
                  if ($312) {
                   $313 = $309;
                  } else {
                   $315 = ((($310)) + -8|0);
                   $316 = HEAP32[$315>>2]|0;
                   $317 = ($316|0)==($311|0);
                   if (!($317)) {
                    HEAP32[$315>>2] = $311;
                   }
                   __ZdlPv($311);
                   $$pre$i$i$i$i34 = HEAP32[$306>>2]|0;
                   $313 = $$pre$i$i$i$i34;
                  }
                  $314 = ($313|0)==($304|0);
                  if ($314) {
                   break;
                  } else {
                   $310 = $313;
                  }
                 }
                 $$pre$i$i37 = HEAP32[$303>>2]|0;
                 $318 = $$pre$i$i37;
                }
                __ZdlPv($318);
               }
               label = 99;
               break L9;
              }
             } while(0);
             $241 = ((($tmp)) + 16|0);
             $242 = HEAP32[$241>>2]|0;
             $243 = ($242|0)==(0|0);
             if ($243) {
              $$0 = $lpad$phi51$index;$$06 = $lpad$phi51$index46;
              break L4;
             }
             $244 = ((($tmp)) + 20|0);
             $245 = HEAP32[$244>>2]|0;
             $246 = ($245|0)==($242|0);
             if ($246) {
              $256 = $242;
             } else {
              $248 = $245;
              while(1) {
               $247 = ((($248)) + -12|0);
               HEAP32[$244>>2] = $247;
               $249 = HEAP32[$247>>2]|0;
               $250 = ($249|0)==(0|0);
               if ($250) {
                $251 = $247;
               } else {
                $253 = ((($248)) + -8|0);
                $254 = HEAP32[$253>>2]|0;
                $255 = ($254|0)==($249|0);
                if (!($255)) {
                 HEAP32[$253>>2] = $249;
                }
                __ZdlPv($249);
                $$pre$i$i$i$i = HEAP32[$244>>2]|0;
                $251 = $$pre$i$i$i$i;
               }
               $252 = ($251|0)==($242|0);
               if ($252) {
                break;
               } else {
                $248 = $251;
               }
              }
              $$pre$i$i = HEAP32[$241>>2]|0;
              $256 = $$pre$i$i;
             }
             __ZdlPv($256);
             $$0 = $lpad$phi51$index;$$06 = $lpad$phi51$index46;
             break L4;
            } else {
             label = 99;
            }
           }
          }
         }
        }
       } while(0);
       if ((label|0) == 99) {
        $$pr = HEAP32[$zone_vector>>2]|0;
        $320 = $$pr;
       }
       $321 = ($320|0)==(0|0);
       if (!($321)) {
        $322 = HEAP32[$8>>2]|0;
        $323 = ($322|0)==($320|0);
        if ($323) {
         $350 = $320;
        } else {
         $325 = $322;
         while(1) {
          $324 = ((($325)) + -40|0);
          HEAP32[$8>>2] = $324;
          $326 = ((($325)) + -12|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ($327|0)==(0|0);
          $329 = $327;
          if (!($328)) {
           $330 = ((($325)) + -8|0);
           $331 = HEAP32[$330>>2]|0;
           $332 = ($331|0)==($327|0);
           if (!($332)) {
            $scevgep$i$i$i$i$i$i$i$i$i16 = ((($331)) + -4|0);
            $333 = $scevgep$i$i$i$i$i$i$i$i$i16;
            $334 = (($333) - ($329))|0;
            $335 = $334 >>> 2;
            $336 = $335 ^ -1;
            $scevgep4$i$i$i$i$i$i$i$i$i17 = (($331) + ($336<<2)|0);
            HEAP32[$330>>2] = $scevgep4$i$i$i$i$i$i$i$i$i17;
           }
           __ZdlPv($327);
          }
          $337 = ((($325)) + -24|0);
          $338 = HEAP32[$337>>2]|0;
          $339 = ($338|0)==(0|0);
          $340 = $338;
          if (!($339)) {
           $343 = ((($325)) + -20|0);
           $344 = HEAP32[$343>>2]|0;
           $345 = ($344|0)==($338|0);
           if (!($345)) {
            $scevgep$i$i$i$i$i$i$i$i$i$i22 = ((($344)) + -8|0);
            $346 = $scevgep$i$i$i$i$i$i$i$i$i$i22;
            $347 = (($346) - ($340))|0;
            $348 = $347 >>> 3;
            $349 = $348 ^ -1;
            $scevgep4$i$i$i$i$i$i$i$i$i$i23 = (($344) + ($349<<3)|0);
            HEAP32[$343>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i23;
           }
           __ZdlPv($338);
          }
          $341 = HEAP32[$8>>2]|0;
          $342 = ($341|0)==($320|0);
          if ($342) {
           break;
          } else {
           $325 = $341;
          }
         }
         $$pre$i27 = HEAP32[$zone_vector>>2]|0;
         $350 = $$pre$i27;
        }
        __ZdlPv($350);
       }
       STACKTOP = sp;return;
      }
     } while(0);
     if ((label|0) == 8) {
      $25 = ___cxa_find_matching_catch_2()|0;
      $26 = tempRet0;
      $lpad$phi$index = $25;$lpad$phi$index22 = $26;
      label = 9;
     }
     if ((label|0) == 9) {
      $$0 = $lpad$phi$index;$$06 = $lpad$phi$index22;
     }
     $351 = HEAP32[$zone_vector>>2]|0;
     $352 = ($351|0)==(0|0);
     if (!($352)) {
      $353 = HEAP32[$8>>2]|0;
      $354 = ($353|0)==($351|0);
      if ($354) {
       $381 = $351;
      } else {
       $356 = $353;
       while(1) {
        $355 = ((($356)) + -40|0);
        HEAP32[$8>>2] = $355;
        $357 = ((($356)) + -12|0);
        $358 = HEAP32[$357>>2]|0;
        $359 = ($358|0)==(0|0);
        $360 = $358;
        if (!($359)) {
         $361 = ((($356)) + -8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($358|0);
         if (!($363)) {
          $scevgep$i$i$i$i$i$i$i$i$i = ((($362)) + -4|0);
          $364 = $scevgep$i$i$i$i$i$i$i$i$i;
          $365 = (($364) - ($360))|0;
          $366 = $365 >>> 2;
          $367 = $366 ^ -1;
          $scevgep4$i$i$i$i$i$i$i$i$i = (($362) + ($367<<2)|0);
          HEAP32[$361>>2] = $scevgep4$i$i$i$i$i$i$i$i$i;
         }
         __ZdlPv($358);
        }
        $368 = ((($356)) + -24|0);
        $369 = HEAP32[$368>>2]|0;
        $370 = ($369|0)==(0|0);
        $371 = $369;
        if (!($370)) {
         $374 = ((($356)) + -20|0);
         $375 = HEAP32[$374>>2]|0;
         $376 = ($375|0)==($369|0);
         if (!($376)) {
          $scevgep$i$i$i$i$i$i$i$i$i$i = ((($375)) + -8|0);
          $377 = $scevgep$i$i$i$i$i$i$i$i$i$i;
          $378 = (($377) - ($371))|0;
          $379 = $378 >>> 3;
          $380 = $379 ^ -1;
          $scevgep4$i$i$i$i$i$i$i$i$i$i = (($375) + ($380<<3)|0);
          HEAP32[$374>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i;
         }
         __ZdlPv($369);
        }
        $372 = HEAP32[$8>>2]|0;
        $373 = ($372|0)==($351|0);
        if ($373) {
         break;
        } else {
         $356 = $372;
        }
       }
       $$pre$i = HEAP32[$zone_vector>>2]|0;
       $381 = $$pre$i;
      }
      __ZdlPv($381);
     }
     $382 = HEAP32[$2>>2]|0;
     $383 = ($382|0)==(0|0);
     $384 = $382;
     if (!($383)) {
      $385 = HEAP32[$3>>2]|0;
      $386 = ($385|0)==($382|0);
      if (!($386)) {
       $scevgep$i$i$i = ((($385)) + -4|0);
       $387 = $scevgep$i$i$i;
       $388 = (($387) - ($384))|0;
       $389 = $388 >>> 2;
       $390 = $389 ^ -1;
       $scevgep4$i$i$i = (($385) + ($390<<2)|0);
       HEAP32[$3>>2] = $scevgep4$i$i$i;
      }
      __ZdlPv($382);
     }
     __THREW__ = 0;
     invoke_vi(27,($0|0));
     $391 = __THREW__; __THREW__ = 0;
     $392 = $391&1;
     if ($392) {
      $393 = ___cxa_find_matching_catch_3(0|0)|0;
      $394 = tempRet0;
      ___clang_call_terminate($393);
      // unreachable;
     } else {
      ___resumeException($$0|0);
      // unreachable;
     }
    }
    function __ZN12_GLOBAL__N_19scan_pageERK10Page_imageRNSt3__16vectorINS_4ZoneENS3_9allocatorIS5_EEEEib($page_image,$zone_vector,$debug_level,$layout) {
     $page_image = $page_image|0;
     $zone_vector = $zone_vector|0;
     $debug_level = $debug_level|0;
     $layout = $layout|0;
     var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i13 = 0, $$0$i17$i$i = 0, $$0$i17$i$i$i = 0, $$0$i17$i$i87$i = 0, $$0$i18$i$i = 0, $$0$i18$i$i$i = 0, $$0$i18$i$i88$i = 0, $$0$lcssa$i$i$i$i = 0, $$0$lcssa$i$i5$i$i = 0, $$01 = 0, $$01$i$i = 0, $$01$i$i$i = 0, $$01$i$i$i$i = 0, $$01$i$i$i$i$i = 0, $$01$i$i$i$i98$i = 0, $$01$i$i171$i = 0, $$01$i$i178 = 0;
     var $$01$i$i188 = 0, $$01$i$i193$i = 0, $$01$i$i199 = 0, $$01$i$i201$i = 0, $$01$i$i221$i = 0, $$01$i$i249$i = 0, $$01$i$i259$i = 0, $$01$i$i270$i = 0, $$012$i$i$i$i = 0, $$012$i$i$i230$i = 0, $$03$i = 0, $$03$i$i$i$i = 0, $$03$i$i$i229$i = 0, $$04$i = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$byval_copy145 = 0;
     var $$byval_copy146 = 0, $$byval_copy147 = 0, $$byval_copy148 = 0, $$byval_copy149 = 0, $$cast$i = 0, $$cast$i141 = 0, $$cast$lcssa$i = 0, $$cast453$i = 0, $$cast455$i = 0, $$idx$i = 0, $$in$i = 0, $$in$i131 = 0, $$lcssa = 0, $$lcssa326$i = 0, $$lcssa728 = 0, $$lcssa729 = 0, $$lcssa730 = 0, $$lcssa731 = 0, $$lcssa732 = 0, $$lcssa736 = 0;
     var $$lcssa738 = 0, $$lcssa749 = 0, $$lcssa752 = 0, $$lcssa758 = 0, $$lcssa760 = 0, $$lcssa761 = 0, $$lcssa762 = 0, $$lcssa763 = 0, $$lcssa765 = 0, $$lcssa768 = 0, $$lcssa769 = 0, $$lcssa770 = 0, $$lcssa771 = 0, $$lcssa772 = 0, $$lcssa773 = 0, $$lcssa776 = 0, $$lcssa780 = 0, $$lcssa781 = 0, $$lcssa784 = 0, $$lcssa787 = 0;
     var $$lcssa790 = 0, $$lcssa791 = 0, $$lcssa797 = 0, $$lcssa799 = 0, $$lcssa803 = 0, $$lcssa805 = 0, $$lcssa806 = 0, $$lcssa808 = 0, $$lcssa809 = 0, $$lcssa810 = 0, $$lcssa812 = 0, $$lcssa813 = 0, $$lcssa814 = 0, $$lcssa815 = 0, $$lcssa816 = 0, $$lcssa818 = 0, $$lcssa819 = 0, $$lcssa820 = 0, $$neg293$i = 0, $$pre = 0;
     var $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i106$i = 0, $$pre$i$i$i125 = 0, $$pre$i$i126 = 0, $$pre$i$i81$i = 0, $$pre$i116 = 0, $$pre$i143 = 0, $$pre$i211$i = 0, $$pre$i232$i = 0, $$pre$i58 = 0, $$pre$i67 = 0, $$pre$i67$i = 0, $$pre$i75 = 0, $$pre$i83$i = 0, $$pre$i87 = 0, $$pre$i97 = 0, $$pre$phi$i$iZ2D = 0;
     var $$pre$phi$i142Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$pre20$i = 0, $$pre20$i107 = 0, $$pre20$i96 = 0, $$pre21$i = 0, $$pre21$i108 = 0, $$pre22$i = 0, $$pre23$i = 0, $$pre27$i$i = 0, $$pre27$i$i$i = 0, $$pre27$i$i107$i = 0, $$pre427 = 0, $$pre428 = 0, $$pre429 = 0, $$pre430 = 0, $$pre432 = 0, $$pre433 = 0, $$pre434 = 0;
     var $$pre435 = 0, $$pre436 = 0, $$pre437 = 0, $$pre438 = 0, $$pre439 = 0, $$pre440 = 0, $$pre441 = 0, $$pre442 = 0, $$pre539$i = 0, $$pre540$i = 0, $$pre542$i = 0, $$pre546$i = 0, $$pre7$i = 0, $$pre7$i86 = 0, $$pre8$i = 0, $$sroa$010$0$i = 0, $$sroa$09$0$i = 0, $$sroa$09$0$i$lcssa = 0, $0 = 0, $1 = 0;
     var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
     var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
     var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
     var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
     var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
     var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
     var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
     var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
     var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
     var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
     var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
     var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
     var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
     var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
     var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
     var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
     var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
     var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
     var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
     var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
     var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
     var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
     var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
     var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
     var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
     var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
     var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
     var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
     var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
     var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
     var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
     var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
     var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
     var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
     var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
     var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
     var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
     var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
     var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
     var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
     var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
     var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
     var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
     var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
     var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
     var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
     var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
     var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
     var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
     var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
     var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
     var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
     var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
     var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
     var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
     var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
     var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0;
     var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
     var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
     var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
     var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
     var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
     var $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0;
     var $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0;
     var $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0;
     var $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0;
     var $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0;
     var $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0;
     var $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0;
     var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
     var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
     var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
     var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
     var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
     var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
     var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
     var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
     var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
     var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
     var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
     var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
     var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
     var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
     var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
     var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
     var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
     var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
     var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
     var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
     var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
     var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
     var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
     var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
     var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
     var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
     var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
     var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
     var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
     var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
     var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
     var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
     var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
     var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
     var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
     var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
     var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
     var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
     var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
     var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
     var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
     var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
     var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__new_last2$i$i$i$i = 0;
     var $__new_last2$i$i$i$i$i = 0, $__new_last2$i$i$i$i62$i = 0, $__new_last2$i$i$i$i77 = 0, $__new_last2$i$i$i$i88 = 0, $__t$i$i = 0, $__v$sroa$15$2$i$i = 0, $__v$sroa$15$2$i$i$i = 0, $__v$sroa$15$2$i$i126$i = 0, $__v$sroa$6$0$i$i = 0, $__v$sroa$6$0$i$i$i = 0, $__v$sroa$6$0$i$i$i$lcssa = 0, $__v$sroa$6$0$i$i$i$lcssa794 = 0, $__v$sroa$6$0$i$i$lcssa = 0, $__v$sroa$6$0$i$i$lcssa800 = 0, $__v$sroa$6$0$i$i97$i = 0, $__v$sroa$6$0$i$i97$i$lcssa = 0, $__v$sroa$6$0$i$i97$i$lcssa733 = 0, $__v$sroa$6$3$i$i = 0, $__v$sroa$6$3$i$i$i = 0, $__v$sroa$6$3$i$i125$i = 0;
     var $begin$0436$i = 0, $begin$1$i = 0, $blobp_vector = 0, $botmax$0440$i = 0, $bvi$01$i = 0, $c$01$i = 0, $c$01$i103 = 0, $c$1$i = 0, $c$1$i104 = 0, $c$2$i = 0, $c$2$i105 = 0, $c$37$i = 0, $c$37$i111 = 0, $c$4$i = 0, $c$4$i112 = 0, $c$5$i = 0, $c$5$i113 = 0, $col$02$i = 0, $col$0334 = 0, $col1$08$i = 0;
     var $cut$0437$i = 0, $cut_index_vector$i = 0, $eh$lpad$body$i$i$i$index36Z2D = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, $eh$lpad$body$i$i$index121Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i127$i$index66Z2D = 0, $eh$lpad$body$i$i127$i$indexZ2D = 0, $eh$lpad$body$i$index51Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body144$i$index81Z2D = 0, $eh$lpad$body144$i$indexZ2D = 0, $eh$lpad$body218$i$index101Z2D = 0, $eh$lpad$body218$i$indexZ2D = 0, $eh$lpad$body61$index136Z2D = 0, $eh$lpad$body61$indexZ2D = 0, $eh$lpad$body74$index14Z2D = 0, $eh$lpad$body74$indexZ2D = 0, $exitcond = 0, $first$0446$i = 0;
     var $first$1$i = 0, $first$1$i$lcssa = 0, $first3$0412$i = 0, $from$011$i = 0, $i$010$i = 0, $i$015$i = 0, $i$015$i101 = 0, $i$0333 = 0, $i$0454$i = 0, $i$06$i = 0, $i1$0441$i = 0, $i2$0414$i = 0, $i2$0414$i$phi = 0, $i5$0418$i = 0, $i6$0424$i = 0, $i7$0428$i = 0, $i8$0434$i = 0, $j$0447$i = 0, $j$1$i = 0, $j4$0$first3$0$i = 0;
     var $j4$0$first3$0$i$lcssa = 0, $j4$0413$i = 0, $join$0$off0$lcssa$i = 0, $join$2$off0$lcssa$i = 0, $new_data = 0, $new_data$idx$val = 0, $not$$i = 0, $old_data = 0, $old_data$idx$val = 0, $old_data$idx4$val = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i85 = 0, $or$cond416$i = 0, $or$cond539 = 0, $or$cond6$i = 0, $or$cond6422$i = 0, $p = 0, $row$02$i = 0, $row$0337 = 0;
     var $row1$08$i = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i128 = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i136$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i130$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i116$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i101$i = 0;
     var $scevgep$i$i$i$i$i$i$i$i$i$i136 = 0, $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i110$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i241$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i68$i = 0, $scevgep$i$i$i$i$i$i$i$i$i235$i = 0, $scevgep$i$i$i$i$i$i$i$i120 = 0, $scevgep$i$i$i$i$i$i$i$i91$i = 0, $scevgep$i$i$i$i$i$i$i146 = 0, $scevgep$i$i$i$i$i$i$i73$i = 0, $scevgep$i$i$i$i$i152 = 0, $scevgep$i$i$i$i$i153$i = 0, $scevgep$i$i$i$i$i16$i$i = 0, $scevgep$i$i$i$i$i164$i = 0, $scevgep$i$i$i$i$i213$i = 0, $scevgep$i$i$i$i$i52 = 0, $scevgep$i$i$i$i$i57$i = 0, $scevgep$i$i$i$i$i6$i$i = 0, $scevgep$i$i$i$i11$i$i = 0;
     var $scevgep$i$i$i$i132 = 0, $scevgep$i$i$i$i14 = 0, $scevgep$i$i$i$i148$i = 0, $scevgep$i$i$i$i159$i = 0, $scevgep$i$i$i$i172 = 0, $scevgep$i$i$i$i172$i = 0, $scevgep$i$i$i$i179 = 0, $scevgep$i$i$i$i189 = 0, $scevgep$i$i$i$i194$i = 0, $scevgep$i$i$i$i200 = 0, $scevgep$i$i$i$i202$i = 0, $scevgep$i$i$i$i222$i = 0, $scevgep$i$i$i$i250$i = 0, $scevgep$i$i$i$i260$i = 0, $scevgep$i$i$i$i271$i = 0, $scevgep$i$i$i$i42 = 0, $scevgep$i$i$i$i42$i = 0, $scevgep$i$i$i$i45$i = 0, $scevgep$i$i$i$i47 = 0, $scevgep$i$i$i$i52$i = 0;
     var $scevgep$i$i$i$i63$i = 0, $scevgep$i$i$i$i68 = 0, $scevgep$i$i$i$i78 = 0, $scevgep$i$i$i$i89 = 0, $scevgep$i$i$i183$i = 0, $scevgep$i$i$i186$i = 0, $scevgep$i$i$i22 = 0, $scevgep$i$i$i27 = 0, $scevgep$i$i$i32 = 0, $scevgep$i$i$i37 = 0, $scevgep$i$i$i7 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i = 0;
     var $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i129 = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i137$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i131$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i117$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i102$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i137 = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i242$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i111$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i69$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i236$i = 0, $scevgep4$i$i$i$i$i$i$i$i121 = 0, $scevgep4$i$i$i$i$i$i$i$i92$i = 0, $scevgep4$i$i$i$i$i$i$i147 = 0;
     var $scevgep4$i$i$i$i$i$i$i74$i = 0, $scevgep4$i$i$i$i$i153 = 0, $scevgep4$i$i$i$i$i154$i = 0, $scevgep4$i$i$i$i$i165$i = 0, $scevgep4$i$i$i$i$i17$i$i = 0, $scevgep4$i$i$i$i$i214$i = 0, $scevgep4$i$i$i$i$i53 = 0, $scevgep4$i$i$i$i$i58$i = 0, $scevgep4$i$i$i$i$i7$i$i = 0, $scevgep4$i$i$i$i12$i$i = 0, $scevgep4$i$i$i$i133 = 0, $scevgep4$i$i$i$i149$i = 0, $scevgep4$i$i$i$i15 = 0, $scevgep4$i$i$i$i160$i = 0, $scevgep4$i$i$i$i173 = 0, $scevgep4$i$i$i$i173$i = 0, $scevgep4$i$i$i$i180 = 0, $scevgep4$i$i$i$i190 = 0, $scevgep4$i$i$i$i195$i = 0, $scevgep4$i$i$i$i201 = 0;
     var $scevgep4$i$i$i$i203$i = 0, $scevgep4$i$i$i$i223$i = 0, $scevgep4$i$i$i$i251$i = 0, $scevgep4$i$i$i$i261$i = 0, $scevgep4$i$i$i$i272$i = 0, $scevgep4$i$i$i$i43 = 0, $scevgep4$i$i$i$i43$i = 0, $scevgep4$i$i$i$i46$i = 0, $scevgep4$i$i$i$i48 = 0, $scevgep4$i$i$i$i53$i = 0, $scevgep4$i$i$i$i64$i = 0, $scevgep4$i$i$i$i69 = 0, $scevgep4$i$i$i$i79 = 0, $scevgep4$i$i$i$i90 = 0, $scevgep4$i$i$i184$i = 0, $scevgep4$i$i$i187$i = 0, $scevgep4$i$i$i23 = 0, $scevgep4$i$i$i28 = 0, $scevgep4$i$i$i33 = 0, $scevgep4$i$i$i38 = 0;
     var $scevgep4$i$i$i8 = 0, $to$0$lcssa$i = 0, $to$013$i = 0, $to$1$i = 0, $zi$02$i = 0, $zone_vector$idx$val = 0, $zone_vector$idx$val$i = 0, $zone_vector$idx$val$i140 = 0, $zone_vector$idx10$val$i = 0, $zone_vector$idx10$val$pre$i = 0, $zone_vector$idx10$val537$i = 0, $zone_vector$idx13$val$i = 0, $zone_vector$idx15$val$i = 0, $zone_vector$idx17$val$i = 0, $zone_vector$idx20$val$i = 0, $zone_vector$idx20$val$pre$i = 0, $zone_vector$idx22$val$i = 0, $zone_vector$idx24$val$i = 0, $zone_vector$idx24$val$lcssa$i = 0, $zone_vector$idx24$val427$i = 0;
     var $zone_vector$idx24$val429$i = 0, $zone_vector$idx26$val$i = 0, $zone_vector$idx29$val$i = 0, $zone_vector$idx30$val$i = 0, $zone_vector$idx33$val287288$i = 0, $zone_vector$idx6$val = 0, $zone_vector$idx6$val$in = 0, $zone_vector$idx7$val$i = 0, $zone_vector$idx8$val$i = 0, $zone_vector$idx9$val$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $$byval_copy149 = sp + 276|0;
     $$byval_copy148 = sp + 272|0;
     $$byval_copy147 = sp + 268|0;
     $$byval_copy146 = sp + 264|0;
     $$byval_copy145 = sp + 260|0;
     $$byval_copy = sp + 256|0;
     $__t$i$i = sp + 216|0;
     $0 = sp + 212|0;
     $1 = sp + 208|0;
     $2 = sp + 204|0;
     $3 = sp + 200|0;
     $4 = sp + 196|0;
     $5 = sp + 192|0;
     $6 = sp + 152|0;
     $7 = sp + 144|0;
     $8 = sp + 104|0;
     $9 = sp + 100|0;
     $cut_index_vector$i = sp + 88|0;
     $10 = sp + 84|0;
     $11 = sp + 80|0;
     $blobp_vector = sp + 68|0;
     $old_data = sp + 56|0;
     $new_data = sp + 44|0;
     $p = sp + 40|0;
     $12 = sp;
     $13 = ((($page_image)) + 29|0);
     $14 = HEAP8[$13>>0]|0;
     HEAP32[$blobp_vector>>2] = 0;
     $15 = ((($blobp_vector)) + 4|0);
     HEAP32[$15>>2] = 0;
     $16 = ((($blobp_vector)) + 8|0);
     HEAP32[$16>>2] = 0;
     $17 = ((($page_image)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[$page_image>>2]|0;
     $20 = (($18) + 1)|0;
     $21 = (($20) - ($19))|0;
     HEAP32[$old_data>>2] = 0;
     $22 = ((($old_data)) + 4|0);
     HEAP32[$22>>2] = 0;
     $23 = ((($old_data)) + 8|0);
     HEAP32[$23>>2] = 0;
     $24 = ($20|0)==($19|0);
     do {
      if ($24) {
       $51 = $18;$53 = $19;
       label = 12;
      } else {
       $25 = ($21>>>0)>(1073741823);
       if ($25) {
        __THREW__ = 0;
        invoke_vi(46,($old_data|0));
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if (!($27)) {
         label = 4;
        }
       } else {
        label = 4;
       }
       if ((label|0) == 4) {
        $28 = $21 << 2;
        __THREW__ = 0;
        $29 = (invoke_ii(29,($28|0))|0);
        $30 = __THREW__; __THREW__ = 0;
        $31 = $30&1;
        if (!($31)) {
         HEAP32[$22>>2] = $29;
         HEAP32[$old_data>>2] = $29;
         $32 = (($29) + ($21<<2)|0);
         $33 = ((($old_data)) + 8|0);
         HEAP32[$33>>2] = $32;
         $$0$i$i = $21;$34 = $29;
         while(1) {
          HEAP32[$34>>2] = 0;
          $35 = HEAP32[$22>>2]|0;
          $36 = ((($35)) + 4|0);
          HEAP32[$22>>2] = $36;
          $37 = (($$0$i$i) + -1)|0;
          $38 = ($37|0)==(0);
          if ($38) {
           break;
          } else {
           $$0$i$i = $37;$34 = $36;
          }
         }
         $$pre = HEAP32[$17>>2]|0;
         $$pre427 = HEAP32[$page_image>>2]|0;
         $51 = $$pre;$53 = $$pre427;
         label = 12;
         break;
        }
       }
       $39 = ___cxa_find_matching_catch_2()|0;
       $40 = tempRet0;
       $41 = HEAP32[$old_data>>2]|0;
       $42 = ($41|0)==(0|0);
       $43 = $41;
       if (!($42)) {
        $44 = HEAP32[$22>>2]|0;
        $45 = ($44|0)==($41|0);
        if (!($45)) {
         $scevgep$i$i$i$i = ((($44)) + -4|0);
         $46 = $scevgep$i$i$i$i;
         $47 = (($46) - ($43))|0;
         $48 = $47 >>> 2;
         $49 = $48 ^ -1;
         $scevgep4$i$i$i$i = (($44) + ($49<<2)|0);
         HEAP32[$22>>2] = $scevgep4$i$i$i$i;
        }
        __ZdlPv($41);
       }
       $$2 = $39;$$23 = $40;
      }
     } while(0);
     if ((label|0) == 12) {
      $50 = (($51) + 1)|0;
      $52 = (($50) - ($53))|0;
      HEAP32[$new_data>>2] = 0;
      $54 = ((($new_data)) + 4|0);
      HEAP32[$54>>2] = 0;
      $55 = ((($new_data)) + 8|0);
      HEAP32[$55>>2] = 0;
      $56 = ($50|0)==($53|0);
      do {
       if ($56) {
        $2211 = 0;
        label = 23;
       } else {
        $57 = ($52>>>0)>(1073741823);
        if ($57) {
         __THREW__ = 0;
         invoke_vi(46,($new_data|0));
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if (!($59)) {
          label = 15;
         }
        } else {
         label = 15;
        }
        if ((label|0) == 15) {
         $60 = $52 << 2;
         __THREW__ = 0;
         $61 = (invoke_ii(29,($60|0))|0);
         $62 = __THREW__; __THREW__ = 0;
         $63 = $62&1;
         if (!($63)) {
          HEAP32[$54>>2] = $61;
          HEAP32[$new_data>>2] = $61;
          $64 = (($61) + ($52<<2)|0);
          $65 = ((($new_data)) + 8|0);
          HEAP32[$65>>2] = $64;
          $$0$i$i13 = $52;$66 = $61;
          while(1) {
           HEAP32[$66>>2] = 0;
           $67 = HEAP32[$54>>2]|0;
           $68 = ((($67)) + 4|0);
           HEAP32[$54>>2] = $68;
           $69 = (($$0$i$i13) + -1)|0;
           $70 = ($69|0)==(0);
           if ($70) {
            $$lcssa820 = $68;
            break;
           } else {
            $$0$i$i13 = $69;$66 = $68;
           }
          }
          $82 = $$lcssa820;
          $2211 = $82;
          label = 23;
          break;
         }
        }
        $71 = ___cxa_find_matching_catch_2()|0;
        $72 = tempRet0;
        $73 = HEAP32[$new_data>>2]|0;
        $74 = ($73|0)==(0|0);
        $75 = $73;
        if (!($74)) {
         $76 = HEAP32[$54>>2]|0;
         $77 = ($76|0)==($73|0);
         if (!($77)) {
          $scevgep$i$i$i$i14 = ((($76)) + -4|0);
          $78 = $scevgep$i$i$i$i14;
          $79 = (($78) - ($75))|0;
          $80 = $79 >>> 2;
          $81 = $80 ^ -1;
          $scevgep4$i$i$i$i15 = (($76) + ($81<<2)|0);
          HEAP32[$54>>2] = $scevgep4$i$i$i$i15;
         }
         __ZdlPv($73);
        }
        $$1 = $71;$$12 = $72;
       }
      } while(0);
      if ((label|0) == 23) {
       $83 = ((($page_image)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ((($page_image)) + 12|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($84|0)>($86|0);
       L39: do {
        if ($87) {
         label = 25;
        } else {
         $88 = ((($old_data)) + 8|0);
         $89 = ((($new_data)) + 8|0);
         $90 = ((($page_image)) + 16|0);
         $91 = ((($blobp_vector)) + 8|0);
         $$pre429 = HEAP32[$17>>2]|0;
         $116 = $2211;$121 = $$pre429;$2212 = $86;$row$0337 = $84;
         L41: while(1) {
          $113 = HEAP32[$old_data>>2]|0;
          $114 = HEAP32[$new_data>>2]|0;
          HEAP32[$old_data>>2] = $114;
          HEAP32[$new_data>>2] = $113;
          $115 = HEAP32[$22>>2]|0;
          HEAP32[$22>>2] = $116;
          HEAP32[$54>>2] = $115;
          $117 = HEAP32[$88>>2]|0;
          $118 = HEAP32[$89>>2]|0;
          HEAP32[$88>>2] = $118;
          HEAP32[$89>>2] = $117;
          $119 = HEAP32[$page_image>>2]|0;
          $120 = ($119|0)>($121|0);
          if ($120) {
           $123 = $2212;$2213 = $121;
          } else {
           $126 = $119;$149 = $121;$col$0334 = $119;
           while(1) {
            $125 = (($col$0334) - ($126))|0;
            $127 = HEAP32[$83>>2]|0;
            $128 = (($row$0337) - ($127))|0;
            $129 = HEAP32[$90>>2]|0;
            $130 = (($129) + (($128*12)|0)|0);
            $131 = HEAP32[$130>>2]|0;
            $132 = (($131) + ($125)|0);
            $133 = HEAP8[$132>>0]|0;
            $134 = ($133&255)>($14&255);
            if ($134) {
             $135 = HEAP32[$new_data>>2]|0;
             $136 = (($135) + ($125<<2)|0);
             HEAP32[$136>>2] = 0;
             $268 = $149;
            } else {
             $137 = ($125|0)>(0);
             if ($137) {
              $138 = (($125) + -1)|0;
              $139 = HEAP32[$new_data>>2]|0;
              $140 = (($139) + ($138<<2)|0);
              $141 = HEAP32[$140>>2]|0;
              $142 = HEAP32[$old_data>>2]|0;
              $143 = (($142) + ($138<<2)|0);
              $144 = HEAP32[$143>>2]|0;
              $146 = $142;$153 = $141;$157 = $144;
             } else {
              $$pre432 = HEAP32[$old_data>>2]|0;
              $146 = $$pre432;$153 = 0;$157 = 0;
             }
             $145 = (($146) + ($125<<2)|0);
             $147 = HEAP32[$145>>2]|0;
             $148 = ($col$0334|0)<($149|0);
             if ($148) {
              $150 = (($125) + 1)|0;
              $151 = (($146) + ($150<<2)|0);
              $152 = HEAP32[$151>>2]|0;
              $164 = $152;
             } else {
              $164 = 0;
             }
             $154 = ($153|0)==(0|0);
             do {
              if ($154) {
               $158 = ($157|0)==(0|0);
               if (!($158)) {
                HEAP32[$p>>2] = $157;
                __THREW__ = 0;
                invoke_viii(68,($157|0),($row$0337|0),($col$0334|0));
                $159 = __THREW__; __THREW__ = 0;
                $160 = $159&1;
                if ($160) {
                 label = 36;
                 break L41;
                } else {
                 $201 = $157;
                 label = 66;
                 break;
                }
               }
               $161 = ($147|0)==(0|0);
               if (!($161)) {
                HEAP32[$p>>2] = $147;
                __THREW__ = 0;
                invoke_viii(68,($147|0),($row$0337|0),($col$0334|0));
                $162 = __THREW__; __THREW__ = 0;
                $163 = $162&1;
                if ($163) {
                 label = 36;
                 break L41;
                } else {
                 $201 = $147;
                 label = 66;
                 break;
                }
               }
               $165 = ($164|0)==(0|0);
               if (!($165)) {
                HEAP32[$p>>2] = $164;
                __THREW__ = 0;
                invoke_viii(68,($164|0),($row$0337|0),($col$0334|0));
                $166 = __THREW__; __THREW__ = 0;
                $167 = $166&1;
                if ($167) {
                 label = 36;
                 break L41;
                }
                $168 = $164;
                $169 = HEAP32[$new_data>>2]|0;
                $170 = (($169) + ($125<<2)|0);
                HEAP32[$170>>2] = $168;
                break;
               }
               __THREW__ = 0;
               $171 = (invoke_ii(29,40)|0);
               $172 = __THREW__; __THREW__ = 0;
               $173 = $172&1;
               if ($173) {
                label = 36;
                break L41;
               }
               __THREW__ = 0;
               invoke_viiiii(69,($171|0),($col$0334|0),($row$0337|0),($col$0334|0),($row$0337|0));
               $174 = __THREW__; __THREW__ = 0;
               $175 = $174&1;
               if ($175) {
                $$lcssa818 = $171;
                label = 64;
                break L41;
               }
               $176 = ((($171)) + 28|0);
               HEAP32[$176>>2] = 0;
               $177 = ((($171)) + 32|0);
               HEAP32[$177>>2] = 0;
               $178 = ((($171)) + 36|0);
               HEAP32[$178>>2] = 0;
               HEAP32[$p>>2] = $171;
               $179 = ((($171)) + 4|0);
               $180 = HEAP32[$179>>2]|0;
               $181 = (($row$0337) - ($180))|0;
               $182 = ((($171)) + 16|0);
               $183 = HEAP32[$182>>2]|0;
               $184 = HEAP32[$171>>2]|0;
               $185 = (($col$0334) - ($184))|0;
               $186 = (($183) + (($181*12)|0)|0);
               $187 = HEAP32[$186>>2]|0;
               $188 = (($187) + ($185)|0);
               HEAP8[$188>>0] = 1;
               $189 = HEAP32[$15>>2]|0;
               $190 = HEAP32[$91>>2]|0;
               $191 = ($189|0)==($190|0);
               $192 = $171;
               if ($191) {
                __THREW__ = 0;
                invoke_vii(70,($blobp_vector|0),($p|0));
                $195 = __THREW__; __THREW__ = 0;
                $196 = $195&1;
                if ($196) {
                 label = 36;
                 break L41;
                }
               } else {
                HEAP32[$189>>2] = $192;
                $193 = HEAP32[$15>>2]|0;
                $194 = ((($193)) + 4|0);
                HEAP32[$15>>2] = $194;
               }
               $199 = HEAP32[$new_data>>2]|0;
               $200 = (($199) + ($125<<2)|0);
               HEAP32[$200>>2] = $192;
              } else {
               HEAP32[$p>>2] = $153;
               __THREW__ = 0;
               invoke_viii(68,($153|0),($row$0337|0),($col$0334|0));
               $155 = __THREW__; __THREW__ = 0;
               $156 = $155&1;
               if ($156) {
                label = 36;
                break L41;
               } else {
                $201 = $153;
                label = 66;
               }
              }
             } while(0);
             do {
              if ((label|0) == 66) {
               label = 0;
               $202 = $201;
               $203 = HEAP32[$new_data>>2]|0;
               $204 = (($203) + ($125<<2)|0);
               HEAP32[$204>>2] = $202;
               $205 = ($164|0)==(0|0);
               $206 = ($201|0)==($164|0);
               $or$cond = $205 | $206;
               if (!($or$cond)) {
                $old_data$idx4$val = HEAP32[$22>>2]|0;
                $new_data$idx$val = HEAP32[$new_data>>2]|0;
                $207 = $201;
                $208 = $164;
                $209 = ((($201)) + 4|0);
                $210 = HEAP32[$209>>2]|0;
                $211 = ((($164)) + 4|0);
                $212 = HEAP32[$211>>2]|0;
                $213 = ($210|0)>($212|0);
                if ($213) {
                 $214 = (($125) + 1)|0;
                 $215 = (($new_data$idx$val) + ($214<<2)|0);
                 $216 = ($214|0)==(0);
                 if ($216) {
                  $$sroa$010$0$i = $208;$$sroa$09$0$i = $207;
                 } else {
                  $218 = $new_data$idx$val;
                  while(1) {
                   $217 = HEAP32[$218>>2]|0;
                   $219 = ($217|0)==($201|0);
                   if ($219) {
                    HEAP32[$218>>2] = $208;
                   }
                   $220 = ((($218)) + 4|0);
                   $221 = ($220|0)==($215|0);
                   if ($221) {
                    $$sroa$010$0$i = $208;$$sroa$09$0$i = $207;
                    break;
                   } else {
                    $218 = $220;
                   }
                  }
                 }
                } else {
                 $old_data$idx$val = HEAP32[$old_data>>2]|0;
                 $222 = (($old_data$idx$val) + ($125<<2)|0);
                 $223 = ($222|0)==($old_data$idx4$val|0);
                 if ($223) {
                  $$sroa$010$0$i = $207;$$sroa$09$0$i = $208;
                 } else {
                  $225 = $222;
                  while(1) {
                   $224 = HEAP32[$225>>2]|0;
                   $226 = ($224|0)==($164|0);
                   if ($226) {
                    HEAP32[$225>>2] = $207;
                   }
                   $227 = ((($225)) + 4|0);
                   $228 = ($227|0)==($old_data$idx4$val|0);
                   if ($228) {
                    $$sroa$010$0$i = $207;$$sroa$09$0$i = $208;
                    break;
                   } else {
                    $225 = $227;
                   }
                  }
                 }
                }
                $229 = HEAP32[$15>>2]|0;
                $230 = HEAP32[$blobp_vector>>2]|0;
                $231 = (($229) - ($230))|0;
                $232 = $231 >> 2;
                $$cast$i = $230;
                $233 = $$sroa$09$0$i;
                $$0$i = $232;
                while(1) {
                 $234 = (($$0$i) + -1)|0;
                 $235 = ($$0$i|0)>(0);
                 if (!($235)) {
                  $$lcssa816 = $234;
                  label = 79;
                  break;
                 }
                 $236 = (($$cast$i) + ($234<<2)|0);
                 $237 = HEAP32[$236>>2]|0;
                 $238 = ($237|0)==($233|0);
                 if ($238) {
                  $242 = $$cast$i;$243 = $234;$247 = $229;
                  break;
                 } else {
                  $$0$i = $234;
                 }
                }
                if ((label|0) == 79) {
                 label = 0;
                 __THREW__ = 0;
                 invoke_vi(47,(1877|0));
                 $239 = __THREW__; __THREW__ = 0;
                 $240 = $239&1;
                 if ($240) {
                  label = 36;
                  break L41;
                 }
                 $$pre$i67 = HEAP32[$blobp_vector>>2]|0;
                 $$pre20$i = HEAP32[$15>>2]|0;
                 $242 = $$pre$i67;$243 = $$lcssa816;$247 = $$pre20$i;
                }
                $241 = (($242) + ($243<<2)|0);
                $244 = ((($241)) + 4|0);
                $245 = $244;
                $246 = (($247) - ($245))|0;
                $248 = $246 >> 2;
                _memmove(($241|0),($244|0),($246|0))|0;
                $249 = (($241) + ($248<<2)|0);
                $250 = HEAP32[$15>>2]|0;
                $251 = ($250|0)==($249|0);
                if (!($251)) {
                 $__new_last2$i$i$i$i = $249;
                 $scevgep$i$i$i$i68 = ((($250)) + -4|0);
                 $252 = $scevgep$i$i$i$i68;
                 $253 = (($252) - ($__new_last2$i$i$i$i))|0;
                 $254 = $253 >>> 2;
                 $255 = $254 ^ -1;
                 $scevgep4$i$i$i$i69 = (($250) + ($255<<2)|0);
                 HEAP32[$15>>2] = $scevgep4$i$i$i$i69;
                }
                $256 = $$sroa$010$0$i;
                $257 = $$sroa$09$0$i;
                __THREW__ = 0;
                invoke_vii(71,($256|0),($257|0));
                $258 = __THREW__; __THREW__ = 0;
                $259 = $258&1;
                if ($259) {
                 label = 36;
                 break L41;
                }
                $260 = ($$sroa$09$0$i|0)==(0);
                if ($260) {
                 break;
                }
                __THREW__ = 0;
                invoke_vi(72,($233|0));
                $261 = __THREW__; __THREW__ = 0;
                $262 = $261&1;
                if ($262) {
                 $$sroa$09$0$i$lcssa = $$sroa$09$0$i;
                 label = 87;
                 break L41;
                }
                $263 = $$sroa$09$0$i;
                __ZdlPv($263);
               }
              }
             } while(0);
             $$pre433 = HEAP32[$17>>2]|0;
             $268 = $$pre433;
            }
            $267 = ($col$0334|0)<($268|0);
            if (!($267)) {
             $$lcssa819 = $268;
             break;
            }
            $269 = (($col$0334) + 1)|0;
            $$pre430 = HEAP32[$page_image>>2]|0;
            $126 = $$pre430;$149 = $268;$col$0334 = $269;
           }
           $$pre434 = HEAP32[$85>>2]|0;
           $123 = $$pre434;$2213 = $$lcssa819;
          }
          $122 = ($row$0337|0)<($123|0);
          if (!($122)) {
           label = 25;
           break L39;
          }
          $124 = (($row$0337) + 1)|0;
          $$pre428 = HEAP32[$54>>2]|0;
          $116 = $$pre428;$121 = $2213;$2212 = $123;$row$0337 = $124;
         }
         if ((label|0) == 36) {
          $109 = ___cxa_find_matching_catch_2()|0;
          $110 = tempRet0;
          $eh$lpad$body74$index14Z2D = $110;$eh$lpad$body74$indexZ2D = $109;
          label = 38;
          break;
         }
         else if ((label|0) == 64) {
          $197 = ___cxa_find_matching_catch_2()|0;
          $198 = tempRet0;
          __ZdlPv($$lcssa818);
          $$0 = $197;$$01 = $198;
          break;
         }
         else if ((label|0) == 87) {
          $264 = ___cxa_find_matching_catch_2()|0;
          $265 = tempRet0;
          $266 = $$sroa$09$0$i$lcssa;
          __ZdlPv($266);
          $eh$lpad$body74$index14Z2D = $265;$eh$lpad$body74$indexZ2D = $264;
          label = 38;
          break;
         }
        }
       } while(0);
       L115: do {
        if ((label|0) == 25) {
         $92 = ($debug_level|0)<(100);
         L117: do {
          if ($92) {
           $270 = HEAP32[$15>>2]|0;
           $271 = HEAP32[$blobp_vector>>2]|0;
           $272 = (($270) - ($271))|0;
           $273 = $272 >> 2;
           $274 = ($273>>>0)>(3);
           if ($274) {
            __THREW__ = 0;
            invoke_vii(73,($page_image|0),($blobp_vector|0));
            $275 = __THREW__; __THREW__ = 0;
            $276 = $275&1;
            if (!($276)) {
             $277 = HEAP32[$15>>2]|0;
             $278 = HEAP32[$blobp_vector>>2]|0;
             $279 = (($277) - ($278))|0;
             $280 = $279 >> 2;
             $281 = ($279|0)>(0);
             L121: do {
              if ($281) {
               $282 = $278;
               $287 = $282;$from$011$i = 0;$to$013$i = 0;
               while(1) {
                $286 = (($287) + ($from$011$i<<2)|0);
                $288 = HEAP32[$286>>2]|0;
                $289 = ((($288)) + 12|0);
                $290 = HEAP32[$289>>2]|0;
                $291 = ((($288)) + 4|0);
                $292 = HEAP32[$291>>2]|0;
                $293 = (($290) + 1)|0;
                $294 = (($293) - ($292))|0;
                $295 = ($294|0)>(4);
                if ($295) {
                 $309 = $287;
                 label = 104;
                } else {
                 $296 = ((($288)) + 8|0);
                 $297 = HEAP32[$296>>2]|0;
                 $298 = HEAP32[$288>>2]|0;
                 $299 = (($297) + 1)|0;
                 $300 = (($299) - ($298))|0;
                 $301 = ($300|0)>(4);
                 if ($301) {
                  $309 = $287;
                  label = 104;
                 } else {
                  $302 = ($294|0)>(2);
                  $303 = ($300|0)>(2);
                  $or$cond$i = $302 | $303;
                  if ($or$cond$i) {
                   __THREW__ = 0;
                   $304 = (invoke_ii(74,($288|0))|0);
                   $305 = __THREW__; __THREW__ = 0;
                   $306 = $305&1;
                   if ($306) {
                    break;
                   }
                   $307 = ($304|0)>(5);
                   if ($307) {
                    $$pre22$i = HEAP32[$blobp_vector>>2]|0;
                    $309 = $$pre22$i;
                    label = 104;
                   } else {
                    $to$1$i = $to$013$i;
                   }
                  } else {
                   $to$1$i = $to$013$i;
                  }
                 }
                }
                if ((label|0) == 104) {
                 label = 0;
                 $308 = (($309) + ($to$013$i<<2)|0);
                 $310 = HEAP32[$308>>2]|0;
                 $311 = (($309) + ($from$011$i<<2)|0);
                 HEAP32[$311>>2] = $310;
                 $312 = HEAP32[$blobp_vector>>2]|0;
                 $313 = (($312) + ($to$013$i<<2)|0);
                 HEAP32[$313>>2] = $288;
                 $314 = (($to$013$i) + 1)|0;
                 $to$1$i = $314;
                }
                $315 = (($from$011$i) + 1)|0;
                $316 = ($315|0)<($280|0);
                if (!($316)) {
                 $to$0$lcssa$i = $to$1$i;
                 break L121;
                }
                $$pre$i75 = HEAP32[$blobp_vector>>2]|0;
                $287 = $$pre$i75;$from$011$i = $315;$to$013$i = $to$1$i;
               }
               $107 = ___cxa_find_matching_catch_2()|0;
               $108 = tempRet0;
               $eh$lpad$body74$index14Z2D = $108;$eh$lpad$body74$indexZ2D = $107;
               label = 38;
               break L115;
              } else {
               $to$0$lcssa$i = 0;
              }
             } while(0);
             $283 = ($to$0$lcssa$i|0)<($280|0);
             if ($283) {
              $284 = HEAP32[$blobp_vector>>2]|0;
              $285 = $284;
              $2216 = $285;$2217 = $285;$2218 = $285;$327 = $284;$i$010$i = $to$0$lcssa$i;
              while(1) {
               $326 = (($327) + ($i$010$i<<2)|0);
               $328 = HEAP32[$326>>2]|0;
               $329 = ($328|0)==(0|0);
               if ($329) {
                $2219 = $2216;$2220 = $2217;$2221 = $2218;$2222 = $327;
               } else {
                __THREW__ = 0;
                invoke_vi(72,($328|0));
                $330 = __THREW__; __THREW__ = 0;
                $331 = $330&1;
                if ($331) {
                 $$lcssa810 = $328;
                 label = 113;
                 break;
                }
                __ZdlPv($328);
                $$pre23$i = HEAP32[$blobp_vector>>2]|0;
                $332 = $$pre23$i;
                $2219 = $332;$2220 = $332;$2221 = $332;$2222 = $$pre23$i;
               }
               $333 = (($i$010$i) + 1)|0;
               $334 = ($333|0)<($280|0);
               if ($334) {
                $2216 = $2219;$2217 = $2220;$2218 = $2221;$327 = $2222;$i$010$i = $333;
               } else {
                $$lcssa812 = $2219;$$lcssa813 = $2220;$$lcssa814 = $2221;$$lcssa815 = $2222;
                break;
               }
              }
              if ((label|0) == 113) {
               $335 = ___cxa_find_matching_catch_2()|0;
               $336 = tempRet0;
               __ZdlPv($$lcssa810);
               $eh$lpad$body74$index14Z2D = $336;$eh$lpad$body74$indexZ2D = $335;
               label = 38;
               break L115;
              }
              $317 = (($$lcssa815) + ($to$0$lcssa$i<<2)|0);
              $318 = HEAP32[$15>>2]|0;
              $319 = ($317|0)==($318|0);
              $320 = $318;
              if ($319) {
               $2214 = $$lcssa812;$2215 = $$lcssa813;$338 = $$lcssa814;$339 = $320;
              } else {
               $__new_last2$i$i$i$i77 = $317;
               $scevgep$i$i$i$i78 = ((($318)) + -4|0);
               $321 = $scevgep$i$i$i$i78;
               $322 = (($321) - ($__new_last2$i$i$i$i77))|0;
               $323 = $322 >>> 2;
               $324 = $323 ^ -1;
               $scevgep4$i$i$i$i79 = (($318) + ($324<<2)|0);
               HEAP32[$15>>2] = $scevgep4$i$i$i$i79;
               $325 = $scevgep4$i$i$i$i79;
               $2214 = $$lcssa812;$2215 = $$lcssa813;$338 = $$lcssa814;$339 = $325;
              }
             } else {
              $$pre435 = HEAP32[$15>>2]|0;
              $$pre436 = HEAP32[$blobp_vector>>2]|0;
              $2214 = $$pre436;$2215 = $$pre436;$338 = $$pre436;$339 = $$pre435;
             }
             $337 = (($339) - ($338))|0;
             $340 = $337 >> 2;
             $341 = ($340|0)==(0);
             do {
              if ($341) {
               $2223 = $2214;$2224 = $339;$385 = $2215;$386 = $339;
              } else {
               $342 = $338;
               $2225 = $339;$2226 = $339;$2227 = $339;$345 = $342;$i$06$i = $340;
               while(1) {
                $343 = (($i$06$i) + -1)|0;
                $344 = (($345) + ($343<<2)|0);
                $346 = HEAP32[$344>>2]|0;
                $347 = ((($346)) + 12|0);
                $348 = HEAP32[$347>>2]|0;
                $349 = ((($346)) + 4|0);
                $350 = HEAP32[$349>>2]|0;
                $351 = (($348) + 1)|0;
                $352 = (($351) - ($350))|0;
                $353 = ((($346)) + 8|0);
                $354 = HEAP32[$353>>2]|0;
                $355 = HEAP32[$346>>2]|0;
                $356 = (($354) + 1)|0;
                $357 = (($356) - ($355))|0;
                $358 = ($357*35)|0;
                $359 = ($352|0)>($358|0);
                $360 = ($352*25)|0;
                $361 = ($357|0)>($360|0);
                $or$cond$i85 = $361 | $359;
                if ($or$cond$i85) {
                 $362 = ($346|0)==(0|0);
                 if ($362) {
                  $366 = $345;$370 = $2227;
                 } else {
                  __THREW__ = 0;
                  invoke_vi(72,($346|0));
                  $363 = __THREW__; __THREW__ = 0;
                  $364 = $363&1;
                  if ($364) {
                   $$lcssa806 = $346;
                   label = 124;
                   break;
                  }
                  __ZdlPv($346);
                  $$pre7$i86 = HEAP32[$blobp_vector>>2]|0;
                  $$pre8$i = HEAP32[$15>>2]|0;
                  $366 = $$pre7$i86;$370 = $$pre8$i;
                 }
                 $365 = (($366) + ($343<<2)|0);
                 $367 = ((($365)) + 4|0);
                 $368 = $367;
                 $369 = (($370) - ($368))|0;
                 $371 = $369 >> 2;
                 _memmove(($365|0),($367|0),($369|0))|0;
                 $372 = (($365) + ($371<<2)|0);
                 $373 = HEAP32[$15>>2]|0;
                 $374 = ($373|0)==($372|0);
                 $375 = $373;
                 if ($374) {
                  $2228 = $375;$2229 = $375;$2230 = $375;
                 } else {
                  $__new_last2$i$i$i$i88 = $372;
                  $scevgep$i$i$i$i89 = ((($373)) + -4|0);
                  $377 = $scevgep$i$i$i$i89;
                  $378 = (($377) - ($__new_last2$i$i$i$i88))|0;
                  $379 = $378 >>> 2;
                  $380 = $379 ^ -1;
                  $scevgep4$i$i$i$i90 = (($373) + ($380<<2)|0);
                  HEAP32[$15>>2] = $scevgep4$i$i$i$i90;
                  $381 = $scevgep4$i$i$i$i90;
                  $2228 = $381;$2229 = $381;$2230 = $381;
                 }
                } else {
                 $2228 = $2225;$2229 = $2226;$2230 = $2227;
                }
                $376 = ($343|0)==(0);
                if ($376) {
                 $$lcssa808 = $2228;$$lcssa809 = $2229;
                 label = 125;
                 break;
                }
                $$pre$i87 = HEAP32[$blobp_vector>>2]|0;
                $2225 = $2228;$2226 = $2229;$2227 = $2230;$345 = $$pre$i87;$i$06$i = $343;
               }
               if ((label|0) == 124) {
                $382 = ___cxa_find_matching_catch_2()|0;
                $383 = tempRet0;
                __ZdlPv($$lcssa806);
                $eh$lpad$body74$index14Z2D = $383;$eh$lpad$body74$indexZ2D = $382;
                label = 38;
                break L115;
               }
               else if ((label|0) == 125) {
                $$pre437 = HEAP32[$blobp_vector>>2]|0;
                $2223 = $$pre437;$2224 = $$lcssa808;$385 = $$pre437;$386 = $$lcssa809;
                break;
               }
              }
             } while(0);
             $384 = (($386) - ($385))|0;
             $387 = $384 >> 2;
             $388 = ($384|0)>(0);
             do {
              if ($388) {
               $389 = $385;
               $391 = $389;$i$015$i = 0;
               L170: while(1) {
                $390 = (($391) + ($i$015$i<<2)|0);
                $392 = HEAP32[$390>>2]|0;
                $393 = ((($392)) + 12|0);
                $394 = HEAP32[$393>>2]|0;
                $395 = ((($392)) + 4|0);
                $396 = HEAP32[$395>>2]|0;
                $397 = (($394) + 1)|0;
                $398 = (($397) - ($396))|0;
                $399 = ($398|0)<(11);
                do {
                 if (!($399)) {
                  $400 = HEAP32[$392>>2]|0;
                  $401 = ((($392)) + 8|0);
                  $402 = HEAP32[$401>>2]|0;
                  $403 = ($400|0)>($402|0);
                  if ($403) {
                   label = 135;
                  } else {
                   $404 = ((($392)) + 16|0);
                   $405 = HEAP32[$404>>2]|0;
                   $406 = HEAP32[$405>>2]|0;
                   $c$01$i = 0;$col$02$i = $400;
                   while(1) {
                    $407 = (($col$02$i) - ($400))|0;
                    $408 = (($406) + ($407)|0);
                    $409 = HEAP8[$408>>0]|0;
                    $410 = ($409<<24>>24)==(0);
                    if ($410) {
                     $c$1$i = $c$01$i;
                    } else {
                     $411 = (($c$01$i) + 1)|0;
                     $412 = ($c$01$i|0)>(0);
                     if ($412) {
                      $c$2$i = $411;
                      break;
                     } else {
                      $c$1$i = $411;
                     }
                    }
                    $413 = (($col$02$i) + 1)|0;
                    $414 = ($col$02$i|0)<($402|0);
                    if ($414) {
                     $c$01$i = $c$1$i;$col$02$i = $413;
                    } else {
                     $c$2$i = $c$1$i;
                     break;
                    }
                   }
                   $415 = ($c$2$i|0)<(2);
                   if ($415) {
                    label = 135;
                   } else {
                    $419 = $400;$421 = $402;
                   }
                  }
                  if ((label|0) == 135) {
                   label = 0;
                   $416 = (($396) + 1)|0;
                   __THREW__ = 0;
                   invoke_vii(75,($392|0),($416|0));
                   $417 = __THREW__; __THREW__ = 0;
                   $418 = $417&1;
                   if ($418) {
                    label = 34;
                    break L170;
                   }
                   $$pre20$i96 = HEAP32[$392>>2]|0;
                   $$pre21$i = HEAP32[$401>>2]|0;
                   $419 = $$pre20$i96;$421 = $$pre21$i;
                  }
                  $420 = ($419|0)>($421|0);
                  $$pre438 = HEAP32[$393>>2]|0;
                  if (!($420)) {
                   $422 = HEAP32[$395>>2]|0;
                   $423 = (($$pre438) - ($422))|0;
                   $424 = ((($392)) + 16|0);
                   $425 = HEAP32[$424>>2]|0;
                   $426 = (($425) + (($423*12)|0)|0);
                   $427 = HEAP32[$426>>2]|0;
                   $c$37$i = 0;$col1$08$i = $419;
                   while(1) {
                    $428 = (($col1$08$i) - ($419))|0;
                    $429 = (($427) + ($428)|0);
                    $430 = HEAP8[$429>>0]|0;
                    $431 = ($430<<24>>24)==(0);
                    if ($431) {
                     $c$4$i = $c$37$i;
                    } else {
                     $432 = (($c$37$i) + 1)|0;
                     $433 = ($c$37$i|0)>(0);
                     if ($433) {
                      $c$5$i = $432;
                      break;
                     } else {
                      $c$4$i = $432;
                     }
                    }
                    $434 = (($col1$08$i) + 1)|0;
                    $435 = ($col1$08$i|0)<($421|0);
                    if ($435) {
                     $c$37$i = $c$4$i;$col1$08$i = $434;
                    } else {
                     $c$5$i = $c$4$i;
                     break;
                    }
                   }
                   $436 = ($c$5$i|0)<(2);
                   if (!($436)) {
                    break;
                   }
                  }
                  $437 = (($$pre438) + -1)|0;
                  __THREW__ = 0;
                  invoke_vii(76,($392|0),($437|0));
                  $438 = __THREW__; __THREW__ = 0;
                  $439 = $438&1;
                  if ($439) {
                   label = 34;
                   break L170;
                  }
                 }
                } while(0);
                $440 = (($i$015$i) + 1)|0;
                $441 = ($440|0)<($387|0);
                if (!($441)) {
                 label = 146;
                 break;
                }
                $$pre$i97 = HEAP32[$blobp_vector>>2]|0;
                $391 = $$pre$i97;$i$015$i = $440;
               }
               if ((label|0) == 34) {
                $105 = ___cxa_find_matching_catch_2()|0;
                $106 = tempRet0;
                $eh$lpad$body74$index14Z2D = $106;$eh$lpad$body74$indexZ2D = $105;
                label = 38;
                break L115;
               }
               else if ((label|0) == 146) {
                $$pre439 = HEAP32[$15>>2]|0;
                $$pre440 = HEAP32[$blobp_vector>>2]|0;
                $443 = $$pre440;$444 = $$pre439;
                break;
               }
              } else {
               $443 = $2223;$444 = $2224;
              }
             } while(0);
             $442 = (($444) - ($443))|0;
             $445 = $442 >> 2;
             $446 = ($442|0)>(0);
             if ($446) {
              $447 = $443;
              $449 = $447;$i$015$i101 = 0;
              L202: while(1) {
               $448 = (($449) + ($i$015$i101<<2)|0);
               $450 = HEAP32[$448>>2]|0;
               $451 = ((($450)) + 8|0);
               $452 = HEAP32[$451>>2]|0;
               $453 = HEAP32[$450>>2]|0;
               $454 = (($452) + 1)|0;
               $455 = (($454) - ($453))|0;
               $456 = ($455|0)<(6);
               do {
                if (!($456)) {
                 $457 = ((($450)) + 4|0);
                 $458 = HEAP32[$457>>2]|0;
                 $459 = ((($450)) + 12|0);
                 $460 = HEAP32[$459>>2]|0;
                 $461 = ($458|0)>($460|0);
                 if ($461) {
                  label = 156;
                 } else {
                  $462 = ((($450)) + 16|0);
                  $463 = HEAP32[$462>>2]|0;
                  $c$01$i103 = 0;$row$02$i = $458;
                  while(1) {
                   $464 = (($row$02$i) - ($458))|0;
                   $465 = (($463) + (($464*12)|0)|0);
                   $466 = HEAP32[$465>>2]|0;
                   $467 = HEAP8[$466>>0]|0;
                   $468 = ($467<<24>>24)==(0);
                   if ($468) {
                    $c$1$i104 = $c$01$i103;
                   } else {
                    $469 = (($c$01$i103) + 1)|0;
                    $470 = ($c$01$i103|0)>(0);
                    if ($470) {
                     $c$2$i105 = $469;
                     break;
                    } else {
                     $c$1$i104 = $469;
                    }
                   }
                   $471 = (($row$02$i) + 1)|0;
                   $472 = ($row$02$i|0)<($460|0);
                   if ($472) {
                    $c$01$i103 = $c$1$i104;$row$02$i = $471;
                   } else {
                    $c$2$i105 = $c$1$i104;
                    break;
                   }
                  }
                  $473 = ($c$2$i105|0)<(2);
                  if ($473) {
                   label = 156;
                  } else {
                   $477 = $458;$479 = $460;
                  }
                 }
                 if ((label|0) == 156) {
                  label = 0;
                  $474 = (($453) + 1)|0;
                  __THREW__ = 0;
                  invoke_vii(77,($450|0),($474|0));
                  $475 = __THREW__; __THREW__ = 0;
                  $476 = $475&1;
                  if ($476) {
                   break L202;
                  }
                  $$pre20$i107 = HEAP32[$457>>2]|0;
                  $$pre21$i108 = HEAP32[$459>>2]|0;
                  $477 = $$pre20$i107;$479 = $$pre21$i108;
                 }
                 $478 = ($477|0)>($479|0);
                 $$pre441 = HEAP32[$451>>2]|0;
                 if (!($478)) {
                  $480 = ((($450)) + 16|0);
                  $481 = HEAP32[$480>>2]|0;
                  $482 = HEAP32[$450>>2]|0;
                  $483 = (($$pre441) - ($482))|0;
                  $c$37$i111 = 0;$row1$08$i = $477;
                  while(1) {
                   $484 = (($row1$08$i) - ($477))|0;
                   $485 = (($481) + (($484*12)|0)|0);
                   $486 = HEAP32[$485>>2]|0;
                   $487 = (($486) + ($483)|0);
                   $488 = HEAP8[$487>>0]|0;
                   $489 = ($488<<24>>24)==(0);
                   if ($489) {
                    $c$4$i112 = $c$37$i111;
                   } else {
                    $490 = (($c$37$i111) + 1)|0;
                    $491 = ($c$37$i111|0)>(0);
                    if ($491) {
                     $c$5$i113 = $490;
                     break;
                    } else {
                     $c$4$i112 = $490;
                    }
                   }
                   $492 = (($row1$08$i) + 1)|0;
                   $493 = ($row1$08$i|0)<($479|0);
                   if ($493) {
                    $c$37$i111 = $c$4$i112;$row1$08$i = $492;
                   } else {
                    $c$5$i113 = $c$4$i112;
                    break;
                   }
                  }
                  $494 = ($c$5$i113|0)<(2);
                  if (!($494)) {
                   break;
                  }
                 }
                 $495 = (($$pre441) + -1)|0;
                 __THREW__ = 0;
                 invoke_vii(78,($450|0),($495|0));
                 $496 = __THREW__; __THREW__ = 0;
                 $497 = $496&1;
                 if ($497) {
                  break L202;
                 }
                }
               } while(0);
               $498 = (($i$015$i101) + 1)|0;
               $499 = ($498|0)<($445|0);
               if (!($499)) {
                label = 167;
                break L117;
               }
               $$pre$i116 = HEAP32[$blobp_vector>>2]|0;
               $449 = $$pre$i116;$i$015$i101 = $498;
              }
              $103 = ___cxa_find_matching_catch_2()|0;
              $104 = tempRet0;
              $eh$lpad$body74$index14Z2D = $104;$eh$lpad$body74$indexZ2D = $103;
              label = 38;
              break L115;
             } else {
              label = 167;
             }
            }
           } else {
            label = 167;
           }
          } else {
           label = 167;
          }
         } while(0);
         L230: do {
          if ((label|0) == 167) {
           L232: do {
            if ($layout) {
             $500 = HEAP32[$17>>2]|0;
             $501 = HEAP32[$page_image>>2]|0;
             $502 = (($500) + 1)|0;
             $503 = (($502) - ($501))|0;
             $504 = ($503|0)>(200);
             if ($504) {
              $505 = HEAP32[$85>>2]|0;
              $506 = HEAP32[$83>>2]|0;
              $507 = (($505) + 1)|0;
              $508 = (($507) - ($506))|0;
              $509 = ($508|0)>(200);
              if ($509) {
               $510 = HEAP32[$15>>2]|0;
               $511 = HEAP32[$blobp_vector>>2]|0;
               $512 = (($510) - ($511))|0;
               $513 = $512 >> 2;
               $514 = ($513>>>0)>(3);
               if ($514) {
                $515 = $510;
                $516 = $511;
                $517 = ($516|0)==($515|0);
                L237: do {
                 if (!($517)) {
                  __THREW__ = 0;
                  $518 = (invoke_ii(79,($blobp_vector|0))|0);
                  $519 = __THREW__; __THREW__ = 0;
                  $520 = $519&1;
                  if ($520) {
                   break L230;
                  }
                  $521 = HEAP32[$blobp_vector>>2]|0;
                  $522 = HEAP32[$521>>2]|0;
                  __THREW__ = 0;
                  invoke_vii(80,($6|0),($522|0));
                  $523 = __THREW__; __THREW__ = 0;
                  $524 = $523&1;
                  if ($524) {
                   break L230;
                  }
                  $525 = ((($6)) + 28|0);
                  HEAP32[$525>>2] = 0;
                  $526 = ((($6)) + 32|0);
                  HEAP32[$526>>2] = 0;
                  $527 = ((($6)) + 36|0);
                  HEAP32[$527>>2] = 0;
                  $528 = ((($zone_vector)) + 4|0);
                  $529 = HEAP32[$528>>2]|0;
                  $530 = ((($zone_vector)) + 8|0);
                  $531 = HEAP32[$530>>2]|0;
                  $532 = ($529|0)==($531|0);
                  $533 = $531;
                  L241: do {
                   if ($532) {
                    $630 = $529;
                    $631 = HEAP32[$zone_vector>>2]|0;
                    $632 = (($630) - ($631))|0;
                    $633 = (($632|0) / 40)&-1;
                    $634 = (($633) + 1)|0;
                    $635 = ($634>>>0)>(107374182);
                    do {
                     if ($635) {
                      __THREW__ = 0;
                      invoke_vi(46,($zone_vector|0));
                      $636 = __THREW__; __THREW__ = 0;
                      $637 = $636&1;
                      if ($637) {
                       break;
                      }
                      $$pre$i$i$i125 = HEAP32[$zone_vector>>2]|0;
                      $$pre$i$i126 = HEAP32[$530>>2]|0;
                      $$pre$phi$i$iZ2D = $530;$639 = $$pre$i$i$i125;$640 = $$pre$i$i126;
                      label = 206;
                     } else {
                      $$pre$phi$i$iZ2D = $530;$639 = $631;$640 = $533;
                      label = 206;
                     }
                    } while(0);
                    do {
                     if ((label|0) == 206) {
                      $638 = (($640) - ($639))|0;
                      $641 = (($638|0) / 40)&-1;
                      $642 = ($641>>>0)<(53687091);
                      if ($642) {
                       $646 = $641 << 1;
                       $647 = ($646>>>0)<($634>>>0);
                       $648 = $647 ? $634 : $646;
                       $649 = HEAP32[$528>>2]|0;
                       $650 = (($649) - ($639))|0;
                       $651 = (($650|0) / 40)&-1;
                       $652 = ($648|0)==(0);
                       if ($652) {
                        $$0$i18$i$i$i = 0;$658 = 0;$659 = $651;
                       } else {
                        $$0$i17$i$i$i = $648;$2231 = $651;
                        label = 209;
                       }
                      } else {
                       $643 = HEAP32[$528>>2]|0;
                       $644 = (($643) - ($639))|0;
                       $645 = (($644|0) / 40)&-1;
                       $$0$i17$i$i$i = 107374182;$2231 = $645;
                       label = 209;
                      }
                      if ((label|0) == 209) {
                       $653 = ($$0$i17$i$i$i*40)|0;
                       __THREW__ = 0;
                       $654 = (invoke_ii(29,($653|0))|0);
                       $655 = __THREW__; __THREW__ = 0;
                       $656 = $655&1;
                       if ($656) {
                        break;
                       }
                       $$0$i18$i$i$i = $$0$i17$i$i$i;$658 = $654;$659 = $2231;
                      }
                      $657 = (($658) + (($659*40)|0)|0);
                      $660 = $657;
                      $661 = (($658) + (($$0$i18$i$i$i*40)|0)|0);
                      $662 = $661;
                      ;HEAP32[$657>>2]=HEAP32[$6>>2]|0;HEAP32[$657+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$657+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$657+12>>2]=HEAP32[$6+12>>2]|0;
                      $663 = (((($658) + (($659*40)|0)|0)) + 16|0);
                      $664 = ((($6)) + 16|0);
                      HEAP32[$663>>2] = 0;
                      $665 = (((($658) + (($659*40)|0)|0)) + 20|0);
                      HEAP32[$665>>2] = 0;
                      $666 = (((($658) + (($659*40)|0)|0)) + 24|0);
                      HEAP32[$666>>2] = 0;
                      $667 = ((($6)) + 20|0);
                      $668 = HEAP32[$667>>2]|0;
                      $669 = HEAP32[$664>>2]|0;
                      $670 = (($668) - ($669))|0;
                      $671 = $670 >> 3;
                      $672 = ($671|0)==(0);
                      L256: do {
                       if ($672) {
                        label = 222;
                       } else {
                        $673 = ($671>>>0)>(536870911);
                        if ($673) {
                         __THREW__ = 0;
                         invoke_vi(46,($663|0));
                         $674 = __THREW__; __THREW__ = 0;
                         $675 = $674&1;
                         if (!($675)) {
                          label = 214;
                         }
                        } else {
                         label = 214;
                        }
                        do {
                         if ((label|0) == 214) {
                          __THREW__ = 0;
                          $676 = (invoke_ii(29,($670|0))|0);
                          $677 = __THREW__; __THREW__ = 0;
                          $678 = $677&1;
                          if ($678) {
                           break;
                          }
                          HEAP32[$665>>2] = $676;
                          HEAP32[$663>>2] = $676;
                          $679 = (($676) + ($671<<3)|0);
                          $680 = (((($658) + (($659*40)|0)|0)) + 24|0);
                          HEAP32[$680>>2] = $679;
                          $681 = HEAP32[$664>>2]|0;
                          $682 = HEAP32[$667>>2]|0;
                          $683 = ($681|0)==($682|0);
                          if ($683) {
                           label = 222;
                           break L256;
                          }
                          $$01$i$i249$i = $681;$690 = $676;
                          while(1) {
                           $684 = $$01$i$i249$i;
                           $685 = $684;
                           $686 = HEAP32[$685>>2]|0;
                           $687 = (($684) + 4)|0;
                           $688 = $687;
                           $689 = HEAP32[$688>>2]|0;
                           $691 = $690;
                           $692 = $691;
                           HEAP32[$692>>2] = $686;
                           $693 = (($691) + 4)|0;
                           $694 = $693;
                           HEAP32[$694>>2] = $689;
                           $695 = HEAP32[$665>>2]|0;
                           $696 = ((($695)) + 8|0);
                           HEAP32[$665>>2] = $696;
                           $697 = ((($$01$i$i249$i)) + 8|0);
                           $698 = ($697|0)==($682|0);
                           if ($698) {
                            label = 222;
                            break L256;
                           } else {
                            $$01$i$i249$i = $697;$690 = $696;
                           }
                          }
                         }
                        } while(0);
                        $699 = ___cxa_find_matching_catch_2()|0;
                        $700 = tempRet0;
                        $701 = HEAP32[$663>>2]|0;
                        $702 = ($701|0)==(0|0);
                        $703 = $701;
                        if ($702) {
                         $__v$sroa$15$2$i$i$i = $660;$__v$sroa$6$3$i$i$i = $660;$eh$lpad$body$i$i$i$index36Z2D = $700;$eh$lpad$body$i$i$i$indexZ2D = $699;
                         break;
                        }
                        $704 = HEAP32[$665>>2]|0;
                        $705 = ($704|0)==($701|0);
                        if (!($705)) {
                         $scevgep$i$i$i$i250$i = ((($704)) + -8|0);
                         $706 = $scevgep$i$i$i$i250$i;
                         $707 = (($706) - ($703))|0;
                         $708 = $707 >>> 3;
                         $709 = $708 ^ -1;
                         $scevgep4$i$i$i$i251$i = (($704) + ($709<<3)|0);
                         HEAP32[$665>>2] = $scevgep4$i$i$i$i251$i;
                        }
                        __ZdlPv($701);
                        $__v$sroa$15$2$i$i$i = $660;$__v$sroa$6$3$i$i$i = $660;$eh$lpad$body$i$i$i$index36Z2D = $700;$eh$lpad$body$i$i$i$indexZ2D = $699;
                       }
                      } while(0);
                      L271: do {
                       if ((label|0) == 222) {
                        $710 = (((($658) + (($659*40)|0)|0)) + 28|0);
                        $711 = ((($6)) + 28|0);
                        HEAP32[$710>>2] = 0;
                        $712 = (((($658) + (($659*40)|0)|0)) + 32|0);
                        HEAP32[$712>>2] = 0;
                        $713 = (((($658) + (($659*40)|0)|0)) + 36|0);
                        HEAP32[$713>>2] = 0;
                        $714 = HEAP32[$526>>2]|0;
                        $715 = HEAP32[$711>>2]|0;
                        $716 = (($714) - ($715))|0;
                        $717 = $716 >> 2;
                        $718 = ($717|0)==(0);
                        L273: do {
                         if (!($718)) {
                          $719 = ($717>>>0)>(1073741823);
                          if ($719) {
                           __THREW__ = 0;
                           invoke_vi(46,($710|0));
                           $720 = __THREW__; __THREW__ = 0;
                           $721 = $720&1;
                           if (!($721)) {
                            label = 225;
                           }
                          } else {
                           label = 225;
                          }
                          do {
                           if ((label|0) == 225) {
                            __THREW__ = 0;
                            $722 = (invoke_ii(29,($716|0))|0);
                            $723 = __THREW__; __THREW__ = 0;
                            $724 = $723&1;
                            if ($724) {
                             break;
                            }
                            HEAP32[$712>>2] = $722;
                            HEAP32[$710>>2] = $722;
                            $725 = (($722) + ($717<<2)|0);
                            $726 = (((($658) + (($659*40)|0)|0)) + 36|0);
                            HEAP32[$726>>2] = $725;
                            $727 = HEAP32[$711>>2]|0;
                            $728 = HEAP32[$526>>2]|0;
                            $729 = ($727|0)==($728|0);
                            if ($729) {
                             break L273;
                            }
                            $$01$i$i$i = $727;$731 = $722;
                            while(1) {
                             $730 = HEAP32[$$01$i$i$i>>2]|0;
                             HEAP32[$731>>2] = $730;
                             $732 = HEAP32[$712>>2]|0;
                             $733 = ((($732)) + 4|0);
                             HEAP32[$712>>2] = $733;
                             $734 = ((($$01$i$i$i)) + 4|0);
                             $735 = ($734|0)==($728|0);
                             if ($735) {
                              break L273;
                             } else {
                              $$01$i$i$i = $734;$731 = $733;
                             }
                            }
                           }
                          } while(0);
                          $736 = ___cxa_find_matching_catch_2()|0;
                          $737 = tempRet0;
                          $738 = HEAP32[$710>>2]|0;
                          $739 = ($738|0)==(0|0);
                          $740 = $738;
                          if (!($739)) {
                           $741 = HEAP32[$712>>2]|0;
                           $742 = ($741|0)==($738|0);
                           if (!($742)) {
                            $scevgep$i$i$i$i45$i = ((($741)) + -4|0);
                            $743 = $scevgep$i$i$i$i45$i;
                            $744 = (($743) - ($740))|0;
                            $745 = $744 >>> 2;
                            $746 = $745 ^ -1;
                            $scevgep4$i$i$i$i46$i = (($741) + ($746<<2)|0);
                            HEAP32[$712>>2] = $scevgep4$i$i$i$i46$i;
                           }
                           __ZdlPv($738);
                          }
                          $747 = (((($658) + (($659*40)|0)|0)) + 16|0);
                          $748 = HEAP32[$747>>2]|0;
                          $749 = ($748|0)==(0|0);
                          $750 = $748;
                          if ($749) {
                           $__v$sroa$15$2$i$i$i = $660;$__v$sroa$6$3$i$i$i = $660;$eh$lpad$body$i$i$i$index36Z2D = $737;$eh$lpad$body$i$i$i$indexZ2D = $736;
                           break L271;
                          }
                          $751 = HEAP32[$665>>2]|0;
                          $752 = ($751|0)==($748|0);
                          if (!($752)) {
                           $scevgep$i$i$i$i$i$i$i$i$i = ((($751)) + -8|0);
                           $753 = $scevgep$i$i$i$i$i$i$i$i$i;
                           $754 = (($753) - ($750))|0;
                           $755 = $754 >>> 3;
                           $756 = $755 ^ -1;
                           $scevgep4$i$i$i$i$i$i$i$i$i = (($751) + ($756<<3)|0);
                           HEAP32[$665>>2] = $scevgep4$i$i$i$i$i$i$i$i$i;
                          }
                          __ZdlPv($748);
                          $__v$sroa$15$2$i$i$i = $660;$__v$sroa$6$3$i$i$i = $660;$eh$lpad$body$i$i$i$index36Z2D = $737;$eh$lpad$body$i$i$i$indexZ2D = $736;
                          break L271;
                         }
                        } while(0);
                        $757 = ((($657)) + 40|0);
                        $758 = $757;
                        $759 = HEAP32[$zone_vector>>2]|0;
                        $760 = HEAP32[$528>>2]|0;
                        $761 = ($760|0)==($759|0);
                        do {
                         if ($761) {
                          $762 = $759;
                          $791 = $660;$792 = $762;$794 = $759;
                         } else {
                          $$01$i$i$i$i$i = $760;$764 = $657;$__v$sroa$6$0$i$i$i = $660;
                          while(1) {
                           $763 = ((($764)) + -40|0);
                           $765 = ((($$01$i$i$i$i$i)) + -40|0);
                           ;HEAP32[$763>>2]=HEAP32[$765>>2]|0;HEAP32[$763+4>>2]=HEAP32[$765+4>>2]|0;HEAP32[$763+8>>2]=HEAP32[$765+8>>2]|0;HEAP32[$763+12>>2]=HEAP32[$765+12>>2]|0;
                           $766 = ((($764)) + -24|0);
                           $767 = ((($$01$i$i$i$i$i)) + -24|0);
                           __THREW__ = 0;
                           invoke_vii(81,($766|0),($767|0));
                           $768 = __THREW__; __THREW__ = 0;
                           $769 = $768&1;
                           if ($769) {
                            $__v$sroa$6$0$i$i$i$lcssa = $__v$sroa$6$0$i$i$i;
                            label = 259;
                            break;
                           }
                           $770 = ((($764)) + -12|0);
                           $771 = ((($$01$i$i$i$i$i)) + -12|0);
                           __THREW__ = 0;
                           invoke_vii(82,($770|0),($771|0));
                           $772 = __THREW__; __THREW__ = 0;
                           $773 = $772&1;
                           if ($773) {
                            $$lcssa797 = $764;$__v$sroa$6$0$i$i$i$lcssa794 = $__v$sroa$6$0$i$i$i;
                            label = 241;
                            break;
                           }
                           $787 = $__v$sroa$6$0$i$i$i;
                           $788 = ((($787)) + -40|0);
                           $789 = $788;
                           $790 = ($765|0)==($759|0);
                           if ($790) {
                            $$lcssa799 = $789;
                            label = 246;
                            break;
                           } else {
                            $$01$i$i$i$i$i = $765;$764 = $788;$__v$sroa$6$0$i$i$i = $789;
                           }
                          }
                          if ((label|0) == 241) {
                           $774 = ___cxa_find_matching_catch_2()|0;
                           $775 = tempRet0;
                           $776 = ((($$lcssa797)) + -24|0);
                           $777 = HEAP32[$776>>2]|0;
                           $778 = ($777|0)==(0|0);
                           $779 = $777;
                           if ($778) {
                            $__v$sroa$15$2$i$i$i = $758;$__v$sroa$6$3$i$i$i = $__v$sroa$6$0$i$i$i$lcssa794;$eh$lpad$body$i$i$i$index36Z2D = $775;$eh$lpad$body$i$i$i$indexZ2D = $774;
                            break L271;
                           }
                           $780 = ((($$lcssa797)) + -20|0);
                           $781 = HEAP32[$780>>2]|0;
                           $782 = ($781|0)==($777|0);
                           if (!($782)) {
                            $scevgep$i$i$i$i$i$i$i$i$i$i$i = ((($781)) + -8|0);
                            $783 = $scevgep$i$i$i$i$i$i$i$i$i$i$i;
                            $784 = (($783) - ($779))|0;
                            $785 = $784 >>> 3;
                            $786 = $785 ^ -1;
                            $scevgep4$i$i$i$i$i$i$i$i$i$i$i = (($781) + ($786<<3)|0);
                            HEAP32[$780>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i;
                           }
                           __ZdlPv($777);
                           $__v$sroa$15$2$i$i$i = $758;$__v$sroa$6$3$i$i$i = $__v$sroa$6$0$i$i$i$lcssa794;$eh$lpad$body$i$i$i$index36Z2D = $775;$eh$lpad$body$i$i$i$indexZ2D = $774;
                           break L271;
                          }
                          else if ((label|0) == 246) {
                           $$pre$i$i$i$i = HEAP32[$zone_vector>>2]|0;
                           $$pre27$i$i$i = HEAP32[$528>>2]|0;
                           $791 = $$lcssa799;$792 = $$pre$i$i$i$i;$794 = $$pre27$i$i$i;
                           break;
                          }
                          else if ((label|0) == 259) {
                           $823 = ___cxa_find_matching_catch_2()|0;
                           $824 = tempRet0;
                           $__v$sroa$15$2$i$i$i = $758;$__v$sroa$6$3$i$i$i = $__v$sroa$6$0$i$i$i$lcssa;$eh$lpad$body$i$i$i$index36Z2D = $824;$eh$lpad$body$i$i$i$indexZ2D = $823;
                           break L271;
                          }
                         }
                        } while(0);
                        HEAP32[$zone_vector>>2] = $791;
                        HEAP32[$528>>2] = $758;
                        HEAP32[$$pre$phi$i$iZ2D>>2] = $662;
                        $793 = $792;
                        $795 = ($794|0)==($793|0);
                        if (!($795)) {
                         $797 = $794;
                         while(1) {
                          $796 = ((($797)) + -40|0);
                          $798 = ((($797)) + -12|0);
                          $799 = HEAP32[$798>>2]|0;
                          $800 = ($799|0)==(0|0);
                          $801 = $799;
                          if (!($800)) {
                           $802 = ((($797)) + -8|0);
                           $803 = HEAP32[$802>>2]|0;
                           $804 = ($803|0)==($799|0);
                           if (!($804)) {
                            $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i$i = ((($803)) + -4|0);
                            $805 = $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i$i;
                            $806 = (($805) - ($801))|0;
                            $807 = $806 >>> 2;
                            $808 = $807 ^ -1;
                            $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i$i = (($803) + ($808<<2)|0);
                            HEAP32[$802>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i$i;
                           }
                           __ZdlPv($799);
                          }
                          $809 = ((($797)) + -24|0);
                          $810 = HEAP32[$809>>2]|0;
                          $811 = ($810|0)==(0|0);
                          $812 = $810;
                          if (!($811)) {
                           $814 = ((($797)) + -20|0);
                           $815 = HEAP32[$814>>2]|0;
                           $816 = ($815|0)==($810|0);
                           if (!($816)) {
                            $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i$i = ((($815)) + -8|0);
                            $817 = $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i$i;
                            $818 = (($817) - ($812))|0;
                            $819 = $818 >>> 3;
                            $820 = $819 ^ -1;
                            $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i$i = (($815) + ($820<<3)|0);
                            HEAP32[$814>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i$i;
                           }
                           __ZdlPv($810);
                          }
                          $813 = ($796|0)==($793|0);
                          if ($813) {
                           break;
                          } else {
                           $797 = $796;
                          }
                         }
                        }
                        $821 = ($792|0)==(0);
                        if ($821) {
                         label = 272;
                         break L241;
                        }
                        $822 = $792;
                        __ZdlPv($822);
                        label = 272;
                        break L241;
                       }
                      } while(0);
                      $825 = $__v$sroa$6$3$i$i$i;
                      $826 = $__v$sroa$15$2$i$i$i;
                      $827 = ($826|0)==($825|0);
                      if (!($827)) {
                       $829 = $826;
                       while(1) {
                        $828 = ((($829)) + -40|0);
                        $830 = ((($829)) + -12|0);
                        $831 = HEAP32[$830>>2]|0;
                        $832 = ($831|0)==(0|0);
                        $833 = $831;
                        if (!($832)) {
                         $834 = ((($829)) + -8|0);
                         $835 = HEAP32[$834>>2]|0;
                         $836 = ($835|0)==($831|0);
                         if (!($836)) {
                          $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i128 = ((($835)) + -4|0);
                          $837 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i128;
                          $838 = (($837) - ($833))|0;
                          $839 = $838 >>> 2;
                          $840 = $839 ^ -1;
                          $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i129 = (($835) + ($840<<2)|0);
                          HEAP32[$834>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i129;
                         }
                         __ZdlPv($831);
                        }
                        $841 = ((($829)) + -24|0);
                        $842 = HEAP32[$841>>2]|0;
                        $843 = ($842|0)==(0|0);
                        $844 = $842;
                        if (!($843)) {
                         $846 = ((($829)) + -20|0);
                         $847 = HEAP32[$846>>2]|0;
                         $848 = ($847|0)==($842|0);
                         if (!($848)) {
                          $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i$i = ((($847)) + -8|0);
                          $849 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i$i;
                          $850 = (($849) - ($844))|0;
                          $851 = $850 >>> 3;
                          $852 = $851 ^ -1;
                          $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i$i = (($847) + ($852<<3)|0);
                          HEAP32[$846>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i$i;
                         }
                         __ZdlPv($842);
                        }
                        $845 = ($828|0)==($825|0);
                        if ($845) {
                         break;
                        } else {
                         $829 = $828;
                        }
                       }
                      }
                      $853 = ($658|0)==(0|0);
                      if ($853) {
                       $eh$lpad$body$i$index51Z2D = $eh$lpad$body$i$i$i$index36Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body$i$i$i$indexZ2D;
                       label = 289;
                       break L241;
                      }
                      __ZdlPv($658);
                      $eh$lpad$body$i$index51Z2D = $eh$lpad$body$i$i$i$index36Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body$i$i$i$indexZ2D;
                      label = 289;
                      break L241;
                     }
                    } while(0);
                    $909 = ___cxa_find_matching_catch_2()|0;
                    $910 = tempRet0;
                    $eh$lpad$body$i$index51Z2D = $910;$eh$lpad$body$i$indexZ2D = $909;
                    label = 289;
                   } else {
                    ;HEAP32[$529>>2]=HEAP32[$6>>2]|0;HEAP32[$529+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$529+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$529+12>>2]=HEAP32[$6+12>>2]|0;
                    $534 = ((($529)) + 16|0);
                    $535 = ((($6)) + 16|0);
                    HEAP32[$534>>2] = 0;
                    $536 = ((($529)) + 20|0);
                    HEAP32[$536>>2] = 0;
                    $537 = ((($529)) + 24|0);
                    HEAP32[$537>>2] = 0;
                    $538 = ((($6)) + 20|0);
                    $539 = HEAP32[$538>>2]|0;
                    $540 = HEAP32[$535>>2]|0;
                    $541 = (($539) - ($540))|0;
                    $542 = $541 >> 3;
                    $543 = ($542|0)==(0);
                    L347: do {
                     if (!($543)) {
                      $544 = ($542>>>0)>(536870911);
                      if ($544) {
                       __THREW__ = 0;
                       invoke_vi(46,($534|0));
                       $545 = __THREW__; __THREW__ = 0;
                       $546 = $545&1;
                       if (!($546)) {
                        label = 178;
                       }
                      } else {
                       label = 178;
                      }
                      do {
                       if ((label|0) == 178) {
                        __THREW__ = 0;
                        $547 = (invoke_ii(29,($541|0))|0);
                        $548 = __THREW__; __THREW__ = 0;
                        $549 = $548&1;
                        if ($549) {
                         break;
                        }
                        HEAP32[$536>>2] = $547;
                        HEAP32[$534>>2] = $547;
                        $550 = (($547) + ($542<<3)|0);
                        $551 = ((($529)) + 24|0);
                        HEAP32[$551>>2] = $550;
                        $552 = HEAP32[$535>>2]|0;
                        $553 = HEAP32[$538>>2]|0;
                        $554 = ($552|0)==($553|0);
                        if ($554) {
                         break L347;
                        }
                        $$01$i$i270$i = $552;$561 = $547;
                        while(1) {
                         $555 = $$01$i$i270$i;
                         $556 = $555;
                         $557 = HEAP32[$556>>2]|0;
                         $558 = (($555) + 4)|0;
                         $559 = $558;
                         $560 = HEAP32[$559>>2]|0;
                         $562 = $561;
                         $563 = $562;
                         HEAP32[$563>>2] = $557;
                         $564 = (($562) + 4)|0;
                         $565 = $564;
                         HEAP32[$565>>2] = $560;
                         $566 = HEAP32[$536>>2]|0;
                         $567 = ((($566)) + 8|0);
                         HEAP32[$536>>2] = $567;
                         $568 = ((($$01$i$i270$i)) + 8|0);
                         $569 = ($568|0)==($553|0);
                         if ($569) {
                          break L347;
                         } else {
                          $$01$i$i270$i = $568;$561 = $567;
                         }
                        }
                       }
                      } while(0);
                      $570 = ___cxa_find_matching_catch_2()|0;
                      $571 = tempRet0;
                      $572 = HEAP32[$534>>2]|0;
                      $573 = ($572|0)==(0|0);
                      $574 = $572;
                      if ($573) {
                       $eh$lpad$body$i$index51Z2D = $571;$eh$lpad$body$i$indexZ2D = $570;
                       label = 289;
                       break L241;
                      }
                      $575 = HEAP32[$536>>2]|0;
                      $576 = ($575|0)==($572|0);
                      if (!($576)) {
                       $scevgep$i$i$i$i271$i = ((($575)) + -8|0);
                       $577 = $scevgep$i$i$i$i271$i;
                       $578 = (($577) - ($574))|0;
                       $579 = $578 >>> 3;
                       $580 = $579 ^ -1;
                       $scevgep4$i$i$i$i272$i = (($575) + ($580<<3)|0);
                       HEAP32[$536>>2] = $scevgep4$i$i$i$i272$i;
                      }
                      __ZdlPv($572);
                      $eh$lpad$body$i$index51Z2D = $571;$eh$lpad$body$i$indexZ2D = $570;
                      label = 289;
                      break L241;
                     }
                    } while(0);
                    $581 = ((($529)) + 28|0);
                    $582 = ((($6)) + 28|0);
                    HEAP32[$581>>2] = 0;
                    $583 = ((($529)) + 32|0);
                    HEAP32[$583>>2] = 0;
                    $584 = ((($529)) + 36|0);
                    HEAP32[$584>>2] = 0;
                    $585 = HEAP32[$526>>2]|0;
                    $586 = HEAP32[$582>>2]|0;
                    $587 = (($585) - ($586))|0;
                    $588 = $587 >> 2;
                    $589 = ($588|0)==(0);
                    L363: do {
                     if (!($589)) {
                      $590 = ($588>>>0)>(1073741823);
                      if ($590) {
                       __THREW__ = 0;
                       invoke_vi(46,($581|0));
                       $591 = __THREW__; __THREW__ = 0;
                       $592 = $591&1;
                       if (!($592)) {
                        label = 189;
                       }
                      } else {
                       label = 189;
                      }
                      do {
                       if ((label|0) == 189) {
                        __THREW__ = 0;
                        $593 = (invoke_ii(29,($587|0))|0);
                        $594 = __THREW__; __THREW__ = 0;
                        $595 = $594&1;
                        if ($595) {
                         break;
                        }
                        HEAP32[$583>>2] = $593;
                        HEAP32[$581>>2] = $593;
                        $596 = (($593) + ($588<<2)|0);
                        $597 = ((($529)) + 36|0);
                        HEAP32[$597>>2] = $596;
                        $598 = HEAP32[$582>>2]|0;
                        $599 = HEAP32[$526>>2]|0;
                        $600 = ($598|0)==($599|0);
                        if ($600) {
                         break L363;
                        }
                        $$01$i$i259$i = $598;$602 = $593;
                        while(1) {
                         $601 = HEAP32[$$01$i$i259$i>>2]|0;
                         HEAP32[$602>>2] = $601;
                         $603 = HEAP32[$583>>2]|0;
                         $604 = ((($603)) + 4|0);
                         HEAP32[$583>>2] = $604;
                         $605 = ((($$01$i$i259$i)) + 4|0);
                         $606 = ($605|0)==($599|0);
                         if ($606) {
                          break L363;
                         } else {
                          $$01$i$i259$i = $605;$602 = $604;
                         }
                        }
                       }
                      } while(0);
                      $607 = ___cxa_find_matching_catch_2()|0;
                      $608 = tempRet0;
                      $609 = HEAP32[$581>>2]|0;
                      $610 = ($609|0)==(0|0);
                      $611 = $609;
                      if (!($610)) {
                       $612 = HEAP32[$583>>2]|0;
                       $613 = ($612|0)==($609|0);
                       if (!($613)) {
                        $scevgep$i$i$i$i260$i = ((($612)) + -4|0);
                        $614 = $scevgep$i$i$i$i260$i;
                        $615 = (($614) - ($611))|0;
                        $616 = $615 >>> 2;
                        $617 = $616 ^ -1;
                        $scevgep4$i$i$i$i261$i = (($612) + ($617<<2)|0);
                        HEAP32[$583>>2] = $scevgep4$i$i$i$i261$i;
                       }
                       __ZdlPv($609);
                      }
                      $618 = ((($529)) + 16|0);
                      $619 = HEAP32[$618>>2]|0;
                      $620 = ($619|0)==(0|0);
                      $621 = $619;
                      if ($620) {
                       $eh$lpad$body$i$index51Z2D = $608;$eh$lpad$body$i$indexZ2D = $607;
                       label = 289;
                       break L241;
                      }
                      $622 = HEAP32[$536>>2]|0;
                      $623 = ($622|0)==($619|0);
                      if (!($623)) {
                       $scevgep$i$i$i$i$i$i$i$i120 = ((($622)) + -8|0);
                       $624 = $scevgep$i$i$i$i$i$i$i$i120;
                       $625 = (($624) - ($621))|0;
                       $626 = $625 >>> 3;
                       $627 = $626 ^ -1;
                       $scevgep4$i$i$i$i$i$i$i$i121 = (($622) + ($627<<3)|0);
                       HEAP32[$536>>2] = $scevgep4$i$i$i$i$i$i$i$i121;
                      }
                      __ZdlPv($619);
                      $eh$lpad$body$i$index51Z2D = $608;$eh$lpad$body$i$indexZ2D = $607;
                      label = 289;
                      break L241;
                     }
                    } while(0);
                    $628 = HEAP32[$528>>2]|0;
                    $629 = ((($628)) + 40|0);
                    HEAP32[$528>>2] = $629;
                    label = 272;
                   }
                  } while(0);
                  L385: do {
                   if ((label|0) == 272) {
                    $854 = HEAP32[$525>>2]|0;
                    $855 = ($854|0)==(0|0);
                    $856 = $854;
                    if (!($855)) {
                     $857 = HEAP32[$526>>2]|0;
                     $858 = ($857|0)==($854|0);
                     if (!($858)) {
                      $scevgep$i$i$i$i42$i = ((($857)) + -4|0);
                      $859 = $scevgep$i$i$i$i42$i;
                      $860 = (($859) - ($856))|0;
                      $861 = $860 >>> 2;
                      $862 = $861 ^ -1;
                      $scevgep4$i$i$i$i43$i = (($857) + ($862<<2)|0);
                      HEAP32[$526>>2] = $scevgep4$i$i$i$i43$i;
                     }
                     __ZdlPv($854);
                    }
                    $863 = ((($6)) + 16|0);
                    $864 = HEAP32[$863>>2]|0;
                    $865 = ($864|0)==(0|0);
                    $866 = $864;
                    if (!($865)) {
                     $867 = ((($6)) + 20|0);
                     $868 = HEAP32[$867>>2]|0;
                     $869 = ($868|0)==($864|0);
                     if (!($869)) {
                      $scevgep$i$i$i$i$i$i = ((($868)) + -8|0);
                      $870 = $scevgep$i$i$i$i$i$i;
                      $871 = (($870) - ($866))|0;
                      $872 = $871 >>> 3;
                      $873 = $872 ^ -1;
                      $scevgep4$i$i$i$i$i$i = (($868) + ($873<<3)|0);
                      HEAP32[$867>>2] = $scevgep4$i$i$i$i$i$i;
                     }
                     __ZdlPv($864);
                    }
                    $zone_vector$idx7$val$i = HEAP32[$528>>2]|0;
                    $874 = HEAP32[$blobp_vector>>2]|0;
                    $875 = ((($zone_vector$idx7$val$i)) + -8|0);
                    $876 = HEAP32[$875>>2]|0;
                    $877 = ((($zone_vector$idx7$val$i)) + -4|0);
                    $878 = HEAP32[$877>>2]|0;
                    $879 = ($876|0)==($878|0);
                    if ($879) {
                     $883 = ((($zone_vector$idx7$val$i)) + -12|0);
                     __THREW__ = 0;
                     invoke_vii(70,($883|0),($874|0));
                     $884 = __THREW__; __THREW__ = 0;
                     $885 = $884&1;
                     if ($885) {
                      break L230;
                     }
                    } else {
                     $880 = HEAP32[$874>>2]|0;
                     HEAP32[$876>>2] = $880;
                     $881 = HEAP32[$875>>2]|0;
                     $882 = ((($881)) + 4|0);
                     HEAP32[$875>>2] = $882;
                    }
                    $886 = HEAP32[$15>>2]|0;
                    $887 = HEAP32[$blobp_vector>>2]|0;
                    $888 = (($886) - ($887))|0;
                    $889 = $888 >> 2;
                    $890 = ($889>>>0)>(1);
                    $$cast453$i = $887;
                    L414: do {
                     if ($890) {
                      $891 = ($518*10)|0;
                      $892 = ((($8)) + 28|0);
                      $893 = ((($8)) + 32|0);
                      $894 = ((($8)) + 36|0);
                      $895 = ((($8)) + 16|0);
                      $896 = ((($8)) + 20|0);
                      $897 = ((($8)) + 28|0);
                      $898 = ((($8)) + 16|0);
                      $899 = $518 << 1;
                      $$cast455$i = $$cast453$i;$i$0454$i = 1;
                      L416: while(1) {
                       $931 = (($$cast455$i) + ($i$0454$i<<2)|0);
                       $932 = HEAP32[$931>>2]|0;
                       $933 = ((($932)) + 12|0);
                       $934 = HEAP32[$933>>2]|0;
                       $935 = ((($932)) + 4|0);
                       $936 = HEAP32[$935>>2]|0;
                       $937 = (($934) + 1)|0;
                       $938 = (($937) - ($936))|0;
                       $939 = ($938|0)>($891|0);
                       L418: do {
                        if ($939) {
                         $944 = ($932|0)==(0|0);
                         if ($944) {
                          break;
                         }
                         __THREW__ = 0;
                         invoke_vi(72,($932|0));
                         $945 = __THREW__; __THREW__ = 0;
                         $946 = $945&1;
                         if ($946) {
                          $$lcssa749 = $932;
                          label = 303;
                          break L416;
                         }
                         __ZdlPv($932);
                        } else {
                         $940 = HEAP32[$528>>2]|0;
                         $941 = HEAP32[$zone_vector>>2]|0;
                         $942 = ($940|0)==($941|0);
                         do {
                          if (!($942)) {
                           $943 = $941;
                           $first$0446$i = -1;$j$0447$i = 0;$zone_vector$idx30$val$i = $943;
                           while(1) {
                            $950 = (($zone_vector$idx30$val$i) + (($j$0447$i*40)|0)|0);
                            __THREW__ = 0;
                            $951 = (invoke_iii(83,($950|0),($932|0))|0);
                            $952 = __THREW__; __THREW__ = 0;
                            $953 = $952&1;
                            if ($953) {
                             label = 31;
                             break L416;
                            }
                            $954 = ($951|0)<($899|0);
                            do {
                             if ($954) {
                              $955 = ($first$0446$i|0)<(0);
                              if ($955) {
                               $first$1$i = $j$0447$i;$j$1$i = $j$0447$i;
                               break;
                              }
                              $zone_vector$idx29$val$i = HEAP32[$zone_vector>>2]|0;
                              $956 = (($zone_vector$idx29$val$i) + (($first$0446$i*40)|0)|0);
                              $957 = (($zone_vector$idx29$val$i) + (($j$0447$i*40)|0)|0);
                              __THREW__ = 0;
                              invoke_vii(84,($956|0),($957|0));
                              $958 = __THREW__; __THREW__ = 0;
                              $959 = $958&1;
                              if ($959) {
                               label = 31;
                               break L416;
                              }
                              $960 = (((($zone_vector$idx29$val$i) + (($first$0446$i*40)|0)|0)) + 28|0);
                              $961 = (((($zone_vector$idx29$val$i) + (($first$0446$i*40)|0)|0)) + 32|0);
                              $962 = HEAP32[$961>>2]|0;
                              HEAP32[$0>>2] = $962;
                              $963 = (((($zone_vector$idx29$val$i) + (($j$0447$i*40)|0)|0)) + 28|0);
                              $964 = HEAP32[$963>>2]|0;
                              HEAP32[$1>>2] = $964;
                              $965 = (((($zone_vector$idx29$val$i) + (($j$0447$i*40)|0)|0)) + 32|0);
                              $966 = HEAP32[$965>>2]|0;
                              HEAP32[$2>>2] = $966;
                              __THREW__ = 0;
                              ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
                              ;HEAP32[$$byval_copy145>>2]=HEAP32[$1>>2]|0;
                              ;HEAP32[$$byval_copy146>>2]=HEAP32[$2>>2]|0;
                              (invoke_iiiii(85,($960|0),($$byval_copy|0),($$byval_copy145|0),($$byval_copy146|0))|0);
                              $967 = __THREW__; __THREW__ = 0;
                              $968 = $967&1;
                              if ($968) {
                               label = 31;
                               break L416;
                              }
                              $969 = HEAP32[$963>>2]|0;
                              $970 = HEAP32[$965>>2]|0;
                              $971 = ($970|0)==($969|0);
                              if (!($971)) {
                               $__new_last2$i$i$i$i62$i = $969;
                               $scevgep$i$i$i$i63$i = ((($970)) + -4|0);
                               $972 = $scevgep$i$i$i$i63$i;
                               $973 = (($972) - ($__new_last2$i$i$i$i62$i))|0;
                               $974 = $973 >>> 2;
                               $975 = $974 ^ -1;
                               $scevgep4$i$i$i$i64$i = (($970) + ($975<<2)|0);
                               HEAP32[$965>>2] = $scevgep4$i$i$i$i64$i;
                              }
                              $zone_vector$idx33$val287288$i = HEAP32[$zone_vector>>2]|0;
                              $$idx$i = ($j$0447$i*40)|0;
                              $976 = (($$idx$i|0) / 40)&-1;
                              $977 = (($zone_vector$idx33$val287288$i) + (($976*40)|0)|0);
                              $978 = ((($977)) + 40|0);
                              $979 = HEAP32[$528>>2]|0;
                              $980 = ($978|0)==($979|0);
                              if ($980) {
                               $$0$lcssa$i$i5$i$i = $977;$2233 = $978;
                               label = 317;
                              } else {
                               $$012$i$i$i$i = $978;$$03$i$i$i$i = $977;
                               while(1) {
                                ;HEAP32[$$03$i$i$i$i>>2]=HEAP32[$$012$i$i$i$i>>2]|0;HEAP32[$$03$i$i$i$i+4>>2]=HEAP32[$$012$i$i$i$i+4>>2]|0;HEAP32[$$03$i$i$i$i+8>>2]=HEAP32[$$012$i$i$i$i+8>>2]|0;HEAP32[$$03$i$i$i$i+12>>2]=HEAP32[$$012$i$i$i$i+12>>2]|0;
                                $981 = ((($$03$i$i$i$i)) + 16|0);
                                $982 = ((($$012$i$i$i$i)) + 16|0);
                                $983 = HEAP32[$982>>2]|0;
                                $984 = ((($$012$i$i$i$i)) + 20|0);
                                $985 = HEAP32[$984>>2]|0;
                                __THREW__ = 0;
                                invoke_viii(86,($981|0),($983|0),($985|0));
                                $986 = __THREW__; __THREW__ = 0;
                                $987 = $986&1;
                                if ($987) {
                                 label = 30;
                                 break L416;
                                }
                                $988 = ((($$03$i$i$i$i)) + 28|0);
                                $989 = ((($$012$i$i$i$i)) + 28|0);
                                $990 = HEAP32[$989>>2]|0;
                                $991 = ((($$012$i$i$i$i)) + 32|0);
                                $992 = HEAP32[$991>>2]|0;
                                __THREW__ = 0;
                                invoke_viii(87,($988|0),($990|0),($992|0));
                                $993 = __THREW__; __THREW__ = 0;
                                $994 = $993&1;
                                if ($994) {
                                 label = 30;
                                 break L416;
                                }
                                $995 = ((($$012$i$i$i$i)) + 40|0);
                                $996 = ((($$03$i$i$i$i)) + 40|0);
                                $997 = ($995|0)==($979|0);
                                if ($997) {
                                 $$lcssa731 = $996;
                                 break;
                                } else {
                                 $$012$i$i$i$i = $995;$$03$i$i$i$i = $996;
                                }
                               }
                               $$pre$i67$i = HEAP32[$528>>2]|0;
                               $998 = ($$pre$i67$i|0)==($$lcssa731|0);
                               if (!($998)) {
                                $$0$lcssa$i$i5$i$i = $$lcssa731;$2233 = $$pre$i67$i;
                                label = 317;
                               }
                              }
                              if ((label|0) == 317) {
                               label = 0;
                               $1000 = $2233;
                               while(1) {
                                $999 = ((($1000)) + -40|0);
                                HEAP32[$528>>2] = $999;
                                $1001 = ((($1000)) + -12|0);
                                $1002 = HEAP32[$1001>>2]|0;
                                $1003 = ($1002|0)==(0|0);
                                $1004 = $1002;
                                if (!($1003)) {
                                 $1005 = ((($1000)) + -8|0);
                                 $1006 = HEAP32[$1005>>2]|0;
                                 $1007 = ($1006|0)==($1002|0);
                                 if (!($1007)) {
                                  $scevgep$i$i$i$i$i$i$i$i$i$i136 = ((($1006)) + -4|0);
                                  $1008 = $scevgep$i$i$i$i$i$i$i$i$i$i136;
                                  $1009 = (($1008) - ($1004))|0;
                                  $1010 = $1009 >>> 2;
                                  $1011 = $1010 ^ -1;
                                  $scevgep4$i$i$i$i$i$i$i$i$i$i137 = (($1006) + ($1011<<2)|0);
                                  HEAP32[$1005>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i137;
                                 }
                                 __ZdlPv($1002);
                                }
                                $1012 = ((($1000)) + -24|0);
                                $1013 = HEAP32[$1012>>2]|0;
                                $1014 = ($1013|0)==(0|0);
                                $1015 = $1013;
                                if (!($1014)) {
                                 $1018 = ((($1000)) + -20|0);
                                 $1019 = HEAP32[$1018>>2]|0;
                                 $1020 = ($1019|0)==($1013|0);
                                 if (!($1020)) {
                                  $scevgep$i$i$i$i$i$i$i$i$i$i68$i = ((($1019)) + -8|0);
                                  $1021 = $scevgep$i$i$i$i$i$i$i$i$i$i68$i;
                                  $1022 = (($1021) - ($1015))|0;
                                  $1023 = $1022 >>> 3;
                                  $1024 = $1023 ^ -1;
                                  $scevgep4$i$i$i$i$i$i$i$i$i$i69$i = (($1019) + ($1024<<3)|0);
                                  HEAP32[$1018>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i69$i;
                                 }
                                 __ZdlPv($1013);
                                }
                                $1016 = HEAP32[$528>>2]|0;
                                $1017 = ($1016|0)==($$0$lcssa$i$i5$i$i|0);
                                if ($1017) {
                                 break;
                                } else {
                                 $1000 = $1016;
                                }
                               }
                              }
                              $1025 = (($j$0447$i) + -1)|0;
                              $first$1$i = $first$0446$i;$j$1$i = $1025;
                             } else {
                              $first$1$i = $first$0446$i;$j$1$i = $j$0447$i;
                             }
                            } while(0);
                            $1026 = (($j$1$i) + 1)|0;
                            $1027 = HEAP32[$528>>2]|0;
                            $1028 = HEAP32[$zone_vector>>2]|0;
                            $1029 = (($1027) - ($1028))|0;
                            $1030 = (($1029|0) / 40)&-1;
                            $1031 = ($1026>>>0)<($1030>>>0);
                            $1032 = $1028;
                            if ($1031) {
                             $first$0446$i = $first$1$i;$j$0447$i = $1026;$zone_vector$idx30$val$i = $1032;
                            } else {
                             $$lcssa732 = $1032;$first$1$i$lcssa = $first$1$i;
                             break;
                            }
                           }
                           $949 = ($first$1$i$lcssa|0)>(-1);
                           if (!($949)) {
                            break;
                           }
                           $1033 = (($$lcssa732) + (($first$1$i$lcssa*40)|0)|0);
                           __THREW__ = 0;
                           invoke_vii(88,($1033|0),($932|0));
                           $1034 = __THREW__; __THREW__ = 0;
                           $1035 = $1034&1;
                           if ($1035) {
                            label = 32;
                            break L416;
                           }
                           $zone_vector$idx26$val$i = HEAP32[$zone_vector>>2]|0;
                           HEAP32[$7>>2] = $932;
                           $1036 = (((($zone_vector$idx26$val$i) + (($first$1$i$lcssa*40)|0)|0)) + 32|0);
                           $1037 = HEAP32[$1036>>2]|0;
                           $1038 = (((($zone_vector$idx26$val$i) + (($first$1$i$lcssa*40)|0)|0)) + 36|0);
                           $1039 = HEAP32[$1038>>2]|0;
                           $1040 = ($1037|0)==($1039|0);
                           if ($1040) {
                            $1044 = (((($zone_vector$idx26$val$i) + (($first$1$i$lcssa*40)|0)|0)) + 28|0);
                            __THREW__ = 0;
                            invoke_vii(70,($1044|0),($7|0));
                            $1045 = __THREW__; __THREW__ = 0;
                            $1046 = $1045&1;
                            if ($1046) {
                             label = 32;
                             break L416;
                            } else {
                             break L418;
                            }
                           } else {
                            $1041 = $932;
                            HEAP32[$1037>>2] = $1041;
                            $1042 = HEAP32[$1036>>2]|0;
                            $1043 = ((($1042)) + 4|0);
                            HEAP32[$1036>>2] = $1043;
                            break L418;
                           }
                          }
                         } while(0);
                         __THREW__ = 0;
                         invoke_vii(80,($8|0),($932|0));
                         $1047 = __THREW__; __THREW__ = 0;
                         $1048 = $1047&1;
                         if ($1048) {
                          label = 32;
                          break L416;
                         }
                         HEAP32[$892>>2] = 0;
                         HEAP32[$893>>2] = 0;
                         HEAP32[$894>>2] = 0;
                         $1049 = HEAP32[$528>>2]|0;
                         $1050 = HEAP32[$530>>2]|0;
                         $1051 = ($1049|0)==($1050|0);
                         do {
                          if ($1051) {
                           $1145 = $1049;
                           $1146 = HEAP32[$zone_vector>>2]|0;
                           $1147 = (($1145) - ($1146))|0;
                           $1148 = (($1147|0) / 40)&-1;
                           $1149 = (($1148) + 1)|0;
                           $1150 = ($1149>>>0)>(107374182);
                           if ($1150) {
                            __THREW__ = 0;
                            invoke_vi(46,($zone_vector|0));
                            $1151 = __THREW__; __THREW__ = 0;
                            $1152 = $1151&1;
                            if ($1152) {
                             label = 442;
                             break L416;
                            }
                            $$pre$i$i81$i = HEAP32[$zone_vector>>2]|0;
                            $$pre$i83$i = HEAP32[$530>>2]|0;
                            $1154 = $$pre$i$i81$i;$1155 = $$pre$i83$i;
                           } else {
                            $1154 = $1146;$1155 = $1145;
                           }
                           $1153 = (($1155) - ($1154))|0;
                           $1156 = (($1153|0) / 40)&-1;
                           $1157 = ($1156>>>0)<(53687091);
                           if ($1157) {
                            $1161 = $1156 << 1;
                            $1162 = ($1161>>>0)<($1149>>>0);
                            $1163 = $1162 ? $1149 : $1161;
                            $1164 = HEAP32[$528>>2]|0;
                            $1165 = (($1164) - ($1154))|0;
                            $1166 = (($1165|0) / 40)&-1;
                            $1167 = ($1163|0)==(0);
                            if ($1167) {
                             $$0$i18$i$i88$i = 0;$1173 = 0;$1174 = $1166;
                            } else {
                             $$0$i17$i$i87$i = $1163;$2234 = $1166;
                             label = 368;
                            }
                           } else {
                            $1158 = HEAP32[$528>>2]|0;
                            $1159 = (($1158) - ($1154))|0;
                            $1160 = (($1159|0) / 40)&-1;
                            $$0$i17$i$i87$i = 107374182;$2234 = $1160;
                            label = 368;
                           }
                           if ((label|0) == 368) {
                            label = 0;
                            $1168 = ($$0$i17$i$i87$i*40)|0;
                            __THREW__ = 0;
                            $1169 = (invoke_ii(29,($1168|0))|0);
                            $1170 = __THREW__; __THREW__ = 0;
                            $1171 = $1170&1;
                            if ($1171) {
                             label = 442;
                             break L416;
                            }
                            $$0$i18$i$i88$i = $$0$i17$i$i87$i;$1173 = $1169;$1174 = $2234;
                           }
                           $1172 = (($1173) + (($1174*40)|0)|0);
                           $1175 = $1172;
                           $1176 = (($1173) + (($$0$i18$i$i88$i*40)|0)|0);
                           $1177 = $1176;
                           ;HEAP32[$1172>>2]=HEAP32[$8>>2]|0;HEAP32[$1172+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$1172+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$1172+12>>2]=HEAP32[$8+12>>2]|0;
                           $1178 = (((($1173) + (($1174*40)|0)|0)) + 16|0);
                           HEAP32[$1178>>2] = 0;
                           $1179 = (((($1173) + (($1174*40)|0)|0)) + 20|0);
                           HEAP32[$1179>>2] = 0;
                           $1180 = (((($1173) + (($1174*40)|0)|0)) + 24|0);
                           HEAP32[$1180>>2] = 0;
                           $1181 = HEAP32[$896>>2]|0;
                           $1182 = HEAP32[$895>>2]|0;
                           $1183 = (($1181) - ($1182))|0;
                           $1184 = $1183 >> 3;
                           $1185 = ($1184|0)==(0);
                           do {
                            if (!($1185)) {
                             $1186 = ($1184>>>0)>(536870911);
                             if ($1186) {
                              __THREW__ = 0;
                              invoke_vi(46,($1178|0));
                              $1187 = __THREW__; __THREW__ = 0;
                              $1188 = $1187&1;
                              if ($1188) {
                               $$lcssa768 = $1173;$$lcssa772 = $1175;$$lcssa776 = $1178;$$lcssa780 = $1179;
                               label = 377;
                               break L416;
                              }
                             }
                             __THREW__ = 0;
                             $1189 = (invoke_ii(29,($1183|0))|0);
                             $1190 = __THREW__; __THREW__ = 0;
                             $1191 = $1190&1;
                             if ($1191) {
                              $$lcssa768 = $1173;$$lcssa772 = $1175;$$lcssa776 = $1178;$$lcssa780 = $1179;
                              label = 377;
                              break L416;
                             }
                             HEAP32[$1179>>2] = $1189;
                             HEAP32[$1178>>2] = $1189;
                             $1192 = (($1189) + ($1184<<3)|0);
                             $1193 = (((($1173) + (($1174*40)|0)|0)) + 24|0);
                             HEAP32[$1193>>2] = $1192;
                             $1194 = HEAP32[$895>>2]|0;
                             $1195 = HEAP32[$896>>2]|0;
                             $1196 = ($1194|0)==($1195|0);
                             if ($1196) {
                              break;
                             }
                             $$01$i$i221$i = $1194;$1203 = $1189;
                             while(1) {
                              $1197 = $$01$i$i221$i;
                              $1198 = $1197;
                              $1199 = HEAP32[$1198>>2]|0;
                              $1200 = (($1197) + 4)|0;
                              $1201 = $1200;
                              $1202 = HEAP32[$1201>>2]|0;
                              $1204 = $1203;
                              $1205 = $1204;
                              HEAP32[$1205>>2] = $1199;
                              $1206 = (($1204) + 4)|0;
                              $1207 = $1206;
                              HEAP32[$1207>>2] = $1202;
                              $1208 = HEAP32[$1179>>2]|0;
                              $1209 = ((($1208)) + 8|0);
                              HEAP32[$1179>>2] = $1209;
                              $1210 = ((($$01$i$i221$i)) + 8|0);
                              $1211 = ($1210|0)==($1195|0);
                              if ($1211) {
                               break;
                              } else {
                               $$01$i$i221$i = $1210;$1203 = $1209;
                              }
                             }
                            }
                           } while(0);
                           $1223 = (((($1173) + (($1174*40)|0)|0)) + 28|0);
                           HEAP32[$1223>>2] = 0;
                           $1224 = (((($1173) + (($1174*40)|0)|0)) + 32|0);
                           HEAP32[$1224>>2] = 0;
                           $1225 = (((($1173) + (($1174*40)|0)|0)) + 36|0);
                           HEAP32[$1225>>2] = 0;
                           $1226 = HEAP32[$893>>2]|0;
                           $1227 = HEAP32[$897>>2]|0;
                           $1228 = (($1226) - ($1227))|0;
                           $1229 = $1228 >> 2;
                           $1230 = ($1229|0)==(0);
                           do {
                            if (!($1230)) {
                             $1231 = ($1229>>>0)>(1073741823);
                             if ($1231) {
                              __THREW__ = 0;
                              invoke_vi(46,($1223|0));
                              $1232 = __THREW__; __THREW__ = 0;
                              $1233 = $1232&1;
                              if ($1233) {
                               $$lcssa765 = $1174;$$lcssa769 = $1173;$$lcssa773 = $1175;$$lcssa781 = $1179;$$lcssa784 = $1223;$$lcssa787 = $1224;
                               label = 388;
                               break L416;
                              }
                             }
                             __THREW__ = 0;
                             $1234 = (invoke_ii(29,($1228|0))|0);
                             $1235 = __THREW__; __THREW__ = 0;
                             $1236 = $1235&1;
                             if ($1236) {
                              $$lcssa765 = $1174;$$lcssa769 = $1173;$$lcssa773 = $1175;$$lcssa781 = $1179;$$lcssa784 = $1223;$$lcssa787 = $1224;
                              label = 388;
                              break L416;
                             }
                             HEAP32[$1224>>2] = $1234;
                             HEAP32[$1223>>2] = $1234;
                             $1237 = (($1234) + ($1229<<2)|0);
                             $1238 = (((($1173) + (($1174*40)|0)|0)) + 36|0);
                             HEAP32[$1238>>2] = $1237;
                             $1239 = HEAP32[$897>>2]|0;
                             $1240 = HEAP32[$893>>2]|0;
                             $1241 = ($1239|0)==($1240|0);
                             if ($1241) {
                              break;
                             }
                             $$01$i$i171$i = $1239;$1243 = $1234;
                             while(1) {
                              $1242 = HEAP32[$$01$i$i171$i>>2]|0;
                              HEAP32[$1243>>2] = $1242;
                              $1244 = HEAP32[$1224>>2]|0;
                              $1245 = ((($1244)) + 4|0);
                              HEAP32[$1224>>2] = $1245;
                              $1246 = ((($$01$i$i171$i)) + 4|0);
                              $1247 = ($1246|0)==($1240|0);
                              if ($1247) {
                               break;
                              } else {
                               $$01$i$i171$i = $1246;$1243 = $1245;
                              }
                             }
                            }
                           } while(0);
                           $1269 = ((($1172)) + 40|0);
                           $1270 = $1269;
                           $1271 = HEAP32[$zone_vector>>2]|0;
                           $1272 = HEAP32[$528>>2]|0;
                           $1273 = ($1272|0)==($1271|0);
                           if ($1273) {
                            $1274 = $1271;
                            $1303 = $1175;$1304 = $1274;$1306 = $1271;
                           } else {
                            $$01$i$i$i$i98$i = $1272;$1276 = $1172;$__v$sroa$6$0$i$i97$i = $1175;
                            while(1) {
                             $1275 = ((($1276)) + -40|0);
                             $1277 = ((($$01$i$i$i$i98$i)) + -40|0);
                             ;HEAP32[$1275>>2]=HEAP32[$1277>>2]|0;HEAP32[$1275+4>>2]=HEAP32[$1277+4>>2]|0;HEAP32[$1275+8>>2]=HEAP32[$1277+8>>2]|0;HEAP32[$1275+12>>2]=HEAP32[$1277+12>>2]|0;
                             $1278 = ((($1276)) + -24|0);
                             $1279 = ((($$01$i$i$i$i98$i)) + -24|0);
                             __THREW__ = 0;
                             invoke_vii(81,($1278|0),($1279|0));
                             $1280 = __THREW__; __THREW__ = 0;
                             $1281 = $1280&1;
                             if ($1281) {
                              $$lcssa770 = $1173;$$lcssa790 = $1270;$__v$sroa$6$0$i$i97$i$lcssa = $__v$sroa$6$0$i$i97$i;
                              label = 418;
                              break L416;
                             }
                             $1282 = ((($1276)) + -12|0);
                             $1283 = ((($$01$i$i$i$i98$i)) + -12|0);
                             __THREW__ = 0;
                             invoke_vii(82,($1282|0),($1283|0));
                             $1284 = __THREW__; __THREW__ = 0;
                             $1285 = $1284&1;
                             if ($1285) {
                              $$lcssa736 = $1276;$$lcssa771 = $1173;$$lcssa791 = $1270;$__v$sroa$6$0$i$i97$i$lcssa733 = $__v$sroa$6$0$i$i97$i;
                              label = 400;
                              break L416;
                             }
                             $1299 = $__v$sroa$6$0$i$i97$i;
                             $1300 = ((($1299)) + -40|0);
                             $1301 = $1300;
                             $1302 = ($1277|0)==($1271|0);
                             if ($1302) {
                              $$lcssa738 = $1301;
                              break;
                             } else {
                              $$01$i$i$i$i98$i = $1277;$1276 = $1300;$__v$sroa$6$0$i$i97$i = $1301;
                             }
                            }
                            $$pre$i$i$i106$i = HEAP32[$zone_vector>>2]|0;
                            $$pre27$i$i107$i = HEAP32[$528>>2]|0;
                            $1303 = $$lcssa738;$1304 = $$pre$i$i$i106$i;$1306 = $$pre27$i$i107$i;
                           }
                           HEAP32[$zone_vector>>2] = $1303;
                           HEAP32[$528>>2] = $1270;
                           HEAP32[$530>>2] = $1177;
                           $1305 = $1304;
                           $1307 = ($1306|0)==($1305|0);
                           if (!($1307)) {
                            $1309 = $1306;
                            while(1) {
                             $1308 = ((($1309)) + -40|0);
                             $1310 = ((($1309)) + -12|0);
                             $1311 = HEAP32[$1310>>2]|0;
                             $1312 = ($1311|0)==(0|0);
                             $1313 = $1311;
                             if (!($1312)) {
                              $1314 = ((($1309)) + -8|0);
                              $1315 = HEAP32[$1314>>2]|0;
                              $1316 = ($1315|0)==($1311|0);
                              if (!($1316)) {
                               $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i110$i = ((($1315)) + -4|0);
                               $1317 = $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i110$i;
                               $1318 = (($1317) - ($1313))|0;
                               $1319 = $1318 >>> 2;
                               $1320 = $1319 ^ -1;
                               $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i111$i = (($1315) + ($1320<<2)|0);
                               HEAP32[$1314>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i111$i;
                              }
                              __ZdlPv($1311);
                             }
                             $1321 = ((($1309)) + -24|0);
                             $1322 = HEAP32[$1321>>2]|0;
                             $1323 = ($1322|0)==(0|0);
                             $1324 = $1322;
                             if (!($1323)) {
                              $1326 = ((($1309)) + -20|0);
                              $1327 = HEAP32[$1326>>2]|0;
                              $1328 = ($1327|0)==($1322|0);
                              if (!($1328)) {
                               $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i116$i = ((($1327)) + -8|0);
                               $1329 = $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i116$i;
                               $1330 = (($1329) - ($1324))|0;
                               $1331 = $1330 >>> 3;
                               $1332 = $1331 ^ -1;
                               $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i117$i = (($1327) + ($1332<<3)|0);
                               HEAP32[$1326>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i117$i;
                              }
                              __ZdlPv($1322);
                             }
                             $1325 = ($1308|0)==($1305|0);
                             if ($1325) {
                              break;
                             } else {
                              $1309 = $1308;
                             }
                            }
                           }
                           $1333 = ($1304|0)==(0);
                           if ($1333) {
                            break;
                           }
                           $1334 = $1304;
                           __ZdlPv($1334);
                          } else {
                           ;HEAP32[$1049>>2]=HEAP32[$8>>2]|0;HEAP32[$1049+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$1049+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$1049+12>>2]=HEAP32[$8+12>>2]|0;
                           $1052 = ((($1049)) + 16|0);
                           HEAP32[$1052>>2] = 0;
                           $1053 = ((($1049)) + 20|0);
                           HEAP32[$1053>>2] = 0;
                           $1054 = ((($1049)) + 24|0);
                           HEAP32[$1054>>2] = 0;
                           $1055 = HEAP32[$896>>2]|0;
                           $1056 = HEAP32[$895>>2]|0;
                           $1057 = (($1055) - ($1056))|0;
                           $1058 = $1057 >> 3;
                           $1059 = ($1058|0)==(0);
                           do {
                            if (!($1059)) {
                             $1060 = ($1058>>>0)>(536870911);
                             if ($1060) {
                              __THREW__ = 0;
                              invoke_vi(46,($1052|0));
                              $1061 = __THREW__; __THREW__ = 0;
                              $1062 = $1061&1;
                              if ($1062) {
                               $$lcssa758 = $1052;$$lcssa760 = $1053;
                               label = 342;
                               break L416;
                              }
                             }
                             __THREW__ = 0;
                             $1063 = (invoke_ii(29,($1057|0))|0);
                             $1064 = __THREW__; __THREW__ = 0;
                             $1065 = $1064&1;
                             if ($1065) {
                              $$lcssa758 = $1052;$$lcssa760 = $1053;
                              label = 342;
                              break L416;
                             }
                             HEAP32[$1053>>2] = $1063;
                             HEAP32[$1052>>2] = $1063;
                             $1066 = (($1063) + ($1058<<3)|0);
                             $1067 = ((($1049)) + 24|0);
                             HEAP32[$1067>>2] = $1066;
                             $1068 = HEAP32[$895>>2]|0;
                             $1069 = HEAP32[$896>>2]|0;
                             $1070 = ($1068|0)==($1069|0);
                             if ($1070) {
                              break;
                             }
                             $$01$i$i193$i = $1068;$1077 = $1063;
                             while(1) {
                              $1071 = $$01$i$i193$i;
                              $1072 = $1071;
                              $1073 = HEAP32[$1072>>2]|0;
                              $1074 = (($1071) + 4)|0;
                              $1075 = $1074;
                              $1076 = HEAP32[$1075>>2]|0;
                              $1078 = $1077;
                              $1079 = $1078;
                              HEAP32[$1079>>2] = $1073;
                              $1080 = (($1078) + 4)|0;
                              $1081 = $1080;
                              HEAP32[$1081>>2] = $1076;
                              $1082 = HEAP32[$1053>>2]|0;
                              $1083 = ((($1082)) + 8|0);
                              HEAP32[$1053>>2] = $1083;
                              $1084 = ((($$01$i$i193$i)) + 8|0);
                              $1085 = ($1084|0)==($1069|0);
                              if ($1085) {
                               break;
                              } else {
                               $$01$i$i193$i = $1084;$1077 = $1083;
                              }
                             }
                            }
                           } while(0);
                           $1097 = ((($1049)) + 28|0);
                           HEAP32[$1097>>2] = 0;
                           $1098 = ((($1049)) + 32|0);
                           HEAP32[$1098>>2] = 0;
                           $1099 = ((($1049)) + 36|0);
                           HEAP32[$1099>>2] = 0;
                           $1100 = HEAP32[$893>>2]|0;
                           $1101 = HEAP32[$897>>2]|0;
                           $1102 = (($1100) - ($1101))|0;
                           $1103 = $1102 >> 2;
                           $1104 = ($1103|0)==(0);
                           do {
                            if (!($1104)) {
                             $1105 = ($1103>>>0)>(1073741823);
                             if ($1105) {
                              __THREW__ = 0;
                              invoke_vi(46,($1097|0));
                              $1106 = __THREW__; __THREW__ = 0;
                              $1107 = $1106&1;
                              if ($1107) {
                               $$lcssa752 = $1049;$$lcssa761 = $1053;$$lcssa762 = $1097;$$lcssa763 = $1098;
                               label = 353;
                               break L416;
                              }
                             }
                             __THREW__ = 0;
                             $1108 = (invoke_ii(29,($1102|0))|0);
                             $1109 = __THREW__; __THREW__ = 0;
                             $1110 = $1109&1;
                             if ($1110) {
                              $$lcssa752 = $1049;$$lcssa761 = $1053;$$lcssa762 = $1097;$$lcssa763 = $1098;
                              label = 353;
                              break L416;
                             }
                             HEAP32[$1098>>2] = $1108;
                             HEAP32[$1097>>2] = $1108;
                             $1111 = (($1108) + ($1103<<2)|0);
                             $1112 = ((($1049)) + 36|0);
                             HEAP32[$1112>>2] = $1111;
                             $1113 = HEAP32[$897>>2]|0;
                             $1114 = HEAP32[$893>>2]|0;
                             $1115 = ($1113|0)==($1114|0);
                             if ($1115) {
                              break;
                             }
                             $$01$i$i201$i = $1113;$1117 = $1108;
                             while(1) {
                              $1116 = HEAP32[$$01$i$i201$i>>2]|0;
                              HEAP32[$1117>>2] = $1116;
                              $1118 = HEAP32[$1098>>2]|0;
                              $1119 = ((($1118)) + 4|0);
                              HEAP32[$1098>>2] = $1119;
                              $1120 = ((($$01$i$i201$i)) + 4|0);
                              $1121 = ($1120|0)==($1114|0);
                              if ($1121) {
                               break;
                              } else {
                               $$01$i$i201$i = $1120;$1117 = $1119;
                              }
                             }
                            }
                           } while(0);
                           $1143 = HEAP32[$528>>2]|0;
                           $1144 = ((($1143)) + 40|0);
                           HEAP32[$528>>2] = $1144;
                          }
                         } while(0);
                         $1367 = HEAP32[$892>>2]|0;
                         $1368 = ($1367|0)==(0|0);
                         $1369 = $1367;
                         if (!($1368)) {
                          $1370 = HEAP32[$893>>2]|0;
                          $1371 = ($1370|0)==($1367|0);
                          if (!($1371)) {
                           $scevgep$i$i$i$i148$i = ((($1370)) + -4|0);
                           $1372 = $scevgep$i$i$i$i148$i;
                           $1373 = (($1372) - ($1369))|0;
                           $1374 = $1373 >>> 2;
                           $1375 = $1374 ^ -1;
                           $scevgep4$i$i$i$i149$i = (($1370) + ($1375<<2)|0);
                           HEAP32[$893>>2] = $scevgep4$i$i$i$i149$i;
                          }
                          __ZdlPv($1367);
                         }
                         $1376 = HEAP32[$898>>2]|0;
                         $1377 = ($1376|0)==(0|0);
                         $1378 = $1376;
                         if (!($1377)) {
                          $1379 = HEAP32[$896>>2]|0;
                          $1380 = ($1379|0)==($1376|0);
                          if (!($1380)) {
                           $scevgep$i$i$i$i$i153$i = ((($1379)) + -8|0);
                           $1381 = $scevgep$i$i$i$i$i153$i;
                           $1382 = (($1381) - ($1378))|0;
                           $1383 = $1382 >>> 3;
                           $1384 = $1383 ^ -1;
                           $scevgep4$i$i$i$i$i154$i = (($1379) + ($1384<<3)|0);
                           HEAP32[$896>>2] = $scevgep4$i$i$i$i$i154$i;
                          }
                          __ZdlPv($1376);
                         }
                         $zone_vector$idx$val$i140 = HEAP32[$528>>2]|0;
                         HEAP32[$9>>2] = $932;
                         $1385 = ((($zone_vector$idx$val$i140)) + -8|0);
                         $1386 = HEAP32[$1385>>2]|0;
                         $1387 = ((($zone_vector$idx$val$i140)) + -4|0);
                         $1388 = HEAP32[$1387>>2]|0;
                         $1389 = ($1386|0)==($1388|0);
                         if ($1389) {
                          $1393 = ((($zone_vector$idx$val$i140)) + -12|0);
                          __THREW__ = 0;
                          invoke_vii(70,($1393|0),($9|0));
                          $1394 = __THREW__; __THREW__ = 0;
                          $1395 = $1394&1;
                          if ($1395) {
                           label = 32;
                           break L416;
                          } else {
                           break;
                          }
                         } else {
                          $1390 = $932;
                          HEAP32[$1386>>2] = $1390;
                          $1391 = HEAP32[$1385>>2]|0;
                          $1392 = ((($1391)) + 4|0);
                          HEAP32[$1385>>2] = $1392;
                          break;
                         }
                        }
                       } while(0);
                       $1416 = (($i$0454$i) + 1)|0;
                       $1417 = HEAP32[$15>>2]|0;
                       $1418 = HEAP32[$blobp_vector>>2]|0;
                       $1419 = (($1417) - ($1418))|0;
                       $1420 = $1419 >> 2;
                       $1421 = ($1416>>>0)<($1420>>>0);
                       $$cast$i141 = $1418;
                       if ($1421) {
                        $$cast455$i = $$cast$i141;$i$0454$i = $1416;
                       } else {
                        $$cast$lcssa$i = $$cast$i141;$$in$i131 = $1417;$$lcssa326$i = $1418;
                        break L414;
                       }
                      }
                      switch (label|0) {
                       case 30: {
                        $97 = ___cxa_find_matching_catch_2()|0;
                        $98 = tempRet0;
                        $eh$lpad$body74$index14Z2D = $98;$eh$lpad$body74$indexZ2D = $97;
                        label = 38;
                        break L115;
                        break;
                       }
                       case 31: {
                        $99 = ___cxa_find_matching_catch_2()|0;
                        $100 = tempRet0;
                        $eh$lpad$body74$index14Z2D = $100;$eh$lpad$body74$indexZ2D = $99;
                        label = 38;
                        break L115;
                        break;
                       }
                       case 32: {
                        $101 = ___cxa_find_matching_catch_2()|0;
                        $102 = tempRet0;
                        $eh$lpad$body74$index14Z2D = $102;$eh$lpad$body74$indexZ2D = $101;
                        label = 38;
                        break L115;
                        break;
                       }
                       case 303: {
                        $947 = ___cxa_find_matching_catch_2()|0;
                        $948 = tempRet0;
                        __ZdlPv($$lcssa749);
                        $$03$i = $947;$$04$i = $948;
                        break L385;
                        break;
                       }
                       case 342: {
                        $1086 = ___cxa_find_matching_catch_2()|0;
                        $1087 = tempRet0;
                        $1088 = HEAP32[$$lcssa758>>2]|0;
                        $1089 = ($1088|0)==(0|0);
                        $1090 = $1088;
                        if ($1089) {
                         $eh$lpad$body144$i$index81Z2D = $1087;$eh$lpad$body144$i$indexZ2D = $1086;
                         break;
                        }
                        $1091 = HEAP32[$$lcssa760>>2]|0;
                        $1092 = ($1091|0)==($1088|0);
                        if (!($1092)) {
                         $scevgep$i$i$i$i194$i = ((($1091)) + -8|0);
                         $1093 = $scevgep$i$i$i$i194$i;
                         $1094 = (($1093) - ($1090))|0;
                         $1095 = $1094 >>> 3;
                         $1096 = $1095 ^ -1;
                         $scevgep4$i$i$i$i195$i = (($1091) + ($1096<<3)|0);
                         HEAP32[$$lcssa760>>2] = $scevgep4$i$i$i$i195$i;
                        }
                        __ZdlPv($1088);
                        $eh$lpad$body144$i$index81Z2D = $1087;$eh$lpad$body144$i$indexZ2D = $1086;
                        break;
                       }
                       case 353: {
                        $1122 = ___cxa_find_matching_catch_2()|0;
                        $1123 = tempRet0;
                        $1124 = HEAP32[$$lcssa762>>2]|0;
                        $1125 = ($1124|0)==(0|0);
                        $1126 = $1124;
                        if (!($1125)) {
                         $1127 = HEAP32[$$lcssa763>>2]|0;
                         $1128 = ($1127|0)==($1124|0);
                         if (!($1128)) {
                          $scevgep$i$i$i$i202$i = ((($1127)) + -4|0);
                          $1129 = $scevgep$i$i$i$i202$i;
                          $1130 = (($1129) - ($1126))|0;
                          $1131 = $1130 >>> 2;
                          $1132 = $1131 ^ -1;
                          $scevgep4$i$i$i$i203$i = (($1127) + ($1132<<2)|0);
                          HEAP32[$$lcssa763>>2] = $scevgep4$i$i$i$i203$i;
                         }
                         __ZdlPv($1124);
                        }
                        $1133 = ((($$lcssa752)) + 16|0);
                        $1134 = HEAP32[$1133>>2]|0;
                        $1135 = ($1134|0)==(0|0);
                        $1136 = $1134;
                        if ($1135) {
                         $eh$lpad$body144$i$index81Z2D = $1123;$eh$lpad$body144$i$indexZ2D = $1122;
                         break;
                        }
                        $1137 = HEAP32[$$lcssa761>>2]|0;
                        $1138 = ($1137|0)==($1134|0);
                        if (!($1138)) {
                         $scevgep$i$i$i$i$i$i$i73$i = ((($1137)) + -8|0);
                         $1139 = $scevgep$i$i$i$i$i$i$i73$i;
                         $1140 = (($1139) - ($1136))|0;
                         $1141 = $1140 >>> 3;
                         $1142 = $1141 ^ -1;
                         $scevgep4$i$i$i$i$i$i$i74$i = (($1137) + ($1142<<3)|0);
                         HEAP32[$$lcssa761>>2] = $scevgep4$i$i$i$i$i$i$i74$i;
                        }
                        __ZdlPv($1134);
                        $eh$lpad$body144$i$index81Z2D = $1123;$eh$lpad$body144$i$indexZ2D = $1122;
                        break;
                       }
                       case 377: {
                        $1212 = ___cxa_find_matching_catch_2()|0;
                        $1213 = tempRet0;
                        $1214 = HEAP32[$$lcssa776>>2]|0;
                        $1215 = ($1214|0)==(0|0);
                        $1216 = $1214;
                        if ($1215) {
                         $1365 = $$lcssa768;$__v$sroa$15$2$i$i126$i = $$lcssa772;$__v$sroa$6$3$i$i125$i = $$lcssa772;$eh$lpad$body$i$i127$i$index66Z2D = $1213;$eh$lpad$body$i$i127$i$indexZ2D = $1212;
                         label = 419;
                         break;
                        }
                        $1217 = HEAP32[$$lcssa780>>2]|0;
                        $1218 = ($1217|0)==($1214|0);
                        if (!($1218)) {
                         $scevgep$i$i$i$i222$i = ((($1217)) + -8|0);
                         $1219 = $scevgep$i$i$i$i222$i;
                         $1220 = (($1219) - ($1216))|0;
                         $1221 = $1220 >>> 3;
                         $1222 = $1221 ^ -1;
                         $scevgep4$i$i$i$i223$i = (($1217) + ($1222<<3)|0);
                         HEAP32[$$lcssa780>>2] = $scevgep4$i$i$i$i223$i;
                        }
                        __ZdlPv($1214);
                        $1365 = $$lcssa768;$__v$sroa$15$2$i$i126$i = $$lcssa772;$__v$sroa$6$3$i$i125$i = $$lcssa772;$eh$lpad$body$i$i127$i$index66Z2D = $1213;$eh$lpad$body$i$i127$i$indexZ2D = $1212;
                        label = 419;
                        break;
                       }
                       case 388: {
                        $1248 = ___cxa_find_matching_catch_2()|0;
                        $1249 = tempRet0;
                        $1250 = HEAP32[$$lcssa784>>2]|0;
                        $1251 = ($1250|0)==(0|0);
                        $1252 = $1250;
                        if (!($1251)) {
                         $1253 = HEAP32[$$lcssa787>>2]|0;
                         $1254 = ($1253|0)==($1250|0);
                         if (!($1254)) {
                          $scevgep$i$i$i$i172$i = ((($1253)) + -4|0);
                          $1255 = $scevgep$i$i$i$i172$i;
                          $1256 = (($1255) - ($1252))|0;
                          $1257 = $1256 >>> 2;
                          $1258 = $1257 ^ -1;
                          $scevgep4$i$i$i$i173$i = (($1253) + ($1258<<2)|0);
                          HEAP32[$$lcssa787>>2] = $scevgep4$i$i$i$i173$i;
                         }
                         __ZdlPv($1250);
                        }
                        $1259 = (((($$lcssa769) + (($$lcssa765*40)|0)|0)) + 16|0);
                        $1260 = HEAP32[$1259>>2]|0;
                        $1261 = ($1260|0)==(0|0);
                        $1262 = $1260;
                        if ($1261) {
                         $1365 = $$lcssa769;$__v$sroa$15$2$i$i126$i = $$lcssa773;$__v$sroa$6$3$i$i125$i = $$lcssa773;$eh$lpad$body$i$i127$i$index66Z2D = $1249;$eh$lpad$body$i$i127$i$indexZ2D = $1248;
                         label = 419;
                         break;
                        }
                        $1263 = HEAP32[$$lcssa781>>2]|0;
                        $1264 = ($1263|0)==($1260|0);
                        if (!($1264)) {
                         $scevgep$i$i$i$i$i$i$i$i91$i = ((($1263)) + -8|0);
                         $1265 = $scevgep$i$i$i$i$i$i$i$i91$i;
                         $1266 = (($1265) - ($1262))|0;
                         $1267 = $1266 >>> 3;
                         $1268 = $1267 ^ -1;
                         $scevgep4$i$i$i$i$i$i$i$i92$i = (($1263) + ($1268<<3)|0);
                         HEAP32[$$lcssa781>>2] = $scevgep4$i$i$i$i$i$i$i$i92$i;
                        }
                        __ZdlPv($1260);
                        $1365 = $$lcssa769;$__v$sroa$15$2$i$i126$i = $$lcssa773;$__v$sroa$6$3$i$i125$i = $$lcssa773;$eh$lpad$body$i$i127$i$index66Z2D = $1249;$eh$lpad$body$i$i127$i$indexZ2D = $1248;
                        label = 419;
                        break;
                       }
                       case 400: {
                        $1286 = ___cxa_find_matching_catch_2()|0;
                        $1287 = tempRet0;
                        $1288 = ((($$lcssa736)) + -24|0);
                        $1289 = HEAP32[$1288>>2]|0;
                        $1290 = ($1289|0)==(0|0);
                        $1291 = $1289;
                        if ($1290) {
                         $1365 = $$lcssa771;$__v$sroa$15$2$i$i126$i = $$lcssa791;$__v$sroa$6$3$i$i125$i = $__v$sroa$6$0$i$i97$i$lcssa733;$eh$lpad$body$i$i127$i$index66Z2D = $1287;$eh$lpad$body$i$i127$i$indexZ2D = $1286;
                         label = 419;
                         break;
                        }
                        $1292 = ((($$lcssa736)) + -20|0);
                        $1293 = HEAP32[$1292>>2]|0;
                        $1294 = ($1293|0)==($1289|0);
                        if (!($1294)) {
                         $scevgep$i$i$i$i$i$i$i$i$i$i101$i = ((($1293)) + -8|0);
                         $1295 = $scevgep$i$i$i$i$i$i$i$i$i$i101$i;
                         $1296 = (($1295) - ($1291))|0;
                         $1297 = $1296 >>> 3;
                         $1298 = $1297 ^ -1;
                         $scevgep4$i$i$i$i$i$i$i$i$i$i102$i = (($1293) + ($1298<<3)|0);
                         HEAP32[$1292>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i102$i;
                        }
                        __ZdlPv($1289);
                        $1365 = $$lcssa771;$__v$sroa$15$2$i$i126$i = $$lcssa791;$__v$sroa$6$3$i$i125$i = $__v$sroa$6$0$i$i97$i$lcssa733;$eh$lpad$body$i$i127$i$index66Z2D = $1287;$eh$lpad$body$i$i127$i$indexZ2D = $1286;
                        label = 419;
                        break;
                       }
                       case 418: {
                        $1335 = ___cxa_find_matching_catch_2()|0;
                        $1336 = tempRet0;
                        $1365 = $$lcssa770;$__v$sroa$15$2$i$i126$i = $$lcssa790;$__v$sroa$6$3$i$i125$i = $__v$sroa$6$0$i$i97$i$lcssa;$eh$lpad$body$i$i127$i$index66Z2D = $1336;$eh$lpad$body$i$i127$i$indexZ2D = $1335;
                        label = 419;
                        break;
                       }
                       case 442: {
                        $1396 = ___cxa_find_matching_catch_2()|0;
                        $1397 = tempRet0;
                        $eh$lpad$body144$i$index81Z2D = $1397;$eh$lpad$body144$i$indexZ2D = $1396;
                        break;
                       }
                      }
                      do {
                       if ((label|0) == 419) {
                        $1337 = $__v$sroa$6$3$i$i125$i;
                        $1338 = $__v$sroa$15$2$i$i126$i;
                        $1339 = ($1338|0)==($1337|0);
                        if (!($1339)) {
                         $1341 = $1338;
                         while(1) {
                          $1340 = ((($1341)) + -40|0);
                          $1342 = ((($1341)) + -12|0);
                          $1343 = HEAP32[$1342>>2]|0;
                          $1344 = ($1343|0)==(0|0);
                          $1345 = $1343;
                          if (!($1344)) {
                           $1346 = ((($1341)) + -8|0);
                           $1347 = HEAP32[$1346>>2]|0;
                           $1348 = ($1347|0)==($1343|0);
                           if (!($1348)) {
                            $scevgep$i$i$i$i$i$i$i$i$i$i$i$i130$i = ((($1347)) + -4|0);
                            $1349 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i130$i;
                            $1350 = (($1349) - ($1345))|0;
                            $1351 = $1350 >>> 2;
                            $1352 = $1351 ^ -1;
                            $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i131$i = (($1347) + ($1352<<2)|0);
                            HEAP32[$1346>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i131$i;
                           }
                           __ZdlPv($1343);
                          }
                          $1353 = ((($1341)) + -24|0);
                          $1354 = HEAP32[$1353>>2]|0;
                          $1355 = ($1354|0)==(0|0);
                          $1356 = $1354;
                          if (!($1355)) {
                           $1358 = ((($1341)) + -20|0);
                           $1359 = HEAP32[$1358>>2]|0;
                           $1360 = ($1359|0)==($1354|0);
                           if (!($1360)) {
                            $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i136$i = ((($1359)) + -8|0);
                            $1361 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i136$i;
                            $1362 = (($1361) - ($1356))|0;
                            $1363 = $1362 >>> 3;
                            $1364 = $1363 ^ -1;
                            $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i137$i = (($1359) + ($1364<<3)|0);
                            HEAP32[$1358>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i137$i;
                           }
                           __ZdlPv($1354);
                          }
                          $1357 = ($1340|0)==($1337|0);
                          if ($1357) {
                           break;
                          } else {
                           $1341 = $1340;
                          }
                         }
                        }
                        $1366 = ($1365|0)==(0|0);
                        if ($1366) {
                         $eh$lpad$body144$i$index81Z2D = $eh$lpad$body$i$i127$i$index66Z2D;$eh$lpad$body144$i$indexZ2D = $eh$lpad$body$i$i127$i$indexZ2D;
                         break;
                        }
                        __ZdlPv($1365);
                        $eh$lpad$body144$i$index81Z2D = $eh$lpad$body$i$i127$i$index66Z2D;$eh$lpad$body144$i$indexZ2D = $eh$lpad$body$i$i127$i$indexZ2D;
                       }
                      } while(0);
                      $1398 = HEAP32[$892>>2]|0;
                      $1399 = ($1398|0)==(0|0);
                      $1400 = $1398;
                      if (!($1399)) {
                       $1401 = HEAP32[$893>>2]|0;
                       $1402 = ($1401|0)==($1398|0);
                       if (!($1402)) {
                        $scevgep$i$i$i$i159$i = ((($1401)) + -4|0);
                        $1403 = $scevgep$i$i$i$i159$i;
                        $1404 = (($1403) - ($1400))|0;
                        $1405 = $1404 >>> 2;
                        $1406 = $1405 ^ -1;
                        $scevgep4$i$i$i$i160$i = (($1401) + ($1406<<2)|0);
                        HEAP32[$893>>2] = $scevgep4$i$i$i$i160$i;
                       }
                       __ZdlPv($1398);
                      }
                      $1407 = HEAP32[$898>>2]|0;
                      $1408 = ($1407|0)==(0|0);
                      $1409 = $1407;
                      if ($1408) {
                       $$03$i = $eh$lpad$body144$i$indexZ2D;$$04$i = $eh$lpad$body144$i$index81Z2D;
                       break L385;
                      }
                      $1410 = HEAP32[$896>>2]|0;
                      $1411 = ($1410|0)==($1407|0);
                      if (!($1411)) {
                       $scevgep$i$i$i$i$i164$i = ((($1410)) + -8|0);
                       $1412 = $scevgep$i$i$i$i$i164$i;
                       $1413 = (($1412) - ($1409))|0;
                       $1414 = $1413 >>> 3;
                       $1415 = $1414 ^ -1;
                       $scevgep4$i$i$i$i$i165$i = (($1410) + ($1415<<3)|0);
                       HEAP32[$896>>2] = $scevgep4$i$i$i$i$i165$i;
                      }
                      __ZdlPv($1407);
                      $$03$i = $eh$lpad$body144$i$indexZ2D;$$04$i = $eh$lpad$body144$i$index81Z2D;
                      break L385;
                     } else {
                      $$cast$lcssa$i = $$cast453$i;$$in$i131 = $886;$$lcssa326$i = $887;
                     }
                    } while(0);
                    $900 = $$in$i131;
                    $901 = ($900|0)==($$cast$lcssa$i|0);
                    if (!($901)) {
                     $scevgep$i$i$i$i132 = ((($900)) + -4|0);
                     $902 = $scevgep$i$i$i$i132;
                     $903 = (($902) - ($$lcssa326$i))|0;
                     $904 = $903 >>> 2;
                     $905 = $904 ^ -1;
                     $scevgep4$i$i$i$i133 = (($900) + ($905<<2)|0);
                     HEAP32[$15>>2] = $scevgep4$i$i$i$i133;
                    }
                    $zone_vector$idx8$val$i = HEAP32[$zone_vector>>2]|0;
                    $zone_vector$idx9$val$i = HEAP32[$528>>2]|0;
                    $906 = ($zone_vector$idx8$val$i|0)==($zone_vector$idx9$val$i|0);
                    $907 = $zone_vector$idx9$val$i;
                    $908 = $zone_vector$idx8$val$i;
                    if ($906) {
                     $2232 = 0;
                    } else {
                     $1422 = ((($zone_vector$idx8$val$i)) + 12|0);
                     $1423 = HEAP32[$1422>>2]|0;
                     $2232 = $1423;
                    }
                    HEAP32[$cut_index_vector$i>>2] = 0;
                    $1424 = ((($cut_index_vector$i)) + 4|0);
                    HEAP32[$1424>>2] = 0;
                    $1425 = ((($cut_index_vector$i)) + 8|0);
                    HEAP32[$1425>>2] = 0;
                    $1426 = (($907) - ($908))|0;
                    $1427 = (($1426|0) / 40)&-1;
                    $1428 = ($1427>>>0)>(1);
                    do {
                     if ($1428) {
                      $1429 = ((($cut_index_vector$i)) + 8|0);
                      $2235 = $908;$2236 = $907;$botmax$0440$i = $2232;$i1$0441$i = 1;$zone_vector$idx10$val537$i = $zone_vector$idx8$val$i;
                      L647: while(1) {
                       $1445 = (((($zone_vector$idx10$val537$i) + (($i1$0441$i*40)|0)|0)) + 4|0);
                       $1446 = HEAP32[$1445>>2]|0;
                       $1447 = ($1446|0)>($botmax$0440$i|0);
                       do {
                        if ($1447) {
                         HEAP32[$10>>2] = $i1$0441$i;
                         $1448 = HEAP32[$1424>>2]|0;
                         $1449 = HEAP32[$1429>>2]|0;
                         $1450 = ($1448|0)==($1449|0);
                         if (!($1450)) {
                          HEAP32[$1448>>2] = $i1$0441$i;
                          $1451 = ((($1448)) + 4|0);
                          HEAP32[$1424>>2] = $1451;
                          $1486 = $2235;$1487 = $2236;$zone_vector$idx10$val$i = $zone_vector$idx10$val537$i;
                          break;
                         }
                         __THREW__ = 0;
                         invoke_vii(48,($cut_index_vector$i|0),($10|0));
                         $1452 = __THREW__; __THREW__ = 0;
                         $1453 = $1452&1;
                         if ($1453) {
                          label = 473;
                          break L647;
                         }
                         $zone_vector$idx10$val$pre$i = HEAP32[$zone_vector>>2]|0;
                         $$pre$i143 = HEAP32[$528>>2]|0;
                         $1454 = $zone_vector$idx10$val$pre$i;
                         $1486 = $1454;$1487 = $$pre$i143;$zone_vector$idx10$val$i = $zone_vector$idx10$val$pre$i;
                        } else {
                         $1486 = $2235;$1487 = $2236;$zone_vector$idx10$val$i = $zone_vector$idx10$val537$i;
                        }
                       } while(0);
                       $1480 = (((($zone_vector$idx10$val$i) + (($i1$0441$i*40)|0)|0)) + 12|0);
                       $1481 = HEAP32[$1480>>2]|0;
                       $1482 = ($botmax$0440$i|0)<($1481|0);
                       $1483 = $1482 ? $1481 : $botmax$0440$i;
                       $1484 = (($i1$0441$i) + 1)|0;
                       $1485 = (($1487) - ($1486))|0;
                       $1488 = (($1485|0) / 40)&-1;
                       $1489 = ($1484>>>0)<($1488>>>0);
                       $1490 = $1486;
                       if ($1489) {
                        $2235 = $1486;$2236 = $1487;$botmax$0440$i = $1483;$i1$0441$i = $1484;$zone_vector$idx10$val537$i = $1490;
                       } else {
                        $$lcssa730 = $1488;
                        break;
                       }
                      }
                      if ((label|0) == 473) {
                       $1467 = ___cxa_find_matching_catch_2()|0;
                       $1468 = tempRet0;
                       $eh$lpad$body218$i$index101Z2D = $1468;$eh$lpad$body218$i$indexZ2D = $1467;
                       break;
                      }
                      $$pre539$i = HEAP32[$1424>>2]|0;
                      $$pre540$i = HEAP32[$1429>>2]|0;
                      HEAP32[$11>>2] = $$lcssa730;
                      $1430 = ($$pre539$i|0)==($$pre540$i|0);
                      if ($1430) {
                       label = 460;
                       break;
                      }
                      HEAP32[$$pre539$i>>2] = $$lcssa730;
                      $1431 = ((($$pre539$i)) + 4|0);
                      HEAP32[$1424>>2] = $1431;
                      $1432 = $1431;
                      $$pre$phi$i142Z2D = $1424;$1434 = $1432;$2237 = $1431;
                      label = 458;
                     } else {
                      HEAP32[$11>>2] = $1427;
                      label = 460;
                     }
                    } while(0);
                    do {
                     if ((label|0) == 460) {
                      __THREW__ = 0;
                      invoke_vii(48,($cut_index_vector$i|0),($11|0));
                      $1442 = __THREW__; __THREW__ = 0;
                      $1443 = $1442&1;
                      if ($1443) {
                       $1469 = ___cxa_find_matching_catch_2()|0;
                       $1470 = tempRet0;
                       $eh$lpad$body218$i$index101Z2D = $1470;$eh$lpad$body218$i$indexZ2D = $1469;
                       break;
                      } else {
                       $$pre542$i = HEAP32[$1424>>2]|0;
                       $1444 = $$pre542$i;
                       $$pre$phi$i142Z2D = $1424;$1434 = $$pre542$i;$2237 = $1444;
                       label = 458;
                       break;
                      }
                     }
                    } while(0);
                    L666: do {
                     if ((label|0) == 458) {
                      $1433 = HEAP32[$cut_index_vector$i>>2]|0;
                      $1435 = ($1434|0)==($1433|0);
                      $1436 = $1433;
                      do {
                       if ($1435) {
                        $1492 = $1436;$1495 = $2237;
                       } else {
                        $1437 = ((($__t$i$i)) + 16|0);
                        $1438 = ((($__t$i$i)) + 28|0);
                        $$pre$i211$i = ((($__t$i$i)) + 28|0);
                        $1439 = ((($__t$i$i)) + 16|0);
                        $1440 = ((($__t$i$i)) + 20|0);
                        $1441 = ((($__t$i$i)) + 32|0);
                        $1502 = $1436;$begin$0436$i = 0;$cut$0437$i = 0;
                        L670: while(1) {
                         $1501 = (($1502) + ($cut$0437$i<<2)|0);
                         $1503 = HEAP32[$1501>>2]|0;
                         $1504 = (($begin$0436$i) + 1)|0;
                         $1505 = ($1504>>>0)<($1503>>>0);
                         if ($1505) {
                          $1511 = $1504;$i2$0414$i = $begin$0436$i;
                          while(1) {
                           $first3$0412$i = $i2$0414$i;$j4$0413$i = $1511;
                           while(1) {
                            $zone_vector$idx13$val$i = HEAP32[$zone_vector>>2]|0;
                            $1513 = (($zone_vector$idx13$val$i) + (($j4$0413$i*40)|0)|0);
                            $1514 = (($zone_vector$idx13$val$i) + (($first3$0412$i*40)|0)|0);
                            __THREW__ = 0;
                            $1515 = (invoke_iii(89,($1513|0),($1514|0))|0);
                            $1516 = __THREW__; __THREW__ = 0;
                            $1517 = $1516&1;
                            if ($1517) {
                             label = 467;
                             break L670;
                            }
                            $j4$0$first3$0$i = $1515 ? $j4$0413$i : $first3$0412$i;
                            $1518 = (($j4$0413$i) + 1)|0;
                            $1519 = ($1518>>>0)<($1503>>>0);
                            if ($1519) {
                             $first3$0412$i = $j4$0$first3$0$i;$j4$0413$i = $1518;
                            } else {
                             $j4$0$first3$0$i$lcssa = $j4$0$first3$0$i;
                             break;
                            }
                           }
                           $1509 = ($j4$0$first3$0$i$lcssa|0)==($i2$0414$i|0);
                           if (!($1509)) {
                            $zone_vector$idx15$val$i = HEAP32[$zone_vector>>2]|0;
                            $1520 = (($zone_vector$idx15$val$i) + (($i2$0414$i*40)|0)|0);
                            $1521 = (($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0);
                            ;HEAP32[$__t$i$i>>2]=HEAP32[$1520>>2]|0;HEAP32[$__t$i$i+4>>2]=HEAP32[$1520+4>>2]|0;HEAP32[$__t$i$i+8>>2]=HEAP32[$1520+8>>2]|0;HEAP32[$__t$i$i+12>>2]=HEAP32[$1520+12>>2]|0;
                            $1522 = (((($zone_vector$idx15$val$i) + (($i2$0414$i*40)|0)|0)) + 16|0);
                            __THREW__ = 0;
                            invoke_vii(81,($1437|0),($1522|0));
                            $1523 = __THREW__; __THREW__ = 0;
                            $1524 = $1523&1;
                            if ($1524) {
                             label = 472;
                             break L670;
                            }
                            $1525 = (((($zone_vector$idx15$val$i) + (($i2$0414$i*40)|0)|0)) + 28|0);
                            __THREW__ = 0;
                            invoke_vii(82,($1438|0),($1525|0));
                            $1526 = __THREW__; __THREW__ = 0;
                            $1527 = $1526&1;
                            if ($1527) {
                             label = 496;
                             break L670;
                            }
                            ;HEAP32[$1520>>2]=HEAP32[$1521>>2]|0;HEAP32[$1520+4>>2]=HEAP32[$1521+4>>2]|0;HEAP32[$1520+8>>2]=HEAP32[$1521+8>>2]|0;HEAP32[$1520+12>>2]=HEAP32[$1521+12>>2]|0;
                            $1539 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 16|0);
                            $1540 = HEAP32[$1539>>2]|0;
                            $1541 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 20|0);
                            $1542 = HEAP32[$1541>>2]|0;
                            __THREW__ = 0;
                            invoke_viii(86,($1522|0),($1540|0),($1542|0));
                            $1543 = __THREW__; __THREW__ = 0;
                            $1544 = $1543&1;
                            if ($1544) {
                             label = 513;
                             break L670;
                            }
                            $1545 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 28|0);
                            $1546 = HEAP32[$1545>>2]|0;
                            $1547 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 32|0);
                            $1548 = HEAP32[$1547>>2]|0;
                            __THREW__ = 0;
                            invoke_viii(87,($1525|0),($1546|0),($1548|0));
                            $1549 = __THREW__; __THREW__ = 0;
                            $1550 = $1549&1;
                            if ($1550) {
                             label = 513;
                             break L670;
                            }
                            ;HEAP32[$1521>>2]=HEAP32[$__t$i$i>>2]|0;HEAP32[$1521+4>>2]=HEAP32[$__t$i$i+4>>2]|0;HEAP32[$1521+8>>2]=HEAP32[$__t$i$i+8>>2]|0;HEAP32[$1521+12>>2]=HEAP32[$__t$i$i+12>>2]|0;
                            $1551 = ($__t$i$i|0)==($1521|0);
                            if (!($1551)) {
                             $1552 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 16|0);
                             $1553 = HEAP32[$1439>>2]|0;
                             $1554 = HEAP32[$1440>>2]|0;
                             __THREW__ = 0;
                             invoke_viii(86,($1552|0),($1553|0),($1554|0));
                             $1555 = __THREW__; __THREW__ = 0;
                             $1556 = $1555&1;
                             if ($1556) {
                              label = 513;
                              break L670;
                             }
                             $1557 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 28|0);
                             $1558 = HEAP32[$$pre$i211$i>>2]|0;
                             $1559 = HEAP32[$1441>>2]|0;
                             __THREW__ = 0;
                             invoke_viii(87,($1557|0),($1558|0),($1559|0));
                             $1560 = __THREW__; __THREW__ = 0;
                             $1561 = $1560&1;
                             if ($1561) {
                              label = 513;
                              break L670;
                             }
                            }
                            $1562 = HEAP32[$$pre$i211$i>>2]|0;
                            $1563 = ($1562|0)==(0|0);
                            $1564 = $1562;
                            if (!($1563)) {
                             $1565 = HEAP32[$1441>>2]|0;
                             $1566 = ($1565|0)==($1562|0);
                             if (!($1566)) {
                              $scevgep$i$i$i$i$i213$i = ((($1565)) + -4|0);
                              $1567 = $scevgep$i$i$i$i$i213$i;
                              $1568 = (($1567) - ($1564))|0;
                              $1569 = $1568 >>> 2;
                              $1570 = $1569 ^ -1;
                              $scevgep4$i$i$i$i$i214$i = (($1565) + ($1570<<2)|0);
                              HEAP32[$1441>>2] = $scevgep4$i$i$i$i$i214$i;
                             }
                             __ZdlPv($1562);
                            }
                            $1571 = HEAP32[$1439>>2]|0;
                            $1572 = ($1571|0)==(0|0);
                            $1573 = $1571;
                            if (!($1572)) {
                             $1574 = HEAP32[$1440>>2]|0;
                             $1575 = ($1574|0)==($1571|0);
                             if (!($1575)) {
                              $scevgep$i$i$i$i$i6$i$i = ((($1574)) + -8|0);
                              $1576 = $scevgep$i$i$i$i$i6$i$i;
                              $1577 = (($1576) - ($1573))|0;
                              $1578 = $1577 >>> 3;
                              $1579 = $1578 ^ -1;
                              $scevgep4$i$i$i$i$i7$i$i = (($1574) + ($1579<<3)|0);
                              HEAP32[$1440>>2] = $scevgep4$i$i$i$i$i7$i$i;
                             }
                             __ZdlPv($1571);
                            }
                           }
                           $1510 = (($1511) + 1)|0;
                           $1512 = ($1510>>>0)<($1503>>>0);
                           if ($1512) {
                            $i2$0414$i$phi = $1511;$1511 = $1510;$i2$0414$i = $i2$0414$i$phi;
                           } else {
                            break;
                           }
                          }
                         }
                         $1506 = (($1503) - ($begin$0436$i))|0;
                         $1507 = ($1506>>>0)>(1);
                         $1508 = ($1503>>>0)>($begin$0436$i>>>0);
                         $or$cond416$i = $1508 & $1507;
                         L703: do {
                          if ($or$cond416$i) {
                           $zone_vector$idx20$val$pre$i = HEAP32[$zone_vector>>2]|0;
                           $i5$0418$i = $begin$0436$i;$zone_vector$idx20$val$i = $zone_vector$idx20$val$pre$i;
                           while(1) {
                            $1600 = (((($zone_vector$idx20$val$i) + (($i5$0418$i*40)|0)|0)) + 28|0);
                            $1601 = (((($zone_vector$idx20$val$i) + (($i5$0418$i*40)|0)|0)) + 32|0);
                            $1602 = HEAP32[$1601>>2]|0;
                            $1603 = HEAP32[$1600>>2]|0;
                            $1604 = (($1602) - ($1603))|0;
                            $1605 = $1604 >> 2;
                            $1606 = ($1605>>>0)>(80);
                            if ($1606) {
                             label = 528;
                             break L703;
                            }
                            $1607 = (($zone_vector$idx20$val$i) + (($i5$0418$i*40)|0)|0);
                            $1608 = (($zone_vector$idx20$val$i) + (($begin$0436$i*40)|0)|0);
                            __THREW__ = 0;
                            $1609 = (invoke_iii(90,($1607|0),($1608|0))|0);
                            $1610 = __THREW__; __THREW__ = 0;
                            $1611 = $1610&1;
                            if ($1611) {
                             label = 471;
                             break L670;
                            }
                            $zone_vector$idx17$val$i = HEAP32[$zone_vector>>2]|0;
                            $1612 = (((($zone_vector$idx17$val$i) + (($i5$0418$i*40)|0)|0)) + 12|0);
                            $1613 = HEAP32[$1612>>2]|0;
                            $1614 = (((($zone_vector$idx17$val$i) + (($i5$0418$i*40)|0)|0)) + 4|0);
                            $1615 = HEAP32[$1614>>2]|0;
                            $1616 = (((($zone_vector$idx17$val$i) + (($begin$0436$i*40)|0)|0)) + 12|0);
                            $1617 = HEAP32[$1616>>2]|0;
                            $1618 = (((($zone_vector$idx17$val$i) + (($begin$0436$i*40)|0)|0)) + 4|0);
                            $1619 = HEAP32[$1618>>2]|0;
                            $1620 = (($1613) + 2)|0;
                            $1621 = (($1620) - ($1615))|0;
                            $1622 = (($1621) + ($1617))|0;
                            $1623 = (($1622) - ($1619))|0;
                            $1624 = ($1609|0)>($1623|0);
                            if ($1624) {
                             label = 528;
                             break L703;
                            }
                            $1625 = (($i5$0418$i) + 1)|0;
                            $1626 = ($1625>>>0)<($1503>>>0);
                            if ($1626) {
                             $i5$0418$i = $1625;$zone_vector$idx20$val$i = $zone_vector$idx17$val$i;
                            } else {
                             $join$0$off0$lcssa$i = 1;
                             label = 522;
                             break;
                            }
                           }
                          } else {
                           $join$0$off0$lcssa$i = $1507;
                           label = 522;
                          }
                         } while(0);
                         do {
                          if ((label|0) == 522) {
                           label = 0;
                           $or$cond6422$i = $1508 & $join$0$off0$lcssa$i;
                           if ($or$cond6422$i) {
                            $i6$0424$i = $begin$0436$i;
                            while(1) {
                             $zone_vector$idx22$val$i = HEAP32[$zone_vector>>2]|0;
                             $1628 = (((($zone_vector$idx22$val$i) + (($i6$0424$i*40)|0)|0)) + 12|0);
                             $1629 = HEAP32[$1628>>2]|0;
                             $1630 = (((($zone_vector$idx22$val$i) + (($i6$0424$i*40)|0)|0)) + 4|0);
                             $1631 = HEAP32[$1630>>2]|0;
                             $1632 = (((($zone_vector$idx22$val$i) + (($i6$0424$i*40)|0)|0)) + 28|0);
                             __THREW__ = 0;
                             $1633 = (invoke_ii(79,($1632|0))|0);
                             $1634 = __THREW__; __THREW__ = 0;
                             $1635 = $1634&1;
                             if ($1635) {
                              label = 470;
                              break L670;
                             }
                             $1636 = (($1629) + 1)|0;
                             $1637 = (($1636) - ($1631))|0;
                             $1638 = $1633 << 2;
                             $not$$i = ($1637|0)<=($1638|0);
                             $1639 = (($i6$0424$i) + 1)|0;
                             $1640 = ($1639>>>0)<($1503>>>0);
                             $or$cond6$i = $1640 & $not$$i;
                             if ($or$cond6$i) {
                              $i6$0424$i = $1639;
                             } else {
                              $join$2$off0$lcssa$i = $not$$i;
                              break;
                             }
                            }
                           } else {
                            $join$2$off0$lcssa$i = $join$0$off0$lcssa$i;
                           }
                           if (!($join$2$off0$lcssa$i)) {
                            label = 528;
                            break;
                           }
                           $zone_vector$idx24$val427$i = HEAP32[$zone_vector>>2]|0;
                           if ($1505) {
                            $i7$0428$i = $1504;$zone_vector$idx24$val429$i = $zone_vector$idx24$val427$i;
                            while(1) {
                             $1698 = (($zone_vector$idx24$val429$i) + (($begin$0436$i*40)|0)|0);
                             $1699 = (($zone_vector$idx24$val429$i) + (($i7$0428$i*40)|0)|0);
                             __THREW__ = 0;
                             invoke_vii(84,($1698|0),($1699|0));
                             $1700 = __THREW__; __THREW__ = 0;
                             $1701 = $1700&1;
                             if ($1701) {
                              label = 469;
                              break L670;
                             }
                             $1702 = (((($zone_vector$idx24$val429$i) + (($begin$0436$i*40)|0)|0)) + 28|0);
                             $1703 = (((($zone_vector$idx24$val429$i) + (($begin$0436$i*40)|0)|0)) + 32|0);
                             $1704 = HEAP32[$1703>>2]|0;
                             HEAP32[$3>>2] = $1704;
                             $1705 = (((($zone_vector$idx24$val429$i) + (($i7$0428$i*40)|0)|0)) + 28|0);
                             $1706 = HEAP32[$1705>>2]|0;
                             HEAP32[$4>>2] = $1706;
                             $1707 = (((($zone_vector$idx24$val429$i) + (($i7$0428$i*40)|0)|0)) + 32|0);
                             $1708 = HEAP32[$1707>>2]|0;
                             HEAP32[$5>>2] = $1708;
                             __THREW__ = 0;
                             ;HEAP32[$$byval_copy147>>2]=HEAP32[$3>>2]|0;
                             ;HEAP32[$$byval_copy148>>2]=HEAP32[$4>>2]|0;
                             ;HEAP32[$$byval_copy149>>2]=HEAP32[$5>>2]|0;
                             (invoke_iiiii(85,($1702|0),($$byval_copy147|0),($$byval_copy148|0),($$byval_copy149|0))|0);
                             $1709 = __THREW__; __THREW__ = 0;
                             $1710 = $1709&1;
                             if ($1710) {
                              label = 469;
                              break L670;
                             }
                             $1711 = HEAP32[$1705>>2]|0;
                             $1712 = HEAP32[$1707>>2]|0;
                             $1713 = ($1712|0)==($1711|0);
                             if (!($1713)) {
                              $__new_last2$i$i$i$i$i = $1711;
                              $scevgep$i$i$i$i$i152 = ((($1712)) + -4|0);
                              $1714 = $scevgep$i$i$i$i$i152;
                              $1715 = (($1714) - ($__new_last2$i$i$i$i$i))|0;
                              $1716 = $1715 >>> 2;
                              $1717 = $1716 ^ -1;
                              $scevgep4$i$i$i$i$i153 = (($1712) + ($1717<<2)|0);
                              HEAP32[$1707>>2] = $scevgep4$i$i$i$i$i153;
                             }
                             $1718 = (($i7$0428$i) + 1)|0;
                             $1719 = ($1718>>>0)<($1503>>>0);
                             $zone_vector$idx24$val$i = HEAP32[$zone_vector>>2]|0;
                             if ($1719) {
                              $i7$0428$i = $1718;$zone_vector$idx24$val429$i = $zone_vector$idx24$val$i;
                             } else {
                              $zone_vector$idx24$val$lcssa$i = $zone_vector$idx24$val$i;
                              break;
                             }
                            }
                           } else {
                            $zone_vector$idx24$val$lcssa$i = $zone_vector$idx24$val427$i;
                           }
                           $1641 = (($zone_vector$idx24$val$lcssa$i) + (($1504*40)|0)|0);
                           $1642 = (($zone_vector$idx24$val$lcssa$i) + (($1503*40)|0)|0);
                           $1643 = ($1504|0)==($1503|0);
                           do {
                            if (!($1643)) {
                             $1644 = HEAP32[$528>>2]|0;
                             $1645 = ($1644|0)==($1642|0);
                             if ($1645) {
                              $$0$lcssa$i$i$i$i = $1641;$1664 = $1642;
                             } else {
                              $$012$i$i$i230$i = $1642;$$03$i$i$i229$i = $1641;
                              while(1) {
                               ;HEAP32[$$03$i$i$i229$i>>2]=HEAP32[$$012$i$i$i230$i>>2]|0;HEAP32[$$03$i$i$i229$i+4>>2]=HEAP32[$$012$i$i$i230$i+4>>2]|0;HEAP32[$$03$i$i$i229$i+8>>2]=HEAP32[$$012$i$i$i230$i+8>>2]|0;HEAP32[$$03$i$i$i229$i+12>>2]=HEAP32[$$012$i$i$i230$i+12>>2]|0;
                               $1646 = ($$03$i$i$i229$i|0)==($$012$i$i$i230$i|0);
                               if (!($1646)) {
                                $1647 = ((($$03$i$i$i229$i)) + 16|0);
                                $1648 = ((($$012$i$i$i230$i)) + 16|0);
                                $1649 = HEAP32[$1648>>2]|0;
                                $1650 = ((($$012$i$i$i230$i)) + 20|0);
                                $1651 = HEAP32[$1650>>2]|0;
                                __THREW__ = 0;
                                invoke_viii(86,($1647|0),($1649|0),($1651|0));
                                $1652 = __THREW__; __THREW__ = 0;
                                $1653 = $1652&1;
                                if ($1653) {
                                 label = 468;
                                 break L670;
                                }
                                $1654 = ((($$03$i$i$i229$i)) + 28|0);
                                $1655 = ((($$012$i$i$i230$i)) + 28|0);
                                $1656 = HEAP32[$1655>>2]|0;
                                $1657 = ((($$012$i$i$i230$i)) + 32|0);
                                $1658 = HEAP32[$1657>>2]|0;
                                __THREW__ = 0;
                                invoke_viii(87,($1654|0),($1656|0),($1658|0));
                                $1659 = __THREW__; __THREW__ = 0;
                                $1660 = $1659&1;
                                if ($1660) {
                                 label = 468;
                                 break L670;
                                }
                               }
                               $1661 = ((($$012$i$i$i230$i)) + 40|0);
                               $1662 = ((($$03$i$i$i229$i)) + 40|0);
                               $1663 = ($1661|0)==($1644|0);
                               if ($1663) {
                                $$lcssa = $1662;
                                break;
                               } else {
                                $$012$i$i$i230$i = $1661;$$03$i$i$i229$i = $1662;
                               }
                              }
                              $$pre$i232$i = HEAP32[$528>>2]|0;
                              $$0$lcssa$i$i$i$i = $$lcssa;$1664 = $$pre$i232$i;
                             }
                             $1665 = ($1664|0)==($$0$lcssa$i$i$i$i|0);
                             if ($1665) {
                              break;
                             } else {
                              $1667 = $1664;
                             }
                             while(1) {
                              $1666 = ((($1667)) + -40|0);
                              HEAP32[$528>>2] = $1666;
                              $1668 = ((($1667)) + -12|0);
                              $1669 = HEAP32[$1668>>2]|0;
                              $1670 = ($1669|0)==(0|0);
                              $1671 = $1669;
                              if (!($1670)) {
                               $1672 = ((($1667)) + -8|0);
                               $1673 = HEAP32[$1672>>2]|0;
                               $1674 = ($1673|0)==($1669|0);
                               if (!($1674)) {
                                $scevgep$i$i$i$i$i$i$i$i$i235$i = ((($1673)) + -4|0);
                                $1675 = $scevgep$i$i$i$i$i$i$i$i$i235$i;
                                $1676 = (($1675) - ($1671))|0;
                                $1677 = $1676 >>> 2;
                                $1678 = $1677 ^ -1;
                                $scevgep4$i$i$i$i$i$i$i$i$i236$i = (($1673) + ($1678<<2)|0);
                                HEAP32[$1672>>2] = $scevgep4$i$i$i$i$i$i$i$i$i236$i;
                               }
                               __ZdlPv($1669);
                              }
                              $1679 = ((($1667)) + -24|0);
                              $1680 = HEAP32[$1679>>2]|0;
                              $1681 = ($1680|0)==(0|0);
                              $1682 = $1680;
                              if (!($1681)) {
                               $1691 = ((($1667)) + -20|0);
                               $1692 = HEAP32[$1691>>2]|0;
                               $1693 = ($1692|0)==($1680|0);
                               if (!($1693)) {
                                $scevgep$i$i$i$i$i$i$i$i$i$i241$i = ((($1692)) + -8|0);
                                $1694 = $scevgep$i$i$i$i$i$i$i$i$i$i241$i;
                                $1695 = (($1694) - ($1682))|0;
                                $1696 = $1695 >>> 3;
                                $1697 = $1696 ^ -1;
                                $scevgep4$i$i$i$i$i$i$i$i$i$i242$i = (($1692) + ($1697<<3)|0);
                                HEAP32[$1691>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i242$i;
                               }
                               __ZdlPv($1680);
                              }
                              $1683 = HEAP32[$528>>2]|0;
                              $1684 = ($1683|0)==($$0$lcssa$i$i$i$i|0);
                              if ($1684) {
                               break;
                              } else {
                               $1667 = $1683;
                              }
                             }
                            }
                           } while(0);
                           $1685 = HEAP32[$$pre$phi$i142Z2D>>2]|0;
                           $1686 = HEAP32[$cut_index_vector$i>>2]|0;
                           $1687 = (($1685) - ($1686))|0;
                           $1688 = $1687 >> 2;
                           $1689 = ($cut$0437$i>>>0)<($1688>>>0);
                           $1690 = $1686;
                           if (!($1689)) {
                            $1726 = $1686;$1727 = $1685;$2238 = $1690;$begin$1$i = $1504;
                            break;
                           }
                           $$neg293$i = (1 - ($1506))|0;
                           $i8$0434$i = $cut$0437$i;
                           while(1) {
                            $1720 = (($1690) + ($i8$0434$i<<2)|0);
                            $1721 = HEAP32[$1720>>2]|0;
                            $1722 = (($$neg293$i) + ($1721))|0;
                            HEAP32[$1720>>2] = $1722;
                            $1723 = (($i8$0434$i) + 1)|0;
                            $exitcond = ($1723|0)==($1688|0);
                            if ($exitcond) {
                             $1726 = $1686;$1727 = $1685;$2238 = $1690;$begin$1$i = $1504;
                             break;
                            } else {
                             $i8$0434$i = $1723;
                            }
                           }
                          }
                         } while(0);
                         if ((label|0) == 528) {
                          label = 0;
                          $$pre546$i = HEAP32[$cut_index_vector$i>>2]|0;
                          $1627 = $$pre546$i;
                          $$pre442 = HEAP32[$$pre$phi$i142Z2D>>2]|0;
                          $1726 = $$pre546$i;$1727 = $$pre442;$2238 = $1627;$begin$1$i = $1503;
                         }
                         $1724 = (($cut$0437$i) + 1)|0;
                         $1725 = (($1727) - ($1726))|0;
                         $1728 = $1725 >> 2;
                         $1729 = ($1724>>>0)<($1728>>>0);
                         $1730 = $1726;
                         if ($1729) {
                          $1502 = $1730;$begin$0436$i = $begin$1$i;$cut$0437$i = $1724;
                         } else {
                          $$lcssa728 = $1727;$$lcssa729 = $2238;
                          label = 480;
                          break;
                         }
                        }
                        if ((label|0) == 467) {
                         $1455 = ___cxa_find_matching_catch_2()|0;
                         $1456 = tempRet0;
                         $eh$lpad$body218$i$index101Z2D = $1456;$eh$lpad$body218$i$indexZ2D = $1455;
                         break L666;
                        }
                        else if ((label|0) == 468) {
                         $1457 = ___cxa_find_matching_catch_2()|0;
                         $1458 = tempRet0;
                         $eh$lpad$body218$i$index101Z2D = $1458;$eh$lpad$body218$i$indexZ2D = $1457;
                         break L666;
                        }
                        else if ((label|0) == 469) {
                         $1459 = ___cxa_find_matching_catch_2()|0;
                         $1460 = tempRet0;
                         $eh$lpad$body218$i$index101Z2D = $1460;$eh$lpad$body218$i$indexZ2D = $1459;
                         break L666;
                        }
                        else if ((label|0) == 470) {
                         $1461 = ___cxa_find_matching_catch_2()|0;
                         $1462 = tempRet0;
                         $eh$lpad$body218$i$index101Z2D = $1462;$eh$lpad$body218$i$indexZ2D = $1461;
                         break L666;
                        }
                        else if ((label|0) == 471) {
                         $1463 = ___cxa_find_matching_catch_2()|0;
                         $1464 = tempRet0;
                         $eh$lpad$body218$i$index101Z2D = $1464;$eh$lpad$body218$i$indexZ2D = $1463;
                         break L666;
                        }
                        else if ((label|0) == 472) {
                         $1465 = ___cxa_find_matching_catch_2()|0;
                         $1466 = tempRet0;
                         $eh$lpad$body218$i$index101Z2D = $1466;$eh$lpad$body218$i$indexZ2D = $1465;
                         break L666;
                        }
                        else if ((label|0) == 480) {
                         $1491 = $$lcssa728;
                         $1492 = $$lcssa729;$1495 = $1491;
                         break;
                        }
                        else if ((label|0) == 496) {
                         $1528 = ___cxa_find_matching_catch_2()|0;
                         $1529 = tempRet0;
                         $1530 = HEAP32[$1439>>2]|0;
                         $1531 = ($1530|0)==(0|0);
                         $1532 = $1530;
                         if ($1531) {
                          $eh$lpad$body218$i$index101Z2D = $1529;$eh$lpad$body218$i$indexZ2D = $1528;
                          break L666;
                         }
                         $1533 = HEAP32[$1440>>2]|0;
                         $1534 = ($1533|0)==($1530|0);
                         if (!($1534)) {
                          $scevgep$i$i$i$i$i$i$i146 = ((($1533)) + -8|0);
                          $1535 = $scevgep$i$i$i$i$i$i$i146;
                          $1536 = (($1535) - ($1532))|0;
                          $1537 = $1536 >>> 3;
                          $1538 = $1537 ^ -1;
                          $scevgep4$i$i$i$i$i$i$i147 = (($1533) + ($1538<<3)|0);
                          HEAP32[$1440>>2] = $scevgep4$i$i$i$i$i$i$i147;
                         }
                         __ZdlPv($1530);
                         $eh$lpad$body218$i$index101Z2D = $1529;$eh$lpad$body218$i$indexZ2D = $1528;
                         break L666;
                        }
                        else if ((label|0) == 513) {
                         $1580 = ___cxa_find_matching_catch_2()|0;
                         $1581 = tempRet0;
                         $1582 = HEAP32[$$pre$i211$i>>2]|0;
                         $1583 = ($1582|0)==(0|0);
                         $1584 = $1582;
                         if (!($1583)) {
                          $1585 = HEAP32[$1441>>2]|0;
                          $1586 = ($1585|0)==($1582|0);
                          if (!($1586)) {
                           $scevgep$i$i$i$i11$i$i = ((($1585)) + -4|0);
                           $1587 = $scevgep$i$i$i$i11$i$i;
                           $1588 = (($1587) - ($1584))|0;
                           $1589 = $1588 >>> 2;
                           $1590 = $1589 ^ -1;
                           $scevgep4$i$i$i$i12$i$i = (($1585) + ($1590<<2)|0);
                           HEAP32[$1441>>2] = $scevgep4$i$i$i$i12$i$i;
                          }
                          __ZdlPv($1582);
                         }
                         $1591 = HEAP32[$1439>>2]|0;
                         $1592 = ($1591|0)==(0|0);
                         $1593 = $1591;
                         if ($1592) {
                          $eh$lpad$body218$i$index101Z2D = $1581;$eh$lpad$body218$i$indexZ2D = $1580;
                          break L666;
                         }
                         $1594 = HEAP32[$1440>>2]|0;
                         $1595 = ($1594|0)==($1591|0);
                         if (!($1595)) {
                          $scevgep$i$i$i$i$i16$i$i = ((($1594)) + -8|0);
                          $1596 = $scevgep$i$i$i$i$i16$i$i;
                          $1597 = (($1596) - ($1593))|0;
                          $1598 = $1597 >>> 3;
                          $1599 = $1598 ^ -1;
                          $scevgep4$i$i$i$i$i17$i$i = (($1594) + ($1599<<3)|0);
                          HEAP32[$1440>>2] = $scevgep4$i$i$i$i$i17$i$i;
                         }
                         __ZdlPv($1591);
                         $eh$lpad$body218$i$index101Z2D = $1581;$eh$lpad$body218$i$indexZ2D = $1580;
                         break L666;
                        }
                       }
                      } while(0);
                      $1493 = ($1492|0)==(0|0);
                      $1494 = $1492;
                      if (!($1493)) {
                       $1496 = ($1495|0)==($1492|0);
                       if (!($1496)) {
                        $scevgep$i$i$i186$i = ((($1495)) + -4|0);
                        $1497 = $scevgep$i$i$i186$i;
                        $1498 = (($1497) - ($1494))|0;
                        $1499 = $1498 >>> 2;
                        $1500 = $1499 ^ -1;
                        $scevgep4$i$i$i187$i = (($1495) + ($1500<<2)|0);
                        HEAP32[$1424>>2] = $scevgep4$i$i$i187$i;
                       }
                       __ZdlPv($1492);
                      }
                      break L237;
                     }
                    } while(0);
                    $1471 = HEAP32[$cut_index_vector$i>>2]|0;
                    $1472 = ($1471|0)==(0|0);
                    $1473 = $1471;
                    if ($1472) {
                     $$03$i = $eh$lpad$body218$i$indexZ2D;$$04$i = $eh$lpad$body218$i$index101Z2D;
                     break;
                    }
                    $1474 = HEAP32[$1424>>2]|0;
                    $1475 = ($1474|0)==($1471|0);
                    if (!($1475)) {
                     $scevgep$i$i$i183$i = ((($1474)) + -4|0);
                     $1476 = $scevgep$i$i$i183$i;
                     $1477 = (($1476) - ($1473))|0;
                     $1478 = $1477 >>> 2;
                     $1479 = $1478 ^ -1;
                     $scevgep4$i$i$i184$i = (($1474) + ($1479<<2)|0);
                     HEAP32[$1424>>2] = $scevgep4$i$i$i184$i;
                    }
                    __ZdlPv($1471);
                    $$03$i = $eh$lpad$body218$i$indexZ2D;$$04$i = $eh$lpad$body218$i$index101Z2D;
                   }
                   else if ((label|0) == 289) {
                    $911 = HEAP32[$525>>2]|0;
                    $912 = ($911|0)==(0|0);
                    $913 = $911;
                    if (!($912)) {
                     $914 = HEAP32[$526>>2]|0;
                     $915 = ($914|0)==($911|0);
                     if (!($915)) {
                      $scevgep$i$i$i$i52$i = ((($914)) + -4|0);
                      $916 = $scevgep$i$i$i$i52$i;
                      $917 = (($916) - ($913))|0;
                      $918 = $917 >>> 2;
                      $919 = $918 ^ -1;
                      $scevgep4$i$i$i$i53$i = (($914) + ($919<<2)|0);
                      HEAP32[$526>>2] = $scevgep4$i$i$i$i53$i;
                     }
                     __ZdlPv($911);
                    }
                    $920 = ((($6)) + 16|0);
                    $921 = HEAP32[$920>>2]|0;
                    $922 = ($921|0)==(0|0);
                    $923 = $921;
                    if ($922) {
                     $$03$i = $eh$lpad$body$i$indexZ2D;$$04$i = $eh$lpad$body$i$index51Z2D;
                     break;
                    }
                    $924 = ((($6)) + 20|0);
                    $925 = HEAP32[$924>>2]|0;
                    $926 = ($925|0)==($921|0);
                    if (!($926)) {
                     $scevgep$i$i$i$i$i57$i = ((($925)) + -8|0);
                     $927 = $scevgep$i$i$i$i$i57$i;
                     $928 = (($927) - ($923))|0;
                     $929 = $928 >>> 3;
                     $930 = $929 ^ -1;
                     $scevgep4$i$i$i$i$i58$i = (($925) + ($930<<3)|0);
                     HEAP32[$924>>2] = $scevgep4$i$i$i$i$i58$i;
                    }
                    __ZdlPv($921);
                    $$03$i = $eh$lpad$body$i$indexZ2D;$$04$i = $eh$lpad$body$i$index51Z2D;
                   }
                  } while(0);
                  $eh$lpad$body74$index14Z2D = $$04$i;$eh$lpad$body74$indexZ2D = $$03$i;
                  label = 38;
                  break L115;
                 }
                } while(0);
                $1731 = ((($zone_vector)) + 4|0);
                if ($92) {
                 $1732 = HEAP32[$1731>>2]|0;
                 $1733 = HEAP32[$zone_vector>>2]|0;
                 $1734 = (($1732) - ($1733))|0;
                 $1735 = (($1734|0) / 40)&-1;
                 $1736 = ($1735>>>0)<(2);
                 $1737 = ($1732|0)==($1733|0);
                 $or$cond539 = $1736 | $1737;
                 if ($or$cond539) {
                  $$pre$phiZ2D = $1731;
                 } else {
                  $i$0333 = 0;$zone_vector$idx6$val$in = $1733;
                  while(1) {
                   $zone_vector$idx6$val = $zone_vector$idx6$val$in;
                   $1738 = (($zone_vector$idx6$val) + (($i$0333*40)|0)|0);
                   $1739 = (((($zone_vector$idx6$val) + (($i$0333*40)|0)|0)) + 28|0);
                   __THREW__ = 0;
                   invoke_vii(73,($1738|0),($1739|0));
                   $1740 = __THREW__; __THREW__ = 0;
                   $1741 = $1740&1;
                   if ($1741) {
                    break;
                   }
                   $1742 = (($i$0333) + 1)|0;
                   $1743 = HEAP32[$1731>>2]|0;
                   $1744 = HEAP32[$zone_vector>>2]|0;
                   $1745 = (($1743) - ($1744))|0;
                   $1746 = (($1745|0) / 40)&-1;
                   $1747 = ($1742>>>0)<($1746>>>0);
                   if ($1747) {
                    $i$0333 = $1742;$zone_vector$idx6$val$in = $1744;
                   } else {
                    $$pre$phiZ2D = $1731;
                    break L232;
                   }
                  }
                  $95 = ___cxa_find_matching_catch_2()|0;
                  $96 = tempRet0;
                  $eh$lpad$body74$index14Z2D = $96;$eh$lpad$body74$indexZ2D = $95;
                  label = 38;
                  break L115;
                 }
                } else {
                 $$pre$phiZ2D = $1731;
                }
               } else {
                label = 563;
               }
              } else {
               label = 563;
              }
             } else {
              label = 563;
             }
            } else {
             label = 563;
            }
           } while(0);
           if ((label|0) == 563) {
            __THREW__ = 0;
            invoke_vii(80,($12|0),($page_image|0));
            $1748 = __THREW__; __THREW__ = 0;
            $1749 = $1748&1;
            if ($1749) {
             break;
            }
            $1750 = ((($12)) + 28|0);
            HEAP32[$1750>>2] = 0;
            $1751 = ((($12)) + 32|0);
            HEAP32[$1751>>2] = 0;
            $1752 = ((($12)) + 36|0);
            HEAP32[$1752>>2] = 0;
            $1753 = ((($zone_vector)) + 4|0);
            $1754 = HEAP32[$1753>>2]|0;
            $1755 = ((($zone_vector)) + 8|0);
            $1756 = HEAP32[$1755>>2]|0;
            $1757 = ($1754|0)==($1756|0);
            $1758 = $1756;
            L805: do {
             if ($1757) {
              $1855 = $1754;
              $1856 = HEAP32[$zone_vector>>2]|0;
              $1857 = (($1855) - ($1856))|0;
              $1858 = (($1857|0) / 40)&-1;
              $1859 = (($1858) + 1)|0;
              $1860 = ($1859>>>0)>(107374182);
              if ($1860) {
               __THREW__ = 0;
               invoke_vi(46,($zone_vector|0));
               $1861 = __THREW__; __THREW__ = 0;
               $1862 = $1861&1;
               if (!($1862)) {
                $$pre$i$i = HEAP32[$zone_vector>>2]|0;
                $$pre$i58 = HEAP32[$1755>>2]|0;
                $$pre$phi$iZ2D = $1755;$1864 = $$pre$i$i;$1865 = $$pre$i58;
                label = 596;
               }
              } else {
               $$pre$phi$iZ2D = $1755;$1864 = $1856;$1865 = $1758;
               label = 596;
              }
              do {
               if ((label|0) == 596) {
                $1863 = (($1865) - ($1864))|0;
                $1866 = (($1863|0) / 40)&-1;
                $1867 = ($1866>>>0)<(53687091);
                if ($1867) {
                 $1871 = $1866 << 1;
                 $1872 = ($1871>>>0)<($1859>>>0);
                 $1873 = $1872 ? $1859 : $1871;
                 $1874 = HEAP32[$1753>>2]|0;
                 $1875 = (($1874) - ($1864))|0;
                 $1876 = (($1875|0) / 40)&-1;
                 $1877 = ($1873|0)==(0);
                 if ($1877) {
                  $$0$i18$i$i = 0;$1883 = 0;$1884 = $1876;
                 } else {
                  $$0$i17$i$i = $1873;$2239 = $1876;
                  label = 599;
                 }
                } else {
                 $1868 = HEAP32[$1753>>2]|0;
                 $1869 = (($1868) - ($1864))|0;
                 $1870 = (($1869|0) / 40)&-1;
                 $$0$i17$i$i = 107374182;$2239 = $1870;
                 label = 599;
                }
                if ((label|0) == 599) {
                 $1878 = ($$0$i17$i$i*40)|0;
                 __THREW__ = 0;
                 $1879 = (invoke_ii(29,($1878|0))|0);
                 $1880 = __THREW__; __THREW__ = 0;
                 $1881 = $1880&1;
                 if ($1881) {
                  break;
                 }
                 $$0$i18$i$i = $$0$i17$i$i;$1883 = $1879;$1884 = $2239;
                }
                $1882 = (($1883) + (($1884*40)|0)|0);
                $1885 = $1882;
                $1886 = (($1883) + (($$0$i18$i$i*40)|0)|0);
                $1887 = $1886;
                ;HEAP32[$1882>>2]=HEAP32[$12>>2]|0;HEAP32[$1882+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$1882+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$1882+12>>2]=HEAP32[$12+12>>2]|0;
                $1888 = (((($1883) + (($1884*40)|0)|0)) + 16|0);
                $1889 = ((($12)) + 16|0);
                HEAP32[$1888>>2] = 0;
                $1890 = (((($1883) + (($1884*40)|0)|0)) + 20|0);
                HEAP32[$1890>>2] = 0;
                $1891 = (((($1883) + (($1884*40)|0)|0)) + 24|0);
                HEAP32[$1891>>2] = 0;
                $1892 = ((($12)) + 20|0);
                $1893 = HEAP32[$1892>>2]|0;
                $1894 = HEAP32[$1889>>2]|0;
                $1895 = (($1893) - ($1894))|0;
                $1896 = $1895 >> 3;
                $1897 = ($1896|0)==(0);
                L820: do {
                 if ($1897) {
                  label = 612;
                 } else {
                  $1898 = ($1896>>>0)>(536870911);
                  if ($1898) {
                   __THREW__ = 0;
                   invoke_vi(46,($1888|0));
                   $1899 = __THREW__; __THREW__ = 0;
                   $1900 = $1899&1;
                   if (!($1900)) {
                    label = 604;
                   }
                  } else {
                   label = 604;
                  }
                  do {
                   if ((label|0) == 604) {
                    __THREW__ = 0;
                    $1901 = (invoke_ii(29,($1895|0))|0);
                    $1902 = __THREW__; __THREW__ = 0;
                    $1903 = $1902&1;
                    if ($1903) {
                     break;
                    }
                    HEAP32[$1890>>2] = $1901;
                    HEAP32[$1888>>2] = $1901;
                    $1904 = (($1901) + ($1896<<3)|0);
                    $1905 = (((($1883) + (($1884*40)|0)|0)) + 24|0);
                    HEAP32[$1905>>2] = $1904;
                    $1906 = HEAP32[$1889>>2]|0;
                    $1907 = HEAP32[$1892>>2]|0;
                    $1908 = ($1906|0)==($1907|0);
                    if ($1908) {
                     label = 612;
                     break L820;
                    }
                    $$01$i$i = $1906;$1915 = $1901;
                    while(1) {
                     $1909 = $$01$i$i;
                     $1910 = $1909;
                     $1911 = HEAP32[$1910>>2]|0;
                     $1912 = (($1909) + 4)|0;
                     $1913 = $1912;
                     $1914 = HEAP32[$1913>>2]|0;
                     $1916 = $1915;
                     $1917 = $1916;
                     HEAP32[$1917>>2] = $1911;
                     $1918 = (($1916) + 4)|0;
                     $1919 = $1918;
                     HEAP32[$1919>>2] = $1914;
                     $1920 = HEAP32[$1890>>2]|0;
                     $1921 = ((($1920)) + 8|0);
                     HEAP32[$1890>>2] = $1921;
                     $1922 = ((($$01$i$i)) + 8|0);
                     $1923 = ($1922|0)==($1907|0);
                     if ($1923) {
                      label = 612;
                      break L820;
                     } else {
                      $$01$i$i = $1922;$1915 = $1921;
                     }
                    }
                   }
                  } while(0);
                  $1924 = ___cxa_find_matching_catch_2()|0;
                  $1925 = tempRet0;
                  $1926 = HEAP32[$1888>>2]|0;
                  $1927 = ($1926|0)==(0|0);
                  $1928 = $1926;
                  if ($1927) {
                   $__v$sroa$15$2$i$i = $1885;$__v$sroa$6$3$i$i = $1885;$eh$lpad$body$i$i$index121Z2D = $1925;$eh$lpad$body$i$i$indexZ2D = $1924;
                  } else {
                   $1929 = HEAP32[$1890>>2]|0;
                   $1930 = ($1929|0)==($1926|0);
                   if (!($1930)) {
                    $scevgep$i$i$i$i172 = ((($1929)) + -8|0);
                    $1931 = $scevgep$i$i$i$i172;
                    $1932 = (($1931) - ($1928))|0;
                    $1933 = $1932 >>> 3;
                    $1934 = $1933 ^ -1;
                    $scevgep4$i$i$i$i173 = (($1929) + ($1934<<3)|0);
                    HEAP32[$1890>>2] = $scevgep4$i$i$i$i173;
                   }
                   __ZdlPv($1926);
                   $__v$sroa$15$2$i$i = $1885;$__v$sroa$6$3$i$i = $1885;$eh$lpad$body$i$i$index121Z2D = $1925;$eh$lpad$body$i$i$indexZ2D = $1924;
                  }
                 }
                } while(0);
                L835: do {
                 if ((label|0) == 612) {
                  $1935 = (((($1883) + (($1884*40)|0)|0)) + 28|0);
                  $1936 = ((($12)) + 28|0);
                  HEAP32[$1935>>2] = 0;
                  $1937 = (((($1883) + (($1884*40)|0)|0)) + 32|0);
                  HEAP32[$1937>>2] = 0;
                  $1938 = (((($1883) + (($1884*40)|0)|0)) + 36|0);
                  HEAP32[$1938>>2] = 0;
                  $1939 = HEAP32[$1751>>2]|0;
                  $1940 = HEAP32[$1936>>2]|0;
                  $1941 = (($1939) - ($1940))|0;
                  $1942 = $1941 >> 2;
                  $1943 = ($1942|0)==(0);
                  L837: do {
                   if (!($1943)) {
                    $1944 = ($1942>>>0)>(1073741823);
                    if ($1944) {
                     __THREW__ = 0;
                     invoke_vi(46,($1935|0));
                     $1945 = __THREW__; __THREW__ = 0;
                     $1946 = $1945&1;
                     if (!($1946)) {
                      label = 615;
                     }
                    } else {
                     label = 615;
                    }
                    do {
                     if ((label|0) == 615) {
                      __THREW__ = 0;
                      $1947 = (invoke_ii(29,($1941|0))|0);
                      $1948 = __THREW__; __THREW__ = 0;
                      $1949 = $1948&1;
                      if ($1949) {
                       break;
                      }
                      HEAP32[$1937>>2] = $1947;
                      HEAP32[$1935>>2] = $1947;
                      $1950 = (($1947) + ($1942<<2)|0);
                      $1951 = (((($1883) + (($1884*40)|0)|0)) + 36|0);
                      HEAP32[$1951>>2] = $1950;
                      $1952 = HEAP32[$1936>>2]|0;
                      $1953 = HEAP32[$1751>>2]|0;
                      $1954 = ($1952|0)==($1953|0);
                      if ($1954) {
                       break L837;
                      }
                      $$01$i$i199 = $1952;$1956 = $1947;
                      while(1) {
                       $1955 = HEAP32[$$01$i$i199>>2]|0;
                       HEAP32[$1956>>2] = $1955;
                       $1957 = HEAP32[$1937>>2]|0;
                       $1958 = ((($1957)) + 4|0);
                       HEAP32[$1937>>2] = $1958;
                       $1959 = ((($$01$i$i199)) + 4|0);
                       $1960 = ($1959|0)==($1953|0);
                       if ($1960) {
                        break L837;
                       } else {
                        $$01$i$i199 = $1959;$1956 = $1958;
                       }
                      }
                     }
                    } while(0);
                    $1961 = ___cxa_find_matching_catch_2()|0;
                    $1962 = tempRet0;
                    $1963 = HEAP32[$1935>>2]|0;
                    $1964 = ($1963|0)==(0|0);
                    $1965 = $1963;
                    if (!($1964)) {
                     $1966 = HEAP32[$1937>>2]|0;
                     $1967 = ($1966|0)==($1963|0);
                     if (!($1967)) {
                      $scevgep$i$i$i$i200 = ((($1966)) + -4|0);
                      $1968 = $scevgep$i$i$i$i200;
                      $1969 = (($1968) - ($1965))|0;
                      $1970 = $1969 >>> 2;
                      $1971 = $1970 ^ -1;
                      $scevgep4$i$i$i$i201 = (($1966) + ($1971<<2)|0);
                      HEAP32[$1937>>2] = $scevgep4$i$i$i$i201;
                     }
                     __ZdlPv($1963);
                    }
                    $1972 = (((($1883) + (($1884*40)|0)|0)) + 16|0);
                    $1973 = HEAP32[$1972>>2]|0;
                    $1974 = ($1973|0)==(0|0);
                    $1975 = $1973;
                    if ($1974) {
                     $__v$sroa$15$2$i$i = $1885;$__v$sroa$6$3$i$i = $1885;$eh$lpad$body$i$i$index121Z2D = $1962;$eh$lpad$body$i$i$indexZ2D = $1961;
                     break L835;
                    }
                    $1976 = HEAP32[$1890>>2]|0;
                    $1977 = ($1976|0)==($1973|0);
                    if (!($1977)) {
                     $scevgep$i$i$i$i$i$i$i$i = ((($1976)) + -8|0);
                     $1978 = $scevgep$i$i$i$i$i$i$i$i;
                     $1979 = (($1978) - ($1975))|0;
                     $1980 = $1979 >>> 3;
                     $1981 = $1980 ^ -1;
                     $scevgep4$i$i$i$i$i$i$i$i = (($1976) + ($1981<<3)|0);
                     HEAP32[$1890>>2] = $scevgep4$i$i$i$i$i$i$i$i;
                    }
                    __ZdlPv($1973);
                    $__v$sroa$15$2$i$i = $1885;$__v$sroa$6$3$i$i = $1885;$eh$lpad$body$i$i$index121Z2D = $1962;$eh$lpad$body$i$i$indexZ2D = $1961;
                    break L835;
                   }
                  } while(0);
                  $1982 = ((($1882)) + 40|0);
                  $1983 = $1982;
                  $1984 = HEAP32[$zone_vector>>2]|0;
                  $1985 = HEAP32[$1753>>2]|0;
                  $1986 = ($1985|0)==($1984|0);
                  do {
                   if ($1986) {
                    $1987 = $1984;
                    $2016 = $1885;$2017 = $1987;$2019 = $1984;
                   } else {
                    $$01$i$i$i$i = $1985;$1989 = $1882;$__v$sroa$6$0$i$i = $1885;
                    while(1) {
                     $1988 = ((($1989)) + -40|0);
                     $1990 = ((($$01$i$i$i$i)) + -40|0);
                     ;HEAP32[$1988>>2]=HEAP32[$1990>>2]|0;HEAP32[$1988+4>>2]=HEAP32[$1990+4>>2]|0;HEAP32[$1988+8>>2]=HEAP32[$1990+8>>2]|0;HEAP32[$1988+12>>2]=HEAP32[$1990+12>>2]|0;
                     $1991 = ((($1989)) + -24|0);
                     $1992 = ((($$01$i$i$i$i)) + -24|0);
                     __THREW__ = 0;
                     invoke_vii(81,($1991|0),($1992|0));
                     $1993 = __THREW__; __THREW__ = 0;
                     $1994 = $1993&1;
                     if ($1994) {
                      $__v$sroa$6$0$i$i$lcssa = $__v$sroa$6$0$i$i;
                      label = 649;
                      break;
                     }
                     $1995 = ((($1989)) + -12|0);
                     $1996 = ((($$01$i$i$i$i)) + -12|0);
                     __THREW__ = 0;
                     invoke_vii(82,($1995|0),($1996|0));
                     $1997 = __THREW__; __THREW__ = 0;
                     $1998 = $1997&1;
                     if ($1998) {
                      $$lcssa803 = $1989;$__v$sroa$6$0$i$i$lcssa800 = $__v$sroa$6$0$i$i;
                      label = 631;
                      break;
                     }
                     $2012 = $__v$sroa$6$0$i$i;
                     $2013 = ((($2012)) + -40|0);
                     $2014 = $2013;
                     $2015 = ($1990|0)==($1984|0);
                     if ($2015) {
                      $$lcssa805 = $2014;
                      label = 636;
                      break;
                     } else {
                      $$01$i$i$i$i = $1990;$1989 = $2013;$__v$sroa$6$0$i$i = $2014;
                     }
                    }
                    if ((label|0) == 631) {
                     $1999 = ___cxa_find_matching_catch_2()|0;
                     $2000 = tempRet0;
                     $2001 = ((($$lcssa803)) + -24|0);
                     $2002 = HEAP32[$2001>>2]|0;
                     $2003 = ($2002|0)==(0|0);
                     $2004 = $2002;
                     if ($2003) {
                      $__v$sroa$15$2$i$i = $1983;$__v$sroa$6$3$i$i = $__v$sroa$6$0$i$i$lcssa800;$eh$lpad$body$i$i$index121Z2D = $2000;$eh$lpad$body$i$i$indexZ2D = $1999;
                      break L835;
                     }
                     $2005 = ((($$lcssa803)) + -20|0);
                     $2006 = HEAP32[$2005>>2]|0;
                     $2007 = ($2006|0)==($2002|0);
                     if (!($2007)) {
                      $scevgep$i$i$i$i$i$i$i$i$i$i = ((($2006)) + -8|0);
                      $2008 = $scevgep$i$i$i$i$i$i$i$i$i$i;
                      $2009 = (($2008) - ($2004))|0;
                      $2010 = $2009 >>> 3;
                      $2011 = $2010 ^ -1;
                      $scevgep4$i$i$i$i$i$i$i$i$i$i = (($2006) + ($2011<<3)|0);
                      HEAP32[$2005>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i;
                     }
                     __ZdlPv($2002);
                     $__v$sroa$15$2$i$i = $1983;$__v$sroa$6$3$i$i = $__v$sroa$6$0$i$i$lcssa800;$eh$lpad$body$i$i$index121Z2D = $2000;$eh$lpad$body$i$i$indexZ2D = $1999;
                     break L835;
                    }
                    else if ((label|0) == 636) {
                     $$pre$i$i$i = HEAP32[$zone_vector>>2]|0;
                     $$pre27$i$i = HEAP32[$1753>>2]|0;
                     $2016 = $$lcssa805;$2017 = $$pre$i$i$i;$2019 = $$pre27$i$i;
                     break;
                    }
                    else if ((label|0) == 649) {
                     $2048 = ___cxa_find_matching_catch_2()|0;
                     $2049 = tempRet0;
                     $__v$sroa$15$2$i$i = $1983;$__v$sroa$6$3$i$i = $__v$sroa$6$0$i$i$lcssa;$eh$lpad$body$i$i$index121Z2D = $2049;$eh$lpad$body$i$i$indexZ2D = $2048;
                     break L835;
                    }
                   }
                  } while(0);
                  HEAP32[$zone_vector>>2] = $2016;
                  HEAP32[$1753>>2] = $1983;
                  HEAP32[$$pre$phi$iZ2D>>2] = $1887;
                  $2018 = $2017;
                  $2020 = ($2019|0)==($2018|0);
                  if (!($2020)) {
                   $2022 = $2019;
                   while(1) {
                    $2021 = ((($2022)) + -40|0);
                    $2023 = ((($2022)) + -12|0);
                    $2024 = HEAP32[$2023>>2]|0;
                    $2025 = ($2024|0)==(0|0);
                    $2026 = $2024;
                    if (!($2025)) {
                     $2027 = ((($2022)) + -8|0);
                     $2028 = HEAP32[$2027>>2]|0;
                     $2029 = ($2028|0)==($2024|0);
                     if (!($2029)) {
                      $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i = ((($2028)) + -4|0);
                      $2030 = $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i;
                      $2031 = (($2030) - ($2026))|0;
                      $2032 = $2031 >>> 2;
                      $2033 = $2032 ^ -1;
                      $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i = (($2028) + ($2033<<2)|0);
                      HEAP32[$2027>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i;
                     }
                     __ZdlPv($2024);
                    }
                    $2034 = ((($2022)) + -24|0);
                    $2035 = HEAP32[$2034>>2]|0;
                    $2036 = ($2035|0)==(0|0);
                    $2037 = $2035;
                    if (!($2036)) {
                     $2039 = ((($2022)) + -20|0);
                     $2040 = HEAP32[$2039>>2]|0;
                     $2041 = ($2040|0)==($2035|0);
                     if (!($2041)) {
                      $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i = ((($2040)) + -8|0);
                      $2042 = $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i;
                      $2043 = (($2042) - ($2037))|0;
                      $2044 = $2043 >>> 3;
                      $2045 = $2044 ^ -1;
                      $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i = (($2040) + ($2045<<3)|0);
                      HEAP32[$2039>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i;
                     }
                     __ZdlPv($2035);
                    }
                    $2038 = ($2021|0)==($2018|0);
                    if ($2038) {
                     break;
                    } else {
                     $2022 = $2021;
                    }
                   }
                  }
                  $2046 = ($2017|0)==(0);
                  if ($2046) {
                   break L805;
                  }
                  $2047 = $2017;
                  __ZdlPv($2047);
                  break L805;
                 }
                } while(0);
                $2050 = $__v$sroa$6$3$i$i;
                $2051 = $__v$sroa$15$2$i$i;
                $2052 = ($2051|0)==($2050|0);
                if (!($2052)) {
                 $2054 = $2051;
                 while(1) {
                  $2053 = ((($2054)) + -40|0);
                  $2055 = ((($2054)) + -12|0);
                  $2056 = HEAP32[$2055>>2]|0;
                  $2057 = ($2056|0)==(0|0);
                  $2058 = $2056;
                  if (!($2057)) {
                   $2059 = ((($2054)) + -8|0);
                   $2060 = HEAP32[$2059>>2]|0;
                   $2061 = ($2060|0)==($2056|0);
                   if (!($2061)) {
                    $scevgep$i$i$i$i$i$i$i$i$i$i$i$i = ((($2060)) + -4|0);
                    $2062 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i;
                    $2063 = (($2062) - ($2058))|0;
                    $2064 = $2063 >>> 2;
                    $2065 = $2064 ^ -1;
                    $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i = (($2060) + ($2065<<2)|0);
                    HEAP32[$2059>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i;
                   }
                   __ZdlPv($2056);
                  }
                  $2066 = ((($2054)) + -24|0);
                  $2067 = HEAP32[$2066>>2]|0;
                  $2068 = ($2067|0)==(0|0);
                  $2069 = $2067;
                  if (!($2068)) {
                   $2071 = ((($2054)) + -20|0);
                   $2072 = HEAP32[$2071>>2]|0;
                   $2073 = ($2072|0)==($2067|0);
                   if (!($2073)) {
                    $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i = ((($2072)) + -8|0);
                    $2074 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i;
                    $2075 = (($2074) - ($2069))|0;
                    $2076 = $2075 >>> 3;
                    $2077 = $2076 ^ -1;
                    $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i = (($2072) + ($2077<<3)|0);
                    HEAP32[$2071>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i;
                   }
                   __ZdlPv($2067);
                  }
                  $2070 = ($2053|0)==($2050|0);
                  if ($2070) {
                   break;
                  } else {
                   $2054 = $2053;
                  }
                 }
                }
                $2078 = ($1883|0)==(0|0);
                if ($2078) {
                 $eh$lpad$body61$index136Z2D = $eh$lpad$body$i$i$index121Z2D;$eh$lpad$body61$indexZ2D = $eh$lpad$body$i$i$indexZ2D;
                 label = 672;
                 break L805;
                }
                __ZdlPv($1883);
                $eh$lpad$body61$index136Z2D = $eh$lpad$body$i$i$index121Z2D;$eh$lpad$body61$indexZ2D = $eh$lpad$body$i$i$indexZ2D;
                label = 672;
                break L805;
               }
              } while(0);
              $2109 = ___cxa_find_matching_catch_2()|0;
              $2110 = tempRet0;
              $eh$lpad$body61$index136Z2D = $2110;$eh$lpad$body61$indexZ2D = $2109;
              label = 672;
             } else {
              ;HEAP32[$1754>>2]=HEAP32[$12>>2]|0;HEAP32[$1754+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$1754+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$1754+12>>2]=HEAP32[$12+12>>2]|0;
              $1759 = ((($1754)) + 16|0);
              $1760 = ((($12)) + 16|0);
              HEAP32[$1759>>2] = 0;
              $1761 = ((($1754)) + 20|0);
              HEAP32[$1761>>2] = 0;
              $1762 = ((($1754)) + 24|0);
              HEAP32[$1762>>2] = 0;
              $1763 = ((($12)) + 20|0);
              $1764 = HEAP32[$1763>>2]|0;
              $1765 = HEAP32[$1760>>2]|0;
              $1766 = (($1764) - ($1765))|0;
              $1767 = $1766 >> 3;
              $1768 = ($1767|0)==(0);
              L911: do {
               if (!($1768)) {
                $1769 = ($1767>>>0)>(536870911);
                if ($1769) {
                 __THREW__ = 0;
                 invoke_vi(46,($1759|0));
                 $1770 = __THREW__; __THREW__ = 0;
                 $1771 = $1770&1;
                 if (!($1771)) {
                  label = 568;
                 }
                } else {
                 label = 568;
                }
                if ((label|0) == 568) {
                 __THREW__ = 0;
                 $1772 = (invoke_ii(29,($1766|0))|0);
                 $1773 = __THREW__; __THREW__ = 0;
                 $1774 = $1773&1;
                 if (!($1774)) {
                  HEAP32[$1761>>2] = $1772;
                  HEAP32[$1759>>2] = $1772;
                  $1775 = (($1772) + ($1767<<3)|0);
                  $1776 = ((($1754)) + 24|0);
                  HEAP32[$1776>>2] = $1775;
                  $1777 = HEAP32[$1760>>2]|0;
                  $1778 = HEAP32[$1763>>2]|0;
                  $1779 = ($1777|0)==($1778|0);
                  if ($1779) {
                   break;
                  }
                  $$01$i$i188 = $1777;$1786 = $1772;
                  while(1) {
                   $1780 = $$01$i$i188;
                   $1781 = $1780;
                   $1782 = HEAP32[$1781>>2]|0;
                   $1783 = (($1780) + 4)|0;
                   $1784 = $1783;
                   $1785 = HEAP32[$1784>>2]|0;
                   $1787 = $1786;
                   $1788 = $1787;
                   HEAP32[$1788>>2] = $1782;
                   $1789 = (($1787) + 4)|0;
                   $1790 = $1789;
                   HEAP32[$1790>>2] = $1785;
                   $1791 = HEAP32[$1761>>2]|0;
                   $1792 = ((($1791)) + 8|0);
                   HEAP32[$1761>>2] = $1792;
                   $1793 = ((($$01$i$i188)) + 8|0);
                   $1794 = ($1793|0)==($1778|0);
                   if ($1794) {
                    break L911;
                   } else {
                    $$01$i$i188 = $1793;$1786 = $1792;
                   }
                  }
                 }
                }
                $1795 = ___cxa_find_matching_catch_2()|0;
                $1796 = tempRet0;
                $1797 = HEAP32[$1759>>2]|0;
                $1798 = ($1797|0)==(0|0);
                $1799 = $1797;
                if ($1798) {
                 $eh$lpad$body61$index136Z2D = $1796;$eh$lpad$body61$indexZ2D = $1795;
                 label = 672;
                 break L805;
                }
                $1800 = HEAP32[$1761>>2]|0;
                $1801 = ($1800|0)==($1797|0);
                if (!($1801)) {
                 $scevgep$i$i$i$i189 = ((($1800)) + -8|0);
                 $1802 = $scevgep$i$i$i$i189;
                 $1803 = (($1802) - ($1799))|0;
                 $1804 = $1803 >>> 3;
                 $1805 = $1804 ^ -1;
                 $scevgep4$i$i$i$i190 = (($1800) + ($1805<<3)|0);
                 HEAP32[$1761>>2] = $scevgep4$i$i$i$i190;
                }
                __ZdlPv($1797);
                $eh$lpad$body61$index136Z2D = $1796;$eh$lpad$body61$indexZ2D = $1795;
                label = 672;
                break L805;
               }
              } while(0);
              $1806 = ((($1754)) + 28|0);
              $1807 = ((($12)) + 28|0);
              HEAP32[$1806>>2] = 0;
              $1808 = ((($1754)) + 32|0);
              HEAP32[$1808>>2] = 0;
              $1809 = ((($1754)) + 36|0);
              HEAP32[$1809>>2] = 0;
              $1810 = HEAP32[$1751>>2]|0;
              $1811 = HEAP32[$1807>>2]|0;
              $1812 = (($1810) - ($1811))|0;
              $1813 = $1812 >> 2;
              $1814 = ($1813|0)==(0);
              L927: do {
               if (!($1814)) {
                $1815 = ($1813>>>0)>(1073741823);
                if ($1815) {
                 __THREW__ = 0;
                 invoke_vi(46,($1806|0));
                 $1816 = __THREW__; __THREW__ = 0;
                 $1817 = $1816&1;
                 if (!($1817)) {
                  label = 579;
                 }
                } else {
                 label = 579;
                }
                if ((label|0) == 579) {
                 __THREW__ = 0;
                 $1818 = (invoke_ii(29,($1812|0))|0);
                 $1819 = __THREW__; __THREW__ = 0;
                 $1820 = $1819&1;
                 if (!($1820)) {
                  HEAP32[$1808>>2] = $1818;
                  HEAP32[$1806>>2] = $1818;
                  $1821 = (($1818) + ($1813<<2)|0);
                  $1822 = ((($1754)) + 36|0);
                  HEAP32[$1822>>2] = $1821;
                  $1823 = HEAP32[$1807>>2]|0;
                  $1824 = HEAP32[$1751>>2]|0;
                  $1825 = ($1823|0)==($1824|0);
                  if ($1825) {
                   break;
                  }
                  $$01$i$i178 = $1823;$1827 = $1818;
                  while(1) {
                   $1826 = HEAP32[$$01$i$i178>>2]|0;
                   HEAP32[$1827>>2] = $1826;
                   $1828 = HEAP32[$1808>>2]|0;
                   $1829 = ((($1828)) + 4|0);
                   HEAP32[$1808>>2] = $1829;
                   $1830 = ((($$01$i$i178)) + 4|0);
                   $1831 = ($1830|0)==($1824|0);
                   if ($1831) {
                    break L927;
                   } else {
                    $$01$i$i178 = $1830;$1827 = $1829;
                   }
                  }
                 }
                }
                $1832 = ___cxa_find_matching_catch_2()|0;
                $1833 = tempRet0;
                $1834 = HEAP32[$1806>>2]|0;
                $1835 = ($1834|0)==(0|0);
                $1836 = $1834;
                if (!($1835)) {
                 $1837 = HEAP32[$1808>>2]|0;
                 $1838 = ($1837|0)==($1834|0);
                 if (!($1838)) {
                  $scevgep$i$i$i$i179 = ((($1837)) + -4|0);
                  $1839 = $scevgep$i$i$i$i179;
                  $1840 = (($1839) - ($1836))|0;
                  $1841 = $1840 >>> 2;
                  $1842 = $1841 ^ -1;
                  $scevgep4$i$i$i$i180 = (($1837) + ($1842<<2)|0);
                  HEAP32[$1808>>2] = $scevgep4$i$i$i$i180;
                 }
                 __ZdlPv($1834);
                }
                $1843 = ((($1754)) + 16|0);
                $1844 = HEAP32[$1843>>2]|0;
                $1845 = ($1844|0)==(0|0);
                $1846 = $1844;
                if ($1845) {
                 $eh$lpad$body61$index136Z2D = $1833;$eh$lpad$body61$indexZ2D = $1832;
                 label = 672;
                 break L805;
                }
                $1847 = HEAP32[$1761>>2]|0;
                $1848 = ($1847|0)==($1844|0);
                if (!($1848)) {
                 $scevgep$i$i$i$i$i$i$i = ((($1847)) + -8|0);
                 $1849 = $scevgep$i$i$i$i$i$i$i;
                 $1850 = (($1849) - ($1846))|0;
                 $1851 = $1850 >>> 3;
                 $1852 = $1851 ^ -1;
                 $scevgep4$i$i$i$i$i$i$i = (($1847) + ($1852<<3)|0);
                 HEAP32[$1761>>2] = $scevgep4$i$i$i$i$i$i$i;
                }
                __ZdlPv($1844);
                $eh$lpad$body61$index136Z2D = $1833;$eh$lpad$body61$indexZ2D = $1832;
                label = 672;
                break L805;
               }
              } while(0);
              $1853 = HEAP32[$1753>>2]|0;
              $1854 = ((($1853)) + 40|0);
              HEAP32[$1753>>2] = $1854;
             }
            } while(0);
            if ((label|0) == 672) {
             $2111 = HEAP32[$1750>>2]|0;
             $2112 = ($2111|0)==(0|0);
             $2113 = $2111;
             if (!($2112)) {
              $2114 = HEAP32[$1751>>2]|0;
              $2115 = ($2114|0)==($2111|0);
              if (!($2115)) {
               $scevgep$i$i$i$i42 = ((($2114)) + -4|0);
               $2116 = $scevgep$i$i$i$i42;
               $2117 = (($2116) - ($2113))|0;
               $2118 = $2117 >>> 2;
               $2119 = $2118 ^ -1;
               $scevgep4$i$i$i$i43 = (($2114) + ($2119<<2)|0);
               HEAP32[$1751>>2] = $scevgep4$i$i$i$i43;
              }
              __ZdlPv($2111);
             }
             $2120 = ((($12)) + 16|0);
             $2121 = HEAP32[$2120>>2]|0;
             $2122 = ($2121|0)==(0|0);
             $2123 = $2121;
             if ($2122) {
              $$0 = $eh$lpad$body61$indexZ2D;$$01 = $eh$lpad$body61$index136Z2D;
              break L115;
             }
             $2124 = ((($12)) + 20|0);
             $2125 = HEAP32[$2124>>2]|0;
             $2126 = ($2125|0)==($2121|0);
             if (!($2126)) {
              $scevgep$i$i$i$i$i = ((($2125)) + -8|0);
              $2127 = $scevgep$i$i$i$i$i;
              $2128 = (($2127) - ($2123))|0;
              $2129 = $2128 >>> 3;
              $2130 = $2129 ^ -1;
              $scevgep4$i$i$i$i$i = (($2125) + ($2130<<3)|0);
              HEAP32[$2124>>2] = $scevgep4$i$i$i$i$i;
             }
             __ZdlPv($2121);
             $$0 = $eh$lpad$body61$indexZ2D;$$01 = $eh$lpad$body61$index136Z2D;
             break L115;
            }
            $2079 = HEAP32[$1750>>2]|0;
            $2080 = ($2079|0)==(0|0);
            $2081 = $2079;
            if (!($2080)) {
             $2082 = HEAP32[$1751>>2]|0;
             $2083 = ($2082|0)==($2079|0);
             if (!($2083)) {
              $scevgep$i$i$i$i47 = ((($2082)) + -4|0);
              $2084 = $scevgep$i$i$i$i47;
              $2085 = (($2084) - ($2081))|0;
              $2086 = $2085 >>> 2;
              $2087 = $2086 ^ -1;
              $scevgep4$i$i$i$i48 = (($2082) + ($2087<<2)|0);
              HEAP32[$1751>>2] = $scevgep4$i$i$i$i48;
             }
             __ZdlPv($2079);
            }
            $2088 = ((($12)) + 16|0);
            $2089 = HEAP32[$2088>>2]|0;
            $2090 = ($2089|0)==(0|0);
            $2091 = $2089;
            if (!($2090)) {
             $2092 = ((($12)) + 20|0);
             $2093 = HEAP32[$2092>>2]|0;
             $2094 = ($2093|0)==($2089|0);
             if (!($2094)) {
              $scevgep$i$i$i$i$i52 = ((($2093)) + -8|0);
              $2095 = $scevgep$i$i$i$i$i52;
              $2096 = (($2095) - ($2091))|0;
              $2097 = $2096 >>> 3;
              $2098 = $2097 ^ -1;
              $scevgep4$i$i$i$i$i53 = (($2093) + ($2098<<3)|0);
              HEAP32[$2092>>2] = $scevgep4$i$i$i$i$i53;
             }
             __ZdlPv($2089);
            }
            $zone_vector$idx$val = HEAP32[$1753>>2]|0;
            $2099 = ((($zone_vector$idx$val)) + -12|0);
            $2100 = HEAP32[$2099>>2]|0;
            $2101 = HEAP32[$blobp_vector>>2]|0;
            HEAP32[$2099>>2] = $2101;
            HEAP32[$blobp_vector>>2] = $2100;
            $2102 = ((($zone_vector$idx$val)) + -8|0);
            $2103 = HEAP32[$2102>>2]|0;
            $2104 = HEAP32[$15>>2]|0;
            HEAP32[$2102>>2] = $2104;
            HEAP32[$15>>2] = $2103;
            $2105 = ((($zone_vector$idx$val)) + -4|0);
            $2106 = ((($blobp_vector)) + 8|0);
            $2107 = HEAP32[$2105>>2]|0;
            $2108 = HEAP32[$2106>>2]|0;
            HEAP32[$2105>>2] = $2108;
            HEAP32[$2106>>2] = $2107;
            $$pre$phiZ2D = $1753;
           }
           $2131 = HEAP32[$$pre$phiZ2D>>2]|0;
           $2132 = HEAP32[$zone_vector>>2]|0;
           $2133 = ($2131|0)==($2132|0);
           L975: do {
            if (!($2133)) {
             $2134 = $2132;$2240 = $2131;$zi$02$i = 0;
             L976: while(1) {
              $zone_vector$idx$val$i = $2134;
              $2135 = (((($zone_vector$idx$val$i) + (($zi$02$i*40)|0)|0)) + 28|0);
              $2136 = (((($zone_vector$idx$val$i) + (($zi$02$i*40)|0)|0)) + 32|0);
              $2137 = HEAP32[$2136>>2]|0;
              $2138 = HEAP32[$2135>>2]|0;
              $2139 = ($2137|0)==($2138|0);
              if ($2139) {
               $2142 = $2134;$2143 = $2240;
              } else {
               $$in$i = $2138;$bvi$01$i = 0;
               while(1) {
                $2146 = $$in$i;
                $2147 = (($2146) + ($bvi$01$i<<2)|0);
                $2148 = HEAP32[$2147>>2]|0;
                __THREW__ = 0;
                invoke_vi(91,($2148|0));
                $2149 = __THREW__; __THREW__ = 0;
                $2150 = $2149&1;
                if ($2150) {
                 break L976;
                }
                $2151 = (($bvi$01$i) + 1)|0;
                $2152 = HEAP32[$2136>>2]|0;
                $2153 = HEAP32[$2135>>2]|0;
                $2154 = (($2152) - ($2153))|0;
                $2155 = $2154 >> 2;
                $2156 = ($2151>>>0)<($2155>>>0);
                if ($2156) {
                 $$in$i = $2153;$bvi$01$i = $2151;
                } else {
                 break;
                }
               }
               $$pre$i = HEAP32[$$pre$phiZ2D>>2]|0;
               $$pre7$i = HEAP32[$zone_vector>>2]|0;
               $2142 = $$pre7$i;$2143 = $$pre$i;
              }
              $2140 = (($zi$02$i) + 1)|0;
              $2141 = (($2143) - ($2142))|0;
              $2144 = (($2141|0) / 40)&-1;
              $2145 = ($2140>>>0)<($2144>>>0);
              if ($2145) {
               $2134 = $2142;$2240 = $2143;$zi$02$i = $2140;
              } else {
               break L975;
              }
             }
             $93 = ___cxa_find_matching_catch_2()|0;
             $94 = tempRet0;
             $eh$lpad$body74$index14Z2D = $94;$eh$lpad$body74$indexZ2D = $93;
             label = 38;
             break L115;
            }
           } while(0);
           $2157 = HEAP32[$new_data>>2]|0;
           $2158 = ($2157|0)==(0|0);
           $2159 = $2157;
           if (!($2158)) {
            $2160 = HEAP32[$54>>2]|0;
            $2161 = ($2160|0)==($2157|0);
            if (!($2161)) {
             $scevgep$i$i$i37 = ((($2160)) + -4|0);
             $2162 = $scevgep$i$i$i37;
             $2163 = (($2162) - ($2159))|0;
             $2164 = $2163 >>> 2;
             $2165 = $2164 ^ -1;
             $scevgep4$i$i$i38 = (($2160) + ($2165<<2)|0);
             HEAP32[$54>>2] = $scevgep4$i$i$i38;
            }
            __ZdlPv($2157);
           }
           $2166 = HEAP32[$old_data>>2]|0;
           $2167 = ($2166|0)==(0|0);
           $2168 = $2166;
           if (!($2167)) {
            $2169 = HEAP32[$22>>2]|0;
            $2170 = ($2169|0)==($2166|0);
            if (!($2170)) {
             $scevgep$i$i$i32 = ((($2169)) + -4|0);
             $2171 = $scevgep$i$i$i32;
             $2172 = (($2171) - ($2168))|0;
             $2173 = $2172 >>> 2;
             $2174 = $2173 ^ -1;
             $scevgep4$i$i$i33 = (($2169) + ($2174<<2)|0);
             HEAP32[$22>>2] = $scevgep4$i$i$i33;
            }
            __ZdlPv($2166);
           }
           $2175 = HEAP32[$blobp_vector>>2]|0;
           $2176 = ($2175|0)==(0|0);
           $2177 = $2175;
           if ($2176) {
            STACKTOP = sp;return;
           }
           $2178 = HEAP32[$15>>2]|0;
           $2179 = ($2178|0)==($2175|0);
           if (!($2179)) {
            $scevgep$i$i$i27 = ((($2178)) + -4|0);
            $2180 = $scevgep$i$i$i27;
            $2181 = (($2180) - ($2177))|0;
            $2182 = $2181 >>> 2;
            $2183 = $2182 ^ -1;
            $scevgep4$i$i$i28 = (($2178) + ($2183<<2)|0);
            HEAP32[$15>>2] = $scevgep4$i$i$i28;
           }
           __ZdlPv($2175);
           STACKTOP = sp;return;
          }
         } while(0);
         $111 = ___cxa_find_matching_catch_2()|0;
         $112 = tempRet0;
         $eh$lpad$body74$index14Z2D = $112;$eh$lpad$body74$indexZ2D = $111;
         label = 38;
        }
       } while(0);
       if ((label|0) == 38) {
        $$0 = $eh$lpad$body74$indexZ2D;$$01 = $eh$lpad$body74$index14Z2D;
       }
       $2184 = HEAP32[$new_data>>2]|0;
       $2185 = ($2184|0)==(0|0);
       $2186 = $2184;
       if ($2185) {
        $$1 = $$0;$$12 = $$01;
       } else {
        $2187 = HEAP32[$54>>2]|0;
        $2188 = ($2187|0)==($2184|0);
        if (!($2188)) {
         $scevgep$i$i$i22 = ((($2187)) + -4|0);
         $2189 = $scevgep$i$i$i22;
         $2190 = (($2189) - ($2186))|0;
         $2191 = $2190 >>> 2;
         $2192 = $2191 ^ -1;
         $scevgep4$i$i$i23 = (($2187) + ($2192<<2)|0);
         HEAP32[$54>>2] = $scevgep4$i$i$i23;
        }
        __ZdlPv($2184);
        $$1 = $$0;$$12 = $$01;
       }
      }
      $2193 = HEAP32[$old_data>>2]|0;
      $2194 = ($2193|0)==(0|0);
      $2195 = $2193;
      if ($2194) {
       $$2 = $$1;$$23 = $$12;
      } else {
       $2196 = HEAP32[$22>>2]|0;
       $2197 = ($2196|0)==($2193|0);
       if (!($2197)) {
        $scevgep$i$i$i7 = ((($2196)) + -4|0);
        $2198 = $scevgep$i$i$i7;
        $2199 = (($2198) - ($2195))|0;
        $2200 = $2199 >>> 2;
        $2201 = $2200 ^ -1;
        $scevgep4$i$i$i8 = (($2196) + ($2201<<2)|0);
        HEAP32[$22>>2] = $scevgep4$i$i$i8;
       }
       __ZdlPv($2193);
       $$2 = $$1;$$23 = $$12;
      }
     }
     $2202 = HEAP32[$blobp_vector>>2]|0;
     $2203 = ($2202|0)==(0|0);
     $2204 = $2202;
     if ($2203) {
      ___resumeException($$2|0);
      // unreachable;
     }
     $2205 = HEAP32[$15>>2]|0;
     $2206 = ($2205|0)==($2202|0);
     if (!($2206)) {
      $scevgep$i$i$i = ((($2205)) + -4|0);
      $2207 = $scevgep$i$i$i;
      $2208 = (($2207) - ($2204))|0;
      $2209 = $2208 >>> 2;
      $2210 = $2209 ^ -1;
      $scevgep4$i$i$i = (($2205) + ($2210<<2)|0);
      HEAP32[$15>>2] = $scevgep4$i$i$i;
     }
     __ZdlPv($2202);
     ___resumeException($$2|0);
     // unreachable;
    }
    function __ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = (($1) - ($2))|0;
     $4 = $3 >> 2;
     $5 = (($4) + 1)|0;
     $6 = ($5>>>0)>(1073741823);
     if ($6) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$this>>2]|0;
      $$in = $$pre;
     } else {
      $$in = $2;
     }
     $7 = ((($this)) + 8|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) - ($$in))|0;
     $10 = $9 >> 2;
     $11 = ($10>>>0)<(536870911);
     if ($11) {
      $15 = $9 >> 1;
      $16 = ($15>>>0)<($5>>>0);
      $17 = $16 ? $5 : $15;
      $18 = HEAP32[$0>>2]|0;
      $19 = (($18) - ($$in))|0;
      $20 = $19 >> 2;
      $21 = ($17|0)==(0);
      if ($21) {
       $$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
      } else {
       $$0$i1 = $17;$41 = $18;$42 = $20;
       label = 6;
      }
     } else {
      $12 = HEAP32[$0>>2]|0;
      $13 = (($12) - ($$in))|0;
      $14 = $13 >> 2;
      $$0$i1 = 1073741823;$41 = $12;$42 = $14;
      label = 6;
     }
     if ((label|0) == 6) {
      $22 = $$0$i1 << 2;
      $23 = (__Znwj($22)|0);
      $$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
     }
     $24 = (($25) + ($26<<2)|0);
     $27 = (($25) + ($$0$i2<<2)|0);
     $28 = $27;
     $29 = HEAP32[$__x>>2]|0;
     HEAP32[$24>>2] = $29;
     $30 = ((($24)) + 4|0);
     $31 = $30;
     $32 = (($33) - ($$in))|0;
     $34 = $32 >> 2;
     $35 = (0 - ($34))|0;
     $36 = (($24) + ($35<<2)|0);
     $37 = $36;
     $38 = $$in;
     _memcpy(($36|0),($38|0),($32|0))|0;
     HEAP32[$this>>2] = $37;
     HEAP32[$0>>2] = $31;
     HEAP32[$7>>2] = $28;
     $39 = ($$in|0)==(0);
     if ($39) {
      return;
     }
     $40 = $$in;
     __ZdlPv($40);
     return;
    }
    function __ZN12_GLOBAL__N_117ignore_wide_blobsERK9RectangleRNSt3__16vectorIP4BlobNS3_9allocatorIS6_EEEE($re,$blobp_vector) {
     $re = $re|0;
     $blobp_vector = $blobp_vector|0;
     var $$03 = 0, $$04 = 0, $$blobs$0 = 0, $$cast = 0, $$cast$lcssa = 0, $$cast80 = 0, $$cast82 = 0, $$lcssa = 0, $$lcssa215 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa233 = 0, $$lcssa241 = 0, $$lcssa242 = 0, $$lcssa243 = 0, $$lcssa245 = 0, $$pre = 0, $$pre113 = 0, $$pre114 = 0, $0 = 0;
     var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
     var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
     var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
     var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
     var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
     var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
     var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
     var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
     var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
     var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
     var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
     var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
     var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i10 = 0, $blobs$0$lcssa = 0, $blobs$084 = 0, $i$0$ph97 = 0, $j$085 = 0, $j1$091 = 0, $j3$081 = 0, $j4$093 = 0, $or$cond = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i11 = 0, $scevgep$i$i$i7 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i12 = 0;
     var $scevgep4$i$i$i8 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($blobp_vector)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$blobp_vector>>2]|0;
     $3 = ($1|0)==($2|0);
     if ($3) {
      return;
     }
     $4 = ((($re)) + 8|0);
     $5 = ((($re)) + 12|0);
     $6 = ((($re)) + 4|0);
     $256 = $2;$257 = $1;$i$0$ph97 = 0;
     L4: while(1) {
      $29 = $257;$7 = $256;
      while(1) {
       $8 = $7;
       $9 = (($8) + ($i$0$ph97<<2)|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = ((($10)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = HEAP32[$10>>2]|0;
       $14 = (($12) + 1)|0;
       $15 = (($14) - ($13))|0;
       $16 = $15 << 1;
       $17 = HEAP32[$4>>2]|0;
       $18 = HEAP32[$re>>2]|0;
       $19 = (($17) + 1)|0;
       $20 = (($19) - ($18))|0;
       $21 = ($16|0)<($20|0);
       if ($21) {
        $$lcssa226 = $7;$$lcssa233 = $29;
        break;
       }
       $26 = ((($9)) + 4|0);
       $27 = $26;
       $28 = (($29) - ($27))|0;
       $30 = $28 >> 2;
       _memmove(($9|0),($26|0),($28|0))|0;
       $31 = (($9) + ($30<<2)|0);
       $32 = HEAP32[$0>>2]|0;
       $33 = ($32|0)==($31|0);
       if (!($33)) {
        $__new_last2$i$i$i10 = $31;
        $scevgep$i$i$i11 = ((($32)) + -4|0);
        $34 = $scevgep$i$i$i11;
        $35 = (($34) - ($__new_last2$i$i$i10))|0;
        $36 = $35 >>> 2;
        $37 = $36 ^ -1;
        $scevgep4$i$i$i12 = (($32) + ($37<<2)|0);
        HEAP32[$0>>2] = $scevgep4$i$i$i12;
       }
       $38 = (__ZNK6Bitmap4areaEv($10)|0);
       $39 = $38 << 2;
       $40 = ((($10)) + 12|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ((($10)) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = (($41) + 1)|0;
       $45 = (($44) - ($43))|0;
       $46 = HEAP32[$11>>2]|0;
       $47 = HEAP32[$10>>2]|0;
       $48 = (($46) + 1)|0;
       $49 = (($48) - ($47))|0;
       $50 = ($45*3)|0;
       $51 = Math_imul($50, $49)|0;
       $52 = ($39|0)>($51|0);
       L12: do {
        if ($52) {
         $165 = $46;$167 = $47;$176 = $41;$178 = $43;
         label = 25;
        } else {
         $53 = HEAP32[$0>>2]|0;
         $54 = HEAP32[$blobp_vector>>2]|0;
         $55 = (($53) - ($54))|0;
         $56 = $55 >> 2;
         $57 = ($i$0$ph97>>>0)<($56>>>0);
         $58 = $54;
         L14: do {
          if ($57) {
           $59 = (($53) - ($54))|0;
           $60 = $59 >> 2;
           $blobs$084 = 0;$j$085 = $i$0$ph97;
           while(1) {
            $61 = (($58) + ($j$085<<2)|0);
            $62 = HEAP32[$61>>2]|0;
            $63 = ((($62)) + 4|0);
            $64 = HEAP32[$63>>2]|0;
            $65 = ($64|0)>($41|0);
            if ($65) {
             $blobs$0$lcssa = $blobs$084;
             break L14;
            }
            $66 = ((($62)) + 12|0);
            $67 = HEAP32[$66>>2]|0;
            $68 = (1 - ($64))|0;
            $69 = (($68) + ($67))|0;
            $70 = ((($62)) + 8|0);
            $71 = HEAP32[$70>>2]|0;
            $72 = HEAP32[$62>>2]|0;
            $73 = (($71) + 1)|0;
            $74 = (($73) - ($72))|0;
            $75 = Math_imul($74, $69)|0;
            $76 = ($75|0)>(15);
            $77 = $76&1;
            $$blobs$0 = (($77) + ($blobs$084))|0;
            $78 = (($j$085) + 1)|0;
            $79 = ($78>>>0)<($60>>>0);
            if ($79) {
             $blobs$084 = $$blobs$0;$j$085 = $78;
            } else {
             $blobs$0$lcssa = $$blobs$0;
             break;
            }
           }
          } else {
           $blobs$0$lcssa = 0;
          }
         } while(0);
         $80 = Math_imul($49, $45)|0;
         $81 = (($80|0) / 400)&-1;
         $82 = ($blobs$0$lcssa|0)>($81|0);
         if ($82) {
          $165 = $46;$167 = $47;$176 = $41;$178 = $43;
          label = 25;
         } else {
          $83 = (__ZNK6Bitmap4areaEv($10)|0);
          $84 = $83 << 2;
          $85 = HEAP32[$40>>2]|0;
          $86 = HEAP32[$42>>2]|0;
          $87 = (($85) + 1)|0;
          $88 = (($87) - ($86))|0;
          $89 = HEAP32[$11>>2]|0;
          $90 = HEAP32[$10>>2]|0;
          $91 = (($89) + 1)|0;
          $92 = (($91) - ($90))|0;
          $93 = Math_imul($92, $88)|0;
          $94 = ($84|0)>($93|0);
          if (!($94)) {
           __THREW__ = 0;
           invoke_vi(72,($10|0));
           $95 = __THREW__; __THREW__ = 0;
           $96 = $95&1;
           if ($96) {
            $$lcssa241 = $10;
            label = 17;
            break L4;
           }
           __ZdlPv($10);
           break;
          }
          __ZN4Blob10find_holesEv($10);
          $99 = ((($10)) + 28|0);
          $100 = ((($10)) + 32|0);
          $101 = HEAP32[$100>>2]|0;
          $102 = HEAP32[$99>>2]|0;
          $103 = (($101) - ($102))|0;
          $104 = $103 >> 2;
          $105 = HEAP32[$40>>2]|0;
          $106 = HEAP32[$42>>2]|0;
          $107 = (($105) + 1)|0;
          $108 = (($107) - ($106))|0;
          $109 = HEAP32[$11>>2]|0;
          $110 = HEAP32[$10>>2]|0;
          $111 = (($109) + 1)|0;
          $112 = (($111) - ($110))|0;
          $113 = ($112|0)<($108|0);
          $114 = $113 ? $112 : $108;
          $115 = ($104|0)<($114|0);
          $116 = ($103|0)>(0);
          $or$cond = $115 & $116;
          if ($or$cond) {
           $j1$091 = 0;
           while(1) {
            $117 = (__ZNK4Blob4holeEi($10,$j1$091)|0);
            $118 = ((($117)) + 12|0);
            $119 = HEAP32[$118>>2]|0;
            $120 = ((($117)) + 4|0);
            $121 = HEAP32[$120>>2]|0;
            $122 = (($119) + 1)|0;
            $123 = (($122) - ($121))|0;
            $124 = ((($117)) + 8|0);
            $125 = HEAP32[$124>>2]|0;
            $126 = HEAP32[$117>>2]|0;
            $127 = (($125) + 1)|0;
            $128 = (($127) - ($126))|0;
            $129 = $123 << 2;
            $130 = Math_imul($129, $128)|0;
            $131 = HEAP32[$40>>2]|0;
            $132 = HEAP32[$42>>2]|0;
            $133 = (($131) + 1)|0;
            $134 = (($133) - ($132))|0;
            $135 = HEAP32[$11>>2]|0;
            $136 = HEAP32[$10>>2]|0;
            $137 = (($135) + 1)|0;
            $138 = (($137) - ($136))|0;
            $139 = Math_imul($138, $134)|0;
            $140 = ($130|0)<($139|0);
            if ($140) {
             $258 = $132;$259 = $131;$260 = $136;$261 = $135;
            } else {
             $141 = (__ZNK4Blob4holeEi($10,$j1$091)|0);
             $142 = (__ZNK6Bitmap4areaEv($141)|0);
             $143 = $142 << 2;
             $144 = HEAP32[$40>>2]|0;
             $145 = HEAP32[$42>>2]|0;
             $146 = (($144) + 1)|0;
             $147 = (($146) - ($145))|0;
             $148 = HEAP32[$11>>2]|0;
             $149 = HEAP32[$10>>2]|0;
             $150 = (($148) + 1)|0;
             $151 = (($150) - ($149))|0;
             $152 = Math_imul($151, $147)|0;
             $153 = ($143|0)<($152|0);
             if ($153) {
              $258 = $145;$259 = $144;$260 = $149;$261 = $148;
             } else {
              break;
             }
            }
            $154 = (($j1$091) + 1)|0;
            $155 = HEAP32[$100>>2]|0;
            $156 = HEAP32[$99>>2]|0;
            $157 = (($155) - ($156))|0;
            $158 = $157 >> 2;
            $159 = ($154|0)<($158|0);
            if ($159) {
             $j1$091 = $154;
            } else {
             $165 = $261;$167 = $260;$176 = $259;$178 = $258;
             label = 25;
             break L12;
            }
           }
           __THREW__ = 0;
           invoke_vi(72,($10|0));
           $160 = __THREW__; __THREW__ = 0;
           $161 = $160&1;
           if ($161) {
            $$lcssa242 = $10;
            label = 23;
            break L4;
           }
           __ZdlPv($10);
          } else {
           $165 = $109;$167 = $110;$176 = $105;$178 = $106;
           label = 25;
          }
         }
        }
       } while(0);
       if ((label|0) == 25) {
        label = 0;
        $164 = (($165) + 1)|0;
        $166 = (($164) - ($167))|0;
        $168 = ($166*5)|0;
        $169 = HEAP32[$4>>2]|0;
        $170 = HEAP32[$re>>2]|0;
        $171 = (($169) + 1)|0;
        $172 = (($171) - ($170))|0;
        $173 = $172 << 2;
        $174 = ($168|0)>($173|0);
        if ($174) {
         $175 = (($176) + 1)|0;
         $177 = (($175) - ($178))|0;
         $179 = ($177*5)|0;
         $180 = HEAP32[$5>>2]|0;
         $181 = HEAP32[$6>>2]|0;
         $182 = (($180) + 1)|0;
         $183 = (($182) - ($181))|0;
         $184 = $183 << 2;
         $185 = ($179|0)>($184|0);
         if ($185) {
          $$lcssa243 = $10;
          label = 27;
          break L4;
         }
        }
        $215 = HEAP32[$0>>2]|0;
        $216 = HEAP32[$blobp_vector>>2]|0;
        $217 = (($215) - ($216))|0;
        $218 = $217 >> 2;
        $219 = ($218>>>0)>($i$0$ph97>>>0);
        L37: do {
         if ($219) {
          $220 = $216;
          $224 = $220;$j4$093 = $218;
          while(1) {
           $222 = (($j4$093) + -1)|0;
           $223 = (($224) + ($222<<2)|0);
           $225 = HEAP32[$223>>2]|0;
           $226 = (__ZNK9Rectangle8includesERKS_($10,$225)|0);
           if ($226) {
            $228 = ($225|0)==(0|0);
            if (!($228)) {
             __THREW__ = 0;
             invoke_vi(72,($225|0));
             $229 = __THREW__; __THREW__ = 0;
             $230 = $229&1;
             if ($230) {
              $$lcssa224 = $225;
              label = 50;
              break L4;
             }
             __ZdlPv($225);
            }
            $231 = HEAP32[$blobp_vector>>2]|0;
            $232 = (($231) + ($222<<2)|0);
            $233 = ((($232)) + 4|0);
            $234 = HEAP32[$0>>2]|0;
            $235 = $233;
            $236 = (($234) - ($235))|0;
            $237 = $236 >> 2;
            _memmove(($232|0),($233|0),($236|0))|0;
            $238 = (($232) + ($237<<2)|0);
            $239 = HEAP32[$0>>2]|0;
            $240 = ($239|0)==($238|0);
            if (!($240)) {
             $__new_last2$i$i$i = $238;
             $scevgep$i$i$i = ((($239)) + -4|0);
             $241 = $scevgep$i$i$i;
             $242 = (($241) - ($__new_last2$i$i$i))|0;
             $243 = $242 >>> 2;
             $244 = $243 ^ -1;
             $scevgep4$i$i$i = (($239) + ($244<<2)|0);
             HEAP32[$0>>2] = $scevgep4$i$i$i;
            }
           }
           $227 = ($222>>>0)>($i$0$ph97>>>0);
           if (!($227)) {
            break L37;
           }
           $$pre = HEAP32[$blobp_vector>>2]|0;
           $224 = $$pre;$j4$093 = $222;
          }
         }
        } while(0);
        $221 = ($10|0)==(0|0);
        if (!($221)) {
         __THREW__ = 0;
         invoke_vi(72,($10|0));
         $247 = __THREW__; __THREW__ = 0;
         $248 = $247&1;
         if ($248) {
          $$lcssa245 = $10;
          label = 54;
          break L4;
         }
         __ZdlPv($10);
        }
       }
       $249 = HEAP32[$0>>2]|0;
       $250 = HEAP32[$blobp_vector>>2]|0;
       $251 = (($249) - ($250))|0;
       $252 = $251 >> 2;
       $253 = ($i$0$ph97>>>0)<($252>>>0);
       if ($253) {
        $29 = $249;$7 = $250;
       } else {
        label = 55;
        break L4;
       }
      }
      $22 = (($i$0$ph97) + 1)|0;
      $23 = (($$lcssa233) - ($$lcssa226))|0;
      $24 = $23 >> 2;
      $25 = ($22>>>0)<($24>>>0);
      if ($25) {
       $256 = $$lcssa226;$257 = $$lcssa233;$i$0$ph97 = $22;
      } else {
       label = 55;
       break;
      }
     }
     if ((label|0) == 17) {
      $97 = ___cxa_find_matching_catch_2()|0;
      $98 = tempRet0;
      __ZdlPv($$lcssa241);
      $$03 = $98;$$04 = $97;
      ___resumeException($$04|0);
      // unreachable;
     }
     else if ((label|0) == 23) {
      $162 = ___cxa_find_matching_catch_2()|0;
      $163 = tempRet0;
      __ZdlPv($$lcssa242);
      $$03 = $163;$$04 = $162;
      ___resumeException($$04|0);
      // unreachable;
     }
     else if ((label|0) == 27) {
      $186 = HEAP32[$0>>2]|0;
      $187 = HEAP32[$blobp_vector>>2]|0;
      $188 = ($186|0)==($187|0);
      $$cast80 = $187;
      $189 = $186;
      L65: do {
       if ($188) {
        $$cast$lcssa = $$cast80;$$lcssa = $186;$190 = $189;
       } else {
        $$cast82 = $$cast80;$262 = $189;$263 = $187;$264 = $186;$j3$081 = 0;
        while(1) {
         $197 = (($$cast82) + ($j3$081<<2)|0);
         $198 = HEAP32[$197>>2]|0;
         $199 = ($198|0)==(0|0);
         if ($199) {
          $205 = $263;$206 = $264;$265 = $262;
         } else {
          __THREW__ = 0;
          invoke_vi(72,($198|0));
          $200 = __THREW__; __THREW__ = 0;
          $201 = $200&1;
          if ($201) {
           $$lcssa215 = $198;
           break;
          }
          __ZdlPv($198);
          $$pre113 = HEAP32[$0>>2]|0;
          $$pre114 = HEAP32[$blobp_vector>>2]|0;
          $202 = $$pre113;
          $205 = $$pre114;$206 = $$pre113;$265 = $202;
         }
         $203 = (($j3$081) + 1)|0;
         $204 = (($206) - ($205))|0;
         $207 = $204 >> 2;
         $208 = ($203>>>0)<($207>>>0);
         $$cast = $205;
         if ($208) {
          $$cast82 = $$cast;$262 = $265;$263 = $205;$264 = $206;$j3$081 = $203;
         } else {
          $$cast$lcssa = $$cast;$$lcssa = $205;$190 = $265;
          break L65;
         }
        }
        $209 = ___cxa_find_matching_catch_2()|0;
        $210 = tempRet0;
        __ZdlPv($$lcssa215);
        $$03 = $210;$$04 = $209;
        ___resumeException($$04|0);
        // unreachable;
       }
      } while(0);
      $191 = ($190|0)==($$cast$lcssa|0);
      if (!($191)) {
       $scevgep$i$i$i7 = ((($190)) + -4|0);
       $192 = $scevgep$i$i$i7;
       $193 = (($192) - ($$lcssa))|0;
       $194 = $193 >>> 2;
       $195 = $194 ^ -1;
       $scevgep4$i$i$i8 = (($190) + ($195<<2)|0);
       HEAP32[$0>>2] = $scevgep4$i$i$i8;
      }
      $196 = ($$lcssa243|0)==(0|0);
      if ($196) {
       return;
      }
      __THREW__ = 0;
      invoke_vi(72,($$lcssa243|0));
      $211 = __THREW__; __THREW__ = 0;
      $212 = $211&1;
      if ($212) {
       $213 = ___cxa_find_matching_catch_2()|0;
       $214 = tempRet0;
       __ZdlPv($$lcssa243);
       $$03 = $214;$$04 = $213;
       ___resumeException($$04|0);
       // unreachable;
      } else {
       __ZdlPv($$lcssa243);
       return;
      }
     }
     else if ((label|0) == 50) {
      $245 = ___cxa_find_matching_catch_2()|0;
      $246 = tempRet0;
      __ZdlPv($$lcssa224);
      $$03 = $246;$$04 = $245;
      ___resumeException($$04|0);
      // unreachable;
     }
     else if ((label|0) == 54) {
      $254 = ___cxa_find_matching_catch_2()|0;
      $255 = tempRet0;
      __ZdlPv($$lcssa245);
      $$03 = $255;$$04 = $254;
      ___resumeException($$04|0);
      // unreachable;
     }
     else if ((label|0) == 55) {
      return;
     }
    }
    function __ZN12_GLOBAL__N_116mean_blob_heightERKNSt3__16vectorIP4BlobNS0_9allocatorIS3_EEEE($blobp_vector) {
     $blobp_vector = $blobp_vector|0;
     var $$cast = 0, $$lcssa = 0, $$lcssa80 = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$lcssa87 = 0, $$pre = 0, $$pre43 = 0, $$pre43$pre = 0, $$pre44 = 0, $$pre44$pre = 0, $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $$pre48 = 0, $$pre49 = 0;
     var $$pre50 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
     var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
     var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
     var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
     var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
     var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
     var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
     var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
     var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i5 = 0, $count$026 = 0, $height_distrib = 0, $i$033 = 0, $i1$029 = 0, $i3$025 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mean_height$027 = 0, $mean_height$1 = 0, $mean_height$1$lcssa = 0, $mean_height$2 = 0;
     var $mean_height$255 = 0, $or$cond = 0, $or$cond42 = 0, $samples$034 = 0, $samples$1 = 0, $samples$1$lcssa = 0, $samples$230 = 0, $samples$3 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i11 = 0, $scevgep$i$i$i2 = 0, $scevgep$i$i$i6 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i12 = 0, $scevgep4$i$i$i3 = 0, $scevgep4$i$i$i7 = 0, $valid_samples$024 = 0, $valid_samples$1 = 0, $valid_samples$1$lcssa = 0, label = 0;
     var sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $height_distrib = sp;
     HEAP32[$height_distrib>>2] = 0;
     $0 = ((($height_distrib)) + 4|0);
     HEAP32[$0>>2] = 0;
     $1 = ((($height_distrib)) + 8|0);
     HEAP32[$1>>2] = 0;
     $2 = ((($blobp_vector)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = HEAP32[$blobp_vector>>2]|0;
     $5 = ($3|0)==($4|0);
     $6 = $4;
     if ($5) {
      $mean_height$255 = 0;
      STACKTOP = sp;return ($mean_height$255|0);
     }
     $11 = $6;$147 = 0;$148 = 0;$149 = $6;$150 = $4;$151 = $3;$152 = 0;$42 = 0;$i$033 = 0;$samples$034 = 0;
     L4: while(1) {
      $10 = (($11) + ($i$033<<2)|0);
      $12 = HEAP32[$10>>2]|0;
      $13 = ((($12)) + 12|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ((($12)) + 4|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = (($14) + 1)|0;
      $18 = (($17) - ($16))|0;
      $19 = ((($12)) + 8|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = HEAP32[$12>>2]|0;
      $22 = (($20) + 1)|0;
      $23 = (($22) - ($21))|0;
      $24 = ($18>>>0)>(9);
      $25 = ($18*3)|0;
      $26 = ($23>>>0)<($25>>>0);
      $or$cond = $24 & $26;
      if ($or$cond) {
       $40 = HEAP32[$0>>2]|0;
       $41 = (($40) - ($42))|0;
       $43 = $41 >> 2;
       $44 = ($18>>>0)<($43>>>0);
       $45 = $40;
       do {
        if ($44) {
         $$pre43 = $151;$$pre44 = $150;$163 = $147;$164 = $148;$61 = $152;
        } else {
         $46 = (($18) + 1)|0;
         $47 = ($46>>>0)>($43>>>0);
         $48 = $42;
         if ($47) {
          $49 = (($46) - ($43))|0;
          __THREW__ = 0;
          invoke_vii(92,($height_distrib|0),($49|0));
          $50 = __THREW__; __THREW__ = 0;
          $51 = $50&1;
          if ($51) {
           label = 8;
           break L4;
          }
          $$pre = HEAP32[$height_distrib>>2]|0;
          $52 = $$pre;
          $$pre43$pre = HEAP32[$2>>2]|0;
          $$pre44$pre = HEAP32[$blobp_vector>>2]|0;
          $$pre43 = $$pre43$pre;$$pre44 = $$pre44$pre;$163 = $52;$164 = $52;$61 = $$pre;
          break;
         }
         $53 = ($46>>>0)<($43>>>0);
         if ($53) {
          $54 = (($48) + ($46<<2)|0);
          $55 = ($45|0)==($54|0);
          if ($55) {
           $$pre43 = $151;$$pre44 = $150;$163 = $147;$164 = $148;$61 = $152;
          } else {
           $__new_last2$i$i$i5 = $54;
           $scevgep$i$i$i6 = ((($45)) + -4|0);
           $56 = $scevgep$i$i$i6;
           $57 = (($56) - ($__new_last2$i$i$i5))|0;
           $58 = $57 >>> 2;
           $59 = $58 ^ -1;
           $scevgep4$i$i$i7 = (($45) + ($59<<2)|0);
           HEAP32[$0>>2] = $scevgep4$i$i$i7;
           $$pre43 = $151;$$pre44 = $150;$163 = $147;$164 = $148;$61 = $152;
          }
         } else {
          $$pre43 = $151;$$pre44 = $150;$163 = $147;$164 = $148;$61 = $152;
         }
        }
       } while(0);
       $60 = (($61) + ($18<<2)|0);
       $62 = HEAP32[$60>>2]|0;
       $63 = (($62) + 1)|0;
       HEAP32[$60>>2] = $63;
       $64 = (($samples$034) + 1)|0;
       $65 = $61;
       $66 = $$pre44;
       $158 = $163;$159 = $164;$160 = $66;$161 = $61;$162 = $65;$69 = $$pre44;$70 = $$pre43;$samples$1 = $64;
      } else {
       $158 = $147;$159 = $148;$160 = $149;$161 = $152;$162 = $42;$69 = $150;$70 = $151;$samples$1 = $samples$034;
      }
      $67 = (($i$033) + 1)|0;
      $68 = (($70) - ($69))|0;
      $71 = $68 >> 2;
      $72 = ($67>>>0)<($71>>>0);
      $73 = $69;
      if ($72) {
       $11 = $73;$147 = $158;$148 = $159;$149 = $160;$150 = $69;$151 = $70;$152 = $161;$42 = $162;$i$033 = $67;$samples$034 = $samples$1;
      } else {
       $$lcssa82 = $158;$$lcssa83 = $159;$$lcssa84 = $160;$$lcssa85 = $69;$$lcssa86 = $70;$$lcssa87 = $161;$samples$1$lcssa = $samples$1;
       label = 3;
       break;
      }
     }
     L18: do {
      if ((label|0) == 3) {
       $$pre45 = HEAP32[$0>>2]|0;
       $7 = $$pre45;
       $8 = ($$lcssa87|0)==($$pre45|0);
       do {
        if ($8) {
         $9 = ($$lcssa86|0)==($$lcssa85|0);
         if ($9) {
          $117 = $7;$119 = $$lcssa82;$141 = $$pre45;$153 = $$pre45;$samples$3 = $samples$1$lcssa;
         } else {
          $154 = $$lcssa82;$155 = $$lcssa85;$156 = $$lcssa86;$157 = $$pre45;$75 = $$lcssa84;$84 = $$lcssa83;$85 = $7;$i1$029 = 0;$samples$230 = $samples$1$lcssa;
          L23: while(1) {
           $74 = (($75) + ($i1$029<<2)|0);
           $76 = HEAP32[$74>>2]|0;
           $77 = ((($76)) + 12|0);
           $78 = HEAP32[$77>>2]|0;
           $79 = ((($76)) + 4|0);
           $80 = HEAP32[$79>>2]|0;
           $81 = (($78) + 1)|0;
           $82 = (($81) - ($80))|0;
           $83 = (($85) - ($84))|0;
           $86 = $83 >> 2;
           $87 = ($82>>>0)<($86>>>0);
           do {
            if ($87) {
             $104 = $157;$110 = $155;$111 = $156;$165 = $154;
            } else {
             $88 = (($82) + 1)|0;
             $89 = ($88>>>0)>($86>>>0);
             $90 = $84;
             $91 = $85;
             if ($89) {
              $92 = (($88) - ($86))|0;
              __THREW__ = 0;
              invoke_vii(92,($height_distrib|0),($92|0));
              $93 = __THREW__; __THREW__ = 0;
              $94 = $93&1;
              if ($94) {
               label = 7;
               break L23;
              }
              $$pre47 = HEAP32[$height_distrib>>2]|0;
              $$pre48 = HEAP32[$2>>2]|0;
              $$pre49 = HEAP32[$blobp_vector>>2]|0;
              $95 = $$pre47;
              $104 = $$pre47;$110 = $$pre49;$111 = $$pre48;$165 = $95;
              break;
             }
             $96 = ($88>>>0)<($86>>>0);
             if ($96) {
              $97 = (($90) + ($88<<2)|0);
              $98 = ($91|0)==($97|0);
              if ($98) {
               $104 = $157;$110 = $155;$111 = $156;$165 = $154;
              } else {
               $__new_last2$i$i$i = $97;
               $scevgep$i$i$i2 = ((($91)) + -4|0);
               $99 = $scevgep$i$i$i2;
               $100 = (($99) - ($__new_last2$i$i$i))|0;
               $101 = $100 >>> 2;
               $102 = $101 ^ -1;
               $scevgep4$i$i$i3 = (($91) + ($102<<2)|0);
               HEAP32[$0>>2] = $scevgep4$i$i$i3;
               $104 = $157;$110 = $155;$111 = $156;$165 = $154;
              }
             } else {
              $104 = $157;$110 = $155;$111 = $156;$165 = $154;
             }
            }
           } while(0);
           $103 = (($104) + ($82<<2)|0);
           $105 = HEAP32[$103>>2]|0;
           $106 = (($105) + 1)|0;
           HEAP32[$103>>2] = $106;
           $107 = (($samples$230) + 1)|0;
           $108 = (($i1$029) + 1)|0;
           $109 = (($111) - ($110))|0;
           $112 = $109 >> 2;
           $113 = ($108>>>0)<($112>>>0);
           if (!($113)) {
            $$lcssa = $165;$$lcssa80 = $104;$$lcssa81 = $107;
            label = 31;
            break;
           }
           $114 = $104;
           $115 = $110;
           $$pre46 = HEAP32[$0>>2]|0;
           $154 = $165;$155 = $110;$156 = $111;$157 = $104;$75 = $115;$84 = $114;$85 = $$pre46;$i1$029 = $108;$samples$230 = $107;
          }
          if ((label|0) == 7) {
           $27 = ___cxa_find_matching_catch_2()|0;
           $28 = tempRet0;
           $lpad$phi$index = $27;$lpad$phi$index2 = $28;
           break L18;
          }
          else if ((label|0) == 31) {
           $$pre50 = HEAP32[$0>>2]|0;
           $116 = $$pre50;
           $117 = $$pre50;$119 = $$lcssa;$141 = $116;$153 = $$lcssa80;$samples$3 = $$lcssa81;
           break;
          }
         }
        } else {
         $117 = $7;$119 = $$lcssa82;$141 = $$pre45;$153 = $$lcssa87;$samples$3 = $samples$1$lcssa;
        }
       } while(0);
       $118 = ($117|0)==($119|0);
       if ($118) {
        $138 = $153;$mean_height$2 = 0;
       } else {
        $120 = HEAP32[$height_distrib>>2]|0;
        $$cast = $120;
        $121 = (($117) - ($$cast))|0;
        $122 = $121 >> 2;
        $123 = ($samples$3*9)|0;
        $count$026 = 0;$i3$025 = 0;$mean_height$027 = 0;$valid_samples$024 = 0;
        while(1) {
         $125 = (($120) + ($i3$025<<2)|0);
         $126 = HEAP32[$125>>2]|0;
         $127 = (($126) + ($count$026))|0;
         $128 = ($127*10)|0;
         $129 = ($128>>>0)>=($samples$3>>>0);
         $130 = ($count$026*10)|0;
         $131 = ($130>>>0)<($123>>>0);
         $or$cond42 = $129 & $131;
         if ($or$cond42) {
          $132 = Math_imul($126, $i3$025)|0;
          $133 = (($132) + ($mean_height$027))|0;
          $134 = (($126) + ($valid_samples$024))|0;
          $mean_height$1 = $133;$valid_samples$1 = $134;
         } else {
          $mean_height$1 = $mean_height$027;$valid_samples$1 = $valid_samples$024;
         }
         $135 = (($i3$025) + 1)|0;
         $136 = ($135>>>0)<($122>>>0);
         if ($136) {
          $count$026 = $127;$i3$025 = $135;$mean_height$027 = $mean_height$1;$valid_samples$024 = $valid_samples$1;
         } else {
          $mean_height$1$lcssa = $mean_height$1;$valid_samples$1$lcssa = $valid_samples$1;
          break;
         }
        }
        $124 = ($valid_samples$1$lcssa|0)==(0);
        if ($124) {
         $138 = $120;$mean_height$2 = $mean_height$1$lcssa;
        } else {
         $137 = (($mean_height$1$lcssa|0) / ($valid_samples$1$lcssa|0))&-1;
         $138 = $120;$mean_height$2 = $137;
        }
       }
       $139 = ($138|0)==(0|0);
       $140 = $138;
       if ($139) {
        $mean_height$255 = $mean_height$2;
        STACKTOP = sp;return ($mean_height$255|0);
       }
       $142 = ($141|0)==($138|0);
       if (!($142)) {
        $scevgep$i$i$i = ((($141)) + -4|0);
        $143 = $scevgep$i$i$i;
        $144 = (($143) - ($140))|0;
        $145 = $144 >>> 2;
        $146 = $145 ^ -1;
        $scevgep4$i$i$i = (($141) + ($146<<2)|0);
        HEAP32[$0>>2] = $scevgep4$i$i$i;
       }
       __ZdlPv($138);
       $mean_height$255 = $mean_height$2;
       STACKTOP = sp;return ($mean_height$255|0);
      }
      else if ((label|0) == 8) {
       $29 = ___cxa_find_matching_catch_2()|0;
       $30 = tempRet0;
       $lpad$phi$index = $29;$lpad$phi$index2 = $30;
      }
     } while(0);
     $31 = HEAP32[$height_distrib>>2]|0;
     $32 = ($31|0)==(0|0);
     $33 = $31;
     if ($32) {
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     $34 = HEAP32[$0>>2]|0;
     $35 = ($34|0)==($31|0);
     if (!($35)) {
      $scevgep$i$i$i11 = ((($34)) + -4|0);
      $36 = $scevgep$i$i$i11;
      $37 = (($36) - ($33))|0;
      $38 = $37 >>> 2;
      $39 = $38 ^ -1;
      $scevgep4$i$i$i12 = (($34) + ($39<<2)|0);
      HEAP32[$0>>2] = $scevgep4$i$i$i12;
     }
     __ZdlPv($31);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
     return (0)|0;
    }
    function __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($this,$__n) {
     $this = $this|0;
     $__n = $__n|0;
     var $$0$i4 = 0, $$0$i5 = 0, $$in = 0, $$pre = 0, $$pre6 = 0, $$promoted1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
     var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
     var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i = 0, $scevgep$i3 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) - ($3))|0;
     $5 = $4 >> 2;
     $6 = ($5>>>0)<($__n>>>0);
     if (!($6)) {
      $7 = $3;
      $$promoted1$i = $3;
      $8 = $__n << 2;
      _memset(($$promoted1$i|0),0,($8|0))|0;
      $scevgep$i = (($7) + ($__n<<2)|0);
      HEAP32[$2>>2] = $scevgep$i;
      return;
     }
     $9 = HEAP32[$this>>2]|0;
     $10 = (($3) - ($9))|0;
     $11 = $10 >> 2;
     $12 = (($11) + ($__n))|0;
     $13 = ($12>>>0)>(1073741823);
     if ($13) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$0>>2]|0;
      $$pre6 = HEAP32[$this>>2]|0;
      $$in = $$pre6;$15 = $$pre;
     } else {
      $$in = $9;$15 = $1;
     }
     $14 = (($15) - ($$in))|0;
     $16 = $14 >> 2;
     $17 = ($16>>>0)<(536870911);
     if ($17) {
      $21 = $14 >> 1;
      $22 = ($21>>>0)<($12>>>0);
      $23 = $22 ? $12 : $21;
      $24 = HEAP32[$2>>2]|0;
      $25 = (($24) - ($$in))|0;
      $26 = $25 >> 2;
      $27 = ($23|0)==(0);
      if ($27) {
       $$0$i5 = 0;$31 = 0;$32 = $26;$38 = $24;
      } else {
       $$0$i4 = $23;$46 = $24;$47 = $26;
       label = 8;
      }
     } else {
      $18 = HEAP32[$2>>2]|0;
      $19 = (($18) - ($$in))|0;
      $20 = $19 >> 2;
      $$0$i4 = 1073741823;$46 = $18;$47 = $20;
      label = 8;
     }
     if ((label|0) == 8) {
      $28 = $$0$i4 << 2;
      $29 = (__Znwj($28)|0);
      $$0$i5 = $$0$i4;$31 = $29;$32 = $47;$38 = $46;
     }
     $30 = (($31) + ($32<<2)|0);
     $33 = (($31) + ($$0$i5<<2)|0);
     $34 = $33;
     $35 = $__n << 2;
     _memset(($30|0),0,($35|0))|0;
     $scevgep$i3 = (($30) + ($__n<<2)|0);
     $36 = $scevgep$i3;
     $37 = (($38) - ($$in))|0;
     $39 = $37 >> 2;
     $40 = (0 - ($39))|0;
     $41 = (($30) + ($40<<2)|0);
     $42 = $41;
     $43 = $$in;
     _memcpy(($41|0),($43|0),($37|0))|0;
     HEAP32[$this>>2] = $42;
     HEAP32[$2>>2] = $36;
     HEAP32[$0>>2] = $34;
     $44 = ($$in|0)==(0);
     if ($44) {
      return;
     }
     $45 = $$in;
     __ZdlPv($45);
     return;
    }
    function __ZN4MaskC2ERK9Rectangle($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
     var $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     ;HEAP32[$this>>2]=HEAP32[$re>>2]|0;HEAP32[$this+4>>2]=HEAP32[$re+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$re+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$re+12>>2]|0;
     $0 = ((($this)) + 16|0);
     $1 = ((($this)) + 12|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = ((($this)) + 4|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = (($2) + 1)|0;
     $6 = (($5) - ($4))|0;
     $7 = HEAP32[$re>>2]|0;
     $8 = ((($re)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     HEAP32[$0>>2] = 0;
     $10 = ((($this)) + 20|0);
     HEAP32[$10>>2] = 0;
     $11 = ((($this)) + 24|0);
     HEAP32[$11>>2] = 0;
     $12 = ($5|0)==($4|0);
     if ($12) {
      return;
     }
     $13 = ($6>>>0)>(536870911);
     if ($13) {
      __THREW__ = 0;
      invoke_vi(46,($0|0));
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if (!($15)) {
       label = 4;
      }
     } else {
      label = 4;
     }
     if ((label|0) == 4) {
      $16 = $6 << 3;
      __THREW__ = 0;
      $17 = (invoke_ii(29,($16|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       HEAP32[$10>>2] = $17;
       HEAP32[$0>>2] = $17;
       $20 = (($17) + ($6<<3)|0);
       $21 = ((($this)) + 24|0);
       HEAP32[$21>>2] = $20;
       $$0$i$i = $6;$22 = $17;
       while(1) {
        $23 = $22;
        $24 = $23;
        HEAP32[$24>>2] = $7;
        $25 = (($23) + 4)|0;
        $26 = $25;
        HEAP32[$26>>2] = $9;
        $27 = HEAP32[$10>>2]|0;
        $28 = ((($27)) + 8|0);
        HEAP32[$10>>2] = $28;
        $29 = (($$0$i$i) + -1)|0;
        $30 = ($29|0)==(0);
        if ($30) {
         break;
        } else {
         $$0$i$i = $29;$22 = $28;
        }
       }
       return;
      }
     }
     $31 = ___cxa_find_matching_catch_2()|0;
     $32 = tempRet0;
     $33 = HEAP32[$0>>2]|0;
     $34 = ($33|0)==(0|0);
     $35 = $33;
     if ($34) {
      ___resumeException($31|0);
      // unreachable;
     }
     $36 = HEAP32[$10>>2]|0;
     $37 = ($36|0)==($33|0);
     if (!($37)) {
      $scevgep$i$i$i$i = ((($36)) + -8|0);
      $38 = $scevgep$i$i$i$i;
      $39 = (($38) - ($35))|0;
      $40 = $39 >>> 3;
      $41 = $40 ^ -1;
      $scevgep4$i$i$i$i = (($36) + ($41<<3)|0);
      HEAP32[$10>>2] = $scevgep4$i$i$i$i;
     }
     __ZdlPv($33);
     ___resumeException($31|0);
     // unreachable;
    }
    function __ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEEC2ERKS4_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
     var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     HEAP32[$this>>2] = 0;
     $0 = ((($this)) + 4|0);
     HEAP32[$0>>2] = 0;
     $1 = ((($this)) + 8|0);
     HEAP32[$1>>2] = 0;
     $2 = ((($__x)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = HEAP32[$__x>>2]|0;
     $5 = (($3) - ($4))|0;
     $6 = $5 >> 3;
     $7 = ($6|0)==(0);
     if ($7) {
      return;
     }
     $8 = ($6>>>0)>(536870911);
     if ($8) {
      __THREW__ = 0;
      invoke_vi(46,($this|0));
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if (!($10)) {
       label = 4;
      }
     } else {
      label = 4;
     }
     if ((label|0) == 4) {
      __THREW__ = 0;
      $11 = (invoke_ii(29,($5|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       HEAP32[$0>>2] = $11;
       HEAP32[$this>>2] = $11;
       $14 = (($11) + ($6<<3)|0);
       $15 = ((($this)) + 8|0);
       HEAP32[$15>>2] = $14;
       $16 = HEAP32[$__x>>2]|0;
       $17 = HEAP32[$2>>2]|0;
       $18 = ($16|0)==($17|0);
       if ($18) {
        return;
       }
       $$01$i = $16;$25 = $11;
       while(1) {
        $19 = $$01$i;
        $20 = $19;
        $21 = HEAP32[$20>>2]|0;
        $22 = (($19) + 4)|0;
        $23 = $22;
        $24 = HEAP32[$23>>2]|0;
        $26 = $25;
        $27 = $26;
        HEAP32[$27>>2] = $21;
        $28 = (($26) + 4)|0;
        $29 = $28;
        HEAP32[$29>>2] = $24;
        $30 = HEAP32[$0>>2]|0;
        $31 = ((($30)) + 8|0);
        HEAP32[$0>>2] = $31;
        $32 = ((($$01$i)) + 8|0);
        $33 = ($32|0)==($17|0);
        if ($33) {
         break;
        } else {
         $$01$i = $32;$25 = $31;
        }
       }
       return;
      }
     }
     $34 = ___cxa_find_matching_catch_2()|0;
     $35 = tempRet0;
     $36 = HEAP32[$this>>2]|0;
     $37 = ($36|0)==(0|0);
     $38 = $36;
     if ($37) {
      ___resumeException($34|0);
      // unreachable;
     }
     $39 = HEAP32[$0>>2]|0;
     $40 = ($39|0)==($36|0);
     if (!($40)) {
      $scevgep$i$i$i = ((($39)) + -8|0);
      $41 = $scevgep$i$i$i;
      $42 = (($41) - ($38))|0;
      $43 = $42 >>> 3;
      $44 = $43 ^ -1;
      $scevgep4$i$i$i = (($39) + ($44<<3)|0);
      HEAP32[$0>>2] = $scevgep4$i$i$i;
     }
     __ZdlPv($36);
     ___resumeException($34|0);
     // unreachable;
    }
    function __ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEEC2ERKS5_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0;
     var sp = 0;
     sp = STACKTOP;
     HEAP32[$this>>2] = 0;
     $0 = ((($this)) + 4|0);
     HEAP32[$0>>2] = 0;
     $1 = ((($this)) + 8|0);
     HEAP32[$1>>2] = 0;
     $2 = ((($__x)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = HEAP32[$__x>>2]|0;
     $5 = (($3) - ($4))|0;
     $6 = $5 >> 2;
     $7 = ($6|0)==(0);
     if ($7) {
      return;
     }
     $8 = ($6>>>0)>(1073741823);
     if ($8) {
      __THREW__ = 0;
      invoke_vi(46,($this|0));
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if (!($10)) {
       label = 4;
      }
     } else {
      label = 4;
     }
     if ((label|0) == 4) {
      __THREW__ = 0;
      $11 = (invoke_ii(29,($5|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       HEAP32[$0>>2] = $11;
       HEAP32[$this>>2] = $11;
       $14 = (($11) + ($6<<2)|0);
       $15 = ((($this)) + 8|0);
       HEAP32[$15>>2] = $14;
       $16 = HEAP32[$__x>>2]|0;
       $17 = HEAP32[$2>>2]|0;
       $18 = ($16|0)==($17|0);
       if ($18) {
        return;
       }
       $$01$i = $16;$20 = $11;
       while(1) {
        $19 = HEAP32[$$01$i>>2]|0;
        HEAP32[$20>>2] = $19;
        $21 = HEAP32[$0>>2]|0;
        $22 = ((($21)) + 4|0);
        HEAP32[$0>>2] = $22;
        $23 = ((($$01$i)) + 4|0);
        $24 = ($23|0)==($17|0);
        if ($24) {
         break;
        } else {
         $$01$i = $23;$20 = $22;
        }
       }
       return;
      }
     }
     $25 = ___cxa_find_matching_catch_2()|0;
     $26 = tempRet0;
     $27 = HEAP32[$this>>2]|0;
     $28 = ($27|0)==(0|0);
     $29 = $27;
     if ($28) {
      ___resumeException($25|0);
      // unreachable;
     }
     $30 = HEAP32[$0>>2]|0;
     $31 = ($30|0)==($27|0);
     if (!($31)) {
      $scevgep$i$i$i = ((($30)) + -4|0);
      $32 = $scevgep$i$i$i;
      $33 = (($32) - ($29))|0;
      $34 = $33 >>> 2;
      $35 = $34 ^ -1;
      $scevgep4$i$i$i = (($30) + ($35<<2)|0);
      HEAP32[$0>>2] = $scevgep4$i$i$i;
     }
     __ZdlPv($27);
     ___resumeException($25|0);
     // unreachable;
    }
    function __ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPS2_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISB_E9referenceEEE5valueES9_E4typeENS7_IPKS2_EESB_SB_($this,$__position,$__first,$__last) {
     $this = $this|0;
     $__position = $__position|0;
     $__first = $__first|0;
     $__last = $__last|0;
     var $$0$i24 = 0, $$0$i25 = 0, $$in = 0, $$in$i = 0, $$in28 = 0, $$lcssa = 0, $$pre = 0, $$pre26 = 0, $$pre27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
     var $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
     var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
     var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
     var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
     var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0;
     var $__m$sroa$0$023 = 0, $__p$0 = 0, $__v$sroa$12$0 = 0, $__v$sroa$12$1 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = $0;
     $2 = HEAP32[$__position>>2]|0;
     $3 = (($2) - ($1))|0;
     $4 = $3 >> 2;
     $5 = (($0) + ($4<<2)|0);
     $6 = HEAP32[$__first>>2]|0;
     $7 = HEAP32[$__last>>2]|0;
     $8 = (($7) - ($6))|0;
     $9 = $8 >> 2;
     $10 = ($8|0)>(0);
     $11 = $6;
     $12 = $7;
     if (!($10)) {
      $__p$0 = $5;
      return ($__p$0|0);
     }
     $13 = ((($this)) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($this)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = $16;
     $18 = (($14) - ($17))|0;
     $19 = $18 >> 2;
     $20 = ($9|0)>($19|0);
     if (!($20)) {
      $21 = $5;
      $22 = (($17) - ($21))|0;
      $23 = $22 >> 2;
      $24 = ($9|0)>($23|0);
      if ($24) {
       $25 = (($11) + ($23<<2)|0);
       $26 = $25;
       $27 = ($25|0)==($12|0);
       if ($27) {
        $106 = $16;
       } else {
        $$in28 = $16;$29 = $25;
        while(1) {
         $28 = HEAP32[$29>>2]|0;
         HEAP32[$$in28>>2] = $28;
         $30 = HEAP32[$15>>2]|0;
         $31 = ((($30)) + 4|0);
         HEAP32[$15>>2] = $31;
         $32 = ((($29)) + 4|0);
         $33 = ($32|0)==($12|0);
         if ($33) {
          $106 = $31;
          break;
         } else {
          $$in28 = $31;$29 = $32;
         }
        }
       }
       $34 = ($22|0)>(0);
       if ($34) {
        $36 = $106;$__m$sroa$0$023 = $26;
       } else {
        $__p$0 = $5;
        return ($__p$0|0);
       }
      } else {
       $36 = $16;$__m$sroa$0$023 = $7;
      }
      $35 = (($5) + ($9<<2)|0);
      $37 = $36;
      $38 = $35;
      $39 = (($37) - ($38))|0;
      $40 = $39 >> 2;
      $41 = (($5) + ($40<<2)|0);
      $42 = ($41>>>0)<($16>>>0);
      if ($42) {
       $$in$i = $36;$__i$01$i = $41;
       while(1) {
        $43 = HEAP32[$__i$01$i>>2]|0;
        HEAP32[$$in$i>>2] = $43;
        $44 = ((($__i$01$i)) + 4|0);
        $45 = HEAP32[$15>>2]|0;
        $46 = ((($45)) + 4|0);
        HEAP32[$15>>2] = $46;
        $47 = ($44>>>0)<($16>>>0);
        if ($47) {
         $$in$i = $46;$__i$01$i = $44;
        } else {
         break;
        }
       }
      }
      $48 = (0 - ($40))|0;
      $49 = (($36) + ($48<<2)|0);
      _memmove(($49|0),($5|0),($39|0))|0;
      $50 = HEAP32[$__first>>2]|0;
      $51 = $50;
      $52 = (($__m$sroa$0$023) - ($51))|0;
      _memmove(($5|0),($50|0),($52|0))|0;
      $__p$0 = $5;
      return ($__p$0|0);
     }
     $53 = (($17) - ($1))|0;
     $54 = $53 >> 2;
     $55 = (($54) + ($9))|0;
     $56 = ($55>>>0)>(1073741823);
     if ($56) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$13>>2]|0;
      $$pre26 = HEAP32[$this>>2]|0;
      $57 = $$pre26;
      $107 = $57;$59 = $$pre26;$60 = $$pre;
     } else {
      $107 = $0;$59 = $1;$60 = $14;
     }
     $58 = (($60) - ($59))|0;
     $61 = $58 >> 2;
     $62 = ($61>>>0)<(536870911);
     if ($62) {
      $66 = $58 >> 1;
      $67 = ($66>>>0)<($55>>>0);
      $68 = $67 ? $55 : $66;
      $69 = $5;
      $70 = (($69) - ($59))|0;
      $71 = $70 >> 2;
      $72 = ($68|0)==(0);
      if ($72) {
       $$0$i25 = 0;$76 = 0;$77 = $71;$92 = $69;
      } else {
       $$0$i24 = $68;$108 = $71;$109 = $69;
       label = 15;
      }
     } else {
      $63 = $5;
      $64 = (($63) - ($59))|0;
      $65 = $64 >> 2;
      $$0$i24 = 1073741823;$108 = $65;$109 = $63;
      label = 15;
     }
     if ((label|0) == 15) {
      $73 = $$0$i24 << 2;
      $74 = (__Znwj($73)|0);
      $$0$i25 = $$0$i24;$76 = $74;$77 = $108;$92 = $109;
     }
     $75 = (($76) + ($77<<2)|0);
     $78 = $75;
     $79 = (($76) + ($$0$i25<<2)|0);
     $80 = $79;
     $81 = ($11|0)==($12|0);
     if ($81) {
      $89 = $107;$__v$sroa$12$1 = $78;
     } else {
      $$in = $75;$83 = $11;$__v$sroa$12$0 = $78;
      while(1) {
       $82 = HEAP32[$83>>2]|0;
       HEAP32[$$in>>2] = $82;
       $84 = $__v$sroa$12$0;
       $85 = ((($84)) + 4|0);
       $86 = $85;
       $87 = ((($83)) + 4|0);
       $88 = ($87|0)==($12|0);
       if ($88) {
        $$lcssa = $86;
        break;
       } else {
        $$in = $85;$83 = $87;$__v$sroa$12$0 = $86;
       }
      }
      $$pre27 = HEAP32[$this>>2]|0;
      $89 = $$pre27;$__v$sroa$12$1 = $$lcssa;
     }
     $90 = $89;
     $91 = (($92) - ($90))|0;
     $93 = $91 >> 2;
     $94 = (0 - ($93))|0;
     $95 = (($75) + ($94<<2)|0);
     $96 = $95;
     _memcpy(($95|0),($89|0),($91|0))|0;
     $97 = HEAP32[$15>>2]|0;
     $98 = (($97) - ($92))|0;
     $99 = $98 >> 2;
     $100 = $__v$sroa$12$1;
     _memcpy(($100|0),($5|0),($98|0))|0;
     $101 = $__v$sroa$12$1;
     $102 = (($101) + ($99<<2)|0);
     $103 = $102;
     $104 = HEAP32[$this>>2]|0;
     HEAP32[$this>>2] = $96;
     HEAP32[$15>>2] = $103;
     HEAP32[$13>>2] = $80;
     $105 = ($104|0)==(0|0);
     if ($105) {
      $__p$0 = $75;
      return ($__p$0|0);
     }
     __ZdlPv($104);
     $__p$0 = $75;
     return ($__p$0|0);
    }
    function __ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($this,$__first,$__last) {
     $this = $this|0;
     $__first = $__first|0;
     $__last = $__last|0;
     var $$0$i5 = 0, $$01$i = 0, $$01$i3 = 0, $$__last = 0, $$pre = 0, $$pre$i1 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
     var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
     var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
     var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
     var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = $__last;
     $1 = $__first;
     $2 = (($0) - ($1))|0;
     $3 = $2 >> 3;
     $4 = ((($this)) + 8|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = HEAP32[$this>>2]|0;
     $7 = (($5) - ($6))|0;
     $8 = $7 >> 3;
     $9 = ($3>>>0)>($8>>>0);
     $10 = $6;
     if (!($9)) {
      $11 = ((($this)) + 4|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($12) - ($6))|0;
      $14 = $13 >> 3;
      $15 = ($3>>>0)>($14>>>0);
      $16 = (($__first) + ($14<<3)|0);
      $$__last = $15 ? $16 : $__last;
      $17 = $$__last;
      $18 = (($17) - ($1))|0;
      $19 = $18 >> 3;
      $20 = $6;
      _memmove(($20|0),($__first|0),($18|0))|0;
      $21 = (($10) + ($19<<3)|0);
      if (!($15)) {
       $38 = HEAP32[$11>>2]|0;
       $39 = ($38|0)==($21|0);
       if ($39) {
        return;
       }
       $__new_last2$i$i = $21;
       $scevgep$i$i = ((($38)) + -8|0);
       $40 = $scevgep$i$i;
       $41 = (($40) - ($__new_last2$i$i))|0;
       $42 = $41 >>> 3;
       $43 = $42 ^ -1;
       $scevgep4$i$i = (($38) + ($43<<3)|0);
       HEAP32[$11>>2] = $scevgep4$i$i;
       return;
      }
      $22 = ($$__last|0)==($__last|0);
      if ($22) {
       return;
      }
      $$pre$i1 = HEAP32[$11>>2]|0;
      $$01$i3 = $16;$29 = $$pre$i1;
      while(1) {
       $23 = $$01$i3;
       $24 = $23;
       $25 = HEAP32[$24>>2]|0;
       $26 = (($23) + 4)|0;
       $27 = $26;
       $28 = HEAP32[$27>>2]|0;
       $30 = $29;
       $31 = $30;
       HEAP32[$31>>2] = $25;
       $32 = (($30) + 4)|0;
       $33 = $32;
       HEAP32[$33>>2] = $28;
       $34 = HEAP32[$11>>2]|0;
       $35 = ((($34)) + 8|0);
       HEAP32[$11>>2] = $35;
       $36 = ((($$01$i3)) + 8|0);
       $37 = ($36|0)==($__last|0);
       if ($37) {
        break;
       } else {
        $$01$i3 = $36;$29 = $35;
       }
      }
      return;
     }
     $44 = ($6|0)==(0);
     $45 = $6;
     if ($44) {
      $83 = $5;
     } else {
      $46 = ((($this)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==($10|0);
      if (!($48)) {
       $scevgep$i$i$i$i = ((($47)) + -8|0);
       $49 = $scevgep$i$i$i$i;
       $50 = (($49) - ($6))|0;
       $51 = $50 >>> 3;
       $52 = $51 ^ -1;
       $scevgep4$i$i$i$i = (($47) + ($52<<3)|0);
       HEAP32[$46>>2] = $scevgep4$i$i$i$i;
      }
      __ZdlPv($45);
      HEAP32[$4>>2] = 0;
      HEAP32[$46>>2] = 0;
      HEAP32[$this>>2] = 0;
      $83 = 0;
     }
     $53 = ($3>>>0)>(536870911);
     if ($53) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$4>>2]|0;
      $$pre8 = HEAP32[$this>>2]|0;
      $55 = $$pre8;$56 = $$pre;
     } else {
      $55 = 0;$56 = $83;
     }
     $54 = (($56) - ($55))|0;
     $57 = $54 >> 3;
     $58 = ($57>>>0)<(268435455);
     if ($58) {
      $59 = $54 >> 2;
      $60 = ($59>>>0)<($3>>>0);
      $61 = $60 ? $3 : $59;
      $62 = ($61>>>0)>(536870911);
      if ($62) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
       $$0$i5 = $61;
      } else {
       $$0$i5 = $61;
      }
     } else {
      $$0$i5 = 536870911;
     }
     $63 = $$0$i5 << 3;
     $64 = (__Znwj($63)|0);
     $65 = ((($this)) + 4|0);
     HEAP32[$65>>2] = $64;
     HEAP32[$this>>2] = $64;
     $66 = (($64) + ($$0$i5<<3)|0);
     HEAP32[$4>>2] = $66;
     $67 = ($__first|0)==($__last|0);
     if ($67) {
      return;
     }
     $$01$i = $__first;$74 = $64;
     while(1) {
      $68 = $$01$i;
      $69 = $68;
      $70 = HEAP32[$69>>2]|0;
      $71 = (($68) + 4)|0;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $75 = $74;
      $76 = $75;
      HEAP32[$76>>2] = $70;
      $77 = (($75) + 4)|0;
      $78 = $77;
      HEAP32[$78>>2] = $73;
      $79 = HEAP32[$65>>2]|0;
      $80 = ((($79)) + 8|0);
      HEAP32[$65>>2] = $80;
      $81 = ((($$01$i)) + 8|0);
      $82 = ($81|0)==($__last|0);
      if ($82) {
       break;
      } else {
       $$01$i = $81;$74 = $80;
      }
     }
     return;
    }
    function __ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last) {
     $this = $this|0;
     $__first = $__first|0;
     $__last = $__last|0;
     var $$0$i5 = 0, $$01$i = 0, $$01$i3 = 0, $$__last = 0, $$pre = 0, $$pre$i1 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
     var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
     var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
     var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = $__last;
     $1 = $__first;
     $2 = (($0) - ($1))|0;
     $3 = $2 >> 2;
     $4 = ((($this)) + 8|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = HEAP32[$this>>2]|0;
     $7 = (($5) - ($6))|0;
     $8 = $7 >> 2;
     $9 = ($3>>>0)>($8>>>0);
     $10 = $6;
     if (!($9)) {
      $11 = ((($this)) + 4|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($12) - ($6))|0;
      $14 = $13 >> 2;
      $15 = ($3>>>0)>($14>>>0);
      $16 = (($__first) + ($14<<2)|0);
      $$__last = $15 ? $16 : $__last;
      $17 = $$__last;
      $18 = (($17) - ($1))|0;
      $19 = $18 >> 2;
      $20 = $6;
      _memmove(($20|0),($__first|0),($18|0))|0;
      $21 = (($10) + ($19<<2)|0);
      if (!($15)) {
       $29 = HEAP32[$11>>2]|0;
       $30 = ($29|0)==($21|0);
       if ($30) {
        return;
       }
       $__new_last2$i$i = $21;
       $scevgep$i$i = ((($29)) + -4|0);
       $31 = $scevgep$i$i;
       $32 = (($31) - ($__new_last2$i$i))|0;
       $33 = $32 >>> 2;
       $34 = $33 ^ -1;
       $scevgep4$i$i = (($29) + ($34<<2)|0);
       HEAP32[$11>>2] = $scevgep4$i$i;
       return;
      }
      $22 = ($$__last|0)==($__last|0);
      if ($22) {
       return;
      }
      $$pre$i1 = HEAP32[$11>>2]|0;
      $$01$i3 = $16;$24 = $$pre$i1;
      while(1) {
       $23 = HEAP32[$$01$i3>>2]|0;
       HEAP32[$24>>2] = $23;
       $25 = HEAP32[$11>>2]|0;
       $26 = ((($25)) + 4|0);
       HEAP32[$11>>2] = $26;
       $27 = ((($$01$i3)) + 4|0);
       $28 = ($27|0)==($__last|0);
       if ($28) {
        break;
       } else {
        $$01$i3 = $27;$24 = $26;
       }
      }
      return;
     }
     $35 = ($6|0)==(0);
     $36 = $6;
     if ($35) {
      $65 = $5;
     } else {
      $37 = ((($this)) + 4|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($38|0)==($10|0);
      if (!($39)) {
       $scevgep$i$i$i$i = ((($38)) + -4|0);
       $40 = $scevgep$i$i$i$i;
       $41 = (($40) - ($6))|0;
       $42 = $41 >>> 2;
       $43 = $42 ^ -1;
       $scevgep4$i$i$i$i = (($38) + ($43<<2)|0);
       HEAP32[$37>>2] = $scevgep4$i$i$i$i;
      }
      __ZdlPv($36);
      HEAP32[$4>>2] = 0;
      HEAP32[$37>>2] = 0;
      HEAP32[$this>>2] = 0;
      $65 = 0;
     }
     $44 = ($3>>>0)>(1073741823);
     if ($44) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$4>>2]|0;
      $$pre8 = HEAP32[$this>>2]|0;
      $46 = $$pre8;$47 = $$pre;
     } else {
      $46 = 0;$47 = $65;
     }
     $45 = (($47) - ($46))|0;
     $48 = $45 >> 2;
     $49 = ($48>>>0)<(536870911);
     if ($49) {
      $50 = $45 >> 1;
      $51 = ($50>>>0)<($3>>>0);
      $52 = $51 ? $3 : $50;
      $53 = ($52>>>0)>(1073741823);
      if ($53) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
       $$0$i5 = $52;
      } else {
       $$0$i5 = $52;
      }
     } else {
      $$0$i5 = 1073741823;
     }
     $54 = $$0$i5 << 2;
     $55 = (__Znwj($54)|0);
     $56 = ((($this)) + 4|0);
     HEAP32[$56>>2] = $55;
     HEAP32[$this>>2] = $55;
     $57 = (($55) + ($$0$i5<<2)|0);
     HEAP32[$4>>2] = $57;
     $58 = ($__first|0)==($__last|0);
     if ($58) {
      return;
     }
     $$01$i = $__first;$60 = $55;
     while(1) {
      $59 = HEAP32[$$01$i>>2]|0;
      HEAP32[$60>>2] = $59;
      $61 = HEAP32[$56>>2]|0;
      $62 = ((($61)) + 4|0);
      HEAP32[$56>>2] = $62;
      $63 = ((($$01$i)) + 4|0);
      $64 = ($63|0)==($__last|0);
      if ($64) {
       break;
      } else {
       $$01$i = $63;$60 = $62;
      }
     }
     return;
    }
    function __ZNSt3__16vectorIP9TextblockNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = (($1) - ($2))|0;
     $4 = $3 >> 2;
     $5 = (($4) + 1)|0;
     $6 = ($5>>>0)>(1073741823);
     if ($6) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$this>>2]|0;
      $$in = $$pre;
     } else {
      $$in = $2;
     }
     $7 = ((($this)) + 8|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) - ($$in))|0;
     $10 = $9 >> 2;
     $11 = ($10>>>0)<(536870911);
     if ($11) {
      $15 = $9 >> 1;
      $16 = ($15>>>0)<($5>>>0);
      $17 = $16 ? $5 : $15;
      $18 = HEAP32[$0>>2]|0;
      $19 = (($18) - ($$in))|0;
      $20 = $19 >> 2;
      $21 = ($17|0)==(0);
      if ($21) {
       $$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
      } else {
       $$0$i1 = $17;$41 = $18;$42 = $20;
       label = 6;
      }
     } else {
      $12 = HEAP32[$0>>2]|0;
      $13 = (($12) - ($$in))|0;
      $14 = $13 >> 2;
      $$0$i1 = 1073741823;$41 = $12;$42 = $14;
      label = 6;
     }
     if ((label|0) == 6) {
      $22 = $$0$i1 << 2;
      $23 = (__Znwj($22)|0);
      $$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
     }
     $24 = (($25) + ($26<<2)|0);
     $27 = (($25) + ($$0$i2<<2)|0);
     $28 = $27;
     $29 = HEAP32[$__x>>2]|0;
     HEAP32[$24>>2] = $29;
     $30 = ((($24)) + 4|0);
     $31 = $30;
     $32 = (($33) - ($$in))|0;
     $34 = $32 >> 2;
     $35 = (0 - ($34))|0;
     $36 = (($24) + ($35<<2)|0);
     $37 = $36;
     $38 = $$in;
     _memcpy(($36|0),($38|0),($32|0))|0;
     HEAP32[$this>>2] = $37;
     HEAP32[$0>>2] = $31;
     HEAP32[$7>>2] = $28;
     $39 = ($$in|0)==(0);
     if ($39) {
      return;
     }
     $40 = $$in;
     __ZdlPv($40);
     return;
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$pre$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
     var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     HEAP32[$this>>2] = 0;
     $0 = ((($this)) + 4|0);
     HEAP32[$0>>2] = 0;
     $1 = ((($this)) + 8|0);
     HEAP32[$1>>2] = 0;
     $2 = ((($__x)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = HEAP32[$__x>>2]|0;
     $5 = (($3) - ($4))|0;
     $6 = (($5|0) / 12)&-1;
     $7 = ($3|0)==($4|0);
     if ($7) {
      return;
     }
     $8 = ($6>>>0)>(357913941);
     if ($8) {
      __THREW__ = 0;
      invoke_vi(46,($this|0));
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if (!($10)) {
       label = 4;
      }
     } else {
      label = 4;
     }
     if ((label|0) == 4) {
      __THREW__ = 0;
      $11 = (invoke_ii(29,($5|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       HEAP32[$0>>2] = $11;
       HEAP32[$this>>2] = $11;
       $14 = (($11) + (($6*12)|0)|0);
       $15 = ((($this)) + 8|0);
       HEAP32[$15>>2] = $14;
       $16 = HEAP32[$__x>>2]|0;
       $17 = HEAP32[$2>>2]|0;
       __THREW__ = 0;
       invoke_viii(93,($this|0),($16|0),($17|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        return;
       }
      }
     }
     $20 = ___cxa_find_matching_catch_2()|0;
     $21 = tempRet0;
     $22 = HEAP32[$this>>2]|0;
     $23 = ($22|0)==(0|0);
     if ($23) {
      ___resumeException($20|0);
      // unreachable;
     }
     $24 = HEAP32[$0>>2]|0;
     $25 = ($24|0)==($22|0);
     if ($25) {
      $35 = $22;
     } else {
      $27 = $24;
      while(1) {
       $26 = ((($27)) + -12|0);
       HEAP32[$0>>2] = $26;
       $28 = HEAP32[$26>>2]|0;
       $29 = ($28|0)==(0|0);
       if ($29) {
        $30 = $26;
       } else {
        $32 = ((($27)) + -8|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = ($33|0)==($28|0);
        if (!($34)) {
         HEAP32[$32>>2] = $28;
        }
        __ZdlPv($28);
        $$pre$i$i$i = HEAP32[$0>>2]|0;
        $30 = $$pre$i$i$i;
       }
       $31 = ($30|0)==($22|0);
       if ($31) {
        break;
       } else {
        $27 = $30;
       }
      }
      $$pre$i = HEAP32[$this>>2]|0;
      $35 = $$pre$i;
     }
     __ZdlPv($35);
     ___resumeException($20|0);
     // unreachable;
    }
    function __ZN8TextpageD2Ev($this) {
     $this = $this|0;
     var $$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $i$08$in = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i2 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i3 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 28|0);
     $1 = ((($this)) + 32|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$0>>2]|0;
     $4 = (($2) - ($3))|0;
     $5 = ($4|0)>(0);
     $6 = $3;
     do {
      if ($5) {
       $7 = $4 >> 2;
       $18 = $6;$i$08$in = $7;
       while(1) {
        $i$08 = (($i$08$in) + -1)|0;
        $17 = (($18) + ($i$08<<2)|0);
        $19 = HEAP32[$17>>2]|0;
        $20 = ($19|0)==(0|0);
        if (!($20)) {
         __THREW__ = 0;
         invoke_vi(60,($19|0));
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if ($23) {
          $$lcssa = $19;
          break;
         }
         __ZdlPv($19);
        }
        $21 = ($i$08$in|0)>(1);
        if (!($21)) {
         label = 3;
         break;
        }
        $$pre = HEAP32[$0>>2]|0;
        $18 = $$pre;$i$08$in = $i$08;
       }
       if ((label|0) == 3) {
        $$phi$trans$insert = ((($this)) + 28|0);
        $$pre10 = HEAP32[$$phi$trans$insert>>2]|0;
        $8 = $$pre10;
        break;
       }
       $24 = ___cxa_find_matching_catch_2()|0;
       $25 = tempRet0;
       __ZdlPv($$lcssa);
       $26 = HEAP32[$0>>2]|0;
       $27 = ($26|0)==(0|0);
       $28 = $26;
       if (!($27)) {
        $29 = HEAP32[$1>>2]|0;
        $30 = ($29|0)==($26|0);
        if (!($30)) {
         $scevgep$i$i$i2 = ((($29)) + -4|0);
         $31 = $scevgep$i$i$i2;
         $32 = (($31) - ($28))|0;
         $33 = $32 >>> 2;
         $34 = $33 ^ -1;
         $scevgep4$i$i$i3 = (($29) + ($34<<2)|0);
         HEAP32[$1>>2] = $scevgep4$i$i$i3;
        }
        __ZdlPv($26);
       }
       $36 = ((($this)) + 16|0);
       __THREW__ = 0;
       invoke_vi(27,($36|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        $39 = ___cxa_find_matching_catch_3(0|0)|0;
        $40 = tempRet0;
        ___clang_call_terminate($39);
        // unreachable;
       } else {
        ___resumeException($24|0);
        // unreachable;
       }
      } else {
       $8 = $6;
      }
     } while(0);
     $9 = ($8|0)==(0|0);
     $10 = $8;
     if ($9) {
      $35 = ((($this)) + 16|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
      return;
     }
     $11 = HEAP32[$1>>2]|0;
     $12 = ($11|0)==($8|0);
     if (!($12)) {
      $scevgep$i$i$i = ((($11)) + -4|0);
      $13 = $scevgep$i$i$i;
      $14 = (($13) - ($10))|0;
      $15 = $14 >>> 2;
      $16 = $15 ^ -1;
      $scevgep4$i$i$i = (($11) + ($16<<2)|0);
      HEAP32[$1>>2] = $scevgep4$i$i$i;
     }
     __ZdlPv($8);
     $35 = ((($this)) + 16|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
     return;
    }
    function __ZNK8Textpage9textblockEi($this,$i) {
     $this = $this|0;
     $i = $i|0;
     var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($i|0)<(0);
     if (!($0)) {
      $1 = ((($this)) + 28|0);
      $2 = ((($this)) + 32|0);
      $3 = HEAP32[$2>>2]|0;
      $4 = HEAP32[$1>>2]|0;
      $5 = (($3) - ($4))|0;
      $6 = $5 >> 2;
      $7 = ($6|0)>($i|0);
      if ($7) {
       $8 = $4;
       $10 = $8;
       $9 = (($10) + ($i<<2)|0);
       $11 = HEAP32[$9>>2]|0;
       return ($11|0);
      }
     }
     __ZN5Ocrad14internal_errorEPKc(2038);
     $$phi$trans$insert = ((($this)) + 28|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $10 = $$pre;
     $9 = (($10) + ($i<<2)|0);
     $11 = HEAP32[$9>>2]|0;
     return ($11|0);
    }
    function __ZNK8Textpage6xprintERK7Control($this,$control) {
     $this = $this|0;
     $control = $control|0;
     var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
     var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr10 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $vararg_buffer4 = sp + 16|0;
     $vararg_buffer1 = sp + 8|0;
     $vararg_buffer = sp;
     $0 = ((($control)) + 20|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ($1|0)==(0|0);
     if ($2) {
      STACKTOP = sp;return;
     }
     $3 = ((($this)) + 16|0);
     $4 = HEAP8[$3>>0]|0;
     $5 = $4 & 1;
     $6 = ($5<<24>>24)==(0);
     if ($6) {
      $9 = ((($3)) + 1|0);
      $10 = $9;
     } else {
      $7 = ((($this)) + 24|0);
      $8 = HEAP32[$7>>2]|0;
      $10 = $8;
     }
     HEAP32[$vararg_buffer>>2] = $10;
     (_fprintf($1,2080,$vararg_buffer)|0);
     $11 = HEAP32[$0>>2]|0;
     $12 = ((($this)) + 28|0);
     $13 = ((($this)) + 32|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$12>>2]|0;
     $16 = (($14) - ($15))|0;
     $17 = $16 >> 2;
     HEAP32[$vararg_buffer1>>2] = $17;
     (_fprintf($11,2096,$vararg_buffer1)|0);
     $18 = HEAP32[$13>>2]|0;
     $19 = HEAP32[$12>>2]|0;
     $20 = (($18) - ($19))|0;
     $21 = ($20|0)>(0);
     if ($21) {
      $$in = $19;$i$02 = 0;
     } else {
      STACKTOP = sp;return;
     }
     while(1) {
      $22 = $$in;
      $23 = (($22) + ($i$02<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = HEAP32[$0>>2]|0;
      $26 = (($i$02) + 1)|0;
      $27 = HEAP32[$24>>2]|0;
      $28 = ((($24)) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($24)) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (1 - ($27))|0;
      $33 = (($32) + ($31))|0;
      $34 = ((($24)) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (1 - ($29))|0;
      $37 = (($36) + ($35))|0;
      HEAP32[$vararg_buffer4>>2] = $26;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $27;
      $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
      HEAP32[$vararg_ptr8>>2] = $29;
      $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
      HEAP32[$vararg_ptr9>>2] = $33;
      $vararg_ptr10 = ((($vararg_buffer4)) + 16|0);
      HEAP32[$vararg_ptr10>>2] = $37;
      (_fprintf($25,2118,$vararg_buffer4)|0);
      __ZNK9Textblock6xprintERK7Control($24,$control);
      $38 = HEAP32[$13>>2]|0;
      $39 = HEAP32[$12>>2]|0;
      $40 = (($38) - ($39))|0;
      $41 = $40 >> 2;
      $42 = ($26|0)<($41|0);
      if ($42) {
       $$in = $39;$i$02 = $26;
      } else {
       break;
      }
     }
     STACKTOP = sp;return;
    }
    function __ZN6BitmapC2Eiiii($this,$l,$t,$r,$b) {
     $this = $this|0;
     $l = $l|0;
     $t = $t|0;
     $r = $r|0;
     $b = $b|0;
     var $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
     var $8 = 0, $9 = 0, $row$04 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $0 = sp;
     __ZN9RectangleC2Eiiii($this,$l,$t,$r,$b);
     $1 = ((($this)) + 16|0);
     $2 = ((($this)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ((($this)) + 4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = (($3) + 1)|0;
     $7 = (($6) - ($5))|0;
     __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($1,$7);
     $8 = HEAP32[$2>>2]|0;
     $9 = HEAP32[$4>>2]|0;
     $10 = (($8) + 1)|0;
     $11 = (($10) - ($9))|0;
     $12 = ($11|0)>(0);
     if (!($12)) {
      STACKTOP = sp;return;
     }
     $13 = ((($this)) + 8|0);
     $56 = $9;$57 = $8;$row$04 = 0;
     while(1) {
      $31 = HEAP32[$1>>2]|0;
      $32 = (($31) + (($row$04*12)|0)|0);
      $33 = HEAP32[$13>>2]|0;
      $34 = HEAP32[$this>>2]|0;
      $35 = (($33) + 1)|0;
      $36 = (($35) - ($34))|0;
      HEAP8[$0>>0] = 0;
      $37 = (((($31) + (($row$04*12)|0)|0)) + 4|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$32>>2]|0;
      $40 = (($38) - ($39))|0;
      $41 = ($36>>>0)>($40>>>0);
      $42 = $39;
      $43 = $38;
      if ($41) {
       $44 = (($36) - ($40))|0;
       __THREW__ = 0;
       invoke_viii(51,($32|0),($44|0),($0|0));
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        break;
       }
       $$pre = HEAP32[$2>>2]|0;
       $$pre5 = HEAP32[$4>>2]|0;
       $52 = $$pre;$54 = $$pre5;
      } else {
       $47 = ($36>>>0)<($40>>>0);
       if ($47) {
        $48 = (($42) + ($36)|0);
        $49 = ($43|0)==($48|0);
        if ($49) {
         $52 = $57;$54 = $56;
        } else {
         HEAP32[$37>>2] = $48;
         $52 = $57;$54 = $56;
        }
       } else {
        $52 = $57;$54 = $56;
       }
      }
      $50 = (($row$04) + 1)|0;
      $51 = (($52) + 1)|0;
      $53 = (($51) - ($54))|0;
      $55 = ($50|0)<($53|0);
      if ($55) {
       $56 = $54;$57 = $52;$row$04 = $50;
      } else {
       label = 3;
       break;
      }
     }
     if ((label|0) == 3) {
      STACKTOP = sp;return;
     }
     $14 = ___cxa_find_matching_catch_2()|0;
     $15 = tempRet0;
     $16 = HEAP32[$1>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      ___resumeException($14|0);
      // unreachable;
     }
     $18 = ((($this)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)==($16|0);
     if ($20) {
      $30 = $16;
     } else {
      $22 = $19;
      while(1) {
       $21 = ((($22)) + -12|0);
       HEAP32[$18>>2] = $21;
       $23 = HEAP32[$21>>2]|0;
       $24 = ($23|0)==(0|0);
       if ($24) {
        $25 = $21;
       } else {
        $27 = ((($22)) + -8|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = ($28|0)==($23|0);
        if (!($29)) {
         HEAP32[$27>>2] = $23;
        }
        __ZdlPv($23);
        $$pre$i$i$i = HEAP32[$18>>2]|0;
        $25 = $$pre$i$i$i;
       }
       $26 = ($25|0)==($16|0);
       if ($26) {
        break;
       } else {
        $22 = $25;
       }
      }
      $$pre$i = HEAP32[$1>>2]|0;
      $30 = $$pre$i;
     }
     __ZdlPv($30);
     ___resumeException($14|0);
     // unreachable;
    }
    function __ZN6BitmapC2ERKS_RK9Rectangle($this,$source,$re) {
     $this = $this|0;
     $source = $source|0;
     $re = $re|0;
     var $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$phiZ2D = 0, $$pre14 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
     var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
     var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
     var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
     var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
     var $94 = 0, $col$07 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $row$09 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     ;HEAP32[$this>>2]=HEAP32[$re>>2]|0;HEAP32[$this+4>>2]=HEAP32[$re+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$re+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$re+12>>2]|0;
     $0 = ((($this)) + 16|0);
     $1 = ((($re)) + 12|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = ((($re)) + 4|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = (($2) + 1)|0;
     $6 = (($5) - ($4))|0;
     __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($0,$6);
     __THREW__ = 0;
     $7 = (invoke_iii(94,($source|0),($re|0))|0);
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     do {
      if ($9) {
       label = 5;
      } else {
       if (!($7)) {
        __THREW__ = 0;
        invoke_vi(47,(2145|0));
        $10 = __THREW__; __THREW__ = 0;
        $11 = $10&1;
        if ($11) {
         label = 5;
         break;
        }
       }
       $31 = HEAP32[$this>>2]|0;
       $32 = HEAP32[$source>>2]|0;
       $33 = (($31) - ($32))|0;
       $34 = ((($this)) + 4|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = ((($source)) + 4|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = (($35) - ($37))|0;
       $39 = ((($this)) + 12|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (($40) + 1)|0;
       $42 = (($41) - ($35))|0;
       $43 = ($42|0)>(0);
       if (!($43)) {
        return;
       }
       $44 = ((($this)) + 8|0);
       $45 = ((($source)) + 16|0);
       $$pre = HEAP32[$44>>2]|0;
       $49 = $$pre;$51 = $31;$row$09 = 0;
       while(1) {
        $46 = HEAP32[$0>>2]|0;
        $47 = (($46) + (($row$09*12)|0)|0);
        $48 = (($49) + 1)|0;
        $50 = (($48) - ($51))|0;
        $52 = (((($46) + (($row$09*12)|0)|0)) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = HEAP32[$47>>2]|0;
        $55 = (($53) - ($54))|0;
        $56 = ($50>>>0)>($55>>>0);
        $57 = $54;
        $58 = $53;
        if ($56) {
         $59 = (($50) - ($55))|0;
         __THREW__ = 0;
         invoke_vii(95,($47|0),($59|0));
         $60 = __THREW__; __THREW__ = 0;
         $61 = $60&1;
         if ($61) {
          label = 4;
          break;
         }
         $$pre14 = HEAP32[$44>>2]|0;
         $$pre15 = HEAP32[$this>>2]|0;
         $66 = $$pre14;$68 = $$pre15;
        } else {
         $62 = ($50>>>0)<($55>>>0);
         if ($62) {
          $63 = (($57) + ($50)|0);
          $64 = ($58|0)==($63|0);
          if ($64) {
           $66 = $49;$68 = $51;
          } else {
           HEAP32[$52>>2] = $63;
           $66 = $49;$68 = $51;
          }
         } else {
          $66 = $49;$68 = $51;
         }
        }
        $65 = (($66) + 1)|0;
        $67 = (($65) - ($68))|0;
        $69 = ($67|0)>(0);
        if ($69) {
         $70 = HEAP32[$45>>2]|0;
         $71 = (($38) + ($row$09))|0;
         $72 = HEAP32[$0>>2]|0;
         $73 = (($70) + (($71*12)|0)|0);
         $74 = (($72) + (($row$09*12)|0)|0);
         $col$07 = 0;
         while(1) {
          $81 = (($33) + ($col$07))|0;
          $82 = HEAP32[$73>>2]|0;
          $83 = (($82) + ($81)|0);
          $84 = HEAP8[$83>>0]|0;
          $85 = HEAP32[$74>>2]|0;
          $86 = (($85) + ($col$07)|0);
          HEAP8[$86>>0] = $84;
          $87 = (($col$07) + 1)|0;
          $88 = HEAP32[$44>>2]|0;
          $89 = HEAP32[$this>>2]|0;
          $90 = (($88) + 1)|0;
          $91 = (($90) - ($89))|0;
          $92 = ($87|0)<($91|0);
          if ($92) {
           $col$07 = $87;
          } else {
           $93 = $89;$94 = $88;
           break;
          }
         }
        } else {
         $93 = $68;$94 = $66;
        }
        $75 = (($row$09) + 1)|0;
        $76 = HEAP32[$39>>2]|0;
        $77 = HEAP32[$34>>2]|0;
        $78 = (($76) + 1)|0;
        $79 = (($78) - ($77))|0;
        $80 = ($75|0)<($79|0);
        if ($80) {
         $49 = $94;$51 = $93;$row$09 = $75;
        } else {
         label = 17;
         break;
        }
       }
       if ((label|0) == 4) {
        $12 = ___cxa_find_matching_catch_2()|0;
        $13 = tempRet0;
        $$pre$phiZ2D = $0;$lpad$phi$index = $12;$lpad$phi$index2 = $13;
        break;
       }
       else if ((label|0) == 17) {
        return;
       }
      }
     } while(0);
     if ((label|0) == 5) {
      $14 = ___cxa_find_matching_catch_2()|0;
      $15 = tempRet0;
      $$pre$phiZ2D = $0;$lpad$phi$index = $14;$lpad$phi$index2 = $15;
     }
     $16 = HEAP32[$$pre$phiZ2D>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     $18 = ((($this)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)==($16|0);
     if ($20) {
      $30 = $16;
     } else {
      $22 = $19;
      while(1) {
       $21 = ((($22)) + -12|0);
       HEAP32[$18>>2] = $21;
       $23 = HEAP32[$21>>2]|0;
       $24 = ($23|0)==(0|0);
       if ($24) {
        $25 = $21;
       } else {
        $27 = ((($22)) + -8|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = ($28|0)==($23|0);
        if (!($29)) {
         HEAP32[$27>>2] = $23;
        }
        __ZdlPv($23);
        $$pre$i$i$i = HEAP32[$18>>2]|0;
        $25 = $$pre$i$i$i;
       }
       $26 = ($25|0)==($16|0);
       if ($26) {
        break;
       } else {
        $22 = $25;
       }
      }
      $$pre$i = HEAP32[$0>>2]|0;
      $30 = $$pre$i;
     }
     __ZdlPv($30);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
    function __ZN6Bitmap4leftEi($this,$l) {
     $this = $this|0;
     $l = $l|0;
     var $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0;
     var $7 = 0, $8 = 0, $9 = 0, $row$0 = 0, $row$010 = 0, $row$01119 = 0, $row1$0 = 0, $row1$013 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $$byval_copy1 = sp + 8|0;
     $$byval_copy = sp + 4|0;
     $0 = sp;
     $1 = sp + 12|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = ($2|0)==($l|0);
     if ($3) {
      STACKTOP = sp;return;
     }
     $4 = ($2|0)>($l|0);
     $5 = ((($this)) + 12|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ((($this)) + 4|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($6) + 1)|0;
     $10 = (($9) - ($8))|0;
     $row$010 = (($10) + -1)|0;
     $11 = ($10|0)>(0);
     L4: do {
      if ($4) {
       if ($11) {
        $13 = ((($this)) + 16|0);
        $14 = HEAP32[$13>>2]|0;
        $15 = (($14) + (($row$010*12)|0)|0);
        $16 = HEAP32[$15>>2]|0;
        HEAP32[$0>>2] = $16;
        $17 = (($2) - ($l))|0;
        HEAP8[$1>>0] = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        (__ZNSt3__16vectorIhNS_9allocatorIhEEE6insertENS_11__wrap_iterIPKhEEjRS5_($15,$$byval_copy,$17,$1)|0);
        $18 = ($10|0)>(1);
        if ($18) {
         $row$01119 = $row$010;
         while(1) {
          $row$0 = (($row$01119) + -1)|0;
          $$pre16 = HEAP32[$this>>2]|0;
          $19 = HEAP32[$13>>2]|0;
          $20 = (($19) + (($row$0*12)|0)|0);
          $21 = HEAP32[$20>>2]|0;
          HEAP32[$0>>2] = $21;
          $22 = (($$pre16) - ($l))|0;
          HEAP8[$1>>0] = 0;
          ;HEAP32[$$byval_copy1>>2]=HEAP32[$0>>2]|0;
          (__ZNSt3__16vectorIhNS_9allocatorIhEEE6insertENS_11__wrap_iterIPKhEEjRS5_($20,$$byval_copy1,$22,$1)|0);
          $23 = ($row$01119|0)>(1);
          if ($23) {
           $row$01119 = $row$0;
          } else {
           break;
          }
         }
        }
       }
      } else {
       if ($11) {
        $12 = ((($this)) + 16|0);
        $28 = $2;$row1$013 = $row$010;
        while(1) {
         $24 = HEAP32[$12>>2]|0;
         $25 = (($24) + (($row1$013*12)|0)|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = (($l) - ($28))|0;
         $29 = (($26) + ($27)|0);
         $30 = ($28|0)==($l|0);
         if (!($30)) {
          $32 = $29;
          $33 = (((($24) + (($row1$013*12)|0)|0)) + 4|0);
          $34 = HEAP32[$33>>2]|0;
          $35 = (($34) - ($32))|0;
          _memmove(($26|0),($29|0),($35|0))|0;
          $36 = (($26) + ($35)|0);
          $37 = HEAP32[$33>>2]|0;
          $38 = ($37|0)==($36|0);
          if (!($38)) {
           HEAP32[$33>>2] = $36;
          }
         }
         $31 = ($row1$013|0)>(0);
         if (!($31)) {
          break L4;
         }
         $row1$0 = (($row1$013) + -1)|0;
         $$pre = HEAP32[$this>>2]|0;
         $28 = $$pre;$row1$013 = $row1$0;
        }
       }
      }
     } while(0);
     __ZN9Rectangle4leftEi($this,$l);
     STACKTOP = sp;return;
    }
    function __ZNSt3__16vectorIhNS_9allocatorIhEEE6insertENS_11__wrap_iterIPKhEEjRS5_($this,$__position,$__n,$__x) {
     $this = $this|0;
     $__position = $__position|0;
     $__n = $__n|0;
     $__x = $__x|0;
     var $$ = 0, $$0$i = 0, $$0$i2 = 0, $$0$i35 = 0, $$0$i36 = 0, $$04 = 0, $$lcssa = 0, $$pre = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
     var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
     var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
     var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
     var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__i$01$i = 0, $__p$0 = 0, $__v$sroa$12$0$in = 0, $__xr$0 = 0, $exitcond$i = 0, $scevgep = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = $0;
     $2 = HEAP32[$__position>>2]|0;
     $3 = (($2) - ($1))|0;
     $4 = (($0) + ($3)|0);
     $5 = ($__n|0)==(0);
     if ($5) {
      $__p$0 = $4;
      return ($__p$0|0);
     }
     $6 = ((($this)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ((($this)) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = $9;
     $11 = (($7) - ($10))|0;
     $12 = ($11>>>0)<($__n>>>0);
     if (!($12)) {
      $13 = $4;
      $14 = (($10) - ($13))|0;
      $15 = ($14>>>0)<($__n>>>0);
      if ($15) {
       $16 = (($__n) - ($14))|0;
       $$0$i2 = $16;$18 = $9;
       while(1) {
        $17 = HEAP8[$__x>>0]|0;
        HEAP8[$18>>0] = $17;
        $19 = HEAP32[$8>>2]|0;
        $20 = ((($19)) + 1|0);
        HEAP32[$8>>2] = $20;
        $21 = (($$0$i2) + -1)|0;
        $22 = ($21|0)==(0);
        if ($22) {
         $$lcssa = $20;
         break;
        } else {
         $$0$i2 = $21;$18 = $20;
        }
       }
       $23 = ($9|0)==($4|0);
       if ($23) {
        $__p$0 = $4;
        return ($__p$0|0);
       } else {
        $$04 = $14;$25 = $$lcssa;
       }
      } else {
       $$04 = $__n;$25 = $9;
      }
      $24 = (($4) + ($__n)|0);
      $26 = $25;
      $27 = $24;
      $28 = (($26) - ($27))|0;
      $29 = (($4) + ($28)|0);
      $30 = ($29>>>0)<($9>>>0);
      if ($30) {
       $32 = $25;$__i$01$i = $29;
       while(1) {
        $31 = HEAP8[$__i$01$i>>0]|0;
        HEAP8[$32>>0] = $31;
        $33 = ((($__i$01$i)) + 1|0);
        $34 = HEAP32[$8>>2]|0;
        $35 = ((($34)) + 1|0);
        HEAP32[$8>>2] = $35;
        $exitcond$i = ($33|0)==($9|0);
        if ($exitcond$i) {
         break;
        } else {
         $32 = $35;$__i$01$i = $33;
        }
       }
      }
      $36 = (0 - ($28))|0;
      $37 = (($25) + ($36)|0);
      _memmove(($37|0),($4|0),($28|0))|0;
      $38 = ($4>>>0)>($__x>>>0);
      if ($38) {
       $__xr$0 = $__x;
      } else {
       $39 = HEAP32[$8>>2]|0;
       $40 = ($39>>>0)>($__x>>>0);
       $41 = (($__x) + ($__n)|0);
       $$ = $40 ? $41 : $__x;
       $__xr$0 = $$;
      }
      $42 = HEAP8[$__xr$0>>0]|0;
      _memset(($4|0),($42|0),($$04|0))|0;
      $__p$0 = $4;
      return ($__p$0|0);
     }
     $43 = (($10) - ($1))|0;
     $44 = (($43) + ($__n))|0;
     $45 = ($44|0)<(0);
     if ($45) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$6>>2]|0;
      $$pre7 = HEAP32[$this>>2]|0;
      $47 = $$pre7;$48 = $$pre;
     } else {
      $47 = $1;$48 = $7;
     }
     $46 = (($48) - ($47))|0;
     $49 = ($46>>>0)<(1073741823);
     if ($49) {
      $52 = $46 << 1;
      $53 = ($52>>>0)<($44>>>0);
      $54 = $53 ? $44 : $52;
      $55 = $4;
      $56 = (($55) - ($47))|0;
      $57 = ($54|0)==(0);
      if ($57) {
       $$0$i36 = 0;$60 = 0;$61 = $56;$72 = $55;
      } else {
       $$0$i35 = $54;$81 = $56;$82 = $55;
       label = 17;
      }
     } else {
      $50 = $4;
      $51 = (($50) - ($47))|0;
      $$0$i35 = 2147483647;$81 = $51;$82 = $50;
      label = 17;
     }
     if ((label|0) == 17) {
      $58 = (__Znwj($$0$i35)|0);
      $$0$i36 = $$0$i35;$60 = $58;$61 = $81;$72 = $82;
     }
     $59 = (($60) + ($61)|0);
     $62 = (($60) + ($$0$i36)|0);
     $63 = (($61) + ($__n))|0;
     $$0$i = $__n;$__v$sroa$12$0$in = $59;
     while(1) {
      $64 = HEAP8[$__x>>0]|0;
      HEAP8[$__v$sroa$12$0$in>>0] = $64;
      $65 = ((($__v$sroa$12$0$in)) + 1|0);
      $66 = (($$0$i) + -1)|0;
      $67 = ($66|0)==(0);
      if ($67) {
       break;
      } else {
       $$0$i = $66;$__v$sroa$12$0$in = $65;
      }
     }
     $68 = $62;
     $scevgep = (($60) + ($63)|0);
     $69 = HEAP32[$this>>2]|0;
     $70 = $69;
     $71 = (($72) - ($70))|0;
     $73 = (0 - ($71))|0;
     $74 = (($59) + ($73)|0);
     $75 = $74;
     _memcpy(($74|0),($69|0),($71|0))|0;
     $76 = HEAP32[$8>>2]|0;
     $77 = (($76) - ($72))|0;
     _memcpy(($scevgep|0),($4|0),($77|0))|0;
     $78 = (($scevgep) + ($77)|0);
     $79 = $78;
     HEAP32[$this>>2] = $75;
     HEAP32[$8>>2] = $79;
     HEAP32[$6>>2] = $68;
     $80 = ($69|0)==(0|0);
     if ($80) {
      $__p$0 = $59;
      return ($__p$0|0);
     }
     __ZdlPv($69);
     $__p$0 = $59;
     return ($__p$0|0);
    }
    function __ZN6Bitmap3topEi($this,$t) {
     $this = $this|0;
     $t = $t|0;
     var $$0$i$i = 0, $$0$lcssa$i$i$i = 0, $$012$i$i$i = 0, $$03$i$i$i = 0, $$byval_copy = 0, $$lcssa = 0, $$pre$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
     var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
     var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
     var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0;
     var label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $$byval_copy = sp + 16|0;
     $0 = sp + 12|0;
     $1 = sp;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($3|0)==($t|0);
     if ($4) {
      STACKTOP = sp;return;
     }
     $5 = ($3|0)>($t|0);
     $6 = ((($this)) + 16|0);
     $7 = HEAP32[$6>>2]|0;
     do {
      if ($5) {
       $8 = $7;
       HEAP32[$0>>2] = $8;
       $9 = (($3) - ($t))|0;
       $10 = ((($this)) + 8|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = HEAP32[$this>>2]|0;
       $13 = (($11) + 1)|0;
       $14 = (($13) - ($12))|0;
       HEAP32[$1>>2] = 0;
       $15 = ((($1)) + 4|0);
       HEAP32[$15>>2] = 0;
       $16 = ((($1)) + 8|0);
       HEAP32[$16>>2] = 0;
       $17 = ($13|0)==($12|0);
       L6: do {
        if (!($17)) {
         $18 = ($14|0)<(0);
         if ($18) {
          __THREW__ = 0;
          invoke_vi(46,($1|0));
          $19 = __THREW__; __THREW__ = 0;
          $20 = $19&1;
          if (!($20)) {
           label = 6;
          }
         } else {
          label = 6;
         }
         if ((label|0) == 6) {
          __THREW__ = 0;
          $21 = (invoke_ii(29,($14|0))|0);
          $22 = __THREW__; __THREW__ = 0;
          $23 = $22&1;
          if (!($23)) {
           HEAP32[$15>>2] = $21;
           HEAP32[$1>>2] = $21;
           $24 = (($21) + ($14)|0);
           $25 = ((($1)) + 8|0);
           HEAP32[$25>>2] = $24;
           $$0$i$i = $14;$26 = $21;
           while(1) {
            HEAP8[$26>>0] = 0;
            $27 = HEAP32[$15>>2]|0;
            $28 = ((($27)) + 1|0);
            HEAP32[$15>>2] = $28;
            $29 = (($$0$i$i) + -1)|0;
            $30 = ($29|0)==(0);
            if ($30) {
             break L6;
            } else {
             $$0$i$i = $29;$26 = $28;
            }
           }
          }
         }
         $31 = ___cxa_find_matching_catch_2()|0;
         $32 = tempRet0;
         $33 = HEAP32[$1>>2]|0;
         $34 = ($33|0)==(0|0);
         if ($34) {
          ___resumeException($31|0);
          // unreachable;
         }
         $35 = HEAP32[$15>>2]|0;
         $36 = ($35|0)==($33|0);
         if (!($36)) {
          HEAP32[$15>>2] = $33;
         }
         __ZdlPv($33);
         ___resumeException($31|0);
         // unreachable;
        }
       } while(0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
       (invoke_iiiii(96,($6|0),($$byval_copy|0),($9|0),($1|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        $39 = HEAP32[$1>>2]|0;
        $40 = ($39|0)==(0|0);
        if ($40) {
         break;
        }
        $41 = HEAP32[$15>>2]|0;
        $42 = ($41|0)==($39|0);
        if (!($42)) {
         HEAP32[$15>>2] = $39;
        }
        __ZdlPv($39);
        break;
       }
       $43 = ___cxa_find_matching_catch_2()|0;
       $44 = tempRet0;
       $45 = HEAP32[$1>>2]|0;
       $46 = ($45|0)==(0|0);
       if ($46) {
        ___resumeException($43|0);
        // unreachable;
       }
       $47 = HEAP32[$15>>2]|0;
       $48 = ($47|0)==($45|0);
       if (!($48)) {
        HEAP32[$15>>2] = $45;
       }
       __ZdlPv($45);
       ___resumeException($43|0);
       // unreachable;
      } else {
       $49 = (($t) - ($3))|0;
       $50 = (($7) + (($49*12)|0)|0);
       $51 = ((($this)) + 20|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($50|0)==($52|0);
       if ($53) {
        $$0$lcssa$i$i$i = $7;$61 = $50;
       } else {
        $$012$i$i$i = $50;$$03$i$i$i = $7;
        while(1) {
         $54 = ($$03$i$i$i|0)==($$012$i$i$i|0);
         if (!($54)) {
          $55 = HEAP32[$$012$i$i$i>>2]|0;
          $56 = ((($$012$i$i$i)) + 4|0);
          $57 = HEAP32[$56>>2]|0;
          __ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($$03$i$i$i,$55,$57);
         }
         $58 = ((($$012$i$i$i)) + 12|0);
         $59 = ((($$03$i$i$i)) + 12|0);
         $60 = ($58|0)==($52|0);
         if ($60) {
          $$lcssa = $59;
          break;
         } else {
          $$012$i$i$i = $58;$$03$i$i$i = $59;
         }
        }
        $$pre$i = HEAP32[$51>>2]|0;
        $$0$lcssa$i$i$i = $$lcssa;$61 = $$pre$i;
       }
       $62 = ($61|0)==($$0$lcssa$i$i$i|0);
       if (!($62)) {
        $64 = $61;
        while(1) {
         $63 = ((($64)) + -12|0);
         HEAP32[$51>>2] = $63;
         $65 = HEAP32[$63>>2]|0;
         $66 = ($65|0)==(0|0);
         if ($66) {
          $67 = $63;
         } else {
          $69 = ((($64)) + -8|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = ($70|0)==($65|0);
          if (!($71)) {
           HEAP32[$69>>2] = $65;
          }
          __ZdlPv($65);
          $$pre$i$i$i = HEAP32[$51>>2]|0;
          $67 = $$pre$i$i$i;
         }
         $68 = ($67|0)==($$0$lcssa$i$i$i|0);
         if ($68) {
          break;
         } else {
          $64 = $67;
         }
        }
       }
      }
     } while(0);
     __ZN9Rectangle3topEi($this,$t);
     STACKTOP = sp;return;
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE6insertENS_11__wrap_iterIPKS3_EEjRS7_($this,$__position,$__n,$__x) {
     $this = $this|0;
     $__position = $__position|0;
     $__n = $__n|0;
     $__x = $__x|0;
     var $$ = 0, $$0$i = 0, $$0$i10 = 0, $$0$i18 = 0, $$01$i$i$i$i = 0, $$01$i$i$i$i12 = 0, $$012$i$i = 0, $$019 = 0, $$03$i$i = 0, $$lcssa = 0, $$lcssa74 = 0, $$lcssa76 = 0, $$lcssa78 = 0, $$lcssa80 = 0, $$pre = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0;
     var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
     var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
     var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
     var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
     var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
     var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
     var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
     var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0 = 0, $__v = 0, $__xr$0 = 0;
     var $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $__v = sp;
     $0 = HEAP32[$this>>2]|0;
     $1 = $0;
     $2 = HEAP32[$__position>>2]|0;
     $3 = (($2) - ($1))|0;
     $4 = (($3|0) / 12)&-1;
     $5 = (($0) + (($4*12)|0)|0);
     $6 = ($__n|0)==(0);
     if ($6) {
      $__p$0 = $5;
      STACKTOP = sp;return ($__p$0|0);
     }
     $7 = ((($this)) + 8|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ((($this)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = $10;
     $12 = (($8) - ($11))|0;
     $13 = (($12|0) / 12)&-1;
     $14 = ($13>>>0)<($__n>>>0);
     if (!($14)) {
      $15 = $5;
      $16 = (($11) - ($15))|0;
      $17 = (($16|0) / 12)&-1;
      $18 = ($17>>>0)<($__n>>>0);
      do {
       if ($18) {
        $19 = (($__n) - ($17))|0;
        $20 = ((($__x)) + 4|0);
        $$0$i = $19;$21 = $10;
        while(1) {
         HEAP32[$21>>2] = 0;
         $22 = ((($21)) + 4|0);
         HEAP32[$22>>2] = 0;
         $23 = ((($21)) + 8|0);
         HEAP32[$23>>2] = 0;
         $24 = HEAP32[$20>>2]|0;
         $25 = HEAP32[$__x>>2]|0;
         $26 = (($24) - ($25))|0;
         $27 = ($24|0)==($25|0);
         if (!($27)) {
          $28 = ($26|0)<(0);
          if ($28) {
           __THREW__ = 0;
           invoke_vi(46,($21|0));
           $29 = __THREW__; __THREW__ = 0;
           $30 = $29&1;
           if ($30) {
            $$lcssa78 = $21;$$lcssa80 = $22;
            break;
           }
          }
          __THREW__ = 0;
          $31 = (invoke_ii(29,($26|0))|0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if ($33) {
           $$lcssa78 = $21;$$lcssa80 = $22;
           break;
          }
          HEAP32[$22>>2] = $31;
          HEAP32[$21>>2] = $31;
          $34 = (($31) + ($26)|0);
          $35 = ((($21)) + 8|0);
          HEAP32[$35>>2] = $34;
          $36 = HEAP32[$__x>>2]|0;
          $37 = HEAP32[$20>>2]|0;
          $38 = ($36|0)==($37|0);
          if (!($38)) {
           $$01$i$i$i$i = $36;$40 = $31;
           while(1) {
            $39 = HEAP8[$$01$i$i$i$i>>0]|0;
            HEAP8[$40>>0] = $39;
            $41 = HEAP32[$22>>2]|0;
            $42 = ((($41)) + 1|0);
            HEAP32[$22>>2] = $42;
            $43 = ((($$01$i$i$i$i)) + 1|0);
            $44 = ($43|0)==($37|0);
            if ($44) {
             break;
            } else {
             $$01$i$i$i$i = $43;$40 = $42;
            }
           }
          }
         }
         $51 = HEAP32[$9>>2]|0;
         $52 = ((($51)) + 12|0);
         HEAP32[$9>>2] = $52;
         $53 = (($$0$i) + -1)|0;
         $54 = ($53|0)==(0);
         if ($54) {
          label = 17;
          break;
         } else {
          $$0$i = $53;$21 = $52;
         }
        }
        if ((label|0) == 17) {
         $55 = ($10|0)==($5|0);
         if ($55) {
          $__p$0 = $5;
         } else {
          $$019 = $17;
          break;
         }
         STACKTOP = sp;return ($__p$0|0);
        }
        $45 = ___cxa_find_matching_catch_2()|0;
        $46 = tempRet0;
        $47 = HEAP32[$$lcssa78>>2]|0;
        $48 = ($47|0)==(0|0);
        if ($48) {
         ___resumeException($45|0);
         // unreachable;
        }
        $49 = HEAP32[$$lcssa80>>2]|0;
        $50 = ($49|0)==($47|0);
        if (!($50)) {
         HEAP32[$$lcssa80>>2] = $47;
        }
        __ZdlPv($47);
        ___resumeException($45|0);
        // unreachable;
       } else {
        $$019 = $__n;
       }
      } while(0);
      $56 = (($5) + (($__n*12)|0)|0);
      __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE12__move_rangeEPS3_S6_S6_($this,$5,$10,$56);
      $57 = ($5>>>0)>($__x>>>0);
      if ($57) {
       $__xr$0 = $__x;
      } else {
       $58 = HEAP32[$9>>2]|0;
       $59 = ($58>>>0)>($__x>>>0);
       $60 = (($__x) + (($__n*12)|0)|0);
       $$ = $59 ? $60 : $__x;
       $__xr$0 = $$;
      }
      $61 = ((($__xr$0)) + 4|0);
      $$012$i$i = $$019;$$03$i$i = $5;
      while(1) {
       $62 = ($$03$i$i|0)==($__xr$0|0);
       if (!($62)) {
        $63 = HEAP32[$__xr$0>>2]|0;
        $64 = HEAP32[$61>>2]|0;
        __ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($$03$i$i,$63,$64);
       }
       $65 = ((($$03$i$i)) + 12|0);
       $66 = (($$012$i$i) + -1)|0;
       $67 = ($66|0)==(0);
       if ($67) {
        $__p$0 = $5;
        break;
       } else {
        $$012$i$i = $66;$$03$i$i = $65;
       }
      }
      STACKTOP = sp;return ($__p$0|0);
     }
     $68 = ((($this)) + 8|0);
     $69 = (($11) - ($1))|0;
     $70 = (($69|0) / 12)&-1;
     $71 = (($70) + ($__n))|0;
     $72 = ($71>>>0)>(357913941);
     if ($72) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$7>>2]|0;
      $$pre44 = HEAP32[$this>>2]|0;
      $74 = $$pre44;$75 = $$pre;
     } else {
      $74 = $1;$75 = $8;
     }
     $73 = (($75) - ($74))|0;
     $76 = (($73|0) / 12)&-1;
     $77 = ($76>>>0)<(178956970);
     if ($77) {
      $78 = $76 << 1;
      $79 = ($78>>>0)<($71>>>0);
      $80 = $79 ? $71 : $78;
      $$0$i18 = $80;
     } else {
      $$0$i18 = 357913941;
     }
     $81 = $5;
     $82 = (($81) - ($74))|0;
     $83 = (($82|0) / 12)&-1;
     $84 = ((($__v)) + 12|0);
     HEAP32[$84>>2] = 0;
     $85 = ((($__v)) + 16|0);
     HEAP32[$85>>2] = $68;
     $86 = ($$0$i18|0)==(0);
     if ($86) {
      $89 = 0;
     } else {
      $87 = ($$0$i18*12)|0;
      $88 = (__Znwj($87)|0);
      $89 = $88;
     }
     HEAP32[$__v>>2] = $89;
     $90 = (($89) + (($83*12)|0)|0);
     $91 = ((($__v)) + 8|0);
     HEAP32[$91>>2] = $90;
     $92 = ((($__v)) + 4|0);
     HEAP32[$92>>2] = $90;
     $93 = (($89) + (($$0$i18*12)|0)|0);
     $94 = ((($__v)) + 12|0);
     HEAP32[$94>>2] = $93;
     $95 = ((($__x)) + 4|0);
     $$0$i10 = $__n;$96 = $90;
     while(1) {
      HEAP32[$96>>2] = 0;
      $97 = ((($96)) + 4|0);
      HEAP32[$97>>2] = 0;
      $98 = ((($96)) + 8|0);
      HEAP32[$98>>2] = 0;
      $99 = HEAP32[$95>>2]|0;
      $100 = HEAP32[$__x>>2]|0;
      $101 = (($99) - ($100))|0;
      $102 = ($99|0)==($100|0);
      if (!($102)) {
       $103 = ($101|0)<(0);
       if ($103) {
        __THREW__ = 0;
        invoke_vi(46,($96|0));
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if ($105) {
         $$lcssa = $96;$$lcssa74 = $96;$$lcssa76 = $97;
         label = 37;
         break;
        }
       }
       __THREW__ = 0;
       $106 = (invoke_ii(29,($101|0))|0);
       $107 = __THREW__; __THREW__ = 0;
       $108 = $107&1;
       if ($108) {
        $$lcssa = $96;$$lcssa74 = $96;$$lcssa76 = $97;
        label = 37;
        break;
       }
       HEAP32[$97>>2] = $106;
       HEAP32[$96>>2] = $106;
       $109 = (($106) + ($101)|0);
       $110 = ((($96)) + 8|0);
       HEAP32[$110>>2] = $109;
       $111 = HEAP32[$__x>>2]|0;
       $112 = HEAP32[$95>>2]|0;
       $113 = ($111|0)==($112|0);
       if (!($113)) {
        $$01$i$i$i$i12 = $111;$115 = $106;
        while(1) {
         $114 = HEAP8[$$01$i$i$i$i12>>0]|0;
         HEAP8[$115>>0] = $114;
         $116 = HEAP32[$97>>2]|0;
         $117 = ((($116)) + 1|0);
         HEAP32[$97>>2] = $117;
         $118 = ((($$01$i$i$i$i12)) + 1|0);
         $119 = ($118|0)==($112|0);
         if ($119) {
          break;
         } else {
          $$01$i$i$i$i12 = $118;$115 = $117;
         }
        }
       }
      }
      $126 = ((($96)) + 12|0);
      HEAP32[$91>>2] = $126;
      $127 = (($$0$i10) + -1)|0;
      $128 = ($127|0)==(0);
      if ($128) {
       label = 42;
       break;
      } else {
       $$0$i10 = $127;$96 = $126;
      }
     }
     do {
      if ((label|0) == 37) {
       $120 = ___cxa_find_matching_catch_2()|0;
       $121 = tempRet0;
       $122 = HEAP32[$$lcssa74>>2]|0;
       $123 = ($122|0)==(0|0);
       if ($123) {
        $148 = $$lcssa;$eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
       } else {
        $124 = HEAP32[$$lcssa76>>2]|0;
        $125 = ($124|0)==($122|0);
        if (!($125)) {
         HEAP32[$$lcssa76>>2] = $122;
        }
        __ZdlPv($122);
        $148 = $$lcssa;$eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
       }
      }
      else if ((label|0) == 42) {
       __THREW__ = 0;
       $129 = (invoke_iiii(97,($this|0),($__v|0),($5|0))|0);
       $130 = __THREW__; __THREW__ = 0;
       $131 = $130&1;
       if ($131) {
        $145 = ___cxa_find_matching_catch_2()|0;
        $146 = tempRet0;
        $$pre45 = HEAP32[$91>>2]|0;
        $148 = $$pre45;$eh$lpad$body$index3Z2D = $146;$eh$lpad$body$indexZ2D = $145;
        break;
       }
       $132 = HEAP32[$92>>2]|0;
       $133 = HEAP32[$91>>2]|0;
       $134 = ($133|0)==($132|0);
       if (!($134)) {
        $136 = $133;
        while(1) {
         $135 = ((($136)) + -12|0);
         $137 = HEAP32[$135>>2]|0;
         $138 = ($137|0)==(0|0);
         if (!($138)) {
          $140 = ((($136)) + -8|0);
          $141 = HEAP32[$140>>2]|0;
          $142 = ($141|0)==($137|0);
          if (!($142)) {
           HEAP32[$140>>2] = $137;
          }
          __ZdlPv($137);
         }
         $139 = ($135|0)==($132|0);
         if ($139) {
          break;
         } else {
          $136 = $135;
         }
        }
        HEAP32[$91>>2] = $132;
       }
       $143 = HEAP32[$__v>>2]|0;
       $144 = ($143|0)==(0|0);
       if (!($144)) {
        __ZdlPv($143);
       }
       $__p$0 = $129;
       STACKTOP = sp;return ($__p$0|0);
      }
     } while(0);
     $147 = HEAP32[$92>>2]|0;
     $149 = ($148|0)==($147|0);
     if (!($149)) {
      $151 = $148;
      while(1) {
       $150 = ((($151)) + -12|0);
       $152 = HEAP32[$150>>2]|0;
       $153 = ($152|0)==(0|0);
       if (!($153)) {
        $155 = ((($151)) + -8|0);
        $156 = HEAP32[$155>>2]|0;
        $157 = ($156|0)==($152|0);
        if (!($157)) {
         HEAP32[$155>>2] = $152;
        }
        __ZdlPv($152);
       }
       $154 = ($150|0)==($147|0);
       if ($154) {
        break;
       } else {
        $151 = $150;
       }
      }
      HEAP32[$91>>2] = $147;
     }
     $158 = HEAP32[$__v>>2]|0;
     $159 = ($158|0)==(0|0);
     if ($159) {
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     __ZdlPv($158);
     ___resumeException($eh$lpad$body$indexZ2D|0);
     // unreachable;
     return (0)|0;
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE12__move_rangeEPS3_S6_S6_($this,$__from_s,$__from_e,$__to) {
     $this = $this|0;
     $__from_s = $__from_s|0;
     $__from_e = $__from_e|0;
     $__to = $__to|0;
     var $$01$i$i$i = 0, $$012$i$i = 0, $$03$i$i = 0, $$lcssa = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$02 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = $1;
     $3 = $__to;
     $4 = (($2) - ($3))|0;
     $5 = (($4|0) / 12)&-1;
     $6 = (($__from_s) + (($5*12)|0)|0);
     $7 = ($6>>>0)<($__from_e>>>0);
     L1: do {
      if ($7) {
       $16 = $1;$__i$02 = $6;
       while(1) {
        HEAP32[$16>>2] = 0;
        $17 = ((($16)) + 4|0);
        HEAP32[$17>>2] = 0;
        $18 = ((($16)) + 8|0);
        HEAP32[$18>>2] = 0;
        $19 = ((($__i$02)) + 4|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = HEAP32[$__i$02>>2]|0;
        $22 = (($20) - ($21))|0;
        $23 = ($20|0)==($21|0);
        if (!($23)) {
         $24 = ($22|0)<(0);
         if ($24) {
          __THREW__ = 0;
          invoke_vi(46,($16|0));
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if ($26) {
           $$lcssa = $16;$$lcssa17 = $17;
           break;
          }
         }
         __THREW__ = 0;
         $27 = (invoke_ii(29,($22|0))|0);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          $$lcssa = $16;$$lcssa17 = $17;
          break;
         }
         HEAP32[$17>>2] = $27;
         HEAP32[$16>>2] = $27;
         $30 = (($27) + ($22)|0);
         $31 = ((($16)) + 8|0);
         HEAP32[$31>>2] = $30;
         $32 = HEAP32[$__i$02>>2]|0;
         $33 = HEAP32[$19>>2]|0;
         $34 = ($32|0)==($33|0);
         if (!($34)) {
          $$01$i$i$i = $32;$36 = $27;
          while(1) {
           $35 = HEAP8[$$01$i$i$i>>0]|0;
           HEAP8[$36>>0] = $35;
           $37 = HEAP32[$17>>2]|0;
           $38 = ((($37)) + 1|0);
           HEAP32[$17>>2] = $38;
           $39 = ((($$01$i$i$i)) + 1|0);
           $40 = ($39|0)==($33|0);
           if ($40) {
            break;
           } else {
            $$01$i$i$i = $39;$36 = $38;
           }
          }
         }
        }
        $47 = ((($__i$02)) + 12|0);
        $48 = HEAP32[$0>>2]|0;
        $49 = ((($48)) + 12|0);
        HEAP32[$0>>2] = $49;
        $50 = ($47>>>0)<($__from_e>>>0);
        if ($50) {
         $16 = $49;$__i$02 = $47;
        } else {
         break L1;
        }
       }
       $41 = ___cxa_find_matching_catch_2()|0;
       $42 = tempRet0;
       $43 = HEAP32[$$lcssa>>2]|0;
       $44 = ($43|0)==(0|0);
       if ($44) {
        ___resumeException($41|0);
        // unreachable;
       }
       $45 = HEAP32[$$lcssa17>>2]|0;
       $46 = ($45|0)==($43|0);
       if (!($46)) {
        HEAP32[$$lcssa17>>2] = $43;
       }
       __ZdlPv($43);
       ___resumeException($41|0);
       // unreachable;
      }
     } while(0);
     $8 = ($1|0)==($__to|0);
     if ($8) {
      return;
     } else {
      $$012$i$i = $6;$$03$i$i = $1;
     }
     while(1) {
      $9 = ((($$03$i$i)) + -12|0);
      $10 = ((($$012$i$i)) + -12|0);
      $11 = ($$03$i$i|0)==($$012$i$i|0);
      if (!($11)) {
       $13 = HEAP32[$10>>2]|0;
       $14 = ((($$012$i$i)) + -8|0);
       $15 = HEAP32[$14>>2]|0;
       __ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($9,$13,$15);
      }
      $12 = ($10|0)==($__from_s|0);
      if ($12) {
       break;
      } else {
       $$012$i$i = $10;$$03$i$i = $9;
      }
     }
     return;
    }
    function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EEPS3_($this,$__v,$__p) {
     $this = $this|0;
     $__v = $__v|0;
     $__p = $__p|0;
     var $$01$i$i$i$i = 0, $$01$i$i$i$i6 = 0, $$02$i = 0, $$02$i3 = 0, $$in = 0, $$lcssa = 0, $$lcssa52 = 0, $$lcssa54 = 0, $$lcssa56 = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
     var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
     var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
     var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
     var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
     var $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($__v)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = ($2|0)==($__p|0);
     L1: do {
      if ($3) {
       $$in = $1;
      } else {
       $$02$i3 = $__p;$5 = $1;
       while(1) {
        $4 = ((($5)) + -12|0);
        $6 = ((($$02$i3)) + -12|0);
        HEAP32[$4>>2] = 0;
        $7 = ((($5)) + -8|0);
        HEAP32[$7>>2] = 0;
        $8 = ((($5)) + -4|0);
        HEAP32[$8>>2] = 0;
        $9 = ((($$02$i3)) + -8|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = HEAP32[$6>>2]|0;
        $12 = (($10) - ($11))|0;
        $13 = ($10|0)==($11|0);
        if (!($13)) {
         $14 = ($12|0)<(0);
         if ($14) {
          __THREW__ = 0;
          invoke_vi(46,($4|0));
          $15 = __THREW__; __THREW__ = 0;
          $16 = $15&1;
          if ($16) {
           $$lcssa54 = $4;$$lcssa56 = $7;
           break;
          }
         }
         __THREW__ = 0;
         $17 = (invoke_ii(29,($12|0))|0);
         $18 = __THREW__; __THREW__ = 0;
         $19 = $18&1;
         if ($19) {
          $$lcssa54 = $4;$$lcssa56 = $7;
          break;
         }
         HEAP32[$7>>2] = $17;
         HEAP32[$4>>2] = $17;
         $20 = (($17) + ($12)|0);
         $21 = ((($5)) + -4|0);
         HEAP32[$21>>2] = $20;
         $22 = HEAP32[$6>>2]|0;
         $23 = HEAP32[$9>>2]|0;
         $24 = ($22|0)==($23|0);
         if (!($24)) {
          $$01$i$i$i$i6 = $22;$26 = $17;
          while(1) {
           $25 = HEAP8[$$01$i$i$i$i6>>0]|0;
           HEAP8[$26>>0] = $25;
           $27 = HEAP32[$7>>2]|0;
           $28 = ((($27)) + 1|0);
           HEAP32[$7>>2] = $28;
           $29 = ((($$01$i$i$i$i6)) + 1|0);
           $30 = ($29|0)==($23|0);
           if ($30) {
            break;
           } else {
            $$01$i$i$i$i6 = $29;$26 = $28;
           }
          }
         }
        }
        $37 = HEAP32[$0>>2]|0;
        $38 = ((($37)) + -12|0);
        HEAP32[$0>>2] = $38;
        $39 = ($6|0)==($2|0);
        if ($39) {
         $$in = $38;
         break L1;
        } else {
         $$02$i3 = $6;$5 = $38;
        }
       }
       $31 = ___cxa_find_matching_catch_2()|0;
       $32 = tempRet0;
       $33 = HEAP32[$$lcssa54>>2]|0;
       $34 = ($33|0)==(0|0);
       if ($34) {
        ___resumeException($31|0);
        // unreachable;
       }
       $35 = HEAP32[$$lcssa56>>2]|0;
       $36 = ($35|0)==($33|0);
       if (!($36)) {
        HEAP32[$$lcssa56>>2] = $33;
       }
       __ZdlPv($33);
       ___resumeException($31|0);
       // unreachable;
      }
     } while(0);
     $40 = ((($this)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($__v)) + 8|0);
     $43 = ($41|0)==($__p|0);
     if ($43) {
      $44 = $$in;
      $$pre$phiZ2D = $0;$81 = $44;
      $80 = HEAP32[$this>>2]|0;
      HEAP32[$this>>2] = $81;
      HEAP32[$$pre$phiZ2D>>2] = $80;
      $82 = HEAP32[$40>>2]|0;
      $83 = HEAP32[$42>>2]|0;
      HEAP32[$40>>2] = $83;
      HEAP32[$42>>2] = $82;
      $84 = ((($this)) + 8|0);
      $85 = ((($__v)) + 12|0);
      $86 = HEAP32[$84>>2]|0;
      $87 = HEAP32[$85>>2]|0;
      HEAP32[$84>>2] = $87;
      HEAP32[$85>>2] = $86;
      $88 = HEAP32[$$pre$phiZ2D>>2]|0;
      HEAP32[$__v>>2] = $88;
      return ($1|0);
     }
     $$pre$i = HEAP32[$42>>2]|0;
     $$02$i = $__p;$45 = $$pre$i;
     while(1) {
      HEAP32[$45>>2] = 0;
      $46 = ((($45)) + 4|0);
      HEAP32[$46>>2] = 0;
      $47 = ((($45)) + 8|0);
      HEAP32[$47>>2] = 0;
      $48 = ((($$02$i)) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = HEAP32[$$02$i>>2]|0;
      $51 = (($49) - ($50))|0;
      $52 = ($49|0)==($50|0);
      if (!($52)) {
       $53 = ($51|0)<(0);
       if ($53) {
        __THREW__ = 0;
        invoke_vi(46,($45|0));
        $54 = __THREW__; __THREW__ = 0;
        $55 = $54&1;
        if ($55) {
         $$lcssa = $45;$$lcssa52 = $46;
         break;
        }
       }
       __THREW__ = 0;
       $56 = (invoke_ii(29,($51|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        $$lcssa = $45;$$lcssa52 = $46;
        break;
       }
       HEAP32[$46>>2] = $56;
       HEAP32[$45>>2] = $56;
       $59 = (($56) + ($51)|0);
       $60 = ((($45)) + 8|0);
       HEAP32[$60>>2] = $59;
       $61 = HEAP32[$$02$i>>2]|0;
       $62 = HEAP32[$48>>2]|0;
       $63 = ($61|0)==($62|0);
       if (!($63)) {
        $$01$i$i$i$i = $61;$65 = $56;
        while(1) {
         $64 = HEAP8[$$01$i$i$i$i>>0]|0;
         HEAP8[$65>>0] = $64;
         $66 = HEAP32[$46>>2]|0;
         $67 = ((($66)) + 1|0);
         HEAP32[$46>>2] = $67;
         $68 = ((($$01$i$i$i$i)) + 1|0);
         $69 = ($68|0)==($62|0);
         if ($69) {
          break;
         } else {
          $$01$i$i$i$i = $68;$65 = $67;
         }
        }
       }
      }
      $76 = ((($$02$i)) + 12|0);
      $77 = HEAP32[$42>>2]|0;
      $78 = ((($77)) + 12|0);
      HEAP32[$42>>2] = $78;
      $79 = ($76|0)==($41|0);
      if ($79) {
       label = 29;
       break;
      } else {
       $$02$i = $76;$45 = $78;
      }
     }
     if ((label|0) == 29) {
      $$pre = HEAP32[$0>>2]|0;
      $$pre$phiZ2D = $0;$81 = $$pre;
      $80 = HEAP32[$this>>2]|0;
      HEAP32[$this>>2] = $81;
      HEAP32[$$pre$phiZ2D>>2] = $80;
      $82 = HEAP32[$40>>2]|0;
      $83 = HEAP32[$42>>2]|0;
      HEAP32[$40>>2] = $83;
      HEAP32[$42>>2] = $82;
      $84 = ((($this)) + 8|0);
      $85 = ((($__v)) + 12|0);
      $86 = HEAP32[$84>>2]|0;
      $87 = HEAP32[$85>>2]|0;
      HEAP32[$84>>2] = $87;
      HEAP32[$85>>2] = $86;
      $88 = HEAP32[$$pre$phiZ2D>>2]|0;
      HEAP32[$__v>>2] = $88;
      return ($1|0);
     }
     $70 = ___cxa_find_matching_catch_2()|0;
     $71 = tempRet0;
     $72 = HEAP32[$$lcssa>>2]|0;
     $73 = ($72|0)==(0|0);
     if ($73) {
      ___resumeException($70|0);
      // unreachable;
     }
     $74 = HEAP32[$$lcssa52>>2]|0;
     $75 = ($74|0)==($72|0);
     if (!($75)) {
      HEAP32[$$lcssa52>>2] = $72;
     }
     __ZdlPv($72);
     ___resumeException($70|0);
     // unreachable;
     return (0)|0;
    }
    function __ZN6Bitmap5rightEi($this,$r) {
     $this = $this|0;
     $r = $r|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
     var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row$03 = 0, $row$03$in = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $0 = sp;
     $1 = ((($this)) + 8|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = ($2|0)==($r|0);
     if ($3) {
      STACKTOP = sp;return;
     }
     __ZN9Rectangle5rightEi($this,$r);
     $4 = ((($this)) + 12|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = ((($this)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = (($5) + 1)|0;
     $9 = (($8) - ($7))|0;
     $10 = ($9|0)>(0);
     if (!($10)) {
      STACKTOP = sp;return;
     }
     $11 = ((($this)) + 16|0);
     $row$03$in = $9;
     while(1) {
      $row$03 = (($row$03$in) + -1)|0;
      $12 = HEAP32[$11>>2]|0;
      $13 = (($12) + (($row$03*12)|0)|0);
      $14 = HEAP32[$1>>2]|0;
      $15 = HEAP32[$this>>2]|0;
      $16 = (($14) + 1)|0;
      $17 = (($16) - ($15))|0;
      HEAP8[$0>>0] = 0;
      $18 = (((($12) + (($row$03*12)|0)|0)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = HEAP32[$13>>2]|0;
      $21 = (($19) - ($20))|0;
      $22 = ($17>>>0)>($21>>>0);
      $23 = $20;
      $24 = $19;
      if ($22) {
       $25 = (($17) - ($21))|0;
       __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($13,$25,$0);
      } else {
       $27 = ($17>>>0)<($21>>>0);
       if ($27) {
        $28 = (($23) + ($17)|0);
        $29 = ($24|0)==($28|0);
        if (!($29)) {
         HEAP32[$18>>2] = $28;
        }
       }
      }
      $26 = ($row$03$in|0)>(1);
      if ($26) {
       $row$03$in = $row$03;
      } else {
       break;
      }
     }
     STACKTOP = sp;return;
    }
    function __ZN6Bitmap6bottomEi($this,$b) {
     $this = $this|0;
     $b = $b|0;
     var $$pre = 0, $$pre$i$i$i = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
     var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
     var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $row$05 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $0 = sp;
     $1 = ((($this)) + 12|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = ($2|0)==($b|0);
     if ($3) {
      STACKTOP = sp;return;
     }
     $4 = ((($this)) + 4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = (($2) + 1)|0;
     $7 = (($6) - ($5))|0;
     __ZN9Rectangle6bottomEi($this,$b);
     $8 = ((($this)) + 16|0);
     $9 = HEAP32[$1>>2]|0;
     $10 = HEAP32[$4>>2]|0;
     $11 = (($9) + 1)|0;
     $12 = (($11) - ($10))|0;
     $13 = ((($this)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$8>>2]|0;
     $16 = (($14) - ($15))|0;
     $17 = (($16|0) / 12)&-1;
     $18 = ($12>>>0)>($17>>>0);
     $19 = $15;
     $20 = $14;
     if ($18) {
      $21 = (($12) - ($17))|0;
      __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEj($8,$21);
     } else {
      $22 = ($12>>>0)<($17>>>0);
      if ($22) {
       $23 = (($19) + (($12*12)|0)|0);
       $24 = ($20|0)==($23|0);
       if (!($24)) {
        $26 = $20;
        while(1) {
         $25 = ((($26)) + -12|0);
         HEAP32[$13>>2] = $25;
         $27 = HEAP32[$25>>2]|0;
         $28 = ($27|0)==(0|0);
         if ($28) {
          $29 = $25;
         } else {
          $37 = ((($26)) + -8|0);
          $38 = HEAP32[$37>>2]|0;
          $39 = ($38|0)==($27|0);
          if (!($39)) {
           HEAP32[$37>>2] = $27;
          }
          __ZdlPv($27);
          $$pre$i$i$i = HEAP32[$13>>2]|0;
          $29 = $$pre$i$i$i;
         }
         $30 = ($29|0)==($23|0);
         if ($30) {
          break;
         } else {
          $26 = $29;
         }
        }
       }
      }
     }
     $31 = HEAP32[$1>>2]|0;
     $32 = HEAP32[$4>>2]|0;
     $33 = (($31) + 1)|0;
     $34 = (($33) - ($32))|0;
     $35 = ($7|0)<($34|0);
     if (!($35)) {
      STACKTOP = sp;return;
     }
     $36 = ((($this)) + 8|0);
     $63 = $32;$64 = $31;$row$05 = $7;
     while(1) {
      $40 = HEAP32[$8>>2]|0;
      $41 = (($40) + (($row$05*12)|0)|0);
      $42 = HEAP32[$36>>2]|0;
      $43 = HEAP32[$this>>2]|0;
      $44 = (($42) + 1)|0;
      $45 = (($44) - ($43))|0;
      HEAP8[$0>>0] = 0;
      $46 = (((($40) + (($row$05*12)|0)|0)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = HEAP32[$41>>2]|0;
      $49 = (($47) - ($48))|0;
      $50 = ($45>>>0)>($49>>>0);
      $51 = $48;
      $52 = $47;
      if ($50) {
       $53 = (($45) - ($49))|0;
       __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($41,$53,$0);
       $$pre = HEAP32[$1>>2]|0;
       $$pre6 = HEAP32[$4>>2]|0;
       $59 = $$pre;$61 = $$pre6;
      } else {
       $54 = ($45>>>0)<($49>>>0);
       if ($54) {
        $55 = (($51) + ($45)|0);
        $56 = ($52|0)==($55|0);
        if ($56) {
         $59 = $64;$61 = $63;
        } else {
         HEAP32[$46>>2] = $55;
         $59 = $64;$61 = $63;
        }
       } else {
        $59 = $64;$61 = $63;
       }
      }
      $57 = (($row$05) + 1)|0;
      $58 = (($59) + 1)|0;
      $60 = (($58) - ($61))|0;
      $62 = ($57|0)<($60|0);
      if ($62) {
       $63 = $61;$64 = $59;$row$05 = $57;
      } else {
       break;
      }
     }
     STACKTOP = sp;return;
    }
    function __ZN6Bitmap10add_bitmapERKS_($this,$bm) {
     $this = $this|0;
     $bm = $bm|0;
     var $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
     var $9 = 0, $col$01 = 0, $row$02 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     __ZN6Bitmap13add_rectangleERK9Rectangle($this,$bm);
     $0 = ((($bm)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($bm)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($1|0)>($3|0);
     if ($4) {
      return;
     }
     $5 = ((($bm)) + 8|0);
     $6 = ((($bm)) + 16|0);
     $7 = ((($this)) + 4|0);
     $8 = ((($this)) + 16|0);
     $$pre = HEAP32[$5>>2]|0;
     $11 = $$pre;$row$02 = $1;
     while(1) {
      $9 = HEAP32[$bm>>2]|0;
      $10 = ($9|0)>($11|0);
      L6: do {
       if ($10) {
        $36 = $11;
       } else {
        $19 = $9;$37 = $11;$col$01 = $9;
        while(1) {
         $15 = HEAP32[$0>>2]|0;
         $16 = (($row$02) - ($15))|0;
         $17 = HEAP32[$6>>2]|0;
         $18 = (($col$01) - ($19))|0;
         $20 = (($17) + (($16*12)|0)|0);
         $21 = HEAP32[$20>>2]|0;
         $22 = (($21) + ($18)|0);
         $23 = HEAP8[$22>>0]|0;
         $24 = ($23<<24>>24)==(0);
         if ($24) {
          $34 = $37;
         } else {
          $25 = HEAP32[$7>>2]|0;
          $26 = (($row$02) - ($25))|0;
          $27 = HEAP32[$8>>2]|0;
          $28 = HEAP32[$this>>2]|0;
          $29 = (($col$01) - ($28))|0;
          $30 = (($27) + (($26*12)|0)|0);
          $31 = HEAP32[$30>>2]|0;
          $32 = (($31) + ($29)|0);
          HEAP8[$32>>0] = 1;
          $$pre8 = HEAP32[$5>>2]|0;
          $34 = $$pre8;
         }
         $33 = ($col$01|0)<($34|0);
         if (!($33)) {
          $36 = $34;
          break L6;
         }
         $35 = (($col$01) + 1)|0;
         $$pre7 = HEAP32[$bm>>2]|0;
         $19 = $$pre7;$37 = $34;$col$01 = $35;
        }
       }
      } while(0);
      $12 = (($row$02) + 1)|0;
      $13 = HEAP32[$2>>2]|0;
      $14 = ($row$02|0)<($13|0);
      if ($14) {
       $11 = $36;$row$02 = $12;
      } else {
       break;
      }
     }
     return;
    }
    function __ZN6Bitmap13add_rectangleERK9Rectangle($this,$re) {
     $this = $this|0;
     $re = $re|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
     var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
     var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row$03$i = 0, $row$03$in$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $0 = sp;
     $1 = HEAP32[$re>>2]|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = ($1|0)<($2|0);
     if ($3) {
      __ZN6Bitmap4leftEi($this,$1);
     }
     $4 = ((($re)) + 4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = ((($this)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($5|0)<($7|0);
     if ($8) {
      __ZN6Bitmap3topEi($this,$5);
     }
     $9 = ((($re)) + 8|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ((($this)) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($10|0)>($12|0);
     if ($13) {
      $14 = ($12|0)==($10|0);
      if (!($14)) {
       __ZN9Rectangle5rightEi($this,$10);
       $15 = ((($this)) + 12|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[$6>>2]|0;
       $18 = (($16) + 1)|0;
       $19 = (($18) - ($17))|0;
       $20 = ($19|0)>(0);
       if ($20) {
        $21 = ((($this)) + 16|0);
        $row$03$in$i = $19;
        while(1) {
         $row$03$i = (($row$03$in$i) + -1)|0;
         $22 = HEAP32[$21>>2]|0;
         $23 = (($22) + (($row$03$i*12)|0)|0);
         $24 = HEAP32[$11>>2]|0;
         $25 = HEAP32[$this>>2]|0;
         $26 = (($24) + 1)|0;
         $27 = (($26) - ($25))|0;
         HEAP8[$0>>0] = 0;
         $28 = (((($22) + (($row$03$i*12)|0)|0)) + 4|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = HEAP32[$23>>2]|0;
         $31 = (($29) - ($30))|0;
         $32 = ($27>>>0)>($31>>>0);
         $33 = $30;
         $34 = $29;
         if ($32) {
          $35 = (($27) - ($31))|0;
          __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($23,$35,$0);
         } else {
          $37 = ($27>>>0)<($31>>>0);
          if ($37) {
           $38 = (($33) + ($27)|0);
           $39 = ($34|0)==($38|0);
           if (!($39)) {
            HEAP32[$28>>2] = $38;
           }
          }
         }
         $36 = ($row$03$in$i|0)>(1);
         if ($36) {
          $row$03$in$i = $row$03$i;
         } else {
          break;
         }
        }
       }
      }
     }
     $40 = ((($re)) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($this)) + 12|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($41|0)>($43|0);
     if (!($44)) {
      STACKTOP = sp;return;
     }
     __ZN6Bitmap6bottomEi($this,$41);
     STACKTOP = sp;return;
    }
    function __ZN6Bitmap9add_pointEii($this,$row,$col) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
     var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
     var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row$03$i = 0, $row$03$in$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $0 = sp;
     $1 = ((($this)) + 8|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = ($2|0)<($col|0);
     if ($3) {
      $4 = ($2|0)==($col|0);
      if (!($4)) {
       __ZN9Rectangle5rightEi($this,$col);
       $5 = ((($this)) + 12|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ((($this)) + 4|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($6) + 1)|0;
       $10 = (($9) - ($8))|0;
       $11 = ($10|0)>(0);
       if ($11) {
        $12 = ((($this)) + 16|0);
        $row$03$in$i = $10;
        while(1) {
         $row$03$i = (($row$03$in$i) + -1)|0;
         $13 = HEAP32[$12>>2]|0;
         $14 = (($13) + (($row$03$i*12)|0)|0);
         $15 = HEAP32[$1>>2]|0;
         $16 = HEAP32[$this>>2]|0;
         $17 = (($15) + 1)|0;
         $18 = (($17) - ($16))|0;
         HEAP8[$0>>0] = 0;
         $19 = (((($13) + (($row$03$i*12)|0)|0)) + 4|0);
         $20 = HEAP32[$19>>2]|0;
         $21 = HEAP32[$14>>2]|0;
         $22 = (($20) - ($21))|0;
         $23 = ($18>>>0)>($22>>>0);
         $24 = $21;
         $25 = $20;
         if ($23) {
          $26 = (($18) - ($22))|0;
          __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($14,$26,$0);
         } else {
          $28 = ($18>>>0)<($22>>>0);
          if ($28) {
           $29 = (($24) + ($18)|0);
           $30 = ($25|0)==($29|0);
           if (!($30)) {
            HEAP32[$19>>2] = $29;
           }
          }
         }
         $27 = ($row$03$in$i|0)>(1);
         if ($27) {
          $row$03$in$i = $row$03$i;
         } else {
          break;
         }
        }
       }
      }
     } else {
      $31 = HEAP32[$this>>2]|0;
      $32 = ($31|0)>($col|0);
      if ($32) {
       __ZN6Bitmap4leftEi($this,$col);
      }
     }
     $33 = ((($this)) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)<($row|0);
     if ($35) {
      __ZN6Bitmap6bottomEi($this,$row);
      $$pre = ((($this)) + 4|0);
      $$pre$phiZ2D = $$pre;
     } else {
      $36 = ((($this)) + 4|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)>($row|0);
      if ($38) {
       __ZN6Bitmap3topEi($this,$row);
       $$pre$phiZ2D = $36;
      } else {
       $$pre$phiZ2D = $36;
      }
     }
     $39 = HEAP32[$$pre$phiZ2D>>2]|0;
     $40 = (($row) - ($39))|0;
     $41 = ((($this)) + 16|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = HEAP32[$this>>2]|0;
     $44 = (($col) - ($43))|0;
     $45 = (($42) + (($40*12)|0)|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + ($44)|0);
     HEAP8[$47>>0] = 1;
     STACKTOP = sp;return;
    }
    function __ZN6Bitmap13adjust_heightEv($this) {
     $this = $this|0;
     var $$01 = 0, $$pre = 0, $$pre30 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$013 = 0, $col1$08 = 0, $row1$017 = 0, $row1$017$us = 0, $row1$06 = 0, $row2$09 = 0, $row2$09$lcssa = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($1|0)>($3|0);
     L1: do {
      if ($4) {
       $row1$06 = $1;
      } else {
       $5 = HEAP32[$this>>2]|0;
       $6 = ((($this)) + 8|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = ($5|0)>($7|0);
       if ($8) {
        $row1$017$us = $1;
        while(1) {
         $10 = (($row1$017$us) + 1)|0;
         $11 = ($row1$017$us|0)<($3|0);
         if ($11) {
          $row1$017$us = $10;
         } else {
          $row1$06 = $10;
          break L1;
         }
        }
       }
       $9 = ((($this)) + 16|0);
       $$pre = HEAP32[$9>>2]|0;
       $row1$017 = $1;
       while(1) {
        $12 = (($row1$017) - ($1))|0;
        $13 = (($$pre) + (($12*12)|0)|0);
        $14 = HEAP32[$13>>2]|0;
        $col$013 = $5;
        while(1) {
         $17 = (($col$013) - ($5))|0;
         $18 = (($14) + ($17)|0);
         $19 = HEAP8[$18>>0]|0;
         $20 = ($19<<24>>24)==(0);
         if (!($20)) {
          $row1$06 = $row1$017;
          break L1;
         }
         $15 = (($col$013) + 1)|0;
         $16 = ($col$013|0)<($7|0);
         if ($16) {
          $col$013 = $15;
         } else {
          break;
         }
        }
        $21 = (($row1$017) + 1)|0;
        $22 = ($row1$017|0)<($3|0);
        if ($22) {
         $row1$017 = $21;
        } else {
         $row1$06 = $21;
         break;
        }
       }
      }
     } while(0);
     $23 = ($3|0)<($row1$06|0);
     if ($23) {
      $$01 = 0;
      return ($$01|0);
     }
     $24 = HEAP32[$this>>2]|0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)>($26|0);
     if ($27) {
      $$01 = 0;
      return ($$01|0);
     }
     $28 = ((($this)) + 16|0);
     $$pre30 = HEAP32[$28>>2]|0;
     $row2$09 = $3;
     L20: while(1) {
      $29 = (($row2$09) - ($1))|0;
      $30 = (($$pre30) + (($29*12)|0)|0);
      $31 = HEAP32[$30>>2]|0;
      $col1$08 = $24;
      while(1) {
       $34 = (($col1$08) - ($24))|0;
       $35 = (($31) + ($34)|0);
       $36 = HEAP8[$35>>0]|0;
       $37 = ($36<<24>>24)==(0);
       if (!($37)) {
        $row2$09$lcssa = $row2$09;
        break L20;
       }
       $32 = (($col1$08) + 1)|0;
       $33 = ($col1$08|0)<($26|0);
       if ($33) {
        $col1$08 = $32;
       } else {
        break;
       }
      }
      $38 = (($row2$09) + -1)|0;
      $39 = ($row2$09|0)>($row1$06|0);
      if ($39) {
       $row2$09 = $38;
      } else {
       $$01 = 0;
       label = 20;
       break;
      }
     }
     if ((label|0) == 20) {
      return ($$01|0);
     }
     $40 = ($row1$06|0)>($1|0);
     if ($40) {
      __ZN6Bitmap3topEi($this,$row1$06);
      $$pre31 = HEAP32[$2>>2]|0;
      $42 = $$pre31;
     } else {
      $42 = $3;
     }
     $41 = ($row2$09$lcssa|0)<($42|0);
     if (!($41)) {
      $$01 = 1;
      return ($$01|0);
     }
     __ZN6Bitmap6bottomEi($this,$row2$09$lcssa);
     $$01 = 1;
     return ($$01|0);
    }
    function __ZN6Bitmap12adjust_widthEv($this) {
     $this = $this|0;
     var $$01 = 0, $$pre = 0, $$pre35 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
     var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
     var $col1$020 = 0, $col1$020$us = 0, $col1$09 = 0, $col2$012 = 0, $col2$07 = 0, $row$016 = 0, $row$03$i = 0, $row$03$in$i = 0, $row1$011 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $0 = sp;
     $1 = HEAP32[$this>>2]|0;
     $2 = ((($this)) + 8|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($1|0)>($3|0);
     L1: do {
      if ($4) {
       $col1$09 = $1;
      } else {
       $5 = ((($this)) + 4|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ((($this)) + 12|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = ($6|0)>($8|0);
       if ($9) {
        $col1$020$us = $1;
        while(1) {
         $11 = (($col1$020$us) + 1)|0;
         $12 = ($col1$020$us|0)<($3|0);
         if ($12) {
          $col1$020$us = $11;
         } else {
          $col1$09 = $11;
          break L1;
         }
        }
       }
       $10 = ((($this)) + 16|0);
       $$pre = HEAP32[$10>>2]|0;
       $col1$020 = $1;
       while(1) {
        $13 = (($col1$020) - ($1))|0;
        $row$016 = $6;
        while(1) {
         $16 = (($row$016) - ($6))|0;
         $17 = (($$pre) + (($16*12)|0)|0);
         $18 = HEAP32[$17>>2]|0;
         $19 = (($18) + ($13)|0);
         $20 = HEAP8[$19>>0]|0;
         $21 = ($20<<24>>24)==(0);
         if (!($21)) {
          $col1$09 = $col1$020;
          break L1;
         }
         $14 = (($row$016) + 1)|0;
         $15 = ($row$016|0)<($8|0);
         if ($15) {
          $row$016 = $14;
         } else {
          break;
         }
        }
        $22 = (($col1$020) + 1)|0;
        $23 = ($col1$020|0)<($3|0);
        if ($23) {
         $col1$020 = $22;
        } else {
         $col1$09 = $22;
         break;
        }
       }
      }
     } while(0);
     $24 = ($3|0)<($col1$09|0);
     L14: do {
      if ($24) {
       $col2$07 = $3;
      } else {
       $25 = ((($this)) + 4|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ((($this)) + 12|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($26|0)>($28|0);
       if ($29) {
        $31 = ($3|0)>($col1$09|0);
        $32 = $31 ? $col1$09 : $3;
        $33 = (($32) + -1)|0;
        $col2$07 = $33;
        break;
       }
       $30 = ((($this)) + 16|0);
       $$pre35 = HEAP32[$30>>2]|0;
       $col2$012 = $3;
       while(1) {
        $34 = (($col2$012) - ($1))|0;
        $row1$011 = $26;
        while(1) {
         $37 = (($row1$011) - ($26))|0;
         $38 = (($$pre35) + (($37*12)|0)|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = (($39) + ($34)|0);
         $41 = HEAP8[$40>>0]|0;
         $42 = ($41<<24>>24)==(0);
         if (!($42)) {
          $col2$07 = $col2$012;
          break L14;
         }
         $35 = (($row1$011) + 1)|0;
         $36 = ($row1$011|0)<($28|0);
         if ($36) {
          $row1$011 = $35;
         } else {
          break;
         }
        }
        $43 = (($col2$012) + -1)|0;
        $44 = ($col2$012|0)>($col1$09|0);
        if ($44) {
         $col2$012 = $43;
        } else {
         $col2$07 = $43;
         break;
        }
       }
      }
     } while(0);
     $45 = ($col1$09|0)<($col2$07|0);
     if (!($45)) {
      $$01 = 0;
      STACKTOP = sp;return ($$01|0);
     }
     $46 = ($col1$09|0)>($1|0);
     if ($46) {
      __ZN6Bitmap4leftEi($this,$col1$09);
      $$pre36 = HEAP32[$2>>2]|0;
      $48 = $$pre36;
     } else {
      $48 = $3;
     }
     $47 = ($col2$07|0)<($48|0);
     if (!($47)) {
      $$01 = 1;
      STACKTOP = sp;return ($$01|0);
     }
     $49 = ($48|0)==($col2$07|0);
     if (!($49)) {
      __ZN9Rectangle5rightEi($this,$col2$07);
      $50 = ((($this)) + 12|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ((($this)) + 4|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($51) + 1)|0;
      $55 = (($54) - ($53))|0;
      $56 = ($55|0)>(0);
      if ($56) {
       $57 = ((($this)) + 16|0);
       $row$03$in$i = $55;
       while(1) {
        $row$03$i = (($row$03$in$i) + -1)|0;
        $58 = HEAP32[$57>>2]|0;
        $59 = (($58) + (($row$03$i*12)|0)|0);
        $60 = HEAP32[$2>>2]|0;
        $61 = HEAP32[$this>>2]|0;
        $62 = (($60) + 1)|0;
        $63 = (($62) - ($61))|0;
        HEAP8[$0>>0] = 0;
        $64 = (((($58) + (($row$03$i*12)|0)|0)) + 4|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = HEAP32[$59>>2]|0;
        $67 = (($65) - ($66))|0;
        $68 = ($63>>>0)>($67>>>0);
        $69 = $66;
        $70 = $65;
        if ($68) {
         $71 = (($63) - ($67))|0;
         __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($59,$71,$0);
        } else {
         $73 = ($63>>>0)<($67>>>0);
         if ($73) {
          $74 = (($69) + ($63)|0);
          $75 = ($70|0)==($74|0);
          if (!($75)) {
           HEAP32[$64>>2] = $74;
          }
         }
        }
        $72 = ($row$03$in$i|0)>(1);
        if ($72) {
         $row$03$in$i = $row$03$i;
        } else {
         break;
        }
       }
      }
     }
     $$01 = 1;
     STACKTOP = sp;return ($$01|0);
    }
    function __ZNK6Bitmap4areaEv($this) {
     $this = $this|0;
     var $$a$1 = 0, $$a$1$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
     var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$0$lcssa = 0, $a$03 = 0, $a$11 = 0, $col$02 = 0, $row$04 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($1|0)>($3|0);
     if ($4) {
      $a$0$lcssa = 0;
      return ($a$0$lcssa|0);
     }
     $5 = HEAP32[$this>>2]|0;
     $6 = ((($this)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($5|0)>($7|0);
     if ($8) {
      $a$0$lcssa = 0;
      return ($a$0$lcssa|0);
     }
     $9 = ((($this)) + 16|0);
     $$pre = HEAP32[$9>>2]|0;
     $a$03 = 0;$row$04 = $1;
     while(1) {
      $10 = (($row$04) - ($1))|0;
      $11 = (($$pre) + (($10*12)|0)|0);
      $12 = HEAP32[$11>>2]|0;
      $a$11 = $a$03;$col$02 = $5;
      while(1) {
       $15 = (($col$02) - ($5))|0;
       $16 = (($12) + ($15)|0);
       $17 = HEAP8[$16>>0]|0;
       $18 = ($17<<24>>24)!=(0);
       $19 = $18&1;
       $$a$1 = (($19) + ($a$11))|0;
       $20 = (($col$02) + 1)|0;
       $21 = ($col$02|0)<($7|0);
       if ($21) {
        $a$11 = $$a$1;$col$02 = $20;
       } else {
        $$a$1$lcssa = $$a$1;
        break;
       }
      }
      $13 = (($row$04) + 1)|0;
      $14 = ($row$04|0)<($3|0);
      if ($14) {
       $a$03 = $$a$1$lcssa;$row$04 = $13;
      } else {
       $a$0$lcssa = $$a$1$lcssa;
       break;
      }
     }
     return ($a$0$lcssa|0);
    }
    function __ZNK6Bitmap12area_octagonEv($this) {
     $this = $this|0;
     var $$a$1 = 0, $$a$4 = 0, $$a$4$lcssa = 0, $$a$7 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
     var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $a$0$lcssa = 0, $a$030 = 0, $a$1$lcssa = 0, $a$124 = 0, $a$3$lcssa = 0, $a$319 = 0, $a$412 = 0;
     var $a$6$lcssa = 0, $a$67 = 0, $a$7$lcssa = 0, $a$74 = 0, $col$023 = 0, $col2$011 = 0, $col5$05 = 0, $i$029 = 0, $i3$0$neg = 0, $i3$08 = 0, $i3$08$in = 0, $or$cond = 0, $row1$017 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) + 1)|0;
     $5 = (($4) - ($3))|0;
     $6 = ((($this)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = HEAP32[$this>>2]|0;
     $9 = (($7) + 1)|0;
     $10 = (($9) - ($8))|0;
     $11 = ($10|0)<($5|0);
     $12 = $11 ? $10 : $5;
     $13 = ($12*29)|0;
     $14 = (($13|0) / 100)&-1;
     $15 = (($14) + ($8))|0;
     $16 = (($7) - ($14))|0;
     $17 = ($13|0)>(99);
     if ($17) {
      $18 = ((($this)) + 16|0);
      $a$030 = 0;$i$029 = 0;
      while(1) {
       $24 = (($15) - ($i$029))|0;
       $25 = (($i$029) + ($16))|0;
       $26 = ($24|0)>($25|0);
       if ($26) {
        $a$1$lcssa = $a$030;
       } else {
        $27 = HEAP32[$18>>2]|0;
        $28 = (($27) + (($i$029*12)|0)|0);
        $29 = HEAP32[$28>>2]|0;
        $a$124 = $a$030;$col$023 = $24;
        while(1) {
         $32 = (($col$023) - ($8))|0;
         $33 = (($29) + ($32)|0);
         $34 = HEAP8[$33>>0]|0;
         $35 = ($34<<24>>24)!=(0);
         $36 = $35&1;
         $$a$1 = (($36) + ($a$124))|0;
         $37 = (($col$023) + 1)|0;
         $38 = ($col$023|0)<($25|0);
         if ($38) {
          $a$124 = $$a$1;$col$023 = $37;
         } else {
          $a$1$lcssa = $$a$1;
          break;
         }
        }
       }
       $30 = (($i$029) + 1)|0;
       $31 = ($30|0)<($14|0);
       if ($31) {
        $a$030 = $a$1$lcssa;$i$029 = $30;
       } else {
        $a$0$lcssa = $a$1$lcssa;
        break;
       }
      }
     } else {
      $a$0$lcssa = 0;
     }
     $19 = (($3) + ($14))|0;
     $20 = (($1) - ($14))|0;
     $21 = ($19|0)>($20|0);
     $22 = ($8|0)>($7|0);
     $or$cond = $21 | $22;
     if ($or$cond) {
      $a$3$lcssa = $a$0$lcssa;
     } else {
      $23 = ((($this)) + 16|0);
      $$pre = HEAP32[$23>>2]|0;
      $a$319 = $a$0$lcssa;$row1$017 = $19;
      while(1) {
       $40 = (($row1$017) - ($3))|0;
       $41 = (($$pre) + (($40*12)|0)|0);
       $42 = HEAP32[$41>>2]|0;
       $a$412 = $a$319;$col2$011 = $8;
       while(1) {
        $45 = (($col2$011) - ($8))|0;
        $46 = (($42) + ($45)|0);
        $47 = HEAP8[$46>>0]|0;
        $48 = ($47<<24>>24)!=(0);
        $49 = $48&1;
        $$a$4 = (($49) + ($a$412))|0;
        $50 = (($col2$011) + 1)|0;
        $51 = ($col2$011|0)<($7|0);
        if ($51) {
         $a$412 = $$a$4;$col2$011 = $50;
        } else {
         $$a$4$lcssa = $$a$4;
         break;
        }
       }
       $43 = (($row1$017) + 1)|0;
       $44 = ($row1$017|0)<($20|0);
       if ($44) {
        $a$319 = $$a$4$lcssa;$row1$017 = $43;
       } else {
        $a$3$lcssa = $$a$4$lcssa;
        break;
       }
      }
     }
     if (!($17)) {
      $a$6$lcssa = $a$3$lcssa;
      return ($a$6$lcssa|0);
     }
     $39 = ((($this)) + 16|0);
     $a$67 = $a$3$lcssa;$i3$08$in = $14;
     while(1) {
      $i3$08 = (($i3$08$in) + -1)|0;
      $53 = (($15) - ($i3$08))|0;
      $54 = (($i3$08) + ($16))|0;
      $55 = ($53|0)>($54|0);
      if ($55) {
       $a$7$lcssa = $a$67;
      } else {
       $i3$0$neg = (1 - ($i3$08$in))|0;
       $56 = (($1) + ($i3$0$neg))|0;
       $57 = (($56) - ($3))|0;
       $58 = HEAP32[$39>>2]|0;
       $59 = (($58) + (($57*12)|0)|0);
       $60 = HEAP32[$59>>2]|0;
       $a$74 = $a$67;$col5$05 = $53;
       while(1) {
        $61 = (($col5$05) - ($8))|0;
        $62 = (($60) + ($61)|0);
        $63 = HEAP8[$62>>0]|0;
        $64 = ($63<<24>>24)!=(0);
        $65 = $64&1;
        $$a$7 = (($65) + ($a$74))|0;
        $66 = (($col5$05) + 1)|0;
        $67 = ($col5$05|0)<($54|0);
        if ($67) {
         $a$74 = $$a$7;$col5$05 = $66;
        } else {
         $a$7$lcssa = $$a$7;
         break;
        }
       }
      }
      $52 = ($i3$08$in|0)>(1);
      if ($52) {
       $a$67 = $a$7$lcssa;$i3$08$in = $i3$08;
      } else {
       $a$6$lcssa = $a$7$lcssa;
       break;
      }
     }
     return ($a$6$lcssa|0);
    }
    function __ZNK6Bitmap12size_octagonEv($this) {
     $this = $this|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
     var label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) + 1)|0;
     $5 = (($4) - ($3))|0;
     $6 = ((($this)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = HEAP32[$this>>2]|0;
     $9 = (($7) + 1)|0;
     $10 = (($9) - ($8))|0;
     $11 = ($10|0)<($5|0);
     $12 = $11 ? $10 : $5;
     $13 = ($12*29)|0;
     $14 = (($13|0) / 100)&-1;
     $15 = Math_imul($10, $5)|0;
     $16 = $14 << 1;
     $17 = (($14) + 1)|0;
     $18 = Math_imul($16, $17)|0;
     $19 = (($15) - ($18))|0;
     return ($19|0);
    }
    function __ZNK6Bitmap9seek_leftEiib($this,$row,$col,$black) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     $black = $black|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$0$lcssa = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = ((($this)) + 4|0);
     $2 = ((($this)) + 16|0);
     $c$0 = $col;
     while(1) {
      $3 = ($c$0|0)>($0|0);
      if (!($3)) {
       $c$0$lcssa = $c$0;
       label = 4;
       break;
      }
      $4 = (($c$0) + -1)|0;
      $5 = HEAP32[$1>>2]|0;
      $6 = (($row) - ($5))|0;
      $7 = HEAP32[$2>>2]|0;
      $8 = (($4) - ($0))|0;
      $9 = (($7) + (($6*12)|0)|0);
      $10 = HEAP32[$9>>2]|0;
      $11 = (($10) + ($8)|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)!=(0);
      $14 = $13 ^ $black;
      if ($14) {
       $c$0 = $4;
      } else {
       $c$0$lcssa = $c$0;
       label = 4;
       break;
      }
     }
     if ((label|0) == 4) {
      return ($c$0$lcssa|0);
     }
     return (0)|0;
    }
    function __ZNK6Bitmap8seek_topEiib($this,$row,$col,$black) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     $black = $black|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r$0 = 0, $r$0$lcssa = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 16|0);
     $r$0 = $row;
     while(1) {
      $3 = ($r$0|0)>($1|0);
      if (!($3)) {
       $r$0$lcssa = $r$0;
       label = 4;
       break;
      }
      $4 = (($r$0) + -1)|0;
      $5 = (($4) - ($1))|0;
      $6 = HEAP32[$2>>2]|0;
      $7 = HEAP32[$this>>2]|0;
      $8 = (($col) - ($7))|0;
      $9 = (($6) + (($5*12)|0)|0);
      $10 = HEAP32[$9>>2]|0;
      $11 = (($10) + ($8)|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)!=(0);
      $14 = $13 ^ $black;
      if ($14) {
       $r$0 = $4;
      } else {
       $r$0$lcssa = $r$0;
       label = 4;
       break;
      }
     }
     if ((label|0) == 4) {
      return ($r$0$lcssa|0);
     }
     return (0)|0;
    }
    function __ZNK6Bitmap10seek_rightEiib($this,$row,$col,$black) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     $black = $black|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$0$lcssa = 0, label = 0;
     var sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = ((($this)) + 16|0);
     $c$0 = $col;
     while(1) {
      $4 = ($c$0|0)<($1|0);
      if (!($4)) {
       $c$0$lcssa = $c$0;
       label = 4;
       break;
      }
      $5 = (($c$0) + 1)|0;
      $6 = HEAP32[$2>>2]|0;
      $7 = (($row) - ($6))|0;
      $8 = HEAP32[$3>>2]|0;
      $9 = HEAP32[$this>>2]|0;
      $10 = (($5) - ($9))|0;
      $11 = (($8) + (($7*12)|0)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($12) + ($10)|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)!=(0);
      $16 = $15 ^ $black;
      if ($16) {
       $c$0 = $5;
      } else {
       $c$0$lcssa = $c$0;
       label = 4;
       break;
      }
     }
     if ((label|0) == 4) {
      return ($c$0$lcssa|0);
     }
     return (0)|0;
    }
    function __ZNK6Bitmap11seek_bottomEiib($this,$row,$col,$black) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     $black = $black|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r$0 = 0, $r$0$lcssa = 0, label = 0;
     var sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = ((($this)) + 16|0);
     $r$0 = $row;
     while(1) {
      $4 = ($r$0|0)<($1|0);
      if (!($4)) {
       $r$0$lcssa = $r$0;
       label = 4;
       break;
      }
      $5 = (($r$0) + 1)|0;
      $6 = HEAP32[$2>>2]|0;
      $7 = (($5) - ($6))|0;
      $8 = HEAP32[$3>>2]|0;
      $9 = HEAP32[$this>>2]|0;
      $10 = (($col) - ($9))|0;
      $11 = (($8) + (($7*12)|0)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($12) + ($10)|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)!=(0);
      $16 = $15 ^ $black;
      if ($16) {
       $r$0 = $5;
      } else {
       $r$0$lcssa = $r$0;
       label = 4;
       break;
      }
     }
     if ((label|0) == 4) {
      return ($r$0$lcssa|0);
     }
     return (0)|0;
    }
    function __ZNK6Bitmap11escape_leftEii($this,$row,$col) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     var $$015 = 0, $$03 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
     var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
     var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $d$0 = 0, $d$0$lcssa = 0, $d$1$ = 0, $d$117 = 0;
     var $d$2$ph = 0, $d$3$lcssa = 0, $d$311 = 0, $not$ = 0, $not$4 = 0, $u$0 = 0, $u$0$lcssa = 0, $u$1$ = 0, $u$116 = 0, $u$2 = 0, $u$3$lcssa = 0, $u$38 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = (($row) - ($1))|0;
     $3 = ((($this)) + 16|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP32[$this>>2]|0;
     $6 = (($col) - ($5))|0;
     $7 = (($4) + (($2*12)|0)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) + ($6)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      $$03 = 0;
      return ($$03|0);
     }
     $12 = (($1) + 1)|0;
     $u$0 = $row;
     while(1) {
      $13 = ($u$0|0)>($12|0);
      if (!($13)) {
       $u$0$lcssa = $u$0;
       break;
      }
      $14 = (($u$0) + -1)|0;
      $15 = (($14) - ($1))|0;
      $16 = (($4) + (($15*12)|0)|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (($17) + ($6)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)==(0);
      if ($20) {
       $u$0 = $14;
      } else {
       $u$0$lcssa = $u$0;
       break;
      }
     }
     $21 = ((($this)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + -1)|0;
     $d$0 = $row;
     while(1) {
      $24 = ($d$0|0)<($23|0);
      if (!($24)) {
       $d$0$lcssa = $d$0;
       break;
      }
      $25 = (($d$0) + 1)|0;
      $26 = (($25) - ($1))|0;
      $27 = (($4) + (($26*12)|0)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = (($28) + ($6)|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = ($30<<24>>24)==(0);
      if ($31) {
       $d$0 = $25;
      } else {
       $d$0$lcssa = $d$0;
       break;
      }
     }
     $32 = ($u$0$lcssa|0)>($d$0$lcssa|0);
     L12: do {
      if ($32) {
       $$1 = $col;
      } else {
       $$015 = $col;$d$117 = $d$0$lcssa;$u$116 = $u$0$lcssa;
       while(1) {
        $34 = (($$015) + -1)|0;
        $35 = ($$015|0)>($5|0);
        if (!($35)) {
         $$1 = $34;
         break L12;
        }
        $36 = ($u$116|0)>($12|0);
        if ($36) {
         $37 = (($u$116) - ($1))|0;
         $38 = (($34) - ($5))|0;
         $39 = (($4) + (($37*12)|0)|0);
         $40 = HEAP32[$39>>2]|0;
         $41 = (($40) + ($38)|0);
         $42 = HEAP8[$41>>0]|0;
         $not$4 = ($42<<24>>24)==(0);
         $43 = $not$4 << 31 >> 31;
         $u$1$ = (($43) + ($u$116))|0;
         $u$2 = $u$1$;
        } else {
         $u$2 = $u$116;
        }
        $44 = ($d$117|0)<($23|0);
        if ($44) {
         $45 = (($d$117) - ($1))|0;
         $46 = (($34) - ($5))|0;
         $47 = (($4) + (($45*12)|0)|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = (($48) + ($46)|0);
         $50 = HEAP8[$49>>0]|0;
         $not$ = ($50<<24>>24)==(0);
         $51 = $not$&1;
         $d$1$ = (($51) + ($d$117))|0;
         $d$2$ph = $d$1$;
        } else {
         $d$2$ph = $d$117;
        }
        $52 = ($u$2|0)>($d$2$ph|0);
        L22: do {
         if ($52) {
          $u$3$lcssa = $u$2;
         } else {
          $53 = (($34) - ($5))|0;
          $u$38 = $u$2;
          while(1) {
           $54 = (($u$38) - ($1))|0;
           $55 = (($4) + (($54*12)|0)|0);
           $56 = HEAP32[$55>>2]|0;
           $57 = (($56) + ($53)|0);
           $58 = HEAP8[$57>>0]|0;
           $59 = ($58<<24>>24)==(0);
           if ($59) {
            $u$3$lcssa = $u$38;
            break L22;
           }
           $62 = (($u$38) + 1)|0;
           $63 = ($u$38|0)<($d$2$ph|0);
           if ($63) {
            $u$38 = $62;
           } else {
            $u$3$lcssa = $62;
            break;
           }
          }
         }
        } while(0);
        $60 = ($u$3$lcssa|0)>($d$2$ph|0);
        L28: do {
         if ($60) {
          $d$3$lcssa = $d$2$ph;
         } else {
          $61 = (($34) - ($5))|0;
          $d$311 = $d$2$ph;
          while(1) {
           $64 = (($d$311) - ($1))|0;
           $65 = (($4) + (($64*12)|0)|0);
           $66 = HEAP32[$65>>2]|0;
           $67 = (($66) + ($61)|0);
           $68 = HEAP8[$67>>0]|0;
           $69 = ($68<<24>>24)==(0);
           if ($69) {
            $d$3$lcssa = $d$311;
            break L28;
           }
           $70 = (($d$311) + -1)|0;
           $71 = ($u$3$lcssa|0)<($d$311|0);
           if ($71) {
            $d$311 = $70;
           } else {
            $d$3$lcssa = $70;
            break;
           }
          }
         }
        } while(0);
        $33 = ($u$3$lcssa|0)>($d$3$lcssa|0);
        if ($33) {
         $$1 = $34;
         break;
        } else {
         $$015 = $34;$d$117 = $d$3$lcssa;$u$116 = $u$3$lcssa;
        }
       }
      }
     } while(0);
     $72 = ($$1|0)<($5|0);
     $$03 = $72;
     return ($$03|0);
    }
    function __ZNK6Bitmap10escape_topEii($this,$row,$col) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     var $$0 = 0, $$0315 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
     var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
     var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $l$0$lcssa = 0, $l$1$ = 0, $l$116 = 0, $l$2 = 0, $l$3$lcssa = 0, $l$38 = 0, $not$ = 0;
     var $not$4 = 0, $r$0 = 0, $r$0$lcssa = 0, $r$1$ = 0, $r$117 = 0, $r$2$ph = 0, $r$3$lcssa = 0, $r$311 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = (($row) - ($1))|0;
     $3 = ((($this)) + 16|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP32[$this>>2]|0;
     $6 = (($col) - ($5))|0;
     $7 = (($4) + (($2*12)|0)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) + ($6)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      $$0 = 0;
      return ($$0|0);
     }
     $12 = (($5) + 1)|0;
     $l$0 = $col;
     while(1) {
      $13 = ($l$0|0)>($12|0);
      if (!($13)) {
       $l$0$lcssa = $l$0;
       break;
      }
      $14 = (($l$0) + -1)|0;
      $15 = (($14) - ($5))|0;
      $16 = (($8) + ($15)|0);
      $17 = HEAP8[$16>>0]|0;
      $18 = ($17<<24>>24)==(0);
      if ($18) {
       $l$0 = $14;
      } else {
       $l$0$lcssa = $l$0;
       break;
      }
     }
     $19 = ((($this)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + -1)|0;
     $r$0 = $col;
     while(1) {
      $22 = ($r$0|0)<($21|0);
      if (!($22)) {
       $r$0$lcssa = $r$0;
       break;
      }
      $23 = (($r$0) + 1)|0;
      $24 = (($23) - ($5))|0;
      $25 = (($8) + ($24)|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = ($26<<24>>24)==(0);
      if ($27) {
       $r$0 = $23;
      } else {
       $r$0$lcssa = $r$0;
       break;
      }
     }
     $28 = ($l$0$lcssa|0)>($r$0$lcssa|0);
     L12: do {
      if ($28) {
       $$1 = $row;
      } else {
       $$0315 = $row;$l$116 = $l$0$lcssa;$r$117 = $r$0$lcssa;
       while(1) {
        $30 = (($$0315) + -1)|0;
        $31 = ($$0315|0)>($1|0);
        if (!($31)) {
         $$1 = $30;
         break L12;
        }
        $32 = ($l$116|0)>($12|0);
        if ($32) {
         $33 = (($30) - ($1))|0;
         $34 = (($l$116) - ($5))|0;
         $35 = (($4) + (($33*12)|0)|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = (($36) + ($34)|0);
         $38 = HEAP8[$37>>0]|0;
         $not$4 = ($38<<24>>24)==(0);
         $39 = $not$4 << 31 >> 31;
         $l$1$ = (($39) + ($l$116))|0;
         $l$2 = $l$1$;
        } else {
         $l$2 = $l$116;
        }
        $40 = ($r$117|0)<($21|0);
        if ($40) {
         $41 = (($30) - ($1))|0;
         $42 = (($r$117) - ($5))|0;
         $43 = (($4) + (($41*12)|0)|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = (($44) + ($42)|0);
         $46 = HEAP8[$45>>0]|0;
         $not$ = ($46<<24>>24)==(0);
         $47 = $not$&1;
         $r$1$ = (($47) + ($r$117))|0;
         $r$2$ph = $r$1$;
        } else {
         $r$2$ph = $r$117;
        }
        $48 = ($l$2|0)>($r$2$ph|0);
        L22: do {
         if ($48) {
          $l$3$lcssa = $l$2;
         } else {
          $49 = (($30) - ($1))|0;
          $50 = (($4) + (($49*12)|0)|0);
          $51 = HEAP32[$50>>2]|0;
          $l$38 = $l$2;
          while(1) {
           $52 = (($l$38) - ($5))|0;
           $53 = (($51) + ($52)|0);
           $54 = HEAP8[$53>>0]|0;
           $55 = ($54<<24>>24)==(0);
           if ($55) {
            $l$3$lcssa = $l$38;
            break L22;
           }
           $60 = (($l$38) + 1)|0;
           $61 = ($l$38|0)<($r$2$ph|0);
           if ($61) {
            $l$38 = $60;
           } else {
            $l$3$lcssa = $60;
            break;
           }
          }
         }
        } while(0);
        $56 = ($l$3$lcssa|0)>($r$2$ph|0);
        L28: do {
         if ($56) {
          $r$3$lcssa = $r$2$ph;
         } else {
          $57 = (($30) - ($1))|0;
          $58 = (($4) + (($57*12)|0)|0);
          $59 = HEAP32[$58>>2]|0;
          $r$311 = $r$2$ph;
          while(1) {
           $62 = (($r$311) - ($5))|0;
           $63 = (($59) + ($62)|0);
           $64 = HEAP8[$63>>0]|0;
           $65 = ($64<<24>>24)==(0);
           if ($65) {
            $r$3$lcssa = $r$311;
            break L28;
           }
           $66 = (($r$311) + -1)|0;
           $67 = ($l$3$lcssa|0)<($r$311|0);
           if ($67) {
            $r$311 = $66;
           } else {
            $r$3$lcssa = $66;
            break;
           }
          }
         }
        } while(0);
        $29 = ($l$3$lcssa|0)>($r$3$lcssa|0);
        if ($29) {
         $$1 = $30;
         break;
        } else {
         $$0315 = $30;$l$116 = $l$3$lcssa;$r$117 = $r$3$lcssa;
        }
       }
      }
     } while(0);
     $68 = ($$1|0)<($1|0);
     $$0 = $68;
     return ($$0|0);
    }
    function __ZNK6Bitmap12escape_rightEii($this,$row,$col) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     var $$024 = 0, $$05 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
     var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
     var $77 = 0, $8 = 0, $9 = 0, $d$0 = 0, $d$0$lcssa = 0, $d$126 = 0, $d$2$lcssa = 0, $d$212 = 0, $d$3$lcssa = 0, $d$320 = 0, $u$0 = 0, $u$0$lcssa = 0, $u$125 = 0, $u$2$lcssa = 0, $u$29 = 0, $u$3$lcssa = 0, $u$316 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = (($row) - ($1))|0;
     $3 = ((($this)) + 16|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP32[$this>>2]|0;
     $6 = (($col) - ($5))|0;
     $7 = (($4) + (($2*12)|0)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) + ($6)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      $$05 = 0;
      return ($$05|0);
     }
     $12 = (($1) + 1)|0;
     $u$0 = $row;
     while(1) {
      $13 = ($u$0|0)>($12|0);
      if (!($13)) {
       $u$0$lcssa = $u$0;
       break;
      }
      $14 = (($u$0) + -1)|0;
      $15 = (($14) - ($1))|0;
      $16 = (($4) + (($15*12)|0)|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (($17) + ($6)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)==(0);
      if ($20) {
       $u$0 = $14;
      } else {
       $u$0$lcssa = $u$0;
       break;
      }
     }
     $21 = ((($this)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + -1)|0;
     $d$0 = $row;
     while(1) {
      $24 = ($d$0|0)<($23|0);
      if (!($24)) {
       $d$0$lcssa = $d$0;
       break;
      }
      $25 = (($d$0) + 1)|0;
      $26 = (($25) - ($1))|0;
      $27 = (($4) + (($26*12)|0)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = (($28) + ($6)|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = ($30<<24>>24)==(0);
      if ($31) {
       $d$0 = $25;
      } else {
       $d$0$lcssa = $d$0;
       break;
      }
     }
     $32 = ($u$0$lcssa|0)>($d$0$lcssa|0);
     $$phi$trans$insert = ((($this)) + 8|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     L12: do {
      if ($32) {
       $$1 = $col;
      } else {
       $33 = (($1) + 1)|0;
       $$024 = $col;$d$126 = $d$0$lcssa;$u$125 = $u$0$lcssa;
       while(1) {
        $35 = (($$024) + 1)|0;
        $36 = ($$024|0)<($$pre|0);
        if (!($36)) {
         $$1 = $35;
         break L12;
        }
        $37 = ($u$125|0)>($33|0);
        L17: do {
         if ($37) {
          $38 = (($35) - ($5))|0;
          $u$29 = $u$125;
          while(1) {
           $39 = (($u$29) - ($1))|0;
           $40 = (($4) + (($39*12)|0)|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = (($41) + ($38)|0);
           $43 = HEAP8[$42>>0]|0;
           $44 = ($43<<24>>24)==(0);
           if (!($44)) {
            $u$2$lcssa = $u$29;
            break L17;
           }
           $47 = (($u$29) + -1)|0;
           $48 = ($47|0)>($33|0);
           if ($48) {
            $u$29 = $47;
           } else {
            $u$2$lcssa = $47;
            break;
           }
          }
         } else {
          $u$2$lcssa = $u$125;
         }
        } while(0);
        $45 = ($d$126|0)<($23|0);
        L23: do {
         if ($45) {
          $46 = (($35) - ($5))|0;
          $d$212 = $d$126;
          while(1) {
           $49 = (($d$212) - ($1))|0;
           $50 = (($4) + (($49*12)|0)|0);
           $51 = HEAP32[$50>>2]|0;
           $52 = (($51) + ($46)|0);
           $53 = HEAP8[$52>>0]|0;
           $54 = ($53<<24>>24)==(0);
           if (!($54)) {
            $d$2$lcssa = $d$212;
            break L23;
           }
           $57 = (($d$212) + 1)|0;
           $58 = ($57|0)<($23|0);
           if ($58) {
            $d$212 = $57;
           } else {
            $d$2$lcssa = $57;
            break;
           }
          }
         } else {
          $d$2$lcssa = $d$126;
         }
        } while(0);
        $55 = ($u$2$lcssa|0)>($d$2$lcssa|0);
        L29: do {
         if ($55) {
          $u$3$lcssa = $u$2$lcssa;
         } else {
          $56 = (($35) - ($5))|0;
          $u$316 = $u$2$lcssa;
          while(1) {
           $59 = (($u$316) - ($1))|0;
           $60 = (($4) + (($59*12)|0)|0);
           $61 = HEAP32[$60>>2]|0;
           $62 = (($61) + ($56)|0);
           $63 = HEAP8[$62>>0]|0;
           $64 = ($63<<24>>24)==(0);
           if ($64) {
            $u$3$lcssa = $u$316;
            break L29;
           }
           $67 = (($u$316) + 1)|0;
           $68 = ($u$316|0)<($d$2$lcssa|0);
           if ($68) {
            $u$316 = $67;
           } else {
            $u$3$lcssa = $67;
            break;
           }
          }
         }
        } while(0);
        $65 = ($u$3$lcssa|0)>($d$2$lcssa|0);
        L35: do {
         if ($65) {
          $d$3$lcssa = $d$2$lcssa;
         } else {
          $66 = (($35) - ($5))|0;
          $d$320 = $d$2$lcssa;
          while(1) {
           $69 = (($d$320) - ($1))|0;
           $70 = (($4) + (($69*12)|0)|0);
           $71 = HEAP32[$70>>2]|0;
           $72 = (($71) + ($66)|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(0);
           if ($74) {
            $d$3$lcssa = $d$320;
            break L35;
           }
           $75 = (($d$320) + -1)|0;
           $76 = ($u$3$lcssa|0)<($d$320|0);
           if ($76) {
            $d$320 = $75;
           } else {
            $d$3$lcssa = $75;
            break;
           }
          }
         }
        } while(0);
        $34 = ($u$3$lcssa|0)>($d$3$lcssa|0);
        if ($34) {
         $$1 = $35;
         break;
        } else {
         $$024 = $35;$d$126 = $d$3$lcssa;$u$125 = $u$3$lcssa;
        }
       }
      }
     } while(0);
     $77 = ($$1|0)>($$pre|0);
     $$05 = $77;
     return ($$05|0);
    }
    function __ZNK6Bitmap13escape_bottomEii($this,$row,$col) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     var $$0 = 0, $$0315 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
     var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
     var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
     var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $l$0$lcssa = 0, $l$1$ = 0, $l$116 = 0, $l$2 = 0, $l$3$lcssa = 0;
     var $l$38 = 0, $not$ = 0, $not$4 = 0, $r$0 = 0, $r$0$lcssa = 0, $r$1$ = 0, $r$117 = 0, $r$2$ph = 0, $r$3$lcssa = 0, $r$311 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = (($row) - ($1))|0;
     $3 = ((($this)) + 16|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP32[$this>>2]|0;
     $6 = (($col) - ($5))|0;
     $7 = (($4) + (($2*12)|0)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) + ($6)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      $$0 = 0;
      return ($$0|0);
     }
     $12 = (($5) + 1)|0;
     $l$0 = $col;
     while(1) {
      $13 = ($l$0|0)>($12|0);
      if (!($13)) {
       $l$0$lcssa = $l$0;
       break;
      }
      $14 = (($l$0) + -1)|0;
      $15 = (($14) - ($5))|0;
      $16 = (($8) + ($15)|0);
      $17 = HEAP8[$16>>0]|0;
      $18 = ($17<<24>>24)==(0);
      if ($18) {
       $l$0 = $14;
      } else {
       $l$0$lcssa = $l$0;
       break;
      }
     }
     $19 = ((($this)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + -1)|0;
     $r$0 = $col;
     while(1) {
      $22 = ($r$0|0)<($21|0);
      if (!($22)) {
       $r$0$lcssa = $r$0;
       break;
      }
      $23 = (($r$0) + 1)|0;
      $24 = (($23) - ($5))|0;
      $25 = (($8) + ($24)|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = ($26<<24>>24)==(0);
      if ($27) {
       $r$0 = $23;
      } else {
       $r$0$lcssa = $r$0;
       break;
      }
     }
     $28 = ($l$0$lcssa|0)>($r$0$lcssa|0);
     $$phi$trans$insert = ((($this)) + 12|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     L12: do {
      if ($28) {
       $$1 = $row;
      } else {
       $$0315 = $row;$l$116 = $l$0$lcssa;$r$117 = $r$0$lcssa;
       while(1) {
        $30 = (($$0315) + 1)|0;
        $31 = ($$0315|0)<($$pre|0);
        if (!($31)) {
         $$1 = $30;
         break L12;
        }
        $32 = ($l$116|0)>($12|0);
        if ($32) {
         $33 = (($30) - ($1))|0;
         $34 = (($l$116) - ($5))|0;
         $35 = (($4) + (($33*12)|0)|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = (($36) + ($34)|0);
         $38 = HEAP8[$37>>0]|0;
         $not$4 = ($38<<24>>24)==(0);
         $39 = $not$4 << 31 >> 31;
         $l$1$ = (($39) + ($l$116))|0;
         $l$2 = $l$1$;
        } else {
         $l$2 = $l$116;
        }
        $40 = ($r$117|0)<($21|0);
        if ($40) {
         $41 = (($30) - ($1))|0;
         $42 = (($r$117) - ($5))|0;
         $43 = (($4) + (($41*12)|0)|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = (($44) + ($42)|0);
         $46 = HEAP8[$45>>0]|0;
         $not$ = ($46<<24>>24)==(0);
         $47 = $not$&1;
         $r$1$ = (($47) + ($r$117))|0;
         $r$2$ph = $r$1$;
        } else {
         $r$2$ph = $r$117;
        }
        $48 = ($l$2|0)>($r$2$ph|0);
        L22: do {
         if ($48) {
          $l$3$lcssa = $l$2;
         } else {
          $49 = (($30) - ($1))|0;
          $50 = (($4) + (($49*12)|0)|0);
          $51 = HEAP32[$50>>2]|0;
          $l$38 = $l$2;
          while(1) {
           $52 = (($l$38) - ($5))|0;
           $53 = (($51) + ($52)|0);
           $54 = HEAP8[$53>>0]|0;
           $55 = ($54<<24>>24)==(0);
           if ($55) {
            $l$3$lcssa = $l$38;
            break L22;
           }
           $60 = (($l$38) + 1)|0;
           $61 = ($l$38|0)<($r$2$ph|0);
           if ($61) {
            $l$38 = $60;
           } else {
            $l$3$lcssa = $60;
            break;
           }
          }
         }
        } while(0);
        $56 = ($l$3$lcssa|0)>($r$2$ph|0);
        L28: do {
         if ($56) {
          $r$3$lcssa = $r$2$ph;
         } else {
          $57 = (($30) - ($1))|0;
          $58 = (($4) + (($57*12)|0)|0);
          $59 = HEAP32[$58>>2]|0;
          $r$311 = $r$2$ph;
          while(1) {
           $62 = (($r$311) - ($5))|0;
           $63 = (($59) + ($62)|0);
           $64 = HEAP8[$63>>0]|0;
           $65 = ($64<<24>>24)==(0);
           if ($65) {
            $r$3$lcssa = $r$311;
            break L28;
           }
           $66 = (($r$311) + -1)|0;
           $67 = ($l$3$lcssa|0)<($r$311|0);
           if ($67) {
            $r$311 = $66;
           } else {
            $r$3$lcssa = $66;
            break;
           }
          }
         }
        } while(0);
        $29 = ($l$3$lcssa|0)>($r$3$lcssa|0);
        if ($29) {
         $$1 = $30;
         break;
        } else {
         $$0315 = $30;$l$116 = $l$3$lcssa;$r$117 = $r$3$lcssa;
        }
       }
      }
     } while(0);
     $68 = ($$1|0)>($$pre|0);
     $$0 = $68;
     return ($$0|0);
    }
    function __ZNK6Bitmap10follow_topEii($this,$row,$col) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     var $$02 = 0, $$03$lcssa = 0, $$in = 0, $$lcssa = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
     var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
     var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
     var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
     var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
     var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
     var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
     var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
     var $97 = 0, $98 = 0, $99 = 0, $alive$0$off024 = 0, $alive$1$off0 = 0, $array = 0, $c$0 = 0, $c$0$lcssa77 = 0, $c$1 = 0, $c$1$lcssa = 0, $c$175 = 0, $i$025 = 0, $i1$027 = 0, $i2$031 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $array = sp;
     $0 = sp + 14|0;
     $1 = sp + 13|0;
     $2 = sp + 12|0;
     $3 = ((($this)) + 4|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = (($row) - ($4))|0;
     $6 = ((($this)) + 16|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = HEAP32[$this>>2]|0;
     $9 = (($col) - ($8))|0;
     $10 = (($7) + (($5*12)|0)|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + ($9)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$02 = $row;
      STACKTOP = sp;return ($$02|0);
     }
     HEAP32[$array>>2] = 0;
     $15 = ((($array)) + 4|0);
     HEAP32[$15>>2] = 0;
     $16 = ((($array)) + 8|0);
     HEAP32[$16>>2] = 0;
     $17 = ((($this)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + 1)|0;
     $20 = (($19) - ($8))|0;
     $21 = ((($array)) + 8|0);
     $22 = ($19|0)==($8|0);
     do {
      if ($22) {
       $c$0 = $col;
       label = 6;
      } else {
       $23 = ($19|0)==($8|0);
       if ($23) {
        $27 = 0;
       } else {
        __THREW__ = 0;
        $24 = (invoke_ii(29,($20|0))|0);
        $25 = __THREW__; __THREW__ = 0;
        $26 = $25&1;
        if ($26) {
         break;
        } else {
         $27 = $24;
        }
       }
       $28 = $27;
       $29 = (($27) + ($20)|0);
       $30 = $29;
       HEAP32[$array>>2] = $28;
       HEAP32[$15>>2] = $28;
       HEAP32[$21>>2] = $30;
       $c$0 = $col;
       label = 6;
      }
     } while(0);
     L9: do {
      if ((label|0) == 6) {
       while(1) {
        label = 0;
        $31 = ($c$0|0)>($8|0);
        if (!($31)) {
         $49 = $18;
         break;
        }
        $32 = (($c$0) + -1)|0;
        $33 = (($32) - ($8))|0;
        $34 = HEAP32[$10>>2]|0;
        $35 = (($34) + ($33)|0);
        $36 = HEAP8[$35>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $c$0$lcssa77 = $c$0;
         label = 12;
         break;
        } else {
         $c$0 = $32;
         label = 6;
        }
       }
       if ((label|0) == 12) {
        HEAP8[$0>>0] = 0;
        $44 = ($c$0$lcssa77|0)==($8|0);
        if ($44) {
         $49 = $18;
        } else {
         $45 = (($c$0$lcssa77) - ($8))|0;
         __THREW__ = 0;
         invoke_viii(51,($array|0),($45|0),($0|0));
         $46 = __THREW__; __THREW__ = 0;
         $47 = $46&1;
         if ($47) {
          break;
         }
         $$pre = HEAP32[$17>>2]|0;
         $49 = $$pre;
        }
       }
       $c$1 = $col;
       while(1) {
        $48 = ($c$1|0)<($49|0);
        if (!($48)) {
         $c$1$lcssa = $c$1;
         label = 17;
         break;
        }
        $50 = (($c$1) + 1)|0;
        $51 = HEAP32[$3>>2]|0;
        $52 = (($row) - ($51))|0;
        $53 = HEAP32[$6>>2]|0;
        $54 = HEAP32[$this>>2]|0;
        $55 = (($50) - ($54))|0;
        $56 = (($53) + (($52*12)|0)|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = (($57) + ($55)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = ($59<<24>>24)==(0);
        if ($60) {
         $62 = $54;$c$175 = $c$1;
         break;
        } else {
         $c$1 = $50;
        }
       }
       if ((label|0) == 17) {
        $$pre39 = HEAP32[$this>>2]|0;
        $62 = $$pre39;$c$175 = $c$1$lcssa;
       }
       $61 = (($c$175) - ($62))|0;
       $63 = (($61) + 1)|0;
       HEAP8[$1>>0] = 1;
       $64 = HEAP32[$15>>2]|0;
       $65 = HEAP32[$array>>2]|0;
       $66 = (($64) - ($65))|0;
       $67 = ($63>>>0)>($66>>>0);
       $68 = $65;
       $69 = $64;
       if ($67) {
        $70 = (($63) - ($66))|0;
        __THREW__ = 0;
        invoke_viii(51,($array|0),($70|0),($1|0));
        $71 = __THREW__; __THREW__ = 0;
        $72 = $71&1;
        if ($72) {
         break;
        }
        $$pre40 = HEAP32[$17>>2]|0;
        $77 = $$pre40;
       } else {
        $73 = ($63>>>0)<($66>>>0);
        if ($73) {
         $74 = (($68) + ($63)|0);
         $75 = ($69|0)==($74|0);
         if ($75) {
          $77 = $49;
         } else {
          HEAP32[$15>>2] = $74;
          $77 = $49;
         }
        } else {
         $77 = $49;
        }
       }
       $76 = ($c$175|0)<($77|0);
       do {
        if ($76) {
         $78 = HEAP32[$this>>2]|0;
         $79 = (($77) + 1)|0;
         $80 = (($79) - ($78))|0;
         HEAP8[$2>>0] = 0;
         $81 = HEAP32[$15>>2]|0;
         $82 = HEAP32[$array>>2]|0;
         $83 = (($81) - ($82))|0;
         $84 = ($80>>>0)>($83>>>0);
         $85 = $82;
         $86 = $81;
         if ($84) {
          $87 = (($80) - ($83))|0;
          __THREW__ = 0;
          invoke_viii(51,($array|0),($87|0),($2|0));
          $88 = __THREW__; __THREW__ = 0;
          $89 = $88&1;
          if ($89) {
           break L9;
          } else {
           break;
          }
         }
         $90 = ($80>>>0)<($83>>>0);
         if ($90) {
          $91 = (($85) + ($80)|0);
          $92 = ($86|0)==($91|0);
          if (!($92)) {
           HEAP32[$15>>2] = $91;
          }
         }
        }
       } while(0);
       $93 = HEAP32[$3>>2]|0;
       $94 = ($93|0)<($row|0);
       L39: do {
        if ($94) {
         $$in = $row;
         while(1) {
          $96 = (($$in) + -1)|0;
          $98 = HEAP32[$17>>2]|0;
          $99 = HEAP32[$this>>2]|0;
          $100 = (($98) + 1)|0;
          $101 = (($100) - ($99))|0;
          $102 = ($101|0)>(0);
          if ($102) {
           $168 = $98;$169 = $99;$alive$0$off024 = 0;$i$025 = 0;
          } else {
           $$03$lcssa = $$in;
           break L39;
          }
          while(1) {
           $105 = HEAP32[$array>>2]|0;
           $106 = (($105) + ($i$025)|0);
           $107 = HEAP8[$106>>0]|0;
           $108 = ($107<<24>>24)==(0);
           if ($108) {
            $119 = $168;$120 = $169;$alive$1$off0 = $alive$0$off024;
           } else {
            $109 = HEAP32[$3>>2]|0;
            $110 = (($96) - ($109))|0;
            $111 = HEAP32[$6>>2]|0;
            $112 = (($111) + (($110*12)|0)|0);
            $113 = HEAP32[$112>>2]|0;
            $114 = (($113) + ($i$025)|0);
            $115 = HEAP8[$114>>0]|0;
            $116 = ($115<<24>>24)==(0);
            if ($116) {
             HEAP8[$106>>0] = 0;
             $$pre41 = HEAP32[$17>>2]|0;
             $$pre42 = HEAP32[$this>>2]|0;
             $119 = $$pre41;$120 = $$pre42;$alive$1$off0 = $alive$0$off024;
            } else {
             $119 = $168;$120 = $169;$alive$1$off0 = 1;
            }
           }
           $117 = (($i$025) + 1)|0;
           $118 = (($119) + 1)|0;
           $103 = (($118) - ($120))|0;
           $121 = ($117|0)<($103|0);
           if ($121) {
            $168 = $119;$169 = $120;$alive$0$off024 = $alive$1$off0;$i$025 = $117;
           } else {
            break;
           }
          }
          if (!($alive$1$off0)) {
           $$03$lcssa = $$in;
           break L39;
          }
          $104 = ($103|0)>(1);
          if ($104) {
           $170 = $119;$171 = $120;$i1$027 = 1;
           while(1) {
            $124 = (($i1$027) + -1)|0;
            $125 = HEAP32[$array>>2]|0;
            $126 = (($125) + ($124)|0);
            $127 = HEAP8[$126>>0]|0;
            $128 = ($127<<24>>24)==(0);
            if ($128) {
             $142 = $170;$144 = $171;
            } else {
             $129 = (($125) + ($i1$027)|0);
             $130 = HEAP8[$129>>0]|0;
             $131 = ($130<<24>>24)==(0);
             if ($131) {
              $132 = HEAP32[$3>>2]|0;
              $133 = (($96) - ($132))|0;
              $134 = HEAP32[$6>>2]|0;
              $135 = (($134) + (($133*12)|0)|0);
              $136 = HEAP32[$135>>2]|0;
              $137 = (($136) + ($i1$027)|0);
              $138 = HEAP8[$137>>0]|0;
              $139 = ($138<<24>>24)==(0);
              if ($139) {
               $142 = $170;$144 = $171;
              } else {
               HEAP8[$129>>0] = 1;
               $$pre43 = HEAP32[$17>>2]|0;
               $$pre44 = HEAP32[$this>>2]|0;
               $142 = $$pre43;$144 = $$pre44;
              }
             } else {
              $142 = $170;$144 = $171;
             }
            }
            $140 = (($i1$027) + 1)|0;
            $141 = (($142) + 1)|0;
            $143 = (($141) - ($144))|0;
            $145 = ($140|0)<($143|0);
            if ($145) {
             $170 = $142;$171 = $144;$i1$027 = $140;
            } else {
             $$lcssa = $143;
             break;
            }
           }
          } else {
           $$lcssa = $103;
          }
          $122 = (($$lcssa) + -2)|0;
          $123 = ($122|0)>(-1);
          if ($123) {
           $i2$031 = $122;
           while(1) {
            $146 = (($i2$031) + 1)|0;
            $147 = HEAP32[$array>>2]|0;
            $148 = (($147) + ($146)|0);
            $149 = HEAP8[$148>>0]|0;
            $150 = ($149<<24>>24)==(0);
            if (!($150)) {
             $151 = (($147) + ($i2$031)|0);
             $152 = HEAP8[$151>>0]|0;
             $153 = ($152<<24>>24)==(0);
             if ($153) {
              $154 = HEAP32[$3>>2]|0;
              $155 = (($96) - ($154))|0;
              $156 = HEAP32[$6>>2]|0;
              $157 = (($156) + (($155*12)|0)|0);
              $158 = HEAP32[$157>>2]|0;
              $159 = (($158) + ($i2$031)|0);
              $160 = HEAP8[$159>>0]|0;
              $161 = ($160<<24>>24)==(0);
              if (!($161)) {
               HEAP8[$151>>0] = 1;
              }
             }
            }
            $162 = (($i2$031) + -1)|0;
            $163 = ($i2$031|0)>(0);
            if ($163) {
             $i2$031 = $162;
            } else {
             break;
            }
           }
          }
          $95 = HEAP32[$3>>2]|0;
          $97 = ($96|0)>($95|0);
          if ($97) {
           $$in = $96;
          } else {
           $$03$lcssa = $96;
           break;
          }
         }
        } else {
         $$03$lcssa = $row;
        }
       } while(0);
       $164 = HEAP32[$array>>2]|0;
       $165 = ($164|0)==(0|0);
       if (!($165)) {
        $166 = HEAP32[$15>>2]|0;
        $167 = ($166|0)==($164|0);
        if (!($167)) {
         HEAP32[$15>>2] = $164;
        }
        __ZdlPv($164);
       }
       $$02 = $$03$lcssa;
       STACKTOP = sp;return ($$02|0);
      }
     } while(0);
     $38 = ___cxa_find_matching_catch_2()|0;
     $39 = tempRet0;
     $40 = HEAP32[$array>>2]|0;
     $41 = ($40|0)==(0|0);
     if ($41) {
      ___resumeException($38|0);
      // unreachable;
     }
     $42 = HEAP32[$15>>2]|0;
     $43 = ($42|0)==($40|0);
     if (!($43)) {
      HEAP32[$15>>2] = $40;
     }
     __ZdlPv($40);
     ___resumeException($38|0);
     // unreachable;
     return (0)|0;
    }
    function __ZNK6Bitmap13follow_bottomEii($this,$row,$col) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     var $$02 = 0, $$03$lcssa = 0, $$in = 0, $$lcssa = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
     var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
     var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
     var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
     var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
     var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
     var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
     var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alive$0$off024 = 0, $alive$1$off0 = 0, $array = 0, $c$0 = 0, $c$0$lcssa77 = 0, $c$1 = 0, $c$1$lcssa = 0, $c$175 = 0, $i$025 = 0, $i1$027 = 0, $i2$031 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $array = sp;
     $0 = sp + 14|0;
     $1 = sp + 13|0;
     $2 = sp + 12|0;
     $3 = ((($this)) + 4|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = (($row) - ($4))|0;
     $6 = ((($this)) + 16|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = HEAP32[$this>>2]|0;
     $9 = (($col) - ($8))|0;
     $10 = (($7) + (($5*12)|0)|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + ($9)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$02 = $row;
      STACKTOP = sp;return ($$02|0);
     }
     HEAP32[$array>>2] = 0;
     $15 = ((($array)) + 4|0);
     HEAP32[$15>>2] = 0;
     $16 = ((($array)) + 8|0);
     HEAP32[$16>>2] = 0;
     $17 = ((($this)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + 1)|0;
     $20 = (($19) - ($8))|0;
     $21 = ((($array)) + 8|0);
     $22 = ($19|0)==($8|0);
     do {
      if ($22) {
       $c$0 = $col;
       label = 6;
      } else {
       $23 = ($19|0)==($8|0);
       if ($23) {
        $27 = 0;
       } else {
        __THREW__ = 0;
        $24 = (invoke_ii(29,($20|0))|0);
        $25 = __THREW__; __THREW__ = 0;
        $26 = $25&1;
        if ($26) {
         break;
        } else {
         $27 = $24;
        }
       }
       $28 = $27;
       $29 = (($27) + ($20)|0);
       $30 = $29;
       HEAP32[$array>>2] = $28;
       HEAP32[$15>>2] = $28;
       HEAP32[$21>>2] = $30;
       $c$0 = $col;
       label = 6;
      }
     } while(0);
     L9: do {
      if ((label|0) == 6) {
       while(1) {
        label = 0;
        $31 = ($c$0|0)>($8|0);
        if (!($31)) {
         $49 = $18;
         break;
        }
        $32 = (($c$0) + -1)|0;
        $33 = (($32) - ($8))|0;
        $34 = HEAP32[$10>>2]|0;
        $35 = (($34) + ($33)|0);
        $36 = HEAP8[$35>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $c$0$lcssa77 = $c$0;
         label = 12;
         break;
        } else {
         $c$0 = $32;
         label = 6;
        }
       }
       if ((label|0) == 12) {
        HEAP8[$0>>0] = 0;
        $44 = ($c$0$lcssa77|0)==($8|0);
        if ($44) {
         $49 = $18;
        } else {
         $45 = (($c$0$lcssa77) - ($8))|0;
         __THREW__ = 0;
         invoke_viii(51,($array|0),($45|0),($0|0));
         $46 = __THREW__; __THREW__ = 0;
         $47 = $46&1;
         if ($47) {
          break;
         }
         $$pre = HEAP32[$17>>2]|0;
         $49 = $$pre;
        }
       }
       $c$1 = $col;
       while(1) {
        $48 = ($c$1|0)<($49|0);
        if (!($48)) {
         $c$1$lcssa = $c$1;
         label = 17;
         break;
        }
        $50 = (($c$1) + 1)|0;
        $51 = HEAP32[$3>>2]|0;
        $52 = (($row) - ($51))|0;
        $53 = HEAP32[$6>>2]|0;
        $54 = HEAP32[$this>>2]|0;
        $55 = (($50) - ($54))|0;
        $56 = (($53) + (($52*12)|0)|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = (($57) + ($55)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = ($59<<24>>24)==(0);
        if ($60) {
         $62 = $54;$c$175 = $c$1;
         break;
        } else {
         $c$1 = $50;
        }
       }
       if ((label|0) == 17) {
        $$pre39 = HEAP32[$this>>2]|0;
        $62 = $$pre39;$c$175 = $c$1$lcssa;
       }
       $61 = (($c$175) - ($62))|0;
       $63 = (($61) + 1)|0;
       HEAP8[$1>>0] = 1;
       $64 = HEAP32[$15>>2]|0;
       $65 = HEAP32[$array>>2]|0;
       $66 = (($64) - ($65))|0;
       $67 = ($63>>>0)>($66>>>0);
       $68 = $65;
       $69 = $64;
       if ($67) {
        $70 = (($63) - ($66))|0;
        __THREW__ = 0;
        invoke_viii(51,($array|0),($70|0),($1|0));
        $71 = __THREW__; __THREW__ = 0;
        $72 = $71&1;
        if ($72) {
         break;
        }
        $$pre40 = HEAP32[$17>>2]|0;
        $77 = $$pre40;
       } else {
        $73 = ($63>>>0)<($66>>>0);
        if ($73) {
         $74 = (($68) + ($63)|0);
         $75 = ($69|0)==($74|0);
         if ($75) {
          $77 = $49;
         } else {
          HEAP32[$15>>2] = $74;
          $77 = $49;
         }
        } else {
         $77 = $49;
        }
       }
       $76 = ($c$175|0)<($77|0);
       do {
        if ($76) {
         $78 = HEAP32[$this>>2]|0;
         $79 = (($77) + 1)|0;
         $80 = (($79) - ($78))|0;
         HEAP8[$2>>0] = 0;
         $81 = HEAP32[$15>>2]|0;
         $82 = HEAP32[$array>>2]|0;
         $83 = (($81) - ($82))|0;
         $84 = ($80>>>0)>($83>>>0);
         $85 = $82;
         $86 = $81;
         if ($84) {
          $87 = (($80) - ($83))|0;
          __THREW__ = 0;
          invoke_viii(51,($array|0),($87|0),($2|0));
          $88 = __THREW__; __THREW__ = 0;
          $89 = $88&1;
          if ($89) {
           break L9;
          } else {
           break;
          }
         }
         $90 = ($80>>>0)<($83>>>0);
         if ($90) {
          $91 = (($85) + ($80)|0);
          $92 = ($86|0)==($91|0);
          if (!($92)) {
           HEAP32[$15>>2] = $91;
          }
         }
        }
       } while(0);
       $93 = ((($this)) + 12|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($94|0)>($row|0);
       L39: do {
        if ($95) {
         $$in = $row;
         while(1) {
          $97 = (($$in) + 1)|0;
          $99 = HEAP32[$17>>2]|0;
          $100 = HEAP32[$this>>2]|0;
          $101 = (($99) + 1)|0;
          $102 = (($101) - ($100))|0;
          $103 = ($102|0)>(0);
          if ($103) {
           $169 = $99;$170 = $100;$alive$0$off024 = 0;$i$025 = 0;
          } else {
           $$03$lcssa = $$in;
           break L39;
          }
          while(1) {
           $106 = HEAP32[$array>>2]|0;
           $107 = (($106) + ($i$025)|0);
           $108 = HEAP8[$107>>0]|0;
           $109 = ($108<<24>>24)==(0);
           if ($109) {
            $120 = $169;$121 = $170;$alive$1$off0 = $alive$0$off024;
           } else {
            $110 = HEAP32[$3>>2]|0;
            $111 = (($97) - ($110))|0;
            $112 = HEAP32[$6>>2]|0;
            $113 = (($112) + (($111*12)|0)|0);
            $114 = HEAP32[$113>>2]|0;
            $115 = (($114) + ($i$025)|0);
            $116 = HEAP8[$115>>0]|0;
            $117 = ($116<<24>>24)==(0);
            if ($117) {
             HEAP8[$107>>0] = 0;
             $$pre41 = HEAP32[$17>>2]|0;
             $$pre42 = HEAP32[$this>>2]|0;
             $120 = $$pre41;$121 = $$pre42;$alive$1$off0 = $alive$0$off024;
            } else {
             $120 = $169;$121 = $170;$alive$1$off0 = 1;
            }
           }
           $118 = (($i$025) + 1)|0;
           $119 = (($120) + 1)|0;
           $104 = (($119) - ($121))|0;
           $122 = ($118|0)<($104|0);
           if ($122) {
            $169 = $120;$170 = $121;$alive$0$off024 = $alive$1$off0;$i$025 = $118;
           } else {
            break;
           }
          }
          if (!($alive$1$off0)) {
           $$03$lcssa = $$in;
           break L39;
          }
          $105 = ($104|0)>(1);
          if ($105) {
           $171 = $120;$172 = $121;$i1$027 = 1;
           while(1) {
            $125 = (($i1$027) + -1)|0;
            $126 = HEAP32[$array>>2]|0;
            $127 = (($126) + ($125)|0);
            $128 = HEAP8[$127>>0]|0;
            $129 = ($128<<24>>24)==(0);
            if ($129) {
             $143 = $171;$145 = $172;
            } else {
             $130 = (($126) + ($i1$027)|0);
             $131 = HEAP8[$130>>0]|0;
             $132 = ($131<<24>>24)==(0);
             if ($132) {
              $133 = HEAP32[$3>>2]|0;
              $134 = (($97) - ($133))|0;
              $135 = HEAP32[$6>>2]|0;
              $136 = (($135) + (($134*12)|0)|0);
              $137 = HEAP32[$136>>2]|0;
              $138 = (($137) + ($i1$027)|0);
              $139 = HEAP8[$138>>0]|0;
              $140 = ($139<<24>>24)==(0);
              if ($140) {
               $143 = $171;$145 = $172;
              } else {
               HEAP8[$130>>0] = 1;
               $$pre43 = HEAP32[$17>>2]|0;
               $$pre44 = HEAP32[$this>>2]|0;
               $143 = $$pre43;$145 = $$pre44;
              }
             } else {
              $143 = $171;$145 = $172;
             }
            }
            $141 = (($i1$027) + 1)|0;
            $142 = (($143) + 1)|0;
            $144 = (($142) - ($145))|0;
            $146 = ($141|0)<($144|0);
            if ($146) {
             $171 = $143;$172 = $145;$i1$027 = $141;
            } else {
             $$lcssa = $144;
             break;
            }
           }
          } else {
           $$lcssa = $104;
          }
          $123 = (($$lcssa) + -2)|0;
          $124 = ($123|0)>(-1);
          if ($124) {
           $i2$031 = $123;
           while(1) {
            $147 = (($i2$031) + 1)|0;
            $148 = HEAP32[$array>>2]|0;
            $149 = (($148) + ($147)|0);
            $150 = HEAP8[$149>>0]|0;
            $151 = ($150<<24>>24)==(0);
            if (!($151)) {
             $152 = (($148) + ($i2$031)|0);
             $153 = HEAP8[$152>>0]|0;
             $154 = ($153<<24>>24)==(0);
             if ($154) {
              $155 = HEAP32[$3>>2]|0;
              $156 = (($97) - ($155))|0;
              $157 = HEAP32[$6>>2]|0;
              $158 = (($157) + (($156*12)|0)|0);
              $159 = HEAP32[$158>>2]|0;
              $160 = (($159) + ($i2$031)|0);
              $161 = HEAP8[$160>>0]|0;
              $162 = ($161<<24>>24)==(0);
              if (!($162)) {
               HEAP8[$152>>0] = 1;
              }
             }
            }
            $163 = (($i2$031) + -1)|0;
            $164 = ($i2$031|0)>(0);
            if ($164) {
             $i2$031 = $163;
            } else {
             break;
            }
           }
          }
          $96 = HEAP32[$93>>2]|0;
          $98 = ($97|0)<($96|0);
          if ($98) {
           $$in = $97;
          } else {
           $$03$lcssa = $97;
           break;
          }
         }
        } else {
         $$03$lcssa = $row;
        }
       } while(0);
       $165 = HEAP32[$array>>2]|0;
       $166 = ($165|0)==(0|0);
       if (!($166)) {
        $167 = HEAP32[$15>>2]|0;
        $168 = ($167|0)==($165|0);
        if (!($168)) {
         HEAP32[$15>>2] = $165;
        }
        __ZdlPv($165);
       }
       $$02 = $$03$lcssa;
       STACKTOP = sp;return ($$02|0);
      }
     } while(0);
     $38 = ___cxa_find_matching_catch_2()|0;
     $39 = tempRet0;
     $40 = HEAP32[$array>>2]|0;
     $41 = ($40|0)==(0|0);
     if ($41) {
      ___resumeException($38|0);
      // unreachable;
     }
     $42 = HEAP32[$15>>2]|0;
     $43 = ($42|0)==($40|0);
     if (!($43)) {
      HEAP32[$15>>2] = $40;
     }
     __ZdlPv($40);
     ___resumeException($38|0);
     // unreachable;
     return (0)|0;
    }
    function __ZNK6Bitmap8top_hookEPi($this,$hdiff) {
     $this = $this|0;
     $hdiff = $hdiff|0;
     var $$3 = 0, $$lcol$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
     var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
     var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $black_section$1$lcssa = 0, $black_section$1$lcssa$lcssa = 0, $black_section$16 = 0, $black_section$2 = 0, $black_section$3 = 0, $col$0$l$0 = 0, $col$0$rcol$1 = 0, $col$010 = 0, $l$0$lcssa = 0, $l$07 = 0, $l$1 = 0, $lcol$0 = 0, $lcol$1$lcssa = 0, $lcol$1$lcssa$lcssa = 0, $lcol$112 = 0;
     var $lcol$2 = 0, $or$cond = 0, $or$cond3 = 0, $prev_black$0$off09 = 0, $r$0$lcssa = 0, $r$08 = 0, $r$1 = 0, $rcol$0 = 0, $rcol$1$lcssa = 0, $rcol$1$lcssa$lcssa = 0, $rcol$15 = 0, $rcol$2 = 0, $rcol$3 = 0, $row$0 = 0, $row$0$in = 0, $row$0$lcssa22 = 0, $wmax$0 = 0, $wmax$0$ = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($3) + ($1))|0;
     $5 = (($4|0) / 2)&-1;
     $6 = ((($this)) + 8|0);
     $7 = ((($this)) + 16|0);
     $lcol$0 = 0;$rcol$0 = 0;$row$0$in = $1;$wmax$0 = 0;
     while(1) {
      $row$0 = (($row$0$in) + 1)|0;
      $8 = ($row$0|0)<($5|0);
      if (!($8)) {
       $$3 = 0;
       label = 18;
       break;
      }
      $9 = HEAP32[$this>>2]|0;
      $10 = HEAP32[$6>>2]|0;
      $11 = ($9|0)>($10|0);
      if ($11) {
       $black_section$1$lcssa = 0;$l$0$lcssa = -1;$lcol$1$lcssa = $lcol$0;$r$0$lcssa = -2;$rcol$1$lcssa = $rcol$0;
      } else {
       $12 = (($row$0) - ($1))|0;
       $13 = HEAP32[$7>>2]|0;
       $14 = (($13) + (($12*12)|0)|0);
       $15 = HEAP32[$14>>2]|0;
       $black_section$16 = 0;$col$010 = $9;$l$07 = -1;$lcol$112 = $lcol$0;$prev_black$0$off09 = 0;$r$08 = -2;$rcol$15 = $rcol$0;
       while(1) {
        $21 = (($col$010) - ($9))|0;
        $22 = (($15) + ($21)|0);
        $23 = HEAP8[$22>>0]|0;
        $24 = ($23<<24>>24)!=(0);
        if ($24) {
         if ($prev_black$0$off09) {
          $black_section$2 = $black_section$16;$rcol$2 = $rcol$15;
         } else {
          $25 = (($black_section$16) + 1)|0;
          $26 = ($25|0)==(2);
          $col$0$rcol$1 = $26 ? $col$010 : $rcol$15;
          $black_section$2 = $25;$rcol$2 = $col$0$rcol$1;
         }
         $27 = ($l$07|0)<(0);
         $col$0$l$0 = $27 ? $col$010 : $l$07;
         $black_section$3 = $black_section$2;$l$1 = $col$0$l$0;$lcol$2 = $lcol$112;$r$1 = $col$010;$rcol$3 = $rcol$2;
        } else {
         $28 = ($black_section$16|0)==(1);
         $or$cond = $28 & $prev_black$0$off09;
         $29 = (($col$010) + -1)|0;
         $$lcol$1 = $or$cond ? $29 : $lcol$112;
         $black_section$3 = $black_section$16;$l$1 = $l$07;$lcol$2 = $$lcol$1;$r$1 = $r$08;$rcol$3 = $rcol$15;
        }
        $30 = (($col$010) + 1)|0;
        $31 = ($col$010|0)<($10|0);
        if ($31) {
         $black_section$16 = $black_section$3;$col$010 = $30;$l$07 = $l$1;$lcol$112 = $lcol$2;$prev_black$0$off09 = $24;$r$08 = $r$1;$rcol$15 = $rcol$3;
        } else {
         $black_section$1$lcssa = $black_section$3;$l$0$lcssa = $l$1;$lcol$1$lcssa = $lcol$2;$r$0$lcssa = $r$1;$rcol$1$lcssa = $rcol$3;
         break;
        }
       }
      }
      $16 = (($r$0$lcssa) - ($l$0$lcssa))|0;
      $17 = (($16) + 1)|0;
      $18 = ($17*10)|0;
      $19 = ($wmax$0*9)|0;
      $20 = ($18|0)>($19|0);
      if (!($20)) {
       $$3 = 0;
       label = 18;
       break;
      }
      $32 = ($16|0)<($wmax$0|0);
      $wmax$0$ = $32 ? $wmax$0 : $17;
      $33 = ($black_section$1$lcssa|0)>(1);
      if ($33) {
       $black_section$1$lcssa$lcssa = $black_section$1$lcssa;$lcol$1$lcssa$lcssa = $lcol$1$lcssa;$rcol$1$lcssa$lcssa = $rcol$1$lcssa;$row$0$lcssa22 = $row$0;
       label = 13;
       break;
      } else {
       $lcol$0 = $lcol$1$lcssa;$rcol$0 = $rcol$1$lcssa;$row$0$in = $row$0;$wmax$0 = $wmax$0$;
      }
     }
     if ((label|0) == 13) {
      $34 = ($black_section$1$lcssa$lcssa|0)==(2);
      if (!($34)) {
       $$3 = 0;
       return ($$3|0);
      }
      $35 = (($lcol$1$lcssa$lcssa) + 1)|0;
      $36 = (__ZNK6Bitmap10escape_topEii($this,$row$0$lcssa22,$35)|0);
      if ($36) {
       $$3 = 0;
       return ($$3|0);
      }
      $37 = (__ZNK6Bitmap13follow_bottomEii($this,$row$0$lcssa22,$lcol$1$lcssa$lcssa)|0);
      $38 = (__ZNK6Bitmap13follow_bottomEii($this,$row$0$lcssa22,$rcol$1$lcssa$lcssa)|0);
      $39 = ($37|0)>($row$0$lcssa22|0);
      $40 = ($38|0)>($row$0$lcssa22|0);
      $or$cond3 = $39 & $40;
      if (!($or$cond3)) {
       $$3 = 0;
       return ($$3|0);
      }
      $41 = ($hdiff|0)==(0|0);
      if ($41) {
       $$3 = 1;
       return ($$3|0);
      }
      $42 = (($37) - ($38))|0;
      HEAP32[$hdiff>>2] = $42;
      $$3 = 1;
      return ($$3|0);
     }
     else if ((label|0) == 18) {
      return ($$3|0);
     }
     return (0)|0;
    }
    function __ZNK6Bitmap11bottom_hookEPi($this,$hdiff) {
     $this = $this|0;
     $hdiff = $hdiff|0;
     var $$2 = 0, $$lcol$1 = 0, $$lcssa98 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
     var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
     var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
     var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
     var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
     var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
     var $black_section$0$lcssa69 = 0, $black_section$024 = 0, $black_section$1 = 0, $black_section$2 = 0, $black_section$2$lcssa = 0, $col$0$l2$0 = 0, $col$0$rcol$1 = 0, $col$029 = 0, $i$0 = 0, $i$0$in = 0, $i$0$in$us = 0, $i$0$us = 0, $l$0$lcssa = 0, $l$035 = 0, $l2$026 = 0, $l2$1 = 0, $l2$1$lcssa = 0, $lcol$0 = 0, $lcol$1$lcssa68 = 0, $lcol$1$lcssa68$lcssa = 0;
     var $lcol$125 = 0, $lcol$2 = 0, $lcol$2$lcssa = 0, $or$cond = 0, $or$cond6 = 0, $prev_black$0$off028 = 0, $r$0$lcssa = 0, $r$0$lcssa$us = 0, $r$044 = 0, $r$044$us = 0, $r3$027 = 0, $r3$1 = 0, $r3$1$lcssa = 0, $rcol$0 = 0, $rcol$1$lcssa70 = 0, $rcol$1$lcssa70$lcssa = 0, $rcol$123 = 0, $rcol$2 = 0, $rcol$3 = 0, $rcol$3$lcssa = 0;
     var $row$020 = 0, $row$052 = 0, $row$052$us = 0, $row$1 = 0, $wmax$0$ = 0, $wmax$0$$us = 0, $wmax$051 = 0, $wmax$051$us = 0, $wmax$2 = 0, $wmax$3 = 0, $wmax$3$ = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) - ($3))|0;
     $5 = ($4*80)|0;
     $6 = (($5|0) / 100)&-1;
     $7 = (($6) + ($3))|0;
     $8 = ($1|0)>($7|0);
     L1: do {
      if ($8) {
       $9 = HEAP32[$this>>2]|0;
       $10 = ((($this)) + 8|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = ($9|0)>($11|0);
       $13 = ((($this)) + 16|0);
       if ($12) {
        $14 = ($11|0)>($9|0);
        $15 = (($11) + 1)|0;
        $16 = (($15) - ($9))|0;
        $row$052$us = $1;$wmax$051$us = 0;
        while(1) {
         L7: do {
          if ($14) {
           $42 = (($row$052$us) - ($3))|0;
           $43 = HEAP32[$13>>2]|0;
           $44 = (($43) + (($42*12)|0)|0);
           $21 = HEAP32[$44>>2]|0;
           $r$044$us = $11;
           while(1) {
            $19 = (($r$044$us) - ($9))|0;
            $20 = (($21) + ($19)|0);
            $22 = HEAP8[$20>>0]|0;
            $23 = ($22<<24>>24)==(0);
            if (!($23)) {
             $r$0$lcssa$us = $r$044$us;
             break L7;
            }
            $40 = (($r$044$us) + -1)|0;
            $41 = ($40|0)>($9|0);
            if ($41) {
             $r$044$us = $40;
            } else {
             $r$0$lcssa$us = $40;
             break;
            }
           }
          } else {
           $r$0$lcssa$us = $11;
          }
         } while(0);
         $24 = (($r$0$lcssa$us) - ($9))|0;
         $25 = (($24) + 1)|0;
         $26 = ($24|0)<($wmax$051$us|0);
         $wmax$0$$us = $26 ? $wmax$051$us : $25;
         $27 = $25 << 2;
         $28 = ($27|0)<($16|0);
         if (!($28)) {
          $29 = (($row$052$us) - ($3))|0;
          $i$0$in$us = $9;
          while(1) {
           $i$0$us = (($i$0$in$us) + 1)|0;
           $30 = ($i$0$us|0)<($r$0$lcssa$us|0);
           if (!($30)) {
            $row$020 = $row$052$us;$wmax$2 = $wmax$0$$us;
            break L1;
           }
           $31 = HEAP32[$13>>2]|0;
           $32 = (($i$0$us) - ($9))|0;
           $33 = (($31) + (($29*12)|0)|0);
           $34 = HEAP32[$33>>2]|0;
           $35 = (($34) + ($32)|0);
           $36 = HEAP8[$35>>0]|0;
           $37 = ($36<<24>>24)==(0);
           if ($37) {
            break;
           } else {
            $i$0$in$us = $i$0$us;
           }
          }
         }
         $38 = (($row$052$us) + -1)|0;
         $39 = ($38|0)>($7|0);
         if ($39) {
          $row$052$us = $38;$wmax$051$us = $wmax$0$$us;
         } else {
          $row$020 = $38;$wmax$2 = $wmax$0$$us;
          break L1;
         }
        }
       }
       $$pre = HEAP32[$13>>2]|0;
       $17 = (($11) + 1)|0;
       $18 = (($17) - ($9))|0;
       $row$052 = $1;$wmax$051 = 0;
       while(1) {
        $45 = (($row$052) - ($3))|0;
        $46 = (($$pre) + (($45*12)|0)|0);
        $47 = HEAP32[$46>>2]|0;
        $l$035 = $9;
        while(1) {
         $48 = (($l$035) - ($9))|0;
         $49 = (($47) + ($48)|0);
         $50 = HEAP8[$49>>0]|0;
         $51 = ($50<<24>>24)==(0);
         if (!($51)) {
          $l$0$lcssa = $l$035;
          break;
         }
         $52 = (($l$035) + 1)|0;
         $53 = ($l$035|0)<($11|0);
         if ($53) {
          $l$035 = $52;
         } else {
          $l$0$lcssa = $52;
          break;
         }
        }
        $54 = ($11|0)>($l$0$lcssa|0);
        L26: do {
         if ($54) {
          $r$044 = $11;
          while(1) {
           $55 = (($r$044) - ($9))|0;
           $56 = (($47) + ($55)|0);
           $57 = HEAP8[$56>>0]|0;
           $58 = ($57<<24>>24)==(0);
           if (!($58)) {
            $r$0$lcssa = $r$044;
            break L26;
           }
           $59 = (($r$044) + -1)|0;
           $60 = ($59|0)>($l$0$lcssa|0);
           if ($60) {
            $r$044 = $59;
           } else {
            $r$0$lcssa = $59;
            break;
           }
          }
         } else {
          $r$0$lcssa = $11;
         }
        } while(0);
        $61 = (($r$0$lcssa) - ($l$0$lcssa))|0;
        $62 = (($61) + 1)|0;
        $63 = ($61|0)<($wmax$051|0);
        $wmax$0$ = $63 ? $wmax$051 : $62;
        $64 = $62 << 2;
        $65 = ($64|0)<($18|0);
        if (!($65)) {
         $i$0$in = $l$0$lcssa;
         while(1) {
          $i$0 = (($i$0$in) + 1)|0;
          $66 = ($i$0|0)<($r$0$lcssa|0);
          if (!($66)) {
           $row$020 = $row$052;$wmax$2 = $wmax$0$;
           break L1;
          }
          $67 = (($i$0) - ($9))|0;
          $68 = (($47) + ($67)|0);
          $69 = HEAP8[$68>>0]|0;
          $70 = ($69<<24>>24)==(0);
          if ($70) {
           break;
          } else {
           $i$0$in = $i$0;
          }
         }
        }
        $71 = (($row$052) + -1)|0;
        $72 = ($71|0)>($7|0);
        if ($72) {
         $row$052 = $71;$wmax$051 = $wmax$0$;
        } else {
         $row$020 = $71;$wmax$2 = $wmax$0$;
         break;
        }
       }
      } else {
       $row$020 = $1;$wmax$2 = 0;
      }
     } while(0);
     $73 = ($row$020|0)>($7|0);
     if (!($73)) {
      $$2 = 0;
      return ($$2|0);
     }
     $74 = (($1) + ($3))|0;
     $75 = (($74|0) / 2)&-1;
     $76 = ((($this)) + 8|0);
     $77 = ((($this)) + 16|0);
     $lcol$0 = 0;$rcol$0 = 0;$row$1 = $row$020;$wmax$3 = $wmax$2;
     while(1) {
      $78 = (($row$1) + -1)|0;
      $79 = ($78|0)>($75|0);
      if (!($79)) {
       $$2 = 0;
       label = 41;
       break;
      }
      $80 = HEAP32[$this>>2]|0;
      $81 = HEAP32[$76>>2]|0;
      $82 = ($80|0)>($81|0);
      if ($82) {
       $102 = 0;$105 = -1;$black_section$0$lcssa69 = 0;$lcol$1$lcssa68 = $lcol$0;$rcol$1$lcssa70 = $rcol$0;
      } else {
       $83 = (($78) - ($3))|0;
       $84 = HEAP32[$77>>2]|0;
       $85 = (($84) + (($83*12)|0)|0);
       $86 = HEAP32[$85>>2]|0;
       $black_section$024 = 0;$col$029 = $80;$l2$026 = -1;$lcol$125 = $lcol$0;$prev_black$0$off028 = 0;$r3$027 = -2;$rcol$123 = $rcol$0;
       while(1) {
        $90 = (($col$029) - ($80))|0;
        $91 = (($86) + ($90)|0);
        $92 = HEAP8[$91>>0]|0;
        $93 = ($92<<24>>24)!=(0);
        if ($93) {
         if ($prev_black$0$off028) {
          $black_section$1 = $black_section$024;$rcol$2 = $rcol$123;
         } else {
          $94 = (($black_section$024) + 1)|0;
          $95 = ($94|0)==(2);
          $col$0$rcol$1 = $95 ? $col$029 : $rcol$123;
          $black_section$1 = $94;$rcol$2 = $col$0$rcol$1;
         }
         $96 = ($l2$026|0)<(0);
         $col$0$l2$0 = $96 ? $col$029 : $l2$026;
         $black_section$2 = $black_section$1;$l2$1 = $col$0$l2$0;$lcol$2 = $lcol$125;$r3$1 = $col$029;$rcol$3 = $rcol$2;
        } else {
         $97 = ($black_section$024|0)==(1);
         $or$cond = $97 & $prev_black$0$off028;
         $98 = (($col$029) + -1)|0;
         $$lcol$1 = $or$cond ? $98 : $lcol$125;
         $black_section$2 = $black_section$024;$l2$1 = $l2$026;$lcol$2 = $$lcol$1;$r3$1 = $r3$027;$rcol$3 = $rcol$123;
        }
        $99 = (($col$029) + 1)|0;
        $100 = ($col$029|0)<($81|0);
        if ($100) {
         $black_section$024 = $black_section$2;$col$029 = $99;$l2$026 = $l2$1;$lcol$125 = $lcol$2;$prev_black$0$off028 = $93;$r3$027 = $r3$1;$rcol$123 = $rcol$3;
        } else {
         $black_section$2$lcssa = $black_section$2;$l2$1$lcssa = $l2$1;$lcol$2$lcssa = $lcol$2;$r3$1$lcssa = $r3$1;$rcol$3$lcssa = $rcol$3;
         break;
        }
       }
       $87 = (($r3$1$lcssa) - ($l2$1$lcssa))|0;
       $88 = (($87) + 1)|0;
       $89 = ($black_section$2$lcssa|0)>(2);
       if ($89) {
        $$2 = 0;
        label = 41;
        break;
       } else {
        $102 = $88;$105 = $87;$black_section$0$lcssa69 = $black_section$2$lcssa;$lcol$1$lcssa68 = $lcol$2$lcssa;$rcol$1$lcssa70 = $rcol$3$lcssa;
       }
      }
      $101 = ($102*10)|0;
      $103 = $wmax$3 << 3;
      $104 = ($101|0)>($103|0);
      if (!($104)) {
       $$2 = 0;
       label = 41;
       break;
      }
      $106 = ($105|0)<($wmax$3|0);
      $wmax$3$ = $106 ? $wmax$3 : $102;
      $107 = ($black_section$0$lcssa69|0)==(2);
      $108 = (($rcol$1$lcssa70) - ($lcol$1$lcssa68))|0;
      $109 = ($108|0)>(1);
      $or$cond6 = $107 & $109;
      if ($or$cond6) {
       $$lcssa98 = $78;$lcol$1$lcssa68$lcssa = $lcol$1$lcssa68;$rcol$1$lcssa70$lcssa = $rcol$1$lcssa70;
       label = 38;
       break;
      } else {
       $lcol$0 = $lcol$1$lcssa68;$rcol$0 = $rcol$1$lcssa70;$row$1 = $78;$wmax$3 = $wmax$3$;
      }
     }
     if ((label|0) == 38) {
      $110 = (($lcol$1$lcssa68$lcssa) + 1)|0;
      $111 = (__ZNK6Bitmap13escape_bottomEii($this,$$lcssa98,$110)|0);
      if ($111) {
       $$2 = 0;
       return ($$2|0);
      }
      $112 = ($hdiff|0)==(0|0);
      if ($112) {
       $$2 = 1;
       return ($$2|0);
      }
      $113 = (__ZNK6Bitmap10follow_topEii($this,$$lcssa98,$lcol$1$lcssa68$lcssa)|0);
      $114 = (__ZNK6Bitmap10follow_topEii($this,$$lcssa98,$rcol$1$lcssa70$lcssa)|0);
      $115 = (($113) - ($114))|0;
      HEAP32[$hdiff>>2] = $115;
      $$2 = 1;
      return ($$2|0);
     }
     else if ((label|0) == 41) {
      return ($$2|0);
     }
     return (0)|0;
    }
    function __ZN4BlobC2ERKS_($this,$b) {
     $this = $this|0;
     $b = $b|0;
     var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$in = 0, $$in$lcssa = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
     var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
     var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
     var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     ;HEAP32[$this>>2]=HEAP32[$b>>2]|0;HEAP32[$this+4>>2]=HEAP32[$b+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$b+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$b+12>>2]|0;
     $0 = ((($this)) + 16|0);
     $1 = ((($b)) + 16|0);
     __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_($0,$1);
     $2 = ((($this)) + 28|0);
     $3 = ((($b)) + 28|0);
     __THREW__ = 0;
     invoke_vii(98,($2|0),($3|0));
     $4 = __THREW__; __THREW__ = 0;
     $5 = $4&1;
     if ($5) {
      $10 = ___cxa_find_matching_catch_2()|0;
      $11 = tempRet0;
      $$1 = $11;$$12 = $10;
     } else {
      $6 = ((($this)) + 32|0);
      $7 = HEAP32[$6>>2]|0;
      $8 = HEAP32[$2>>2]|0;
      $9 = ($7|0)==($8|0);
      if ($9) {
       return;
      }
      $$in = $8;$i$03 = 0;
      while(1) {
       __THREW__ = 0;
       $12 = (invoke_ii(29,28)|0);
       $13 = __THREW__; __THREW__ = 0;
       $14 = $13&1;
       if ($14) {
        $$in$lcssa = $$in;
        label = 9;
        break;
       }
       $15 = HEAP32[$3>>2]|0;
       $16 = (($15) + ($i$03<<2)|0);
       $17 = HEAP32[$16>>2]|0;
       ;HEAP32[$12>>2]=HEAP32[$17>>2]|0;HEAP32[$12+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$17+12>>2]|0;
       $18 = ((($12)) + 16|0);
       $19 = ((($17)) + 16|0);
       __THREW__ = 0;
       invoke_vii(62,($18|0),($19|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        $$lcssa = $12;
        label = 10;
        break;
       }
       $22 = HEAP32[$2>>2]|0;
       $23 = (($22) + ($i$03<<2)|0);
       HEAP32[$23>>2] = $12;
       $24 = (($i$03) + 1)|0;
       $25 = HEAP32[$6>>2]|0;
       $26 = HEAP32[$2>>2]|0;
       $27 = (($25) - ($26))|0;
       $28 = $27 >> 2;
       $29 = ($24>>>0)<($28>>>0);
       if ($29) {
        $$in = $26;$i$03 = $24;
       } else {
        label = 4;
        break;
       }
      }
      if ((label|0) == 4) {
       return;
      }
      else if ((label|0) == 9) {
       $30 = ___cxa_find_matching_catch_2()|0;
       $31 = tempRet0;
       $32 = $$in$lcssa;
       $$0 = $31;$$01 = $30;$35 = $32;
      }
      else if ((label|0) == 10) {
       $33 = ___cxa_find_matching_catch_2()|0;
       $34 = tempRet0;
       __ZdlPv($$lcssa);
       $$pre = HEAP32[$2>>2]|0;
       $$0 = $34;$$01 = $33;$35 = $$pre;
      }
      $36 = ($35|0)==(0|0);
      $37 = $35;
      if ($36) {
       $$1 = $$0;$$12 = $$01;
      } else {
       $38 = HEAP32[$6>>2]|0;
       $39 = ($38|0)==($35|0);
       if (!($39)) {
        $scevgep$i$i$i = ((($38)) + -4|0);
        $40 = $scevgep$i$i$i;
        $41 = (($40) - ($37))|0;
        $42 = $41 >>> 2;
        $43 = $42 ^ -1;
        $scevgep4$i$i$i = (($38) + ($43<<2)|0);
        HEAP32[$6>>2] = $scevgep4$i$i$i;
       }
       __ZdlPv($35);
       $$1 = $$0;$$12 = $$01;
      }
     }
     $44 = ((($this)) + 16|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)==(0|0);
     if ($46) {
      ___resumeException($$12|0);
      // unreachable;
     }
     $47 = ((($this)) + 20|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($45|0);
     if ($49) {
      $59 = $45;
     } else {
      $51 = $48;
      while(1) {
       $50 = ((($51)) + -12|0);
       HEAP32[$47>>2] = $50;
       $52 = HEAP32[$50>>2]|0;
       $53 = ($52|0)==(0|0);
       if ($53) {
        $54 = $50;
       } else {
        $56 = ((($51)) + -8|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($57|0)==($52|0);
        if (!($58)) {
         HEAP32[$56>>2] = $52;
        }
        __ZdlPv($52);
        $$pre$i$i$i$i = HEAP32[$47>>2]|0;
        $54 = $$pre$i$i$i$i;
       }
       $55 = ($54|0)==($45|0);
       if ($55) {
        break;
       } else {
        $51 = $54;
       }
      }
      $$pre$i$i = HEAP32[$44>>2]|0;
      $59 = $$pre$i$i;
     }
     __ZdlPv($59);
     ___resumeException($$12|0);
     // unreachable;
    }
    function __ZNSt3__16vectorIP6BitmapNS_9allocatorIS2_EEEC2ERKS5_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0;
     var sp = 0;
     sp = STACKTOP;
     HEAP32[$this>>2] = 0;
     $0 = ((($this)) + 4|0);
     HEAP32[$0>>2] = 0;
     $1 = ((($this)) + 8|0);
     HEAP32[$1>>2] = 0;
     $2 = ((($__x)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = HEAP32[$__x>>2]|0;
     $5 = (($3) - ($4))|0;
     $6 = $5 >> 2;
     $7 = ($6|0)==(0);
     if ($7) {
      return;
     }
     $8 = ($6>>>0)>(1073741823);
     if ($8) {
      __THREW__ = 0;
      invoke_vi(46,($this|0));
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if (!($10)) {
       label = 4;
      }
     } else {
      label = 4;
     }
     if ((label|0) == 4) {
      __THREW__ = 0;
      $11 = (invoke_ii(29,($5|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       HEAP32[$0>>2] = $11;
       HEAP32[$this>>2] = $11;
       $14 = (($11) + ($6<<2)|0);
       $15 = ((($this)) + 8|0);
       HEAP32[$15>>2] = $14;
       $16 = HEAP32[$__x>>2]|0;
       $17 = HEAP32[$2>>2]|0;
       $18 = ($16|0)==($17|0);
       if ($18) {
        return;
       }
       $$01$i = $16;$20 = $11;
       while(1) {
        $19 = HEAP32[$$01$i>>2]|0;
        HEAP32[$20>>2] = $19;
        $21 = HEAP32[$0>>2]|0;
        $22 = ((($21)) + 4|0);
        HEAP32[$0>>2] = $22;
        $23 = ((($$01$i)) + 4|0);
        $24 = ($23|0)==($17|0);
        if ($24) {
         break;
        } else {
         $$01$i = $23;$20 = $22;
        }
       }
       return;
      }
     }
     $25 = ___cxa_find_matching_catch_2()|0;
     $26 = tempRet0;
     $27 = HEAP32[$this>>2]|0;
     $28 = ($27|0)==(0|0);
     $29 = $27;
     if ($28) {
      ___resumeException($25|0);
      // unreachable;
     }
     $30 = HEAP32[$0>>2]|0;
     $31 = ($30|0)==($27|0);
     if (!($31)) {
      $scevgep$i$i$i = ((($30)) + -4|0);
      $32 = $scevgep$i$i$i;
      $33 = (($32) - ($29))|0;
      $34 = $33 >>> 2;
      $35 = $34 ^ -1;
      $scevgep4$i$i$i = (($30) + ($35<<2)|0);
      HEAP32[$0>>2] = $scevgep4$i$i$i;
     }
     __ZdlPv($27);
     ___resumeException($25|0);
     // unreachable;
    }
    function __ZN4BlobD2Ev($this) {
     $this = $this|0;
     var $$cast = 0, $$cast23 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i$i15 = 0, $$pre$i$i$i$i5 = 0, $$pre$i$i18 = 0, $$pre$i$i8 = 0, $$pre24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
     var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
     var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
     var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $i$022 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 28|0);
     $1 = ((($this)) + 32|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$0>>2]|0;
     $4 = ($2|0)==($3|0);
     $$cast = $3;
     $5 = $2;
     if ($4) {
      $$lcssa = $$cast;$8 = $5;
     } else {
      $15 = $$cast;$57 = $5;$58 = $3;$59 = $2;$i$022 = 0;
      while(1) {
       $14 = (($15) + ($i$022<<2)|0);
       $16 = HEAP32[$14>>2]|0;
       $17 = ($16|0)==(0|0);
       if ($17) {
        $37 = $58;$38 = $59;$60 = $57;
       } else {
        $18 = ((($16)) + 16|0);
        $19 = HEAP32[$18>>2]|0;
        $20 = ($19|0)==(0|0);
        if (!($20)) {
         $21 = ((($16)) + 20|0);
         $22 = HEAP32[$21>>2]|0;
         $23 = ($22|0)==($19|0);
         if ($23) {
          $33 = $19;
         } else {
          $25 = $22;
          while(1) {
           $24 = ((($25)) + -12|0);
           HEAP32[$21>>2] = $24;
           $26 = HEAP32[$24>>2]|0;
           $27 = ($26|0)==(0|0);
           if ($27) {
            $28 = $24;
           } else {
            $30 = ((($25)) + -8|0);
            $31 = HEAP32[$30>>2]|0;
            $32 = ($31|0)==($26|0);
            if (!($32)) {
             HEAP32[$30>>2] = $26;
            }
            __ZdlPv($26);
            $$pre$i$i$i$i5 = HEAP32[$21>>2]|0;
            $28 = $$pre$i$i$i$i5;
           }
           $29 = ($28|0)==($19|0);
           if ($29) {
            break;
           } else {
            $25 = $28;
           }
          }
          $$pre$i$i8 = HEAP32[$18>>2]|0;
          $33 = $$pre$i$i8;
         }
         __ZdlPv($33);
        }
        __ZdlPv($16);
        $$pre = HEAP32[$1>>2]|0;
        $$pre24 = HEAP32[$0>>2]|0;
        $34 = $$pre;
        $37 = $$pre24;$38 = $$pre;$60 = $34;
       }
       $35 = (($i$022) + 1)|0;
       $36 = (($38) - ($37))|0;
       $39 = $36 >> 2;
       $40 = ($35>>>0)<($39>>>0);
       $$cast23 = $37;
       if ($40) {
        $15 = $$cast23;$57 = $60;$58 = $37;$59 = $38;$i$022 = $35;
       } else {
        $$lcssa = $$cast23;$8 = $60;
        break;
       }
      }
     }
     $6 = ($$lcssa|0)==(0|0);
     $7 = $$lcssa;
     if (!($6)) {
      $9 = ($8|0)==($$lcssa|0);
      if (!($9)) {
       $scevgep$i$i$i = ((($8)) + -4|0);
       $10 = $scevgep$i$i$i;
       $11 = (($10) - ($7))|0;
       $12 = $11 >>> 2;
       $13 = $12 ^ -1;
       $scevgep4$i$i$i = (($8) + ($13<<2)|0);
       HEAP32[$1>>2] = $scevgep4$i$i$i;
      }
      __ZdlPv($$lcssa);
     }
     $41 = ((($this)) + 16|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      return;
     }
     $44 = ((($this)) + 20|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)==($42|0);
     if ($46) {
      $56 = $42;
     } else {
      $48 = $45;
      while(1) {
       $47 = ((($48)) + -12|0);
       HEAP32[$44>>2] = $47;
       $49 = HEAP32[$47>>2]|0;
       $50 = ($49|0)==(0|0);
       if ($50) {
        $51 = $47;
       } else {
        $53 = ((($48)) + -8|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==($49|0);
        if (!($55)) {
         HEAP32[$53>>2] = $49;
        }
        __ZdlPv($49);
        $$pre$i$i$i$i15 = HEAP32[$44>>2]|0;
        $51 = $$pre$i$i$i$i15;
       }
       $52 = ($51|0)==($42|0);
       if ($52) {
        break;
       } else {
        $48 = $51;
       }
      }
      $$pre$i$i18 = HEAP32[$41>>2]|0;
      $56 = $$pre$i$i18;
     }
     __ZdlPv($56);
     return;
    }
    function __ZN4Blob4leftEi($this,$l) {
     $this = $this|0;
     $l = $l|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = ($0|0)==($l|0);
     if ($1) {
      return;
     }
     __ZN6Bitmap4leftEi($this,$l);
     $2 = ($0|0)<($l|0);
     if (!($2)) {
      return;
     }
     $3 = ((($this)) + 28|0);
     __ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($this,$3);
     return;
    }
    function __ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($re,$holepv) {
     $re = $re|0;
     $holepv = $holepv|0;
     var $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
     var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $i$04 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($holepv)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$holepv>>2]|0;
     $3 = (($1) - ($2))|0;
     $4 = $3 >> 2;
     $5 = ($4|0)==(0);
     if ($5) {
      return;
     }
     $6 = $2;
     $9 = $6;$i$04 = $4;
     while(1) {
      $7 = (($i$04) + -1)|0;
      $8 = (($9) + ($7<<2)|0);
      $10 = HEAP32[$8>>2]|0;
      $11 = (__ZNK9Rectangle17strictly_includesERKS_($re,$10)|0);
      if (!($11)) {
       $13 = ($10|0)==(0|0);
       if (!($13)) {
        $14 = ((($10)) + 16|0);
        $15 = HEAP32[$14>>2]|0;
        $16 = ($15|0)==(0|0);
        if (!($16)) {
         $17 = ((($10)) + 20|0);
         $18 = HEAP32[$17>>2]|0;
         $19 = ($18|0)==($15|0);
         if ($19) {
          $29 = $15;
         } else {
          $21 = $18;
          while(1) {
           $20 = ((($21)) + -12|0);
           HEAP32[$17>>2] = $20;
           $22 = HEAP32[$20>>2]|0;
           $23 = ($22|0)==(0|0);
           if ($23) {
            $24 = $20;
           } else {
            $26 = ((($21)) + -8|0);
            $27 = HEAP32[$26>>2]|0;
            $28 = ($27|0)==($22|0);
            if (!($28)) {
             HEAP32[$26>>2] = $22;
            }
            __ZdlPv($22);
            $$pre$i$i$i$i = HEAP32[$17>>2]|0;
            $24 = $$pre$i$i$i$i;
           }
           $25 = ($24|0)==($15|0);
           if ($25) {
            break;
           } else {
            $21 = $24;
           }
          }
          $$pre$i$i = HEAP32[$14>>2]|0;
          $29 = $$pre$i$i;
         }
         __ZdlPv($29);
        }
        __ZdlPv($10);
       }
       $30 = HEAP32[$holepv>>2]|0;
       $31 = (($30) + ($7<<2)|0);
       $32 = ((($31)) + 4|0);
       $33 = HEAP32[$0>>2]|0;
       $34 = $32;
       $35 = (($33) - ($34))|0;
       $36 = $35 >> 2;
       _memmove(($31|0),($32|0),($35|0))|0;
       $37 = (($31) + ($36<<2)|0);
       $38 = HEAP32[$0>>2]|0;
       $39 = ($38|0)==($37|0);
       if (!($39)) {
        $__new_last2$i$i$i = $37;
        $scevgep$i$i$i = ((($38)) + -4|0);
        $40 = $scevgep$i$i$i;
        $41 = (($40) - ($__new_last2$i$i$i))|0;
        $42 = $41 >>> 2;
        $43 = $42 ^ -1;
        $scevgep4$i$i$i = (($38) + ($43<<2)|0);
        HEAP32[$0>>2] = $scevgep4$i$i$i;
       }
      }
      $12 = ($7|0)==(0);
      if ($12) {
       break;
      }
      $$pre = HEAP32[$holepv>>2]|0;
      $9 = $$pre;$i$04 = $7;
     }
     return;
    }
    function __ZN4Blob3topEi($this,$t) {
     $this = $this|0;
     $t = $t|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ($1|0)==($t|0);
     if ($2) {
      return;
     }
     __ZN6Bitmap3topEi($this,$t);
     $3 = ($1|0)<($t|0);
     if (!($3)) {
      return;
     }
     $4 = ((($this)) + 28|0);
     __ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($this,$4);
     return;
    }
    function __ZN4Blob5rightEi($this,$r) {
     $this = $this|0;
     $r = $r|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 8|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ($1|0)==($r|0);
     if ($2) {
      return;
     }
     __ZN6Bitmap5rightEi($this,$r);
     $3 = ($1|0)>($r|0);
     if (!($3)) {
      return;
     }
     $4 = ((($this)) + 28|0);
     __ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($this,$4);
     return;
    }
    function __ZN4Blob6bottomEi($this,$b) {
     $this = $this|0;
     $b = $b|0;
     var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ($1|0)==($b|0);
     if ($2) {
      return;
     }
     __ZN6Bitmap6bottomEi($this,$b);
     $3 = ($1|0)>($b|0);
     if (!($3)) {
      return;
     }
     $4 = ((($this)) + 28|0);
     __ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($this,$4);
     return;
    }
    function __ZNK4Blob4holeEi($this,$i) {
     $this = $this|0;
     $i = $i|0;
     var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($i|0)<(0);
     if (!($0)) {
      $1 = ((($this)) + 28|0);
      $2 = ((($this)) + 32|0);
      $3 = HEAP32[$2>>2]|0;
      $4 = HEAP32[$1>>2]|0;
      $5 = (($3) - ($4))|0;
      $6 = $5 >> 2;
      $7 = ($6|0)>($i|0);
      if ($7) {
       $8 = $4;
       $10 = $8;
       $9 = (($10) + ($i<<2)|0);
       $11 = HEAP32[$9>>2]|0;
       return ($11|0);
      }
     }
     __ZN5Ocrad14internal_errorEPKc(2203);
     $$phi$trans$insert = ((($this)) + 28|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $10 = $$pre;
     $9 = (($10) + ($i<<2)|0);
     $11 = HEAP32[$9>>2]|0;
     return ($11|0);
    }
    function __ZNK4Blob2idEii($this,$row,$col) {
     $this = $this|0;
     $row = $row|0;
     $col = $col|0;
     var $$1 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
     var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
     var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = (__ZNK9Rectangle8includesEii($this,$row,$col)|0);
     if (!($0)) {
      $$1 = 0;
      return ($$1|0);
     }
     $1 = ((($this)) + 4|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = (($row) - ($2))|0;
     $4 = ((($this)) + 16|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = HEAP32[$this>>2]|0;
     $7 = (($col) - ($6))|0;
     $8 = (($5) + (($3*12)|0)|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (($9) + ($7)|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(0);
     if (!($12)) {
      $$1 = 1;
      return ($$1|0);
     }
     $13 = ((($this)) + 28|0);
     $14 = ((($this)) + 32|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = HEAP32[$13>>2]|0;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)>(0);
     if (!($18)) {
      $$1 = 0;
      return ($$1|0);
     }
     $$in = $16;$i$03 = 0;
     while(1) {
      $19 = $$in;
      $20 = (($19) + ($i$03<<2)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (__ZNK9Rectangle8includesEii($21,$row,$col)|0);
      if ($22) {
       $23 = HEAP32[$13>>2]|0;
       $24 = (($23) + ($i$03<<2)|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ((($25)) + 4|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($row) - ($27))|0;
       $29 = ((($25)) + 16|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = HEAP32[$25>>2]|0;
       $32 = (($col) - ($31))|0;
       $33 = (($30) + (($28*12)|0)|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + ($32)|0);
       $36 = HEAP8[$35>>0]|0;
       $37 = ($36<<24>>24)==(0);
       $38 = $23;
       if ($37) {
        $42 = $38;
       } else {
        $i$03$lcssa = $i$03;
        break;
       }
      } else {
       $$pre = HEAP32[$13>>2]|0;
       $42 = $$pre;
      }
      $39 = (($i$03) + 1)|0;
      $40 = HEAP32[$14>>2]|0;
      $41 = (($40) - ($42))|0;
      $43 = $41 >> 2;
      $44 = ($39|0)<($43|0);
      if ($44) {
       $$in = $42;$i$03 = $39;
      } else {
       $$1 = 0;
       label = 10;
       break;
      }
     }
     if ((label|0) == 10) {
      return ($$1|0);
     }
     $45 = $i$03$lcssa ^ -1;
     $$1 = $45;
     return ($$1|0);
    }
    function __ZNK4Blob7test_BDEv($this) {
     $this = $this|0;
     var $$pre = 0, $$pre14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
     var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
     var $7 = 0, $8 = 0, $9 = 0, $i$0516 = 0, $i1$02 = 0, $lb$0 = 0, $lb$015 = 0, $rt$0 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) + 1)|0;
     $5 = (($4) - ($3))|0;
     $6 = ((($this)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = HEAP32[$this>>2]|0;
     $9 = (($7) + 1)|0;
     $10 = (($9) - ($8))|0;
     $11 = ($10|0)<($5|0);
     $12 = $11 ? $10 : $5;
     $13 = (($12|0) / 2)&-1;
     $14 = ($12|0)>(1);
     L1: do {
      if ($14) {
       $15 = (__ZNK4Blob2idEii($this,$1,$8)|0);
       $16 = ($15|0)==(0);
       L3: do {
        if ($16) {
         $i$0516 = 0;
         while(1) {
          $17 = HEAP32[$0>>2]|0;
          $18 = (($17) - ($i$0516))|0;
          $19 = HEAP32[$this>>2]|0;
          $20 = (($i$0516) + 1)|0;
          $21 = (($20) + ($19))|0;
          $22 = (__ZNK4Blob2idEii($this,$18,$21)|0);
          $23 = ($22|0)==(0);
          if (!($23)) {
           $lb$0 = $i$0516;
           break L3;
          }
          $24 = ($20|0)<($13|0);
          if (!($24)) {
           $lb$0 = $13;
           break L3;
          }
          $$pre = HEAP32[$0>>2]|0;
          $$pre14 = HEAP32[$this>>2]|0;
          $25 = (($$pre) - ($20))|0;
          $26 = (($$pre14) + ($20))|0;
          $27 = (__ZNK4Blob2idEii($this,$25,$26)|0);
          $28 = ($27|0)==(0);
          if ($28) {
           $i$0516 = $20;
          } else {
           $lb$0 = $20;
           break;
          }
         }
        } else {
         $lb$0 = 0;
        }
       } while(0);
       if ($14) {
        $i1$02 = 0;
        while(1) {
         $29 = HEAP32[$2>>2]|0;
         $30 = (($29) + ($i1$02))|0;
         $31 = HEAP32[$6>>2]|0;
         $32 = (($31) - ($i1$02))|0;
         $33 = (__ZNK4Blob2idEii($this,$30,$32)|0);
         $34 = ($33|0)==(0);
         if (!($34)) {
          $lb$015 = $lb$0;$rt$0 = $i1$02;
          break L1;
         }
         $35 = (($i1$02) + 1)|0;
         $36 = ($35|0)<($13|0);
         if ($36) {
          $i1$02 = $35;
         } else {
          $lb$015 = $lb$0;$rt$0 = $13;
          break;
         }
        }
       } else {
        $lb$015 = $lb$0;$rt$0 = $13;
       }
      } else {
       $lb$015 = $13;$rt$0 = $13;
      }
     } while(0);
     $37 = ($rt$0|0)>(1);
     $38 = ($lb$015*3)|0;
     $39 = ($38|0)<=($rt$0|0);
     $40 = $37 & $39;
     return ($40|0);
    }
    function __ZNK4Blob6test_QEv($this) {
     $this = $this|0;
     var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
     var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $disp$017 = 0, $disp$017$us = 0, $i$0$ltimin$1$us = 0, $i$0$rbimin$1$us = 0;
     var $i$08$us = 0, $ltimin$0$lcssa = 0, $ltimin$015$us = 0, $ltimin$14$us = 0, $ltimin$2$us = 0, $ltimin$2$us$lcssa = 0, $ltimin$2$us$lcssa$lcssa = 0, $ltw$0$ltwmax$0$us = 0, $ltw$0$ltwmax$0$us$lcssa = 0, $ltw$06$us = 0, $ltw$1$us = 0, $ltw$1$us$lcssa = 0, $ltwmax$0$lcssa = 0, $ltwmax$013$us = 0, $or$cond = 0, $phitmp = 0, $rbimin$0$lcssa = 0, $rbimin$016$us = 0, $rbimin$15$us = 0, $rbimin$2$us = 0;
     var $rbimin$2$us$lcssa = 0, $rbimin$2$us$lcssa$lcssa = 0, $rbw$07$us = 0, $rbw$1$us = 0, $rbw$1$us$lcssa = 0, $rbwmax$0$lcssa = 0, $rbwmax$014$us = 0, $rbwmax$1$us = 0, $rbwmax$1$us$lcssa = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 12|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 4|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) + 1)|0;
     $5 = (($4) - ($3))|0;
     $6 = ((($this)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = HEAP32[$this>>2]|0;
     $9 = (($7) + 1)|0;
     $10 = (($9) - ($8))|0;
     $11 = ($10|0)<($5|0);
     $12 = $11 ? $10 : $5;
     $13 = (($12|0) / 2)&-1;
     $14 = ($10|0)>(3);
     L1: do {
      if ($14) {
       $15 = ($12|0)>(1);
       if ($15) {
        $54 = $8;$disp$017$us = 0;$ltimin$015$us = $13;$ltwmax$013$us = 0;$rbimin$016$us = $13;$rbwmax$014$us = 0;
       } else {
        $16 = (($10|0) / 4)&-1;
        $disp$017 = 0;
        while(1) {
         $47 = (($disp$017) + 1)|0;
         $48 = ($47|0)<($16|0);
         if ($48) {
          $disp$017 = $47;
         } else {
          $ltimin$0$lcssa = $13;$ltwmax$0$lcssa = 0;$rbimin$0$lcssa = $13;$rbwmax$0$lcssa = 0;
          break L1;
         }
        }
       }
       while(1) {
        $21 = $54;$i$08$us = 0;$ltimin$14$us = $ltimin$015$us;$ltw$06$us = 0;$rbimin$15$us = $rbimin$016$us;$rbw$07$us = 0;
        while(1) {
         $17 = HEAP32[$2>>2]|0;
         $18 = (($17) + ($i$08$us))|0;
         $19 = (($i$08$us) + ($disp$017$us))|0;
         $20 = (($19) + ($21))|0;
         $22 = (__ZNK4Blob2idEii($this,$18,$20)|0);
         $23 = ($22|0)==(1);
         if ($23) {
          $24 = (($ltw$06$us) + 1)|0;
          $25 = ($ltimin$14$us|0)>($i$08$us|0);
          $i$0$ltimin$1$us = $25 ? $i$08$us : $ltimin$14$us;
          $ltimin$2$us = $i$0$ltimin$1$us;$ltw$1$us = $24;
         } else {
          $ltimin$2$us = $ltimin$14$us;$ltw$1$us = $ltw$06$us;
         }
         $26 = HEAP32[$0>>2]|0;
         $27 = (($26) - ($i$08$us))|0;
         $28 = HEAP32[$6>>2]|0;
         $29 = (($28) - ($19))|0;
         $30 = (__ZNK4Blob2idEii($this,$27,$29)|0);
         $31 = ($30|0)==(1);
         if ($31) {
          $32 = (($rbw$07$us) + 1)|0;
          $33 = ($rbimin$15$us|0)>($i$08$us|0);
          $i$0$rbimin$1$us = $33 ? $i$08$us : $rbimin$15$us;
          $rbimin$2$us = $i$0$rbimin$1$us;$rbw$1$us = $32;
         } else {
          $rbimin$2$us = $rbimin$15$us;$rbw$1$us = $rbw$07$us;
         }
         $34 = (($i$08$us) + 1)|0;
         $35 = ($34|0)<($13|0);
         if (!($35)) {
          $ltimin$2$us$lcssa = $ltimin$2$us;$ltw$1$us$lcssa = $ltw$1$us;$rbimin$2$us$lcssa = $rbimin$2$us;$rbw$1$us$lcssa = $rbw$1$us;
          break;
         }
         $$pre = HEAP32[$this>>2]|0;
         $21 = $$pre;$i$08$us = $34;$ltimin$14$us = $ltimin$2$us;$ltw$06$us = $ltw$1$us;$rbimin$15$us = $rbimin$2$us;$rbw$07$us = $rbw$1$us;
        }
        $36 = ($ltwmax$013$us|0)<($ltw$1$us$lcssa|0);
        $ltw$0$ltwmax$0$us = $36 ? $ltw$1$us$lcssa : $ltwmax$013$us;
        $37 = ($rbwmax$014$us|0)<($rbw$1$us$lcssa|0);
        $rbwmax$1$us = $37 ? $rbw$1$us$lcssa : $rbwmax$014$us;
        $38 = (($disp$017$us) + 1)|0;
        $39 = HEAP32[$6>>2]|0;
        $40 = HEAP32[$this>>2]|0;
        $41 = (($39) + 1)|0;
        $42 = (($41) - ($40))|0;
        $43 = (($42|0) / 4)&-1;
        $44 = ($38|0)<($43|0);
        if ($44) {
         $54 = $40;$disp$017$us = $38;$ltimin$015$us = $ltimin$2$us$lcssa;$ltwmax$013$us = $ltw$0$ltwmax$0$us;$rbimin$016$us = $rbimin$2$us$lcssa;$rbwmax$014$us = $rbwmax$1$us;
        } else {
         $ltimin$2$us$lcssa$lcssa = $ltimin$2$us$lcssa;$ltw$0$ltwmax$0$us$lcssa = $ltw$0$ltwmax$0$us;$rbimin$2$us$lcssa$lcssa = $rbimin$2$us$lcssa;$rbwmax$1$us$lcssa = $rbwmax$1$us;
         break;
        }
       }
       $phitmp = $ltw$0$ltwmax$0$us$lcssa << 1;
       $ltimin$0$lcssa = $ltimin$2$us$lcssa$lcssa;$ltwmax$0$lcssa = $phitmp;$rbimin$0$lcssa = $rbimin$2$us$lcssa$lcssa;$rbwmax$0$lcssa = $rbwmax$1$us$lcssa;
      } else {
       $ltimin$0$lcssa = $13;$ltwmax$0$lcssa = 0;$rbimin$0$lcssa = $13;$rbwmax$0$lcssa = 0;
      }
     } while(0);
     $45 = ($ltimin$0$lcssa|0)>($rbimin$0$lcssa|0);
     $46 = ($rbimin$0$lcssa|0)==(0);
     $or$cond = $45 | $46;
     if (!($or$cond)) {
      $53 = 0;
      return ($53|0);
     }
     $49 = ($ltwmax$0$lcssa|0)<($rbwmax$0$lcssa|0);
     if ($49) {
      $53 = 1;
      return ($53|0);
     }
     $50 = ($ltwmax$0$lcssa|0)==($rbwmax$0$lcssa|0);
     $51 = ($rbwmax$0$lcssa|0)>(3);
     $52 = $50 & $51;
     $53 = $52;
     return ($53|0);
    }
    function __ZNK4Blob5printEP8_IO_FILE($this,$outfile) {
     $this = $this|0;
     $outfile = $outfile|0;
     var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$04 = 0, $row$05 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 12|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = ($1|0)>($3|0);
     if ($4) {
      (_fputc(10,$outfile)|0);
      return;
     }
     $5 = ((($this)) + 8|0);
     $6 = ((($this)) + 16|0);
     $row$05 = $1;
     while(1) {
      $7 = HEAP32[$this>>2]|0;
      $8 = HEAP32[$5>>2]|0;
      $9 = ($7|0)>($8|0);
      L6: do {
       if (!($9)) {
        $17 = $7;$col$04 = $7;
        while(1) {
         $13 = HEAP32[$0>>2]|0;
         $14 = (($row$05) - ($13))|0;
         $15 = HEAP32[$6>>2]|0;
         $16 = (($col$04) - ($17))|0;
         $18 = (($15) + (($14*12)|0)|0);
         $19 = HEAP32[$18>>2]|0;
         $20 = (($19) + ($16)|0);
         $21 = HEAP8[$20>>0]|0;
         $22 = ($21<<24>>24)==(0);
         if ($22) {
          (_fwrite(2233,2,1,$outfile)|0);
         } else {
          (_fwrite(2230,2,1,$outfile)|0);
         }
         $23 = HEAP32[$5>>2]|0;
         $24 = ($col$04|0)<($23|0);
         if (!($24)) {
          break L6;
         }
         $25 = (($col$04) + 1)|0;
         $$pre = HEAP32[$this>>2]|0;
         $17 = $$pre;$col$04 = $25;
        }
       }
      } while(0);
      (_fputc(10,$outfile)|0);
      $10 = (($row$05) + 1)|0;
      $11 = HEAP32[$2>>2]|0;
      $12 = ($row$05|0)<($11|0);
      if ($12) {
       $row$05 = $10;
      } else {
       break;
      }
     }
     (_fputc(10,$outfile)|0);
     return;
    }
    function __ZN4Blob9fill_holeEi($this,$i) {
     $this = $this|0;
     $i = $i|0;
     var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
     var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
     var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($i|0)<(0);
     if ($0) {
      label = 4;
     } else {
      $1 = ((($this)) + 28|0);
      $2 = ((($this)) + 32|0);
      $3 = HEAP32[$2>>2]|0;
      $4 = HEAP32[$1>>2]|0;
      $5 = (($3) - ($4))|0;
      $6 = $5 >> 2;
      $7 = ($6|0)>($i|0);
      if ($7) {
       $8 = $4;
       $$pre5 = ((($this)) + 28|0);
       $$pre$phiZ2D = $$pre5;$10 = $8;
      } else {
       label = 4;
      }
     }
     if ((label|0) == 4) {
      __ZN5Ocrad14internal_errorEPKc(2236);
      $$phi$trans$insert = ((($this)) + 28|0);
      $$pre = HEAP32[$$phi$trans$insert>>2]|0;
      $$pre$phiZ2D = $$phi$trans$insert;$10 = $$pre;
     }
     $9 = (($10) + ($i<<2)|0);
     $11 = HEAP32[$9>>2]|0;
     __ZN6Bitmap10add_bitmapERKS_($this,$11);
     $12 = HEAP32[$$pre$phiZ2D>>2]|0;
     $13 = (($12) + ($i<<2)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0|0);
     if ($15) {
      $33 = $12;
     } else {
      $16 = ((($14)) + 16|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($17|0)==(0|0);
      if (!($18)) {
       $19 = ((($14)) + 20|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = ($20|0)==($17|0);
       if ($21) {
        $31 = $17;
       } else {
        $23 = $20;
        while(1) {
         $22 = ((($23)) + -12|0);
         HEAP32[$19>>2] = $22;
         $24 = HEAP32[$22>>2]|0;
         $25 = ($24|0)==(0|0);
         if ($25) {
          $26 = $22;
         } else {
          $28 = ((($23)) + -8|0);
          $29 = HEAP32[$28>>2]|0;
          $30 = ($29|0)==($24|0);
          if (!($30)) {
           HEAP32[$28>>2] = $24;
          }
          __ZdlPv($24);
          $$pre$i$i$i$i = HEAP32[$19>>2]|0;
          $26 = $$pre$i$i$i$i;
         }
         $27 = ($26|0)==($17|0);
         if ($27) {
          break;
         } else {
          $23 = $26;
         }
        }
        $$pre$i$i = HEAP32[$16>>2]|0;
        $31 = $$pre$i$i;
       }
       __ZdlPv($31);
      }
      __ZdlPv($14);
      $$pre4 = HEAP32[$$pre$phiZ2D>>2]|0;
      $33 = $$pre4;
     }
     $32 = (($33) + ($i<<2)|0);
     $34 = ((($32)) + 4|0);
     $35 = ((($this)) + 32|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $34;
     $38 = (($36) - ($37))|0;
     $39 = $38 >> 2;
     _memmove(($32|0),($34|0),($38|0))|0;
     $40 = (($32) + ($39<<2)|0);
     $41 = HEAP32[$35>>2]|0;
     $42 = ($41|0)==($40|0);
     if ($42) {
      return;
     }
     $__new_last2$i$i$i = $40;
     $scevgep$i$i$i = ((($41)) + -4|0);
     $43 = $scevgep$i$i$i;
     $44 = (($43) - ($__new_last2$i$i$i))|0;
     $45 = $44 >>> 2;
     $46 = $45 ^ -1;
     $scevgep4$i$i$i = (($41) + ($46<<2)|0);
     HEAP32[$35>>2] = $scevgep4$i$i$i;
     return;
    }
    function __ZN4Blob10find_holesEv($this) {
     $this = $this|0;
     var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i47 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$cast = 0, $$cast$i = 0, $$cast$lcssa = 0, $$cast100 = 0, $$cast98 = 0, $$lcssa = 0, $$lcssa154 = 0, $$lcssa155 = 0, $$lcssa156 = 0, $$lcssa80 = 0, $$lcssa88 = 0, $$pre = 0;
     var $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i$i = 0, $$pre$i$i$i$i39 = 0, $$pre$i$i42 = 0, $$pre117 = 0, $$pre118 = 0, $$pre119 = 0, $$pre121 = 0, $$pre122 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $$pre127 = 0, $$pre128 = 0, $$pre20$i = 0, $$sroa$010$0$i = 0;
     var $$sroa$09$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
     var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
     var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
     var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
     var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
     var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
     var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
     var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
     var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
     var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
     var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
     var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
     var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
     var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
     var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
     var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
     var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
     var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
     var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
     var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
     var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i$i = 0, $__new_last2$i$i$i32 = 0, $col$0 = 0, $col$091 = 0, $col$092 = 0, $i$099 = 0, $i2$090 = 0, $lpad$phi$index = 0;
     var $lpad$phi$index3 = 0, $new_data = 0, $new_data$idx$val = 0, $old_data = 0, $old_data$idx$val = 0, $old_data$idx11$val = 0, $old_data$idx13$val = 0, $old_data$idx15$val = 0, $old_data$idx16$val = 0, $old_data$idx17$val = 0, $or$cond = 0, $or$cond10 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond69 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond9 = 0, $p = 0, $row$094 = 0;
     var $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i48 = 0, $scevgep$i$i$i$i59 = 0, $scevgep$i$i$i18 = 0, $scevgep$i$i$i22 = 0, $scevgep$i$i$i27 = 0, $scevgep$i$i$i33 = 0, $scevgep$i$i$i54 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i49 = 0, $scevgep4$i$i$i$i60 = 0, $scevgep4$i$i$i19 = 0, $scevgep4$i$i$i23 = 0, $scevgep4$i$i$i28 = 0, $scevgep4$i$i$i34 = 0, $scevgep4$i$i$i55 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $old_data = sp + 16|0;
     $new_data = sp + 4|0;
     $p = sp;
     $0 = ((($this)) + 28|0);
     $1 = ((($this)) + 32|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$0>>2]|0;
     $4 = ($2|0)==($3|0);
     $$cast98 = $3;
     $5 = $2;
     if ($4) {
      $$cast$lcssa = $$cast98;$$lcssa88 = $2;$6 = $5;
     } else {
      $$cast100 = $$cast98;$405 = $5;$406 = $3;$407 = $2;$i$099 = 0;
      while(1) {
       $19 = (($$cast100) + ($i$099<<2)|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = ($20|0)==(0|0);
       if ($21) {
        $408 = $405;$41 = $406;$42 = $407;
       } else {
        $22 = ((($20)) + 16|0);
        $23 = HEAP32[$22>>2]|0;
        $24 = ($23|0)==(0|0);
        if (!($24)) {
         $25 = ((($20)) + 20|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($26|0)==($23|0);
         if ($27) {
          $37 = $23;
         } else {
          $29 = $26;
          while(1) {
           $28 = ((($29)) + -12|0);
           HEAP32[$25>>2] = $28;
           $30 = HEAP32[$28>>2]|0;
           $31 = ($30|0)==(0|0);
           if ($31) {
            $32 = $28;
           } else {
            $34 = ((($29)) + -8|0);
            $35 = HEAP32[$34>>2]|0;
            $36 = ($35|0)==($30|0);
            if (!($36)) {
             HEAP32[$34>>2] = $30;
            }
            __ZdlPv($30);
            $$pre$i$i$i$i39 = HEAP32[$25>>2]|0;
            $32 = $$pre$i$i$i$i39;
           }
           $33 = ($32|0)==($23|0);
           if ($33) {
            break;
           } else {
            $29 = $32;
           }
          }
          $$pre$i$i42 = HEAP32[$22>>2]|0;
          $37 = $$pre$i$i42;
         }
         __ZdlPv($37);
        }
        __ZdlPv($20);
        $$pre = HEAP32[$1>>2]|0;
        $$pre117 = HEAP32[$0>>2]|0;
        $38 = $$pre;
        $408 = $38;$41 = $$pre117;$42 = $$pre;
       }
       $39 = (($i$099) + 1)|0;
       $40 = (($42) - ($41))|0;
       $43 = $40 >> 2;
       $44 = ($39>>>0)<($43>>>0);
       $$cast = $41;
       if ($44) {
        $$cast100 = $$cast;$405 = $408;$406 = $41;$407 = $42;$i$099 = $39;
       } else {
        $$cast$lcssa = $$cast;$$lcssa88 = $41;$6 = $408;
        break;
       }
      }
     }
     $7 = ($6|0)==($$cast$lcssa|0);
     if (!($7)) {
      $scevgep$i$i$i18 = ((($6)) + -4|0);
      $8 = $scevgep$i$i$i18;
      $9 = (($8) - ($$lcssa88))|0;
      $10 = $9 >>> 2;
      $11 = $10 ^ -1;
      $scevgep4$i$i$i19 = (($6) + ($11<<2)|0);
      HEAP32[$1>>2] = $scevgep4$i$i$i19;
     }
     $12 = ((($this)) + 12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($this)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 1)|0;
     $17 = (($16) - ($15))|0;
     $18 = ($17|0)<(3);
     if ($18) {
      STACKTOP = sp;return;
     }
     $45 = ((($this)) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = HEAP32[$this>>2]|0;
     $48 = (($46) + 1)|0;
     $49 = (($48) - ($47))|0;
     $50 = ($49|0)<(3);
     if ($50) {
      STACKTOP = sp;return;
     }
     HEAP32[$old_data>>2] = 0;
     $51 = ((($old_data)) + 4|0);
     HEAP32[$51>>2] = 0;
     $52 = ((($old_data)) + 8|0);
     HEAP32[$52>>2] = 0;
     $53 = ($48|0)==($47|0);
     do {
      if ($53) {
       $80 = $46;$82 = $47;
      } else {
       $54 = ($49>>>0)>(1073741823);
       if ($54) {
        __THREW__ = 0;
        invoke_vi(46,($old_data|0));
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if (!($56)) {
         label = 21;
        }
       } else {
        label = 21;
       }
       if ((label|0) == 21) {
        $57 = $49 << 2;
        __THREW__ = 0;
        $58 = (invoke_ii(29,($57|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if (!($60)) {
         HEAP32[$51>>2] = $58;
         HEAP32[$old_data>>2] = $58;
         $61 = (($58) + ($49<<2)|0);
         $62 = ((($old_data)) + 8|0);
         HEAP32[$62>>2] = $61;
         $$0$i$i = $49;$63 = $58;
         while(1) {
          HEAP32[$63>>2] = 0;
          $64 = HEAP32[$51>>2]|0;
          $65 = ((($64)) + 4|0);
          HEAP32[$51>>2] = $65;
          $66 = (($$0$i$i) + -1)|0;
          $67 = ($66|0)==(0);
          if ($67) {
           break;
          } else {
           $$0$i$i = $66;$63 = $65;
          }
         }
         $$pre118 = HEAP32[$45>>2]|0;
         $$pre119 = HEAP32[$this>>2]|0;
         $80 = $$pre118;$82 = $$pre119;
         break;
        }
       }
       $68 = ___cxa_find_matching_catch_2()|0;
       $69 = tempRet0;
       $70 = HEAP32[$old_data>>2]|0;
       $71 = ($70|0)==(0|0);
       $72 = $70;
       if ($71) {
        ___resumeException($68|0);
        // unreachable;
       }
       $73 = HEAP32[$51>>2]|0;
       $74 = ($73|0)==($70|0);
       if (!($74)) {
        $scevgep$i$i$i$i = ((($73)) + -4|0);
        $75 = $scevgep$i$i$i$i;
        $76 = (($75) - ($72))|0;
        $77 = $76 >>> 2;
        $78 = $77 ^ -1;
        $scevgep4$i$i$i$i = (($73) + ($78<<2)|0);
        HEAP32[$51>>2] = $scevgep4$i$i$i$i;
       }
       __ZdlPv($70);
       ___resumeException($68|0);
       // unreachable;
      }
     } while(0);
     $79 = (($80) + 1)|0;
     $81 = (($79) - ($82))|0;
     HEAP32[$new_data>>2] = 0;
     $83 = ((($new_data)) + 4|0);
     HEAP32[$83>>2] = 0;
     $84 = ((($new_data)) + 8|0);
     HEAP32[$84>>2] = 0;
     $85 = ($79|0)==($82|0);
     do {
      if ($85) {
       $409 = 0;
       label = 41;
      } else {
       $86 = ($81>>>0)>(1073741823);
       if ($86) {
        __THREW__ = 0;
        invoke_vi(46,($new_data|0));
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if (!($88)) {
         label = 33;
        }
       } else {
        label = 33;
       }
       if ((label|0) == 33) {
        $89 = $81 << 2;
        __THREW__ = 0;
        $90 = (invoke_ii(29,($89|0))|0);
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if (!($92)) {
         HEAP32[$83>>2] = $90;
         HEAP32[$new_data>>2] = $90;
         $93 = (($90) + ($81<<2)|0);
         $94 = ((($new_data)) + 8|0);
         HEAP32[$94>>2] = $93;
         $$0$i$i47 = $81;$95 = $90;
         while(1) {
          HEAP32[$95>>2] = 0;
          $96 = HEAP32[$83>>2]|0;
          $97 = ((($96)) + 4|0);
          HEAP32[$83>>2] = $97;
          $98 = (($$0$i$i47) + -1)|0;
          $99 = ($98|0)==(0);
          if ($99) {
           $$lcssa156 = $97;
           break;
          } else {
           $$0$i$i47 = $98;$95 = $97;
          }
         }
         $111 = $$lcssa156;
         $409 = $111;
         label = 41;
         break;
        }
       }
       $100 = ___cxa_find_matching_catch_2()|0;
       $101 = tempRet0;
       $102 = HEAP32[$new_data>>2]|0;
       $103 = ($102|0)==(0|0);
       $104 = $102;
       if (!($103)) {
        $105 = HEAP32[$83>>2]|0;
        $106 = ($105|0)==($102|0);
        if (!($106)) {
         $scevgep$i$i$i$i48 = ((($105)) + -4|0);
         $107 = $scevgep$i$i$i$i48;
         $108 = (($107) - ($104))|0;
         $109 = $108 >>> 2;
         $110 = $109 ^ -1;
         $scevgep4$i$i$i$i49 = (($105) + ($110<<2)|0);
         HEAP32[$83>>2] = $scevgep4$i$i$i$i49;
        }
        __ZdlPv($102);
       }
       $$1 = $100;$$13 = $101;
      }
     } while(0);
     if ((label|0) == 41) {
      $112 = HEAP32[$14>>2]|0;
      $113 = HEAP32[$12>>2]|0;
      $114 = ($112|0)>($113|0);
      L69: do {
       if ($114) {
        label = 43;
       } else {
        $115 = ((($old_data)) + 8|0);
        $116 = ((($new_data)) + 8|0);
        $117 = ((($this)) + 16|0);
        $118 = ((($this)) + 36|0);
        $134 = $409;$138 = $112;$row$094 = $112;
        L71: while(1) {
         $131 = HEAP32[$old_data>>2]|0;
         $132 = HEAP32[$new_data>>2]|0;
         HEAP32[$old_data>>2] = $132;
         HEAP32[$new_data>>2] = $131;
         $133 = HEAP32[$51>>2]|0;
         HEAP32[$51>>2] = $134;
         HEAP32[$83>>2] = $133;
         $135 = HEAP32[$115>>2]|0;
         $136 = HEAP32[$116>>2]|0;
         HEAP32[$115>>2] = $136;
         HEAP32[$116>>2] = $135;
         $137 = (($row$094) - ($138))|0;
         $139 = HEAP32[$117>>2]|0;
         $140 = (($139) + (($137*12)|0)|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = HEAP8[$141>>0]|0;
         $143 = ($142<<24>>24)!=(0);
         $$ = $143 ? $this : 0;
         $144 = $131;
         HEAP32[$144>>2] = $$;
         $145 = HEAP32[$this>>2]|0;
         $col$091 = (($145) + 1)|0;
         $146 = HEAP32[$45>>2]|0;
         $147 = ($col$091|0)<($146|0);
         if ($147) {
          $149 = $145;$151 = $138;$410 = $146;$col$092 = $col$091;
          while(1) {
           $148 = (($col$092) - ($149))|0;
           $150 = (($row$094) - ($151))|0;
           $152 = HEAP32[$117>>2]|0;
           $153 = (($152) + (($150*12)|0)|0);
           $154 = HEAP32[$153>>2]|0;
           $155 = (($154) + ($148)|0);
           $156 = HEAP8[$155>>0]|0;
           $157 = ($156<<24>>24)==(0);
           if ($157) {
            $160 = (($148) + -1)|0;
            $161 = HEAP32[$new_data>>2]|0;
            $162 = (($161) + ($160<<2)|0);
            $163 = HEAP32[$162>>2]|0;
            $164 = HEAP32[$old_data>>2]|0;
            $165 = (($164) + ($148<<2)|0);
            $166 = HEAP32[$165>>2]|0;
            $167 = ($163|0)==(0|0);
            $168 = ($166|0)==(0|0);
            $or$cond = $167 | $168;
            do {
             if ($or$cond) {
              HEAP32[$p>>2] = 0;
              $169 = ($163|0)==($this|0);
              $or$cond5 = $167 | $169;
              if (!($or$cond5)) {
               $old_data$idx15$val = HEAP32[$51>>2]|0;
               __THREW__ = 0;
               invoke_viiiiii(99,($0|0),($164|0),($old_data$idx15$val|0),($new_data|0),($163|0),($148|0));
               $170 = __THREW__; __THREW__ = 0;
               $171 = $170&1;
               if ($171) {
                label = 47;
                break L71;
               } else {
                $210 = 0;
                break;
               }
              }
              $172 = ($166|0)==($this|0);
              $or$cond6 = $168 | $172;
              if ($or$cond6) {
               $210 = 0;
              } else {
               $old_data$idx13$val = HEAP32[$51>>2]|0;
               __THREW__ = 0;
               invoke_viiiiii(99,($0|0),($164|0),($old_data$idx13$val|0),($new_data|0),($166|0),($148|0));
               $173 = __THREW__; __THREW__ = 0;
               $174 = $173&1;
               if ($174) {
                label = 47;
                break L71;
               } else {
                $210 = 0;
               }
              }
             } else {
              $175 = ($163|0)==($this|0);
              if (!($175)) {
               HEAP32[$p>>2] = $163;
               $176 = $163;
               __THREW__ = 0;
               invoke_viii(68,($163|0),($row$094|0),($col$092|0));
               $177 = __THREW__; __THREW__ = 0;
               $178 = $177&1;
               if ($178) {
                label = 47;
                break L71;
               } else {
                $210 = $176;
                break;
               }
              }
              $179 = ($166|0)==($this|0);
              if (!($179)) {
               HEAP32[$p>>2] = $166;
               $180 = $166;
               __THREW__ = 0;
               invoke_viii(68,($166|0),($row$094|0),($col$092|0));
               $181 = __THREW__; __THREW__ = 0;
               $182 = $181&1;
               if ($182) {
                label = 47;
                break L71;
               } else {
                $210 = $180;
                break;
               }
              }
              __THREW__ = 0;
              $183 = (invoke_ii(29,28)|0);
              $184 = __THREW__; __THREW__ = 0;
              $185 = $184&1;
              if ($185) {
               label = 47;
               break L71;
              }
              __THREW__ = 0;
              invoke_viiiii(69,($183|0),($col$092|0),($row$094|0),($col$092|0),($row$094|0));
              $186 = __THREW__; __THREW__ = 0;
              $187 = $186&1;
              if ($187) {
               $$lcssa154 = $183;
               label = 67;
               break L71;
              }
              HEAP32[$p>>2] = $183;
              $188 = ((($183)) + 4|0);
              $189 = HEAP32[$188>>2]|0;
              $190 = (($row$094) - ($189))|0;
              $191 = ((($183)) + 16|0);
              $192 = HEAP32[$191>>2]|0;
              $193 = HEAP32[$183>>2]|0;
              $194 = (($col$092) - ($193))|0;
              $195 = (($192) + (($190*12)|0)|0);
              $196 = HEAP32[$195>>2]|0;
              $197 = (($196) + ($194)|0);
              HEAP8[$197>>0] = 1;
              $198 = HEAP32[$1>>2]|0;
              $199 = HEAP32[$118>>2]|0;
              $200 = ($198|0)==($199|0);
              $201 = $183;
              if ($200) {
               __THREW__ = 0;
               invoke_vii(100,($0|0),($p|0));
               $204 = __THREW__; __THREW__ = 0;
               $205 = $204&1;
               if ($205) {
                label = 47;
                break L71;
               } else {
                $210 = $201;
                break;
               }
              } else {
               HEAP32[$198>>2] = $201;
               $202 = HEAP32[$1>>2]|0;
               $203 = ((($202)) + 4|0);
               HEAP32[$1>>2] = $203;
               $210 = $201;
               break;
              }
             }
            } while(0);
            $208 = HEAP32[$new_data>>2]|0;
            $209 = (($208) + ($148<<2)|0);
            HEAP32[$209>>2] = $210;
            $211 = ($210|0)==(0);
            $212 = ($163|0)==($166|0);
            $or$cond7 = $212 | $211;
            $213 = ($163|0)==($this|0);
            $or$cond8 = $213 | $or$cond7;
            $214 = ($166|0)==($this|0);
            $or$cond9 = $214 | $or$cond8;
            do {
             if (!($or$cond9)) {
              $old_data$idx17$val = HEAP32[$51>>2]|0;
              $new_data$idx$val = HEAP32[$new_data>>2]|0;
              $215 = $163;
              $216 = $166;
              $217 = ((($163)) + 4|0);
              $218 = HEAP32[$217>>2]|0;
              $219 = ((($166)) + 4|0);
              $220 = HEAP32[$219>>2]|0;
              $221 = ($218|0)>($220|0);
              do {
               if ($221) {
                $222 = (($148) + 1)|0;
                $223 = (($new_data$idx$val) + ($222<<2)|0);
                $224 = ($222|0)==(0);
                if ($224) {
                 $$sroa$010$0$i = $216;$$sroa$09$0$i = $215;
                 break;
                } else {
                 $226 = $new_data$idx$val;
                }
                while(1) {
                 $225 = HEAP32[$226>>2]|0;
                 $227 = ($225|0)==($163|0);
                 if ($227) {
                  HEAP32[$226>>2] = $216;
                 }
                 $228 = ((($226)) + 4|0);
                 $229 = ($228|0)==($223|0);
                 if ($229) {
                  $$sroa$010$0$i = $216;$$sroa$09$0$i = $215;
                  break;
                 } else {
                  $226 = $228;
                 }
                }
               } else {
                $old_data$idx16$val = HEAP32[$old_data>>2]|0;
                $230 = (($old_data$idx16$val) + ($148<<2)|0);
                $231 = ($230|0)==($old_data$idx17$val|0);
                if ($231) {
                 $$sroa$010$0$i = $215;$$sroa$09$0$i = $216;
                 break;
                } else {
                 $233 = $230;
                }
                while(1) {
                 $232 = HEAP32[$233>>2]|0;
                 $234 = ($232|0)==($166|0);
                 if ($234) {
                  HEAP32[$233>>2] = $215;
                 }
                 $235 = ((($233)) + 4|0);
                 $236 = ($235|0)==($old_data$idx17$val|0);
                 if ($236) {
                  $$sroa$010$0$i = $215;$$sroa$09$0$i = $216;
                  break;
                 } else {
                  $233 = $235;
                 }
                }
               }
              } while(0);
              $237 = HEAP32[$1>>2]|0;
              $238 = HEAP32[$0>>2]|0;
              $239 = (($237) - ($238))|0;
              $240 = $239 >> 2;
              $$cast$i = $238;
              $241 = $$sroa$09$0$i;
              $$0$i = $240;
              while(1) {
               $242 = (($$0$i) + -1)|0;
               $243 = ($$0$i|0)>(0);
               if (!($243)) {
                $$lcssa = $242;
                label = 81;
                break;
               }
               $244 = (($$cast$i) + ($242<<2)|0);
               $245 = HEAP32[$244>>2]|0;
               $246 = ($245|0)==($241|0);
               if ($246) {
                $250 = $$cast$i;$251 = $242;$255 = $237;
                break;
               } else {
                $$0$i = $242;
               }
              }
              if ((label|0) == 81) {
               label = 0;
               __THREW__ = 0;
               invoke_vi(47,(2292|0));
               $247 = __THREW__; __THREW__ = 0;
               $248 = $247&1;
               if ($248) {
                label = 47;
                break L71;
               }
               $$pre$i = HEAP32[$0>>2]|0;
               $$pre20$i = HEAP32[$1>>2]|0;
               $250 = $$pre$i;$251 = $$lcssa;$255 = $$pre20$i;
              }
              $249 = (($250) + ($251<<2)|0);
              $252 = ((($249)) + 4|0);
              $253 = $252;
              $254 = (($255) - ($253))|0;
              $256 = $254 >> 2;
              _memmove(($249|0),($252|0),($254|0))|0;
              $257 = (($249) + ($256<<2)|0);
              $258 = HEAP32[$1>>2]|0;
              $259 = ($258|0)==($257|0);
              if (!($259)) {
               $__new_last2$i$i$i$i = $257;
               $scevgep$i$i$i$i59 = ((($258)) + -4|0);
               $260 = $scevgep$i$i$i$i59;
               $261 = (($260) - ($__new_last2$i$i$i$i))|0;
               $262 = $261 >>> 2;
               $263 = $262 ^ -1;
               $scevgep4$i$i$i$i60 = (($258) + ($263<<2)|0);
               HEAP32[$1>>2] = $scevgep4$i$i$i$i60;
              }
              $264 = $$sroa$010$0$i;
              __THREW__ = 0;
              invoke_vii(71,($264|0),($241|0));
              $265 = __THREW__; __THREW__ = 0;
              $266 = $265&1;
              if ($266) {
               label = 47;
               break L71;
              }
              $267 = ($$sroa$09$0$i|0)==(0);
              if ($267) {
               break;
              }
              $268 = ((($241)) + 16|0);
              $269 = HEAP32[$268>>2]|0;
              $270 = ($269|0)==(0|0);
              if (!($270)) {
               $271 = ((($241)) + 20|0);
               $272 = HEAP32[$271>>2]|0;
               $273 = ($272|0)==($269|0);
               if ($273) {
                $283 = $269;
               } else {
                $275 = $272;
                while(1) {
                 $274 = ((($275)) + -12|0);
                 HEAP32[$271>>2] = $274;
                 $276 = HEAP32[$274>>2]|0;
                 $277 = ($276|0)==(0|0);
                 if ($277) {
                  $278 = $274;
                 } else {
                  $280 = ((($275)) + -8|0);
                  $281 = HEAP32[$280>>2]|0;
                  $282 = ($281|0)==($276|0);
                  if (!($282)) {
                   HEAP32[$280>>2] = $276;
                  }
                  __ZdlPv($276);
                  $$pre$i$i$i$i$i = HEAP32[$271>>2]|0;
                  $278 = $$pre$i$i$i$i$i;
                 }
                 $279 = ($278|0)==($269|0);
                 if ($279) {
                  break;
                 } else {
                  $275 = $278;
                 }
                }
                $$pre$i$i$i = HEAP32[$268>>2]|0;
                $283 = $$pre$i$i$i;
               }
               __ZdlPv($283);
              }
              $284 = $$sroa$09$0$i;
              __ZdlPv($284);
             }
            } while(0);
            $$pre125 = HEAP32[$45>>2]|0;
            $286 = $$pre125;
           } else {
            $158 = HEAP32[$new_data>>2]|0;
            $159 = (($158) + ($148<<2)|0);
            HEAP32[$159>>2] = $this;
            $286 = $410;
           }
           $col$0 = (($col$092) + 1)|0;
           $285 = ($col$0|0)<($286|0);
           if (!($285)) {
            $$lcssa155 = $286;
            break;
           }
           $$pre123 = HEAP32[$this>>2]|0;
           $$pre124 = HEAP32[$14>>2]|0;
           $149 = $$pre123;$151 = $$pre124;$410 = $286;$col$092 = $col$0;
          }
          $$pre126 = HEAP32[$14>>2]|0;
          $$pre127 = HEAP32[$this>>2]|0;
          $$lcssa80 = $$lcssa155;$288 = $$pre126;$291 = $$pre127;
         } else {
          $$lcssa80 = $146;$288 = $138;$291 = $145;
         }
         $287 = (($row$094) - ($288))|0;
         $289 = HEAP32[$117>>2]|0;
         $290 = (($$lcssa80) - ($291))|0;
         $292 = (($289) + (($287*12)|0)|0);
         $293 = HEAP32[$292>>2]|0;
         $294 = (($293) + ($290)|0);
         $295 = HEAP8[$294>>0]|0;
         $296 = ($295<<24>>24)==(0);
         if ($296) {
          $297 = (($$lcssa80) + 1)|0;
          $298 = (($297) - ($291))|0;
          $299 = (($298) + -2)|0;
          $300 = HEAP32[$new_data>>2]|0;
          $301 = (($300) + ($299<<2)|0);
          $302 = HEAP32[$301>>2]|0;
          $303 = ($302|0)==(0|0);
          $304 = ($302|0)==($this|0);
          $or$cond10 = $303 | $304;
          if (!($or$cond10)) {
           $305 = (($298) + -1)|0;
           $old_data$idx$val = HEAP32[$old_data>>2]|0;
           $old_data$idx11$val = HEAP32[$51>>2]|0;
           __THREW__ = 0;
           invoke_viiiiii(99,($0|0),($old_data$idx$val|0),($old_data$idx11$val|0),($new_data|0),($302|0),($305|0));
           $306 = __THREW__; __THREW__ = 0;
           $307 = $306&1;
           if ($307) {
            label = 48;
            break;
           }
          }
         }
         $308 = HEAP32[$12>>2]|0;
         $309 = ($row$094|0)<($308|0);
         if (!($309)) {
          label = 43;
          break L69;
         }
         $310 = (($row$094) + 1)|0;
         $$pre121 = HEAP32[$83>>2]|0;
         $$pre122 = HEAP32[$14>>2]|0;
         $134 = $$pre121;$138 = $$pre122;$row$094 = $310;
        }
        if ((label|0) == 47) {
         $127 = ___cxa_find_matching_catch_2()|0;
         $128 = tempRet0;
         $lpad$phi$index = $127;$lpad$phi$index3 = $128;
         label = 49;
         break;
        }
        else if ((label|0) == 48) {
         $129 = ___cxa_find_matching_catch_2()|0;
         $130 = tempRet0;
         $lpad$phi$index = $129;$lpad$phi$index3 = $130;
         label = 49;
         break;
        }
        else if ((label|0) == 67) {
         $206 = ___cxa_find_matching_catch_2()|0;
         $207 = tempRet0;
         __ZdlPv($$lcssa154);
         $$0 = $206;$$02 = $207;
         break;
        }
       }
      } while(0);
      L154: do {
       if ((label|0) == 43) {
        $119 = HEAP32[$1>>2]|0;
        $120 = HEAP32[$0>>2]|0;
        $121 = (($119) - ($120))|0;
        $122 = $121 >> 2;
        $123 = ($122|0)==(0);
        L156: do {
         if (!($123)) {
          $124 = $120;
          $322 = $124;$i2$090 = $122;
          while(1) {
           $320 = (($i2$090) + -1)|0;
           $321 = (($322) + ($320<<2)|0);
           $323 = HEAP32[$321>>2]|0;
           __THREW__ = 0;
           $324 = (invoke_iii(101,($this|0),($323|0))|0);
           $325 = __THREW__; __THREW__ = 0;
           $326 = $325&1;
           if ($326) {
            break;
           }
           if ($324) {
            $327 = ((($323)) + 12|0);
            $328 = HEAP32[$327>>2]|0;
            $329 = ((($323)) + 4|0);
            $330 = HEAP32[$329>>2]|0;
            $331 = (($328) + 1)|0;
            $332 = (($331) - ($330))|0;
            $333 = ($332|0)>(4);
            if (!($333)) {
             $335 = ((($323)) + 8|0);
             $336 = HEAP32[$335>>2]|0;
             $337 = HEAP32[$323>>2]|0;
             $338 = (($336) + 1)|0;
             $339 = (($338) - ($337))|0;
             $340 = ($339|0)>(4);
             if (!($340)) {
              $341 = ($332|0)>(2);
              $342 = ($339|0)>(2);
              $or$cond69 = $341 | $342;
              if ($or$cond69) {
               __THREW__ = 0;
               $343 = (invoke_ii(74,($323|0))|0);
               $344 = __THREW__; __THREW__ = 0;
               $345 = $344&1;
               if ($345) {
                break;
               }
               $346 = ($343|0)>(3);
               if (!($346)) {
                label = 120;
               }
              } else {
               label = 120;
              }
             }
            }
           } else {
            $347 = ($323|0)==(0|0);
            if ($347) {
             label = 130;
            } else {
             label = 120;
            }
           }
           if ((label|0) == 120) {
            label = 0;
            $348 = ((($323)) + 16|0);
            $349 = HEAP32[$348>>2]|0;
            $350 = ($349|0)==(0|0);
            if (!($350)) {
             $351 = ((($323)) + 20|0);
             $352 = HEAP32[$351>>2]|0;
             $353 = ($352|0)==($349|0);
             if ($353) {
              $363 = $349;
             } else {
              $355 = $352;
              while(1) {
               $354 = ((($355)) + -12|0);
               HEAP32[$351>>2] = $354;
               $356 = HEAP32[$354>>2]|0;
               $357 = ($356|0)==(0|0);
               if ($357) {
                $358 = $354;
               } else {
                $360 = ((($355)) + -8|0);
                $361 = HEAP32[$360>>2]|0;
                $362 = ($361|0)==($356|0);
                if (!($362)) {
                 HEAP32[$360>>2] = $356;
                }
                __ZdlPv($356);
                $$pre$i$i$i$i = HEAP32[$351>>2]|0;
                $358 = $$pre$i$i$i$i;
               }
               $359 = ($358|0)==($349|0);
               if ($359) {
                break;
               } else {
                $355 = $358;
               }
              }
              $$pre$i$i = HEAP32[$348>>2]|0;
              $363 = $$pre$i$i;
             }
             __ZdlPv($363);
            }
            __ZdlPv($323);
            label = 130;
           }
           if ((label|0) == 130) {
            label = 0;
            $364 = HEAP32[$0>>2]|0;
            $365 = (($364) + ($320<<2)|0);
            $366 = ((($365)) + 4|0);
            $367 = HEAP32[$1>>2]|0;
            $368 = $366;
            $369 = (($367) - ($368))|0;
            $370 = $369 >> 2;
            _memmove(($365|0),($366|0),($369|0))|0;
            $371 = (($365) + ($370<<2)|0);
            $372 = HEAP32[$1>>2]|0;
            $373 = ($372|0)==($371|0);
            if (!($373)) {
             $__new_last2$i$i$i32 = $371;
             $scevgep$i$i$i33 = ((($372)) + -4|0);
             $374 = $scevgep$i$i$i33;
             $375 = (($374) - ($__new_last2$i$i$i32))|0;
             $376 = $375 >>> 2;
             $377 = $376 ^ -1;
             $scevgep4$i$i$i34 = (($372) + ($377<<2)|0);
             HEAP32[$1>>2] = $scevgep4$i$i$i34;
            }
           }
           $334 = ($320|0)==(0);
           if ($334) {
            break L156;
           }
           $$pre128 = HEAP32[$0>>2]|0;
           $322 = $$pre128;$i2$090 = $320;
          }
          $125 = ___cxa_find_matching_catch_2()|0;
          $126 = tempRet0;
          $lpad$phi$index = $125;$lpad$phi$index3 = $126;
          label = 49;
          break L154;
         }
        } while(0);
        $311 = HEAP32[$new_data>>2]|0;
        $312 = ($311|0)==(0|0);
        $313 = $311;
        if (!($312)) {
         $314 = HEAP32[$83>>2]|0;
         $315 = ($314|0)==($311|0);
         if (!($315)) {
          $scevgep$i$i$i54 = ((($314)) + -4|0);
          $316 = $scevgep$i$i$i54;
          $317 = (($316) - ($313))|0;
          $318 = $317 >>> 2;
          $319 = $318 ^ -1;
          $scevgep4$i$i$i55 = (($314) + ($319<<2)|0);
          HEAP32[$83>>2] = $scevgep4$i$i$i55;
         }
         __ZdlPv($311);
        }
        $378 = HEAP32[$old_data>>2]|0;
        $379 = ($378|0)==(0|0);
        $380 = $378;
        if (!($379)) {
         $381 = HEAP32[$51>>2]|0;
         $382 = ($381|0)==($378|0);
         if (!($382)) {
          $scevgep$i$i$i27 = ((($381)) + -4|0);
          $383 = $scevgep$i$i$i27;
          $384 = (($383) - ($380))|0;
          $385 = $384 >>> 2;
          $386 = $385 ^ -1;
          $scevgep4$i$i$i28 = (($381) + ($386<<2)|0);
          HEAP32[$51>>2] = $scevgep4$i$i$i28;
         }
         __ZdlPv($378);
        }
        STACKTOP = sp;return;
       }
      } while(0);
      if ((label|0) == 49) {
       $$0 = $lpad$phi$index;$$02 = $lpad$phi$index3;
      }
      $387 = HEAP32[$new_data>>2]|0;
      $388 = ($387|0)==(0|0);
      $389 = $387;
      if ($388) {
       $$1 = $$0;$$13 = $$02;
      } else {
       $390 = HEAP32[$83>>2]|0;
       $391 = ($390|0)==($387|0);
       if (!($391)) {
        $scevgep$i$i$i22 = ((($390)) + -4|0);
        $392 = $scevgep$i$i$i22;
        $393 = (($392) - ($389))|0;
        $394 = $393 >>> 2;
        $395 = $394 ^ -1;
        $scevgep4$i$i$i23 = (($390) + ($395<<2)|0);
        HEAP32[$83>>2] = $scevgep4$i$i$i23;
       }
       __ZdlPv($387);
       $$1 = $$0;$$13 = $$02;
      }
     }
     $396 = HEAP32[$old_data>>2]|0;
     $397 = ($396|0)==(0|0);
     $398 = $396;
     if ($397) {
      ___resumeException($$1|0);
      // unreachable;
     }
     $399 = HEAP32[$51>>2]|0;
     $400 = ($399|0)==($396|0);
     if (!($400)) {
      $scevgep$i$i$i = ((($399)) + -4|0);
      $401 = $scevgep$i$i$i;
      $402 = (($401) - ($398))|0;
      $403 = $402 >>> 2;
      $404 = $403 ^ -1;
      $scevgep4$i$i$i = (($399) + ($404<<2)|0);
      HEAP32[$51>>2] = $scevgep4$i$i$i;
     }
     __ZdlPv($396);
     ___resumeException($$1|0);
     // unreachable;
    }
    function __ZN12_GLOBAL__N_111delete_holeERNSt3__16vectorIP6BitmapNS0_9allocatorIS3_EEEES7_S7_S3_i($holep_vector,$v1$0$0$0$val,$v1$0$0$1$val,$v2,$p,$i) {
     $holep_vector = $holep_vector|0;
     $v1$0$0$0$val = $v1$0$0$0$val|0;
     $v1$0$0$1$val = $v1$0$0$1$val|0;
     $v2 = $v2|0;
     $p = $p|0;
     $i = $i|0;
     var $$0 = 0, $$cast = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
     var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
     var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
     var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = (($v1$0$0$0$val) + ($i<<2)|0);
     $1 = ($0|0)==($v1$0$0$1$val|0);
     if (!($1)) {
      $3 = $0;
      while(1) {
       $2 = HEAP32[$3>>2]|0;
       $4 = ($2|0)==($p|0);
       if ($4) {
        HEAP32[$3>>2] = 0;
       }
       $5 = ((($3)) + 4|0);
       $6 = ($5|0)==($v1$0$0$1$val|0);
       if ($6) {
        break;
       } else {
        $3 = $5;
       }
      }
     }
     $7 = HEAP32[$v2>>2]|0;
     $8 = (($7) + ($i<<2)|0);
     $9 = ($i|0)==(0);
     if (!($9)) {
      $11 = $7;
      while(1) {
       $10 = HEAP32[$11>>2]|0;
       $12 = ($10|0)==($p|0);
       if ($12) {
        HEAP32[$11>>2] = 0;
       }
       $13 = ((($11)) + 4|0);
       $14 = ($13|0)==($8|0);
       if ($14) {
        break;
       } else {
        $11 = $13;
       }
      }
     }
     $15 = ((($holep_vector)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = HEAP32[$holep_vector>>2]|0;
     $18 = (($16) - ($17))|0;
     $19 = $18 >> 2;
     $$cast = $17;
     $$0 = $19;
     while(1) {
      $20 = (($$0) + -1)|0;
      $21 = ($$0|0)>(0);
      if (!($21)) {
       $$lcssa = $20;
       label = 12;
       break;
      }
      $22 = (($$cast) + ($20<<2)|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==($p|0);
      if ($24) {
       $26 = $$cast;$27 = $20;$31 = $16;
       break;
      } else {
       $$0 = $20;
      }
     }
     if ((label|0) == 12) {
      __ZN5Ocrad14internal_errorEPKc(2268);
      $$pre = HEAP32[$holep_vector>>2]|0;
      $$pre18 = HEAP32[$15>>2]|0;
      $26 = $$pre;$27 = $$lcssa;$31 = $$pre18;
     }
     $25 = (($26) + ($27<<2)|0);
     $28 = ((($25)) + 4|0);
     $29 = $28;
     $30 = (($31) - ($29))|0;
     $32 = $30 >> 2;
     _memmove(($25|0),($28|0),($30|0))|0;
     $33 = (($25) + ($32<<2)|0);
     $34 = HEAP32[$15>>2]|0;
     $35 = ($34|0)==($33|0);
     if (!($35)) {
      $__new_last2$i$i$i = $33;
      $scevgep$i$i$i = ((($34)) + -4|0);
      $36 = $scevgep$i$i$i;
      $37 = (($36) - ($__new_last2$i$i$i))|0;
      $38 = $37 >>> 2;
      $39 = $38 ^ -1;
      $scevgep4$i$i$i = (($34) + ($39<<2)|0);
      HEAP32[$15>>2] = $scevgep4$i$i$i;
     }
     $40 = ($p|0)==(0|0);
     if ($40) {
      return;
     }
     $41 = ((($p)) + 16|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if (!($43)) {
      $44 = ((($p)) + 20|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==($42|0);
      if ($46) {
       $56 = $42;
      } else {
       $48 = $45;
       while(1) {
        $47 = ((($48)) + -12|0);
        HEAP32[$44>>2] = $47;
        $49 = HEAP32[$47>>2]|0;
        $50 = ($49|0)==(0|0);
        if ($50) {
         $51 = $47;
        } else {
         $53 = ((($48)) + -8|0);
         $54 = HEAP32[$53>>2]|0;
         $55 = ($54|0)==($49|0);
         if (!($55)) {
          HEAP32[$53>>2] = $49;
         }
         __ZdlPv($49);
         $$pre$i$i$i$i = HEAP32[$44>>2]|0;
         $51 = $$pre$i$i$i$i;
        }
        $52 = ($51|0)==($42|0);
        if ($52) {
         break;
        } else {
         $48 = $51;
        }
       }
       $$pre$i$i = HEAP32[$41>>2]|0;
       $56 = $$pre$i$i;
      }
      __ZdlPv($56);
     }
     __ZdlPv($p);
     return;
    }
    function __ZNSt3__16vectorIP6BitmapNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = (($1) - ($2))|0;
     $4 = $3 >> 2;
     $5 = (($4) + 1)|0;
     $6 = ($5>>>0)>(1073741823);
     if ($6) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$this>>2]|0;
      $$in = $$pre;
     } else {
      $$in = $2;
     }
     $7 = ((($this)) + 8|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) - ($$in))|0;
     $10 = $9 >> 2;
     $11 = ($10>>>0)<(536870911);
     if ($11) {
      $15 = $9 >> 1;
      $16 = ($15>>>0)<($5>>>0);
      $17 = $16 ? $5 : $15;
      $18 = HEAP32[$0>>2]|0;
      $19 = (($18) - ($$in))|0;
      $20 = $19 >> 2;
      $21 = ($17|0)==(0);
      if ($21) {
       $$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
      } else {
       $$0$i1 = $17;$41 = $18;$42 = $20;
       label = 6;
      }
     } else {
      $12 = HEAP32[$0>>2]|0;
      $13 = (($12) - ($$in))|0;
      $14 = $13 >> 2;
      $$0$i1 = 1073741823;$41 = $12;$42 = $14;
      label = 6;
     }
     if ((label|0) == 6) {
      $22 = $$0$i1 << 2;
      $23 = (__Znwj($22)|0);
      $$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
     }
     $24 = (($25) + ($26<<2)|0);
     $27 = (($25) + ($$0$i2<<2)|0);
     $28 = $27;
     $29 = HEAP32[$__x>>2]|0;
     HEAP32[$24>>2] = $29;
     $30 = ((($24)) + 4|0);
     $31 = $30;
     $32 = (($33) - ($$in))|0;
     $34 = $32 >> 2;
     $35 = (0 - ($34))|0;
     $36 = (($24) + ($35<<2)|0);
     $37 = $36;
     $38 = $$in;
     _memcpy(($36|0),($38|0),($32|0))|0;
     HEAP32[$this>>2] = $37;
     HEAP32[$0>>2] = $31;
     HEAP32[$7>>2] = $28;
     $39 = ($$in|0)==(0);
     if ($39) {
      return;
     }
     $40 = $$in;
     __ZdlPv($40);
     return;
    }
    function __ZN9Textblock13apply_filtersERK7Control($this,$control) {
     $this = $this|0;
     $control = $control|0;
     var $$in = 0, $$pre = 0, $$pre51 = 0, $$pre52 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
     var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
     var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
     var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
     var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
     var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
     var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
     var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
     var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
     var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
     var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$0$lcssa = 0, $b$027 = 0, $b$120 = 0, $b$2 = 0, $b$3 = 0, $f$041 = 0, $first$0 = 0, $i1$016 = 0;
     var $i2$031 = 0, $i6$037 = 0, $j$018 = 0, $j$018$lcssa = 0, $j3$0 = 0, $j3$0$in = 0, $j3$0$lcssa117 = 0, $j4$024 = 0, $j5$021 = 0, $j8$0 = 0, $j8$0$in = 0, $j8$0$in$ph = 0, $j8$0$lcssa121 = 0, $l$0$lcssa = 0, $l$030 = 0, $l$1 = 0, $last$0 = 0, $modified$0$off0$ph = 0, $or$cond = 0, $or$cond45 = 0;
     var $r$0$lcssa = 0, $r$028 = 0, $r$1 = 0, $re = 0, $t$0$lcssa = 0, $t$029 = 0, $t$123 = 0, $t$2 = 0, $t$3 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $re = sp;
     $0 = ((($this)) + 16|0);
     $1 = ((($this)) + 20|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$0>>2]|0;
     $4 = (($2) - ($3))|0;
     $5 = ($4|0)<(4);
     $6 = $3;
     if ($5) {
      STACKTOP = sp;return;
     }
     $7 = ((($control)) + 4|0);
     $8 = ((($control)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP32[$7>>2]|0;
     $11 = ($9|0)==($10|0);
     if ($11) {
      STACKTOP = sp;return;
     }
     $12 = ((($this)) + 8|0);
     $13 = ((($this)) + 12|0);
     $14 = ((($this)) + 4|0);
     $$in = $10;$194 = $6;$195 = $6;$20 = $3;$21 = $2;$24 = $6;$f$041 = 0;
     while(1) {
      $15 = $$in;
      $16 = (($15) + ($f$041<<3)|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($17|0)==(0|0);
      L9: do {
       if ($18) {
        $45 = (((($15) + ($f$041<<3)|0)) + 4|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ($46|0)==(5);
        if (!($47)) {
         $48 = (($21) - ($20))|0;
         $49 = ($48|0)>(0);
         $50 = $20;
         if ($49) {
          $52 = $195;$i1$016 = 0;
         } else {
          $196 = $194;$197 = $195;$198 = $50;$199 = $20;$200 = $21;
          break;
         }
         while(1) {
          $51 = (($52) + ($i1$016<<2)|0);
          $53 = HEAP32[$51>>2]|0;
          __ZN8Textline12apply_filterEN6Filter4TypeE($53,$46);
          $54 = (($i1$016) + 1)|0;
          $55 = HEAP32[$1>>2]|0;
          $56 = HEAP32[$0>>2]|0;
          $57 = (($55) - ($56))|0;
          $58 = $57 >> 2;
          $59 = ($54|0)<($58|0);
          $60 = $56;
          if ($59) {
           $52 = $60;$i1$016 = $54;
          } else {
           $196 = $60;$197 = $60;$198 = $60;$199 = $56;$200 = $55;
           break L9;
          }
         }
        }
        $61 = HEAP32[$12>>2]|0;
        $62 = HEAP32[$13>>2]|0;
        $63 = HEAP32[$this>>2]|0;
        $64 = HEAP32[$14>>2]|0;
        $65 = (($21) - ($20))|0;
        $66 = ($65|0)>(0);
        $67 = $20;
        if ($66) {
         $71 = $194;$b$027 = $64;$i2$031 = 0;$l$030 = $61;$r$028 = $63;$t$029 = $62;
         while(1) {
          $70 = (($71) + ($i2$031<<2)|0);
          $72 = HEAP32[$70>>2]|0;
          $73 = ((($72)) + 16|0);
          $74 = ((($72)) + 20|0);
          $75 = HEAP32[$74>>2]|0;
          $76 = HEAP32[$73>>2]|0;
          $77 = (($75) - ($76))|0;
          $78 = $77 >> 2;
          $79 = ((($72)) + 12|0);
          $80 = HEAP32[$79>>2]|0;
          $81 = ($80|0)<($78|0);
          L19: do {
           if ($81) {
            $j$018 = $80;
            while(1) {
             $82 = (__ZNK8Textline16is_key_characterEi($72,$j$018)|0);
             if ($82) {
              $j$018$lcssa = $j$018;
              break;
             }
             $87 = (($j$018) + 1)|0;
             $88 = HEAP32[$74>>2]|0;
             $89 = HEAP32[$73>>2]|0;
             $90 = (($88) - ($89))|0;
             $91 = $90 >> 2;
             $92 = ($87|0)<($91|0);
             if ($92) {
              $j$018 = $87;
             } else {
              $94 = $89;$95 = $88;$first$0 = $78;$l$1 = $l$030;
              break L19;
             }
            }
            $83 = (__ZNK8Textline9characterEi($72,$j$018$lcssa)|0);
            $84 = HEAP32[$83>>2]|0;
            $85 = ($84|0)<($l$030|0);
            $86 = $85 ? $84 : $l$030;
            $$pre51 = HEAP32[$74>>2]|0;
            $$pre52 = HEAP32[$73>>2]|0;
            $94 = $$pre52;$95 = $$pre51;$first$0 = $j$018$lcssa;$l$1 = $86;
           } else {
            $94 = $76;$95 = $75;$first$0 = $78;$l$1 = $l$030;
           }
          } while(0);
          $93 = (($95) - ($94))|0;
          $96 = $93 >> 2;
          $j3$0$in = $96;
          while(1) {
           $j3$0 = (($j3$0$in) + -1)|0;
           $97 = ($j3$0$in|0)>($first$0|0);
           if (!($97)) {
            $last$0 = -1;$r$1 = $r$028;
            break;
           }
           $98 = (__ZNK8Textline16is_key_characterEi($72,$j3$0)|0);
           if ($98) {
            $j3$0$lcssa117 = $j3$0;
            label = 20;
            break;
           } else {
            $j3$0$in = $j3$0;
           }
          }
          if ((label|0) == 20) {
           label = 0;
           $99 = (__ZNK8Textline9characterEi($72,$j3$0$lcssa117)|0);
           $100 = ((($99)) + 8|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = ($r$028|0)<($101|0);
           $103 = $102 ? $101 : $r$028;
           $last$0 = $j3$0$lcssa117;$r$1 = $103;
          }
          $104 = ($i2$031|0)==(0);
          if ($104) {
           $105 = ($first$0|0)>($last$0|0);
           if ($105) {
            $b$3 = $b$027;$t$3 = $t$029;
           } else {
            $j4$024 = $first$0;$t$123 = $t$029;
            while(1) {
             $106 = (__ZNK8Textline16is_key_characterEi($72,$j4$024)|0);
             if ($106) {
              $107 = (__ZNK8Textline9characterEi($72,$j4$024)|0);
              $108 = ((($107)) + 4|0);
              $109 = HEAP32[$108>>2]|0;
              $110 = ($109|0)<($t$123|0);
              $111 = $110 ? $109 : $t$123;
              $t$2 = $111;
             } else {
              $t$2 = $t$123;
             }
             $112 = (($j4$024) + 1)|0;
             $113 = ($j4$024|0)<($last$0|0);
             if ($113) {
              $j4$024 = $112;$t$123 = $t$2;
             } else {
              $b$3 = $b$027;$t$3 = $t$2;
              break;
             }
            }
           }
          } else {
           $114 = HEAP32[$1>>2]|0;
           $115 = HEAP32[$0>>2]|0;
           $116 = (($114) - ($115))|0;
           $117 = $116 >> 2;
           $118 = (($117) + -1)|0;
           $119 = ($i2$031|0)!=($118|0);
           $120 = ($first$0|0)>($last$0|0);
           $or$cond45 = $119 | $120;
           if ($or$cond45) {
            $b$3 = $b$027;$t$3 = $t$029;
           } else {
            $b$120 = $b$027;$j5$021 = $first$0;
            while(1) {
             $121 = (__ZNK8Textline16is_key_characterEi($72,$j5$021)|0);
             if ($121) {
              $122 = (__ZNK8Textline9characterEi($72,$j5$021)|0);
              $123 = ((($122)) + 12|0);
              $124 = HEAP32[$123>>2]|0;
              $125 = ($b$120|0)<($124|0);
              $126 = $125 ? $124 : $b$120;
              $b$2 = $126;
             } else {
              $b$2 = $b$120;
             }
             $127 = (($j5$021) + 1)|0;
             $128 = ($j5$021|0)<($last$0|0);
             if ($128) {
              $b$120 = $b$2;$j5$021 = $127;
             } else {
              $b$3 = $b$2;$t$3 = $t$029;
              break;
             }
            }
           }
          }
          $129 = (($i2$031) + 1)|0;
          $130 = HEAP32[$1>>2]|0;
          $131 = HEAP32[$0>>2]|0;
          $132 = (($130) - ($131))|0;
          $133 = $132 >> 2;
          $134 = ($129|0)<($133|0);
          $135 = $131;
          if ($134) {
           $71 = $135;$b$027 = $b$3;$i2$031 = $129;$l$030 = $l$1;$r$028 = $r$1;$t$029 = $t$3;
          } else {
           $201 = $135;$202 = $135;$203 = $131;$204 = $130;$b$0$lcssa = $b$3;$l$0$lcssa = $l$1;$r$0$lcssa = $r$1;$t$0$lcssa = $t$3;
           break;
          }
         }
        } else {
         $201 = $194;$202 = $67;$203 = $20;$204 = $21;$b$0$lcssa = $64;$l$0$lcssa = $61;$r$0$lcssa = $63;$t$0$lcssa = $62;
        }
        $68 = ($r$0$lcssa|0)<($l$0$lcssa|0);
        $69 = ($b$0$lcssa|0)<($t$0$lcssa|0);
        $or$cond = $69 | $68;
        if ($or$cond) {
         $196 = $201;$197 = $202;$198 = $202;$199 = $203;$200 = $204;
        } else {
         __ZN9RectangleC2Eiiii($re,$l$0$lcssa,$t$0$lcssa,$r$0$lcssa,$b$0$lcssa);
         $136 = HEAP32[$1>>2]|0;
         $137 = HEAP32[$0>>2]|0;
         $138 = (($136) - ($137))|0;
         $139 = ($138|0)>(0);
         $140 = $137;
         if ($139) {
          $142 = $140;$i6$037 = 0;
          while(1) {
           $141 = (($142) + ($i6$037<<2)|0);
           $143 = HEAP32[$141>>2]|0;
           $144 = ((($143)) + 16|0);
           $145 = ((($143)) + 20|0);
           $146 = HEAP32[$145>>2]|0;
           $147 = HEAP32[$144>>2]|0;
           $148 = (($146) - ($147))|0;
           $149 = $148 >> 2;
           $150 = ((($143)) + 4|0);
           $j8$0$in$ph = $149;$modified$0$off0$ph = 0;
           L50: while(1) {
            $j8$0$in = $j8$0$in$ph;
            while(1) {
             $j8$0 = (($j8$0$in) + -1)|0;
             $151 = ($j8$0$in|0)>(0);
             if (!($151)) {
              break L50;
             }
             $152 = (__ZNK8Textline9characterEi($143,$j8$0)|0);
             $153 = ((($152)) + 12|0);
             $154 = HEAP32[$153>>2]|0;
             $155 = ((($152)) + 4|0);
             $156 = HEAP32[$155>>2]|0;
             $157 = (($154) + 1)|0;
             $158 = (($157) - ($156))|0;
             $159 = HEAP32[$143>>2]|0;
             $160 = HEAP32[$150>>2]|0;
             $161 = ($159|0)==($160|0);
             if ($161) {
              $165 = 0;
             } else {
              $162 = ((($159)) + 16|0);
              $163 = HEAP32[$162>>2]|0;
              $165 = $163;
             }
             $164 = $165 << 1;
             $166 = ($158|0)<($164|0);
             if (!($166)) {
              $j8$0$lcssa121 = $j8$0;
              break;
             }
             $167 = (__ZNK8Textline9characterEi($143,$j8$0)|0);
             $168 = ((($167)) + 4|0);
             $169 = HEAP32[$168>>2]|0;
             $170 = ((($167)) + 12|0);
             $171 = HEAP32[$170>>2]|0;
             $172 = (($171) + ($169))|0;
             $173 = (($172|0) / 2)&-1;
             $174 = (__ZNK8Textline9characterEi($143,$j8$0)|0);
             $175 = HEAP32[$174>>2]|0;
             $176 = ((($174)) + 8|0);
             $177 = HEAP32[$176>>2]|0;
             $178 = (($177) + ($175))|0;
             $179 = (($178|0) / 2)&-1;
             $180 = (__ZNK9Rectangle8includesEii($re,$173,$179)|0);
             if ($180) {
              $j8$0$in = $j8$0;
             } else {
              $j8$0$lcssa121 = $j8$0;
              break;
             }
            }
            __ZN8Textline16delete_characterEi($143,$j8$0$lcssa121);
            $j8$0$in$ph = $j8$0$lcssa121;$modified$0$off0$ph = 1;
           }
           if ($modified$0$off0$ph) {
            __ZN8Textline40remove_leadind_trailing_duplicate_spacesEv($143);
           }
           $181 = (($i6$037) + 1)|0;
           $182 = HEAP32[$1>>2]|0;
           $183 = HEAP32[$0>>2]|0;
           $184 = (($182) - ($183))|0;
           $185 = $184 >> 2;
           $186 = ($181|0)<($185|0);
           $187 = $183;
           if ($186) {
            $142 = $187;$i6$037 = $181;
           } else {
            $205 = $187;$206 = $183;$207 = $182;
            break;
           }
          }
         } else {
          $205 = $140;$206 = $137;$207 = $136;
         }
         $196 = $205;$197 = $205;$198 = $205;$199 = $206;$200 = $207;
        }
       } else {
        $19 = (($21) - ($20))|0;
        $22 = ($19|0)>(0);
        if ($22) {
         $23 = HEAP32[$24>>2]|0;
         $25 = (($15) + ($f$041<<3)|0);
         $26 = HEAP32[$25>>2]|0;
         __ZN8Textline17apply_user_filterERK11User_filter($23,$26);
         $27 = HEAP32[$1>>2]|0;
         $28 = HEAP32[$0>>2]|0;
         $29 = (($27) - ($28))|0;
         $30 = ($29|0)>(4);
         $31 = $28;
         if ($30) {
          $33 = $31;$34 = 1;
          while(1) {
           $$pre = HEAP32[$7>>2]|0;
           $32 = (($33) + ($34<<2)|0);
           $35 = HEAP32[$32>>2]|0;
           $36 = (($$pre) + ($f$041<<3)|0);
           $37 = HEAP32[$36>>2]|0;
           __ZN8Textline17apply_user_filterERK11User_filter($35,$37);
           $38 = (($34) + 1)|0;
           $39 = HEAP32[$1>>2]|0;
           $40 = HEAP32[$0>>2]|0;
           $41 = (($39) - ($40))|0;
           $42 = $41 >> 2;
           $43 = ($38|0)<($42|0);
           $44 = $40;
           if ($43) {
            $33 = $44;$34 = $38;
           } else {
            $196 = $44;$197 = $44;$198 = $44;$199 = $40;$200 = $39;
            break;
           }
          }
         } else {
          $196 = $31;$197 = $31;$198 = $31;$199 = $28;$200 = $27;
         }
        } else {
         $196 = $194;$197 = $195;$198 = $24;$199 = $20;$200 = $21;
        }
       }
      } while(0);
      $188 = (($f$041) + 1)|0;
      $189 = HEAP32[$8>>2]|0;
      $190 = HEAP32[$7>>2]|0;
      $191 = (($189) - ($190))|0;
      $192 = $191 >> 3;
      $193 = ($188>>>0)<($192>>>0);
      if ($193) {
       $$in = $190;$194 = $196;$195 = $197;$20 = $199;$21 = $200;$24 = $198;$f$041 = $188;
      } else {
       break;
      }
     }
     STACKTOP = sp;return;
    }
    function __ZN9TextblockC2ERK9RectangleS2_RNSt3__16vectorIP4BlobNS3_9allocatorIS6_EEEE($this,$page,$block,$blobp_vector) {
     $this = $this|0;
     $page = $page|0;
     $block = $block|0;
     $blobp_vector = $blobp_vector|0;
     var $$0 = 0, $$09 = 0, $$byval_copy = 0, $$cast = 0, $$cast161 = 0, $$cast162 = 0, $$cast163 = 0, $$cast163$lcssa = 0, $$cast163322 = 0, $$cast163322537 = 0, $$cast163324 = 0, $$cast443 = 0, $$in = 0, $$in533 = 0, $$in534 = 0, $$in535 = 0, $$in536 = 0, $$lcssa = 0, $$lcssa307 = 0, $$lcssa787 = 0;
     var $$lcssa795 = 0, $$lcssa799 = 0, $$lcssa800 = 0, $$lcssa801 = 0, $$lcssa802 = 0, $$lcssa803 = 0, $$lcssa812 = 0, $$lcssa815 = 0, $$lcssa823 = 0, $$lcssa826 = 0, $$lcssa829 = 0, $$lcssa830 = 0, $$lcssa831 = 0, $$lcssa835 = 0, $$lcssa835$lcssa837 = 0, $$lcssa838 = 0, $$lcssa838$lcssa840 = 0, $$lcssa852 = 0, $$lcssa853 = 0, $$lcssa854 = 0;
     var $$lcssa855 = 0, $$lcssa856 = 0, $$lcssa857 = 0, $$lcssa858 = 0, $$lcssa859 = 0, $$lcssa860 = 0, $$lcssa861 = 0, $$lcssa862 = 0, $$lcssa863 = 0, $$lcssa864 = 0, $$lcssa865 = 0, $$pre = 0, $$pre$i = 0, $$pre$i55 = 0, $$pre$i63 = 0, $$pre$i71 = 0, $$pre$i91 = 0, $$pre$phi532Z2D = 0, $$pre$phiZ2D = 0, $$pre494 = 0;
     var $$pre495 = 0, $$pre496 = 0, $$pre497 = 0, $$pre498 = 0, $$pre499 = 0, $$pre500 = 0, $$pre501 = 0, $$pre502 = 0, $$pre503 = 0, $$pre504 = 0, $$pre505 = 0, $$pre506 = 0, $$pre507 = 0, $$pre507$pre = 0, $$pre508 = 0, $$pre508$pre = 0, $$pre509 = 0, $$pre509$pre = 0, $$pre510 = 0, $$pre510$pre = 0;
     var $$pre511 = 0, $$pre513 = 0, $$pre514 = 0, $$pre516 = 0, $$pre517 = 0, $$pre518 = 0, $$pre519 = 0, $$temp$1 = 0, $$temp$1$current_line$10 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
     var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
     var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
     var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
     var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
     var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
     var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0;
     var $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0;
     var $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0;
     var $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0;
     var $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0;
     var $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0;
     var $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0;
     var $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0;
     var $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0;
     var $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0;
     var $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0;
     var $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0;
     var $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0;
     var $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0;
     var $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0;
     var $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0;
     var $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0;
     var $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0;
     var $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0;
     var $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0;
     var $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0;
     var $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0;
     var $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0;
     var $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0;
     var $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0;
     var $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
     var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
     var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
     var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
     var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
     var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
     var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
     var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
     var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
     var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
     var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
     var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
     var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
     var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
     var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
     var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
     var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
     var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
     var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
     var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
     var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
     var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
     var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
     var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
     var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
     var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
     var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
     var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
     var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
     var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
     var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
     var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
     var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
     var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
     var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
     var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
     var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
     var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
     var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
     var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
     var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
     var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
     var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
     var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
     var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
     var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
     var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
     var $__new_last2$i$i$i = 0, $__new_last2$i$i$i$i = 0, $__new_last2$i$i$i$i56 = 0, $__new_last2$i$i$i$i64 = 0, $__new_last2$i$i$i$i72 = 0, $__new_last2$i$i$i$i92 = 0, $__new_last2$i$i$i99 = 0, $c$0353 = 0, $c$1 = 0, $c22$0349 = 0, $c22$1 = 0, $cl$2145 = 0, $count$0418 = 0, $cr$0$ph = 0, $cr$0$ph$lcssa843 = 0, $cr$0$ph845 = 0, $current_line$0398 = 0, $current_line$1 = 0, $current_line$1$lcssa848 = 0, $current_line$1$lcssa849 = 0;
     var $current_line$1$lcssa850 = 0, $current_line$10 = 0, $current_line$11 = 0, $current_line$12 = 0, $current_line$2$ph = 0, $current_line$3384 = 0, $current_line$4$lcssa = 0, $current_line$4373 = 0, $current_line$5$lcssa = 0, $current_line$5$lcssa$ph = 0, $current_line$5379 = 0, $current_line$5379$lcssa816 = 0, $current_line$6 = 0, $current_line$7370 = 0, $current_line$8$lcssa = 0, $current_line$8356 = 0, $current_line$9$lcssa = 0, $current_line$9$lcssa$ph = 0, $current_line$9363 = 0, $current_line$9363$lcssa804 = 0;
     var $current_line23$0$be = 0, $current_line23$0346 = 0, $eh$lpad$body$index27Z2D = 0, $eh$lpad$body$indexZ2D = 0, $end$0431 = 0, $height_distrib = 0, $i$0408 = 0, $i1$0414 = 0, $i10$0386 = 0, $i11$0383 = 0, $i124$0345 = 0, $i14$0369 = 0, $i2$0337 = 0, $i20$0352 = 0, $i21$0348 = 0, $i27$0332 = 0, $i28$0330 = 0, $i3$0419 = 0, $i32$0328 = 0, $i39$0326 = 0;
     var $i4$0427 = 0, $i6$0323 = 0, $i7$0397 = 0, $i9$0389 = 0, $i9$0389$in = 0, $j$0$in$ph = 0, $j$0393 = 0, $j$0393$in = 0, $j$0393$lcssa833 = 0, $lpad$phi252$index = 0, $lpad$phi252$index58 = 0, $mean_height$0421 = 0, $mean_height$1 = 0, $mean_height$1$lcssa = 0, $mean_height$2 = 0, $or$cond = 0, $or$cond156 = 0, $or$cond157 = 0, $or$cond158 = 0, $or$cond159 = 0;
     var $or$cond160 = 0, $or$cond439 = 0, $or$cond440 = 0, $or$cond626 = 0, $p = 0, $pending = 0, $pending_short = 0, $pending_tall = 0, $samples$0409 = 0, $samples$1 = 0, $samples$1$lcssa = 0, $samples$2415 = 0, $samples$3 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i57 = 0, $scevgep$i$i$i$i65 = 0, $scevgep$i$i$i$i73 = 0, $scevgep$i$i$i$i93 = 0, $scevgep$i$i$i100 = 0;
     var $scevgep$i$i$i107 = 0, $scevgep$i$i$i132 = 0, $scevgep$i$i$i137 = 0, $scevgep$i$i$i19 = 0, $scevgep$i$i$i22 = 0, $scevgep$i$i$i27 = 0, $scevgep$i$i$i32 = 0, $scevgep$i$i$i37 = 0, $scevgep$i$i$i42 = 0, $scevgep$i$i$i79 = 0, $scevgep$i$i$i82 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i58 = 0, $scevgep4$i$i$i$i66 = 0, $scevgep4$i$i$i$i74 = 0, $scevgep4$i$i$i$i94 = 0, $scevgep4$i$i$i101 = 0, $scevgep4$i$i$i108 = 0, $scevgep4$i$i$i133 = 0;
     var $scevgep4$i$i$i138 = 0, $scevgep4$i$i$i20 = 0, $scevgep4$i$i$i23 = 0, $scevgep4$i$i$i28 = 0, $scevgep4$i$i$i33 = 0, $scevgep4$i$i$i38 = 0, $scevgep4$i$i$i43 = 0, $scevgep4$i$i$i80 = 0, $scevgep4$i$i$i83 = 0, $storemerge401 = 0, $temp$1 = 0, $valid_samples$0420 = 0, $valid_samples$1 = 0, $valid_samples$1$lcssa = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $$byval_copy = sp + 68|0;
     $0 = sp + 64|0;
     $1 = sp + 60|0;
     $pending = sp + 48|0;
     $pending_tall = sp + 36|0;
     $pending_short = sp + 24|0;
     $height_distrib = sp + 12|0;
     $p = sp + 8|0;
     $2 = sp + 4|0;
     $3 = sp;
     ;HEAP32[$this>>2]=HEAP32[$block>>2]|0;HEAP32[$this+4>>2]=HEAP32[$block+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$block+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$block+12>>2]|0;
     $4 = ((($this)) + 16|0);
     HEAP32[$4>>2] = 0;
     $5 = ((($this)) + 20|0);
     HEAP32[$5>>2] = 0;
     $6 = ((($this)) + 24|0);
     HEAP32[$6>>2] = 0;
     HEAP32[$pending>>2] = 0;
     $7 = ((($pending)) + 4|0);
     HEAP32[$7>>2] = 0;
     $8 = ((($pending)) + 8|0);
     HEAP32[$8>>2] = 0;
     HEAP32[$pending_tall>>2] = 0;
     $9 = ((($pending_tall)) + 4|0);
     HEAP32[$9>>2] = 0;
     $10 = ((($pending_tall)) + 8|0);
     HEAP32[$10>>2] = 0;
     HEAP32[$pending_short>>2] = 0;
     $11 = ((($pending_short)) + 4|0);
     HEAP32[$11>>2] = 0;
     $12 = ((($pending_short)) + 8|0);
     HEAP32[$12>>2] = 0;
     $13 = ((($blobp_vector)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$blobp_vector>>2]|0;
     $16 = ($14|0)==($15|0);
     L1: do {
      if ($16) {
       $17 = $14;
       $$cast163322537 = $14;
       $$cast163$lcssa = $$cast163322537;$$lcssa = $14;$297 = $17;
       label = 94;
      } else {
       $18 = $15;
       $19 = ((($height_distrib)) + 4|0);
       $20 = ((($height_distrib)) + 8|0);
       $21 = ((($pending_tall)) + 8|0);
       $22 = ((($pending_short)) + 8|0);
       $23 = ((($pending)) + 8|0);
       $29 = $15;$30 = $14;$34 = $18;$end$0431 = 0;
       L4: while(1) {
        $27 = (($end$0431) + 1)|0;
        $28 = (($30) - ($29))|0;
        $31 = $28 >> 2;
        $32 = ($27>>>0)<($31>>>0);
        L6: do {
         if ($32) {
          $33 = (($34) + ($end$0431<<2)|0);
          $35 = HEAP32[$33>>2]|0;
          $36 = ((($35)) + 12|0);
          $37 = HEAP32[$36>>2]|0;
          $39 = $27;$storemerge401 = $37;
          while(1) {
           $38 = (($34) + ($39<<2)|0);
           $40 = HEAP32[$38>>2]|0;
           $41 = ((($40)) + 4|0);
           $42 = HEAP32[$41>>2]|0;
           $43 = ($42|0)>($storemerge401|0);
           if ($43) {
            $$lcssa307 = $39;
            break L6;
           }
           $88 = ((($40)) + 12|0);
           $89 = HEAP32[$88>>2]|0;
           $90 = ($storemerge401|0)<($89|0);
           $91 = $90 ? $89 : $storemerge401;
           $92 = (($39) + 1)|0;
           $93 = ($92>>>0)<($31>>>0);
           if ($93) {
            $39 = $92;$storemerge401 = $91;
           } else {
            $$lcssa307 = $92;
            break;
           }
          }
         } else {
          $$lcssa307 = $27;
         }
        } while(0);
        HEAP32[$height_distrib>>2] = 0;
        HEAP32[$19>>2] = 0;
        HEAP32[$20>>2] = 0;
        $94 = ($end$0431>>>0)<($$lcssa307>>>0);
        if ($94) {
         $141 = 0;$1531 = 0;$1532 = 0;$1533 = 0;$98 = $34;$i$0408 = $end$0431;$samples$0409 = 0;
         while(1) {
          $97 = (($98) + ($i$0408<<2)|0);
          $99 = HEAP32[$97>>2]|0;
          $100 = ((($99)) + 12|0);
          $101 = HEAP32[$100>>2]|0;
          $102 = ((($99)) + 4|0);
          $103 = HEAP32[$102>>2]|0;
          $104 = (($101) + 1)|0;
          $105 = (($104) - ($103))|0;
          $106 = ($105|0)<(10);
          if ($106) {
           $1537 = $1531;$1538 = $1532;$1539 = $1533;$1540 = $141;$samples$1 = $samples$0409;
          } else {
           $107 = ((($99)) + 8|0);
           $108 = HEAP32[$107>>2]|0;
           $109 = HEAP32[$99>>2]|0;
           $110 = (($108) + 1)|0;
           $111 = (($110) - ($109))|0;
           $112 = ($111*5)|0;
           $113 = ($105|0)>=($112|0);
           $114 = ($105*3)|0;
           $115 = ($111|0)>=($114|0);
           $or$cond = $115 | $113;
           if ($or$cond) {
            $1537 = $1531;$1538 = $1532;$1539 = $1533;$1540 = $141;$samples$1 = $samples$0409;
           } else {
            $131 = (($98) + ($i$0408<<2)|0);
            $132 = HEAP32[$131>>2]|0;
            $133 = ((($132)) + 12|0);
            $134 = HEAP32[$133>>2]|0;
            $135 = ((($132)) + 4|0);
            $136 = HEAP32[$135>>2]|0;
            $137 = (($134) + 1)|0;
            $138 = (($137) - ($136))|0;
            $139 = HEAP32[$19>>2]|0;
            $140 = (($139) - ($141))|0;
            $142 = $140 >> 2;
            $143 = ($138>>>0)<($142>>>0);
            $144 = $139;
            do {
             if ($143) {
              $1541 = $1531;$1542 = $1532;$160 = $1533;
             } else {
              $145 = (($138) + 1)|0;
              $146 = ($145>>>0)>($142>>>0);
              $147 = $141;
              if ($146) {
               $148 = (($145) - ($142))|0;
               __THREW__ = 0;
               invoke_vii(92,($height_distrib|0),($148|0));
               $149 = __THREW__; __THREW__ = 0;
               $150 = $149&1;
               if ($150) {
                label = 39;
                break L4;
               }
               $$pre494 = HEAP32[$height_distrib>>2]|0;
               $151 = $$pre494;
               $1541 = $151;$1542 = $151;$160 = $$pre494;
               break;
              }
              $152 = ($145>>>0)<($142>>>0);
              if ($152) {
               $153 = (($147) + ($145<<2)|0);
               $154 = ($144|0)==($153|0);
               if ($154) {
                $1541 = $1531;$1542 = $1532;$160 = $1533;
               } else {
                $__new_last2$i$i$i = $153;
                $scevgep$i$i$i82 = ((($144)) + -4|0);
                $155 = $scevgep$i$i$i82;
                $156 = (($155) - ($__new_last2$i$i$i))|0;
                $157 = $156 >>> 2;
                $158 = $157 ^ -1;
                $scevgep4$i$i$i83 = (($144) + ($158<<2)|0);
                HEAP32[$19>>2] = $scevgep4$i$i$i83;
                $1541 = $1531;$1542 = $1532;$160 = $1533;
               }
              } else {
               $1541 = $1531;$1542 = $1532;$160 = $1533;
              }
             }
            } while(0);
            $159 = (($160) + ($138<<2)|0);
            $161 = HEAP32[$159>>2]|0;
            $162 = (($161) + 1)|0;
            HEAP32[$159>>2] = $162;
            $163 = (($samples$0409) + 1)|0;
            $164 = $160;
            $1537 = $1541;$1538 = $1542;$1539 = $160;$1540 = $164;$samples$1 = $163;
           }
          }
          $165 = (($i$0408) + 1)|0;
          $166 = ($165>>>0)<($$lcssa307>>>0);
          if (!($166)) {
           $$lcssa857 = $1537;$$lcssa858 = $1538;$$lcssa859 = $1539;$samples$1$lcssa = $samples$1;
           break;
          }
          $$pre = HEAP32[$blobp_vector>>2]|0;
          $141 = $1540;$1531 = $1537;$1532 = $1538;$1533 = $1539;$98 = $$pre;$i$0408 = $165;$samples$0409 = $samples$1;
         }
         $$pre495 = HEAP32[$19>>2]|0;
         $95 = $$pre495;
         $96 = ($$lcssa859|0)==($$pre495|0);
         $or$cond440 = $96 & $94;
         if ($or$cond440) {
          $1534 = $$lcssa857;$1535 = $$pre495;$177 = $$lcssa858;$178 = $95;$i1$0414 = $end$0431;$samples$2415 = $samples$1$lcssa;
          while(1) {
           $167 = HEAP32[$blobp_vector>>2]|0;
           $168 = (($167) + ($i1$0414<<2)|0);
           $169 = HEAP32[$168>>2]|0;
           $170 = ((($169)) + 12|0);
           $171 = HEAP32[$170>>2]|0;
           $172 = ((($169)) + 4|0);
           $173 = HEAP32[$172>>2]|0;
           $174 = (($171) + 1)|0;
           $175 = (($174) - ($173))|0;
           $176 = (($178) - ($177))|0;
           $179 = $176 >> 2;
           $180 = ($175>>>0)<($179>>>0);
           do {
            if ($180) {
             $1543 = $1534;$197 = $1535;
            } else {
             $181 = (($175) + 1)|0;
             $182 = ($181>>>0)>($179>>>0);
             $183 = $177;
             $184 = $178;
             if ($182) {
              $185 = (($181) - ($179))|0;
              __THREW__ = 0;
              invoke_vii(92,($height_distrib|0),($185|0));
              $186 = __THREW__; __THREW__ = 0;
              $187 = $186&1;
              if ($187) {
               label = 38;
               break L4;
              }
              $$pre497 = HEAP32[$height_distrib>>2]|0;
              $188 = $$pre497;
              $1543 = $188;$197 = $$pre497;
              break;
             }
             $189 = ($181>>>0)<($179>>>0);
             if ($189) {
              $190 = (($183) + ($181<<2)|0);
              $191 = ($184|0)==($190|0);
              if ($191) {
               $1543 = $1534;$197 = $1535;
              } else {
               $__new_last2$i$i$i99 = $190;
               $scevgep$i$i$i100 = ((($184)) + -4|0);
               $192 = $scevgep$i$i$i100;
               $193 = (($192) - ($__new_last2$i$i$i99))|0;
               $194 = $193 >>> 2;
               $195 = $194 ^ -1;
               $scevgep4$i$i$i101 = (($184) + ($195<<2)|0);
               HEAP32[$19>>2] = $scevgep4$i$i$i101;
               $1543 = $1534;$197 = $1535;
              }
             } else {
              $1543 = $1534;$197 = $1535;
             }
            }
           } while(0);
           $196 = (($197) + ($175<<2)|0);
           $198 = HEAP32[$196>>2]|0;
           $199 = (($198) + 1)|0;
           HEAP32[$196>>2] = $199;
           $200 = (($samples$2415) + 1)|0;
           $201 = (($i1$0414) + 1)|0;
           $202 = ($201>>>0)<($$lcssa307>>>0);
           if (!($202)) {
            $$lcssa860 = $1543;$$lcssa861 = $197;$$lcssa862 = $200;
            break;
           }
           $203 = $197;
           $$pre496 = HEAP32[$19>>2]|0;
           $1534 = $1543;$1535 = $197;$177 = $203;$178 = $$pre496;$i1$0414 = $201;$samples$2415 = $200;
          }
          $$pre498 = HEAP32[$19>>2]|0;
          $1536 = $$lcssa861;$204 = $$pre498;$206 = $$lcssa860;$samples$3 = $$lcssa862;
         } else {
          $1536 = $$lcssa859;$204 = $95;$206 = $$lcssa857;$samples$3 = $samples$1$lcssa;
         }
         $205 = ($204|0)==($206|0);
         if ($205) {
          $1544 = $1536;$mean_height$2 = 0;
         } else {
          $207 = HEAP32[$height_distrib>>2]|0;
          $$cast443 = $207;
          $208 = (($204) - ($$cast443))|0;
          $209 = $208 >> 2;
          $210 = ($samples$3*9)|0;
          $count$0418 = 0;$i3$0419 = 0;$mean_height$0421 = 0;$valid_samples$0420 = 0;
          while(1) {
           $212 = (($207) + ($i3$0419<<2)|0);
           $213 = HEAP32[$212>>2]|0;
           $214 = (($213) + ($count$0418))|0;
           $215 = ($214*10)|0;
           $216 = ($215>>>0)>=($samples$3>>>0);
           $217 = ($count$0418*10)|0;
           $218 = ($217>>>0)<($210>>>0);
           $or$cond439 = $216 & $218;
           if ($or$cond439) {
            $219 = Math_imul($213, $i3$0419)|0;
            $220 = (($219) + ($mean_height$0421))|0;
            $221 = (($213) + ($valid_samples$0420))|0;
            $mean_height$1 = $220;$valid_samples$1 = $221;
           } else {
            $mean_height$1 = $mean_height$0421;$valid_samples$1 = $valid_samples$0420;
           }
           $222 = (($i3$0419) + 1)|0;
           $223 = ($222>>>0)<($209>>>0);
           if ($223) {
            $count$0418 = $214;$i3$0419 = $222;$mean_height$0421 = $mean_height$1;$valid_samples$0420 = $valid_samples$1;
           } else {
            $mean_height$1$lcssa = $mean_height$1;$valid_samples$1$lcssa = $valid_samples$1;
            break;
           }
          }
          $211 = ($valid_samples$1$lcssa|0)==(0);
          if ($211) {
           $1544 = $207;$mean_height$2 = $mean_height$1$lcssa;
          } else {
           $224 = (($mean_height$1$lcssa|0) / ($valid_samples$1$lcssa|0))&-1;
           $1544 = $207;$mean_height$2 = $224;
          }
         }
         if ($94) {
          $225 = $mean_height$2 << 1;
          $i4$0427 = $end$0431;
          while(1) {
           $235 = HEAP32[$blobp_vector>>2]|0;
           $236 = (($235) + ($i4$0427<<2)|0);
           $237 = HEAP32[$236>>2]|0;
           HEAP32[$p>>2] = $237;
           $238 = ((($237)) + 12|0);
           $239 = HEAP32[$238>>2]|0;
           $240 = ((($237)) + 4|0);
           $241 = HEAP32[$240>>2]|0;
           $242 = (($239) + 1)|0;
           $243 = (($242) - ($241))|0;
           $244 = ($243|0)<(10);
           $245 = $237;
           if ($244) {
            $263 = 1;
           } else {
            $246 = ((($237)) + 8|0);
            $247 = HEAP32[$246>>2]|0;
            $248 = HEAP32[$237>>2]|0;
            $249 = (($247) + 1)|0;
            $250 = (($249) - ($248))|0;
            $251 = ($250*5)|0;
            $252 = ($243|0)<($251|0);
            if ($252) {
             $253 = ($243*3)|0;
             $254 = ($250|0)>=($253|0);
             $263 = $254;
            } else {
             $263 = 1;
            }
           }
           $255 = ((($237)) + 12|0);
           $256 = HEAP32[$255>>2]|0;
           $257 = ((($237)) + 4|0);
           $258 = HEAP32[$257>>2]|0;
           $259 = (($256) + 1)|0;
           $260 = (($259) - ($258))|0;
           $261 = ($260|0)>=($225|0);
           $262 = ($260|0)>($mean_height$2|0);
           $or$cond156 = $263 & $262;
           $or$cond159 = $261 | $or$cond156;
           do {
            if ($or$cond159) {
             $264 = HEAP32[$9>>2]|0;
             $265 = HEAP32[$21>>2]|0;
             $266 = ($264|0)==($265|0);
             if ($266) {
              __THREW__ = 0;
              invoke_vii(70,($pending_tall|0),($p|0));
              $269 = __THREW__; __THREW__ = 0;
              $270 = $269&1;
              if ($270) {
               label = 37;
               break L4;
              } else {
               break;
              }
             } else {
              HEAP32[$264>>2] = $245;
              $267 = HEAP32[$9>>2]|0;
              $268 = ((($267)) + 4|0);
              HEAP32[$9>>2] = $268;
              break;
             }
            } else {
             $271 = $260 << 1;
             $272 = ($271|0)<=($mean_height$2|0);
             $273 = ($260|0)<(6);
             $or$cond157 = $273 | $272;
             $274 = ($260|0)<($mean_height$2|0);
             $or$cond158 = $263 & $274;
             $or$cond160 = $or$cond158 | $or$cond157;
             if ($or$cond160) {
              $275 = HEAP32[$11>>2]|0;
              $276 = HEAP32[$22>>2]|0;
              $277 = ($275|0)==($276|0);
              if ($277) {
               __THREW__ = 0;
               invoke_vii(70,($pending_short|0),($p|0));
               $280 = __THREW__; __THREW__ = 0;
               $281 = $280&1;
               if ($281) {
                label = 37;
                break L4;
               } else {
                break;
               }
              } else {
               HEAP32[$275>>2] = $245;
               $278 = HEAP32[$11>>2]|0;
               $279 = ((($278)) + 4|0);
               HEAP32[$11>>2] = $279;
               break;
              }
             } else {
              $282 = HEAP32[$7>>2]|0;
              $283 = HEAP32[$23>>2]|0;
              $284 = ($282|0)==($283|0);
              if ($284) {
               __THREW__ = 0;
               invoke_vii(70,($pending|0),($p|0));
               $287 = __THREW__; __THREW__ = 0;
               $288 = $287&1;
               if ($288) {
                label = 37;
                break L4;
               } else {
                break;
               }
              } else {
               HEAP32[$282>>2] = $245;
               $285 = HEAP32[$7>>2]|0;
               $286 = ((($285)) + 4|0);
               HEAP32[$7>>2] = $286;
               break;
              }
             }
            }
           } while(0);
           $289 = (($i4$0427) + 1)|0;
           $290 = ($289>>>0)<($$lcssa307>>>0);
           if ($290) {
            $i4$0427 = $289;
           } else {
            break;
           }
          }
          $$pre499 = HEAP32[$height_distrib>>2]|0;
          $226 = $$pre499;
         } else {
          $226 = $1544;
         }
         $227 = ($226|0)==(0|0);
         $228 = $226;
         if (!($227)) {
          $229 = HEAP32[$19>>2]|0;
          $230 = ($229|0)==($226|0);
          if (!($230)) {
           $scevgep$i$i$i107 = ((($229)) + -4|0);
           $231 = $scevgep$i$i$i107;
           $232 = (($231) - ($228))|0;
           $233 = $232 >>> 2;
           $234 = $233 ^ -1;
           $scevgep4$i$i$i108 = (($229) + ($234<<2)|0);
           HEAP32[$19>>2] = $scevgep4$i$i$i108;
          }
          __ZdlPv($226);
         }
        }
        $291 = HEAP32[$13>>2]|0;
        $292 = HEAP32[$blobp_vector>>2]|0;
        $293 = (($291) - ($292))|0;
        $294 = $293 >> 2;
        $295 = ($$lcssa307>>>0)<($294>>>0);
        $296 = $292;
        if ($295) {
         $29 = $292;$30 = $291;$34 = $296;$end$0431 = $$lcssa307;
        } else {
         $$lcssa863 = $291;$$lcssa864 = $292;$$lcssa865 = $296;
         label = 4;
         break;
        }
       }
       L86: do {
        if ((label|0) == 4) {
         $24 = $$lcssa863;
         $$pre500 = HEAP32[$pending>>2]|0;
         $$pre501 = HEAP32[$7>>2]|0;
         $25 = ($$pre500|0)==($$pre501|0);
         if ($25) {
          $26 = ($$lcssa863|0)==($$lcssa864|0);
          $$cast163322 = $$lcssa864;
          if ($26) {
           $$cast163$lcssa = $$cast163322;$$lcssa = $$lcssa864;$297 = $24;
           label = 94;
           break L1;
          } else {
           $$cast163324 = $$cast163322;$1528 = $24;$1529 = $$lcssa864;$1530 = $$lcssa863;$i6$0323 = 0;
          }
          while(1) {
           $303 = (($$cast163324) + ($i6$0323<<2)|0);
           $304 = HEAP32[$303>>2]|0;
           $305 = ($304|0)==(0|0);
           if ($305) {
            $1545 = $1528;$311 = $1529;$312 = $1530;
           } else {
            __THREW__ = 0;
            invoke_vi(72,($304|0));
            $306 = __THREW__; __THREW__ = 0;
            $307 = $306&1;
            if ($307) {
             $$lcssa787 = $304;
             break;
            }
            __ZdlPv($304);
            $$pre518 = HEAP32[$13>>2]|0;
            $$pre519 = HEAP32[$blobp_vector>>2]|0;
            $308 = $$pre518;
            $1545 = $308;$311 = $$pre519;$312 = $$pre518;
           }
           $309 = (($i6$0323) + 1)|0;
           $310 = (($312) - ($311))|0;
           $313 = $310 >> 2;
           $314 = ($309>>>0)<($313>>>0);
           $$cast163 = $311;
           if ($314) {
            $$cast163324 = $$cast163;$1528 = $1545;$1529 = $311;$1530 = $312;$i6$0323 = $309;
           } else {
            $$cast163$lcssa = $$cast163;$$lcssa = $311;$297 = $1545;
            label = 94;
            break L1;
           }
          }
          $315 = ___cxa_find_matching_catch_2()|0;
          $316 = tempRet0;
          __ZdlPv($$lcssa787);
          $$0 = $315;$$09 = $316;
          break;
         }
         $317 = ($24|0)==($$lcssa865|0);
         if (!($317)) {
          $scevgep$i$i$i137 = ((($24)) + -4|0);
          $318 = $scevgep$i$i$i137;
          $319 = (($318) - ($$lcssa864))|0;
          $320 = $319 >>> 2;
          $321 = $320 ^ -1;
          $scevgep4$i$i$i138 = (($24) + ($321<<2)|0);
          HEAP32[$13>>2] = $scevgep4$i$i$i138;
         }
         __THREW__ = 0;
         $322 = (invoke_ii(29,28)|0);
         $323 = __THREW__; __THREW__ = 0;
         $324 = $323&1;
         L101: do {
          if ($324) {
           label = 30;
          } else {
           ;HEAP32[$322>>2]=0|0;HEAP32[$322+4>>2]=0|0;HEAP32[$322+8>>2]=0|0;HEAP32[$322+12>>2]=0|0;HEAP32[$322+16>>2]=0|0;HEAP32[$322+20>>2]=0|0;HEAP32[$322+24>>2]=0|0;
           HEAP32[$2>>2] = $322;
           $325 = HEAP32[$5>>2]|0;
           $326 = ((($this)) + 24|0);
           $327 = HEAP32[$326>>2]|0;
           $328 = ($325|0)==($327|0);
           if ($328) {
            __THREW__ = 0;
            invoke_vii(102,($4|0),($2|0));
            $333 = __THREW__; __THREW__ = 0;
            $334 = $333&1;
            if ($334) {
             label = 30;
             break;
            }
            $$pre502 = HEAP32[$5>>2]|0;
            $$pre$phiZ2D = $5;$337 = $$pre502;
           } else {
            $329 = $322;
            HEAP32[$325>>2] = $329;
            $330 = HEAP32[$5>>2]|0;
            $331 = ((($330)) + 4|0);
            HEAP32[$5>>2] = $331;
            $332 = $331;
            $$pre$phiZ2D = $5;$337 = $332;
           }
           $335 = HEAP32[$4>>2]|0;
           $336 = (($337) - ($335))|0;
           $338 = $336 >> 2;
           $339 = (($338) + -1)|0;
           $$cast = $335;
           $340 = (($$cast) + ($339<<2)|0);
           $341 = HEAP32[$340>>2]|0;
           __THREW__ = 0;
           $342 = (invoke_ii(29,40)|0);
           $343 = __THREW__; __THREW__ = 0;
           $344 = $343&1;
           if ($344) {
            label = 30;
           } else {
            $345 = HEAP32[$pending>>2]|0;
            $346 = HEAP32[$345>>2]|0;
            ;HEAP32[$342>>2]=HEAP32[$346>>2]|0;HEAP32[$342+4>>2]=HEAP32[$346+4>>2]|0;HEAP32[$342+8>>2]=HEAP32[$346+8>>2]|0;HEAP32[$342+12>>2]=HEAP32[$346+12>>2]|0;
            $347 = ((($342)) + 16|0);
            HEAP32[$347>>2] = 0;
            $348 = ((($342)) + 20|0);
            HEAP32[$348>>2] = 0;
            $349 = ((($342)) + 24|0);
            HEAP32[$349>>2] = 0;
            __THREW__ = 0;
            $350 = (invoke_ii(29,4)|0);
            $351 = __THREW__; __THREW__ = 0;
            $352 = $351&1;
            if ($352) {
             $371 = ___cxa_find_matching_catch_2()|0;
             $372 = tempRet0;
             __ZdlPv($342);
             $$0 = $371;$$09 = $372;
             break L86;
            }
            $353 = $346;
            HEAP32[$347>>2] = $350;
            $354 = ((($350)) + 4|0);
            HEAP32[$349>>2] = $354;
            HEAP32[$350>>2] = $353;
            HEAP32[$348>>2] = $354;
            $355 = ((($342)) + 28|0);
            HEAP32[$355>>2] = 0;
            $356 = ((($342)) + 32|0);
            HEAP32[$356>>2] = 0;
            $357 = ((($342)) + 36|0);
            HEAP32[$357>>2] = 0;
            __THREW__ = 0;
            (invoke_iiii(103,($341|0),($342|0),0)|0);
            $358 = __THREW__; __THREW__ = 0;
            $359 = $358&1;
            if ($359) {
             label = 30;
            } else {
             $360 = HEAP32[$7>>2]|0;
             $361 = HEAP32[$pending>>2]|0;
             $362 = (($360) - ($361))|0;
             $363 = $362 >> 2;
             $364 = ($363>>>0)>(1);
             L113: do {
              if ($364) {
               $$in536 = $361;$current_line$0398 = $339;$i7$0397 = 1;
               L115: while(1) {
                $373 = $$in536;
                $374 = (($373) + ($i7$0397<<2)|0);
                $375 = HEAP32[$374>>2]|0;
                $376 = (($current_line$0398) + -2)|0;
                $377 = ($339|0)<($376|0);
                $378 = $377 ? $376 : $339;
                $379 = ((($375)) + 12|0);
                $$pre503 = HEAP32[$4>>2]|0;
                $381 = $$pre503;$current_line$1 = $378;
                while(1) {
                 $380 = (($381) + ($current_line$1<<2)|0);
                 $382 = HEAP32[$380>>2]|0;
                 $383 = ((($382)) + 16|0);
                 $384 = ((($382)) + 20|0);
                 $385 = HEAP32[$384>>2]|0;
                 $386 = HEAP32[$383>>2]|0;
                 $387 = (($385) - ($386))|0;
                 $388 = $387 >> 2;
                 $cr$0$ph = 0;$j$0$in$ph = $388;
                 L119: while(1) {
                  $389 = ($j$0$in$ph|0)>(0);
                  if ($389) {
                   $j$0393$in = $j$0$in$ph;
                  } else {
                   $1547 = 0;$cl$2145 = 0;$cr$0$ph845 = $cr$0$ph;
                   break;
                  }
                  while(1) {
                   $j$0393 = (($j$0393$in) + -1)|0;
                   $390 = HEAP32[$4>>2]|0;
                   $391 = (($390) + ($current_line$1<<2)|0);
                   $392 = HEAP32[$391>>2]|0;
                   __THREW__ = 0;
                   $393 = (invoke_iii(104,($392|0),($j$0393|0))|0);
                   $394 = __THREW__; __THREW__ = 0;
                   $395 = $394&1;
                   if ($395) {
                    label = 26;
                    break L115;
                   }
                   __THREW__ = 0;
                   $396 = (invoke_iii(105,($375|0),($393|0))|0);
                   $397 = __THREW__; __THREW__ = 0;
                   $398 = $397&1;
                   if ($398) {
                    label = 26;
                    break L115;
                   }
                   if (!($396)) {
                    __THREW__ = 0;
                    $400 = (invoke_iii(105,($393|0),($375|0))|0);
                    $401 = __THREW__; __THREW__ = 0;
                    $402 = $401&1;
                    if ($402) {
                     label = 26;
                     break L115;
                    }
                    if (!($400)) {
                     $$lcssa835 = $393;$$lcssa838 = $393;$j$0393$lcssa833 = $j$0393;
                     break;
                    }
                   }
                   $399 = ($j$0393$in|0)>(1);
                   if ($399) {
                    $j$0393$in = $j$0393;
                   } else {
                    $1547 = 0;$cl$2145 = 0;$cr$0$ph845 = $cr$0$ph;
                    break L119;
                   }
                  }
                  __THREW__ = 0;
                  $403 = (invoke_iii(106,($375|0),($$lcssa838|0))|0);
                  $404 = __THREW__; __THREW__ = 0;
                  $405 = $404&1;
                  if ($405) {
                   label = 27;
                   break L115;
                  }
                  if ($403) {
                   $cr$0$ph = $$lcssa835;$j$0$in$ph = $j$0393$lcssa833;
                  } else {
                   $$lcssa835$lcssa837 = $$lcssa835;$$lcssa838$lcssa840 = $$lcssa838;$cr$0$ph$lcssa843 = $cr$0$ph;
                   label = 127;
                   break;
                  }
                 }
                 if ((label|0) == 127) {
                  label = 0;
                  __THREW__ = 0;
                  $406 = (invoke_iii(107,($$lcssa838$lcssa840|0),($375|0))|0);
                  $407 = __THREW__; __THREW__ = 0;
                  $408 = $407&1;
                  if ($408) {
                   label = 28;
                   break L115;
                  }
                  if ($406) {
                   $current_line$1$lcssa848 = $current_line$1;
                   label = 136;
                   break;
                  }
                  __THREW__ = 0;
                  $409 = (invoke_iii(107,($375|0),($$lcssa838$lcssa840|0))|0);
                  $410 = __THREW__; __THREW__ = 0;
                  $411 = $410&1;
                  if ($411) {
                   label = 28;
                   break L115;
                  }
                  if ($409) {
                   $current_line$1$lcssa848 = $current_line$1;
                   label = 136;
                   break;
                  } else {
                   $1547 = 1;$cl$2145 = $$lcssa835$lcssa837;$cr$0$ph845 = $cr$0$ph$lcssa843;
                  }
                 }
                 $412 = ($cr$0$ph845|0)!=(0|0);
                 if ($412) {
                  __THREW__ = 0;
                  $413 = (invoke_iii(107,($cr$0$ph845|0),($375|0))|0);
                  $414 = __THREW__; __THREW__ = 0;
                  $415 = $414&1;
                  if ($415) {
                   label = 28;
                   break L115;
                  }
                  if ($413) {
                   $current_line$1$lcssa848 = $current_line$1;
                   label = 136;
                   break;
                  }
                  __THREW__ = 0;
                  $416 = (invoke_iii(107,($375|0),($cr$0$ph845|0))|0);
                  $417 = __THREW__; __THREW__ = 0;
                  $418 = $417&1;
                  if ($418) {
                   label = 28;
                   break L115;
                  }
                  if ($416) {
                   $current_line$1$lcssa848 = $current_line$1;
                   label = 136;
                   break;
                  }
                 }
                 if ($1547) {
                  $440 = ((($cl$2145)) + 4|0);
                  $441 = HEAP32[$440>>2]|0;
                  $442 = HEAP32[$379>>2]|0;
                  $443 = ($441|0)>($442|0);
                  if ($443) {
                   $current_line$1$lcssa849 = $current_line$1;
                   label = 144;
                   break;
                  }
                 }
                 if ($412) {
                  $444 = ((($cr$0$ph845)) + 4|0);
                  $445 = HEAP32[$444>>2]|0;
                  $446 = HEAP32[$379>>2]|0;
                  $447 = ($445|0)>($446|0);
                  if ($447) {
                   $current_line$1$lcssa849 = $current_line$1;
                   label = 144;
                   break;
                  }
                 }
                 if ($1547) {
                  __THREW__ = 0;
                  $477 = (invoke_iii(109,($cl$2145|0),($375|0))|0);
                  $478 = __THREW__; __THREW__ = 0;
                  $479 = $478&1;
                  if ($479) {
                   label = 28;
                   break L115;
                  }
                  $480 = ($477|0)>(5);
                  if ($480) {
                   $current_line$1$lcssa850 = $current_line$1;
                   label = 156;
                   break;
                  }
                 }
                 if ($412) {
                  __THREW__ = 0;
                  $481 = (invoke_iii(109,($cr$0$ph845|0),($375|0))|0);
                  $482 = __THREW__; __THREW__ = 0;
                  $483 = $482&1;
                  if ($483) {
                   label = 28;
                   break L115;
                  }
                  $484 = ($481|0)>(5);
                  if ($484) {
                   $current_line$1$lcssa850 = $current_line$1;
                   label = 156;
                   break;
                  }
                 }
                 $506 = (($current_line$1) + 1)|0;
                 $507 = HEAP32[$$pre$phiZ2D>>2]|0;
                 $508 = HEAP32[$4>>2]|0;
                 $509 = (($507) - ($508))|0;
                 $510 = $509 >> 2;
                 $511 = ($506|0)<($510|0);
                 $512 = $508;
                 if ($511) {
                  $381 = $512;$current_line$1 = $506;
                 } else {
                  $$lcssa852 = $507;
                  label = 161;
                  break;
                 }
                }
                if ((label|0) == 136) {
                 label = 0;
                 $419 = HEAP32[$4>>2]|0;
                 $420 = (($419) + ($current_line$1$lcssa848<<2)|0);
                 $421 = HEAP32[$420>>2]|0;
                 __THREW__ = 0;
                 $422 = (invoke_ii(29,40)|0);
                 $423 = __THREW__; __THREW__ = 0;
                 $424 = $423&1;
                 if ($424) {
                  label = 29;
                  break;
                 }
                 ;HEAP32[$422>>2]=HEAP32[$375>>2]|0;HEAP32[$422+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$422+8>>2]=HEAP32[$375+8>>2]|0;HEAP32[$422+12>>2]=HEAP32[$375+12>>2]|0;
                 $425 = ((($422)) + 16|0);
                 HEAP32[$425>>2] = 0;
                 $426 = ((($422)) + 20|0);
                 HEAP32[$426>>2] = 0;
                 $427 = ((($422)) + 24|0);
                 HEAP32[$427>>2] = 0;
                 __THREW__ = 0;
                 $428 = (invoke_ii(29,4)|0);
                 $429 = __THREW__; __THREW__ = 0;
                 $430 = $429&1;
                 if ($430) {
                  $$lcssa856 = $422;
                  label = 139;
                  break;
                 }
                 $431 = $375;
                 HEAP32[$425>>2] = $428;
                 $432 = ((($428)) + 4|0);
                 HEAP32[$427>>2] = $432;
                 HEAP32[$428>>2] = $431;
                 HEAP32[$426>>2] = $432;
                 $433 = ((($422)) + 28|0);
                 HEAP32[$433>>2] = 0;
                 $434 = ((($422)) + 32|0);
                 HEAP32[$434>>2] = 0;
                 $435 = ((($422)) + 36|0);
                 HEAP32[$435>>2] = 0;
                 __THREW__ = 0;
                 (invoke_iiii(103,($421|0),($422|0),0)|0);
                 $436 = __THREW__; __THREW__ = 0;
                 $437 = $436&1;
                 if ($437) {
                  label = 29;
                  break;
                 } else {
                  $current_line$2$ph = $current_line$1$lcssa848;
                 }
                }
                else if ((label|0) == 144) {
                 label = 0;
                 $448 = HEAP32[$4>>2]|0;
                 $449 = (($448) + ($current_line$1$lcssa849<<2)|0);
                 $450 = $449;
                 HEAP32[$0>>2] = $450;
                 __THREW__ = 0;
                 $451 = (invoke_ii(29,28)|0);
                 $452 = __THREW__; __THREW__ = 0;
                 $453 = $452&1;
                 if ($453) {
                  label = 29;
                  break;
                 }
                 ;HEAP32[$451>>2]=0|0;HEAP32[$451+4>>2]=0|0;HEAP32[$451+8>>2]=0|0;HEAP32[$451+12>>2]=0|0;HEAP32[$451+16>>2]=0|0;HEAP32[$451+20>>2]=0|0;HEAP32[$451+24>>2]=0|0;
                 HEAP32[$1>>2] = $451;
                 __THREW__ = 0;
                 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
                 (invoke_iiii(108,($4|0),($$byval_copy|0),($1|0))|0);
                 $454 = __THREW__; __THREW__ = 0;
                 $455 = $454&1;
                 if ($455) {
                  label = 29;
                  break;
                 }
                 $456 = HEAP32[$4>>2]|0;
                 $457 = (($456) + ($current_line$1$lcssa849<<2)|0);
                 $458 = HEAP32[$457>>2]|0;
                 __THREW__ = 0;
                 $459 = (invoke_ii(29,40)|0);
                 $460 = __THREW__; __THREW__ = 0;
                 $461 = $460&1;
                 if ($461) {
                  label = 29;
                  break;
                 }
                 ;HEAP32[$459>>2]=HEAP32[$375>>2]|0;HEAP32[$459+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$459+8>>2]=HEAP32[$375+8>>2]|0;HEAP32[$459+12>>2]=HEAP32[$375+12>>2]|0;
                 $462 = ((($459)) + 16|0);
                 HEAP32[$462>>2] = 0;
                 $463 = ((($459)) + 20|0);
                 HEAP32[$463>>2] = 0;
                 $464 = ((($459)) + 24|0);
                 HEAP32[$464>>2] = 0;
                 __THREW__ = 0;
                 $465 = (invoke_ii(29,4)|0);
                 $466 = __THREW__; __THREW__ = 0;
                 $467 = $466&1;
                 if ($467) {
                  $$lcssa855 = $459;
                  label = 149;
                  break;
                 }
                 $468 = $375;
                 HEAP32[$462>>2] = $465;
                 $469 = ((($465)) + 4|0);
                 HEAP32[$464>>2] = $469;
                 HEAP32[$465>>2] = $468;
                 HEAP32[$463>>2] = $469;
                 $470 = ((($459)) + 28|0);
                 HEAP32[$470>>2] = 0;
                 $471 = ((($459)) + 32|0);
                 HEAP32[$471>>2] = 0;
                 $472 = ((($459)) + 36|0);
                 HEAP32[$472>>2] = 0;
                 __THREW__ = 0;
                 (invoke_iiii(103,($458|0),($459|0),0)|0);
                 $473 = __THREW__; __THREW__ = 0;
                 $474 = $473&1;
                 if ($474) {
                  label = 29;
                  break;
                 } else {
                  $current_line$2$ph = $current_line$1$lcssa849;
                 }
                }
                else if ((label|0) == 156) {
                 label = 0;
                 $485 = HEAP32[$4>>2]|0;
                 $486 = (($485) + ($current_line$1$lcssa850<<2)|0);
                 $487 = HEAP32[$486>>2]|0;
                 __THREW__ = 0;
                 $488 = (invoke_ii(29,40)|0);
                 $489 = __THREW__; __THREW__ = 0;
                 $490 = $489&1;
                 if ($490) {
                  label = 29;
                  break;
                 }
                 ;HEAP32[$488>>2]=HEAP32[$375>>2]|0;HEAP32[$488+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$488+8>>2]=HEAP32[$375+8>>2]|0;HEAP32[$488+12>>2]=HEAP32[$375+12>>2]|0;
                 $491 = ((($488)) + 16|0);
                 HEAP32[$491>>2] = 0;
                 $492 = ((($488)) + 20|0);
                 HEAP32[$492>>2] = 0;
                 $493 = ((($488)) + 24|0);
                 HEAP32[$493>>2] = 0;
                 __THREW__ = 0;
                 $494 = (invoke_ii(29,4)|0);
                 $495 = __THREW__; __THREW__ = 0;
                 $496 = $495&1;
                 if ($496) {
                  $$lcssa854 = $488;
                  label = 159;
                  break;
                 }
                 $497 = $375;
                 HEAP32[$491>>2] = $494;
                 $498 = ((($494)) + 4|0);
                 HEAP32[$493>>2] = $498;
                 HEAP32[$494>>2] = $497;
                 HEAP32[$492>>2] = $498;
                 $499 = ((($488)) + 28|0);
                 HEAP32[$499>>2] = 0;
                 $500 = ((($488)) + 32|0);
                 HEAP32[$500>>2] = 0;
                 $501 = ((($488)) + 36|0);
                 HEAP32[$501>>2] = 0;
                 __THREW__ = 0;
                 (invoke_iiii(103,($487|0),($488|0),0)|0);
                 $502 = __THREW__; __THREW__ = 0;
                 $503 = $502&1;
                 if ($503) {
                  label = 29;
                  break;
                 } else {
                  $current_line$2$ph = $current_line$1$lcssa850;
                 }
                }
                else if ((label|0) == 161) {
                 label = 0;
                 __THREW__ = 0;
                 $513 = (invoke_ii(29,28)|0);
                 $514 = __THREW__; __THREW__ = 0;
                 $515 = $514&1;
                 if ($515) {
                  label = 29;
                  break;
                 }
                 $516 = $$lcssa852;
                 ;HEAP32[$513>>2]=0|0;HEAP32[$513+4>>2]=0|0;HEAP32[$513+8>>2]=0|0;HEAP32[$513+12>>2]=0|0;HEAP32[$513+16>>2]=0|0;HEAP32[$513+20>>2]=0|0;HEAP32[$513+24>>2]=0|0;
                 HEAP32[$3>>2] = $513;
                 $517 = HEAP32[$326>>2]|0;
                 $518 = ($516|0)==($517|0);
                 if ($518) {
                  __THREW__ = 0;
                  invoke_vii(102,($4|0),($3|0));
                  $524 = __THREW__; __THREW__ = 0;
                  $525 = $524&1;
                  if ($525) {
                   label = 29;
                   break;
                  }
                  $$pre504 = HEAP32[$$pre$phiZ2D>>2]|0;
                  $528 = $$pre504;
                 } else {
                  $519 = $513;
                  $520 = $$lcssa852;
                  HEAP32[$520>>2] = $519;
                  $521 = HEAP32[$5>>2]|0;
                  $522 = ((($521)) + 4|0);
                  HEAP32[$5>>2] = $522;
                  $523 = $522;
                  $528 = $523;
                 }
                 $526 = HEAP32[$4>>2]|0;
                 $527 = (($528) - ($526))|0;
                 $529 = $527 >> 2;
                 $530 = (($529) + -1)|0;
                 $$cast162 = $526;
                 $531 = (($$cast162) + ($530<<2)|0);
                 $532 = HEAP32[$531>>2]|0;
                 __THREW__ = 0;
                 $533 = (invoke_ii(29,40)|0);
                 $534 = __THREW__; __THREW__ = 0;
                 $535 = $534&1;
                 if ($535) {
                  label = 29;
                  break;
                 }
                 ;HEAP32[$533>>2]=HEAP32[$375>>2]|0;HEAP32[$533+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$533+8>>2]=HEAP32[$375+8>>2]|0;HEAP32[$533+12>>2]=HEAP32[$375+12>>2]|0;
                 $536 = ((($533)) + 16|0);
                 HEAP32[$536>>2] = 0;
                 $537 = ((($533)) + 20|0);
                 HEAP32[$537>>2] = 0;
                 $538 = ((($533)) + 24|0);
                 HEAP32[$538>>2] = 0;
                 __THREW__ = 0;
                 $539 = (invoke_ii(29,4)|0);
                 $540 = __THREW__; __THREW__ = 0;
                 $541 = $540&1;
                 if ($541) {
                  $$lcssa853 = $533;
                  label = 169;
                  break;
                 }
                 $542 = $375;
                 HEAP32[$536>>2] = $539;
                 $543 = ((($539)) + 4|0);
                 HEAP32[$538>>2] = $543;
                 HEAP32[$539>>2] = $542;
                 HEAP32[$537>>2] = $543;
                 $544 = ((($533)) + 28|0);
                 HEAP32[$544>>2] = 0;
                 $545 = ((($533)) + 32|0);
                 HEAP32[$545>>2] = 0;
                 $546 = ((($533)) + 36|0);
                 HEAP32[$546>>2] = 0;
                 __THREW__ = 0;
                 (invoke_iiii(103,($532|0),($533|0),0)|0);
                 $547 = __THREW__; __THREW__ = 0;
                 $548 = $547&1;
                 if ($548) {
                  label = 29;
                  break;
                 } else {
                  $current_line$2$ph = $530;
                 }
                }
                $551 = (($i7$0397) + 1)|0;
                $552 = HEAP32[$7>>2]|0;
                $553 = HEAP32[$pending>>2]|0;
                $554 = (($552) - ($553))|0;
                $555 = $554 >> 2;
                $556 = ($551>>>0)<($555>>>0);
                if ($556) {
                 $$in536 = $553;$current_line$0398 = $current_line$2$ph;$i7$0397 = $551;
                } else {
                 break L113;
                }
               }
               if ((label|0) == 26) {
                $78 = ___cxa_find_matching_catch_2()|0;
                $79 = tempRet0;
                $eh$lpad$body$index27Z2D = $79;$eh$lpad$body$indexZ2D = $78;
                break L101;
               }
               else if ((label|0) == 27) {
                $80 = ___cxa_find_matching_catch_2()|0;
                $81 = tempRet0;
                $eh$lpad$body$index27Z2D = $81;$eh$lpad$body$indexZ2D = $80;
                break L101;
               }
               else if ((label|0) == 28) {
                $82 = ___cxa_find_matching_catch_2()|0;
                $83 = tempRet0;
                $eh$lpad$body$index27Z2D = $83;$eh$lpad$body$indexZ2D = $82;
                break L101;
               }
               else if ((label|0) == 29) {
                $84 = ___cxa_find_matching_catch_2()|0;
                $85 = tempRet0;
                $eh$lpad$body$index27Z2D = $85;$eh$lpad$body$indexZ2D = $84;
                break L101;
               }
               else if ((label|0) == 139) {
                $438 = ___cxa_find_matching_catch_2()|0;
                $439 = tempRet0;
                __ZdlPv($$lcssa856);
                $$0 = $438;$$09 = $439;
                break L86;
               }
               else if ((label|0) == 149) {
                $475 = ___cxa_find_matching_catch_2()|0;
                $476 = tempRet0;
                __ZdlPv($$lcssa855);
                $$0 = $475;$$09 = $476;
                break L86;
               }
               else if ((label|0) == 159) {
                $504 = ___cxa_find_matching_catch_2()|0;
                $505 = tempRet0;
                __ZdlPv($$lcssa854);
                $$0 = $504;$$09 = $505;
                break L86;
               }
               else if ((label|0) == 169) {
                $549 = ___cxa_find_matching_catch_2()|0;
                $550 = tempRet0;
                __ZdlPv($$lcssa853);
                $$0 = $549;$$09 = $550;
                break L86;
               }
              }
             } while(0);
             $365 = HEAP32[$$pre$phiZ2D>>2]|0;
             $366 = HEAP32[$4>>2]|0;
             $367 = (($365) - ($366))|0;
             $368 = ($367|0)>(0);
             L189: do {
              if ($368) {
               $369 = $366;
               $370 = $367 >> 2;
               $1546 = $365;$564 = $369;$i9$0389$in = $370;
               while(1) {
                $i9$0389 = (($i9$0389$in) + -1)|0;
                $563 = (($564) + ($i9$0389<<2)|0);
                $565 = HEAP32[$563>>2]|0;
                $566 = ((($565)) + 16|0);
                $567 = ((($565)) + 20|0);
                $568 = HEAP32[$567>>2]|0;
                $569 = HEAP32[$566>>2]|0;
                $570 = ($568|0)==($569|0);
                if ($570) {
                 $572 = ($565|0)==(0|0);
                 if ($572) {
                  $576 = $564;$580 = $1546;
                 } else {
                  __THREW__ = 0;
                  invoke_vi(111,($565|0));
                  $573 = __THREW__; __THREW__ = 0;
                  $574 = $573&1;
                  if ($574) {
                   $$lcssa831 = $565;
                   break;
                  }
                  __ZdlPv($565);
                  $$pre$i91 = HEAP32[$4>>2]|0;
                  $$pre506 = HEAP32[$$pre$phiZ2D>>2]|0;
                  $576 = $$pre$i91;$580 = $$pre506;
                 }
                 $575 = (($576) + ($i9$0389<<2)|0);
                 $577 = ((($575)) + 4|0);
                 $578 = $577;
                 $579 = (($580) - ($578))|0;
                 $581 = $579 >> 2;
                 _memmove(($575|0),($577|0),($579|0))|0;
                 $582 = (($575) + ($581<<2)|0);
                 $583 = HEAP32[$5>>2]|0;
                 $584 = ($583|0)==($582|0);
                 $585 = $583;
                 if ($584) {
                  $1548 = $585;
                 } else {
                  $__new_last2$i$i$i$i92 = $582;
                  $scevgep$i$i$i$i93 = ((($583)) + -4|0);
                  $586 = $scevgep$i$i$i$i93;
                  $587 = (($586) - ($__new_last2$i$i$i$i92))|0;
                  $588 = $587 >>> 2;
                  $589 = $588 ^ -1;
                  $scevgep4$i$i$i$i94 = (($583) + ($589<<2)|0);
                  HEAP32[$5>>2] = $scevgep4$i$i$i$i94;
                  $590 = $scevgep4$i$i$i$i94;
                  $1548 = $590;
                 }
                } else {
                 $1548 = $1546;
                }
                $571 = ($i9$0389$in|0)>(1);
                if (!($571)) {
                 break L189;
                }
                $$pre505 = HEAP32[$4>>2]|0;
                $1546 = $1548;$564 = $$pre505;$i9$0389$in = $i9$0389;
               }
               $591 = ___cxa_find_matching_catch_2()|0;
               $592 = tempRet0;
               __ZdlPv($$lcssa831);
               $eh$lpad$body$index27Z2D = $592;$eh$lpad$body$indexZ2D = $591;
               break L101;
              }
             } while(0);
             __THREW__ = 0;
             invoke_vi(110,($4|0));
             $557 = __THREW__; __THREW__ = 0;
             $558 = $557&1;
             if ($558) {
              label = 30;
             } else {
              $559 = HEAP32[$$pre$phiZ2D>>2]|0;
              $560 = HEAP32[$4>>2]|0;
              $561 = (($559) - ($560))|0;
              $562 = ($561|0)>(0);
              L205: do {
               if ($562) {
                $$in535 = $560;$i10$0386 = 0;
                while(1) {
                 $596 = $$in535;
                 $597 = (($596) + ($i10$0386<<2)|0);
                 $598 = HEAP32[$597>>2]|0;
                 __THREW__ = 0;
                 invoke_vi(112,($598|0));
                 $599 = __THREW__; __THREW__ = 0;
                 $600 = $599&1;
                 if ($600) {
                  break;
                 }
                 $601 = (($i10$0386) + 1)|0;
                 $602 = HEAP32[$$pre$phiZ2D>>2]|0;
                 $603 = HEAP32[$4>>2]|0;
                 $604 = (($602) - ($603))|0;
                 $605 = $604 >> 2;
                 $606 = ($601|0)<($605|0);
                 if ($606) {
                  $$in535 = $603;$i10$0386 = $601;
                 } else {
                  break L205;
                 }
                }
                $76 = ___cxa_find_matching_catch_2()|0;
                $77 = tempRet0;
                $eh$lpad$body$index27Z2D = $77;$eh$lpad$body$indexZ2D = $76;
                break L101;
               }
              } while(0);
              $593 = HEAP32[$9>>2]|0;
              $594 = HEAP32[$pending_tall>>2]|0;
              $595 = ($593|0)==($594|0);
              L211: do {
               if (!($595)) {
                $$in = $594;$current_line$3384 = 0;$i11$0383 = 0;
                L212: while(1) {
                 $610 = $$in;
                 $611 = (($610) + ($i11$0383<<2)|0);
                 $612 = HEAP32[$611>>2]|0;
                 $613 = ($current_line$3384|0)>(0);
                 L214: do {
                  if ($613) {
                   $614 = ((($612)) + 12|0);
                   $615 = ((($612)) + 8|0);
                   $current_line$4373 = $current_line$3384;
                   while(1) {
                    $616 = HEAP32[$614>>2]|0;
                    $617 = HEAP32[$4>>2]|0;
                    $618 = (($617) + ($current_line$4373<<2)|0);
                    $619 = HEAP32[$618>>2]|0;
                    $620 = HEAP32[$612>>2]|0;
                    $621 = HEAP32[$615>>2]|0;
                    $622 = (($621) + ($620))|0;
                    $623 = (($622|0) / 2)&-1;
                    __THREW__ = 0;
                    $624 = (invoke_iii(113,($619|0),($623|0))|0);
                    $625 = __THREW__; __THREW__ = 0;
                    $626 = $625&1;
                    if ($626) {
                     label = 23;
                     break L212;
                    }
                    $627 = ($616|0)<($624|0);
                    if (!($627)) {
                     $current_line$4$lcssa = $current_line$4373;
                     break L214;
                    }
                    $636 = (($current_line$4373) + -1)|0;
                    $637 = ($current_line$4373|0)>(1);
                    if ($637) {
                     $current_line$4373 = $636;
                    } else {
                     $current_line$4$lcssa = $636;
                     break;
                    }
                   }
                  } else {
                   $current_line$4$lcssa = $current_line$3384;
                  }
                 } while(0);
                 $628 = HEAP32[$$pre$phiZ2D>>2]|0;
                 $629 = HEAP32[$4>>2]|0;
                 $630 = (($628) - ($629))|0;
                 $631 = $630 >> 2;
                 $632 = ($current_line$4$lcssa|0)<($631|0);
                 $633 = $629;
                 if ($632) {
                  $634 = ((($612)) + 4|0);
                  $635 = ((($612)) + 8|0);
                  $640 = $633;$current_line$5379 = $current_line$4$lcssa;
                  while(1) {
                   $638 = HEAP32[$634>>2]|0;
                   $639 = (($640) + ($current_line$5379<<2)|0);
                   $641 = HEAP32[$639>>2]|0;
                   $642 = HEAP32[$612>>2]|0;
                   $643 = HEAP32[$635>>2]|0;
                   $644 = (($643) + ($642))|0;
                   $645 = (($644|0) / 2)&-1;
                   __THREW__ = 0;
                   $646 = (invoke_iii(113,($641|0),($645|0))|0);
                   $647 = __THREW__; __THREW__ = 0;
                   $648 = $647&1;
                   if ($648) {
                    label = 22;
                    break L212;
                   }
                   $649 = ($638|0)>($646|0);
                   if (!($649)) {
                    $current_line$5379$lcssa816 = $current_line$5379;
                    label = 195;
                    break;
                   }
                   $650 = (($current_line$5379) + 1)|0;
                   $651 = HEAP32[$$pre$phiZ2D>>2]|0;
                   $652 = HEAP32[$4>>2]|0;
                   $653 = (($651) - ($652))|0;
                   $654 = $653 >> 2;
                   $655 = ($650|0)<($654|0);
                   $656 = $652;
                   if ($655) {
                    $640 = $656;$current_line$5379 = $650;
                   } else {
                    $$pre507 = $651;$$pre508 = $652;$current_line$5$lcssa$ph = $650;
                    break;
                   }
                  }
                  if ((label|0) == 195) {
                   label = 0;
                   $$pre507$pre = HEAP32[$$pre$phiZ2D>>2]|0;
                   $$pre508$pre = HEAP32[$4>>2]|0;
                   $$pre507 = $$pre507$pre;$$pre508 = $$pre508$pre;$current_line$5$lcssa$ph = $current_line$5379$lcssa816;
                  }
                  $657 = $$pre508;
                  $659 = $$pre508;$660 = $$pre507;$670 = $657;$current_line$5$lcssa = $current_line$5$lcssa$ph;
                 } else {
                  $659 = $629;$660 = $628;$670 = $633;$current_line$5$lcssa = $current_line$4$lcssa;
                 }
                 $658 = (($660) - ($659))|0;
                 $661 = $658 >> 2;
                 $662 = ($current_line$5$lcssa|0)<($661|0);
                 L231: do {
                  if ($662) {
                   $669 = (($670) + ($current_line$5$lcssa<<2)|0);
                   $671 = HEAP32[$669>>2]|0;
                   $672 = ((($671)) + 12|0);
                   $673 = HEAP32[$672>>2]|0;
                   __THREW__ = 0;
                   $674 = (invoke_ii(114,($671|0))|0);
                   $675 = __THREW__; __THREW__ = 0;
                   $676 = $675&1;
                   if ($676) {
                    label = 24;
                    break L212;
                   }
                   $677 = ((($612)) + 12|0);
                   $678 = HEAP32[$677>>2]|0;
                   $679 = ((($612)) + 4|0);
                   $680 = HEAP32[$679>>2]|0;
                   $681 = (($678) + 1)|0;
                   $682 = (($681) - ($680))|0;
                   $683 = ($674*3)|0;
                   $684 = ($682|0)>($683|0);
                   do {
                    if (!($684)) {
                     $685 = $674 << 1;
                     $686 = ($682|0)>($685|0);
                     if ($686) {
                      __THREW__ = 0;
                      $687 = (invoke_iii(104,($671|0),($673|0))|0);
                      $688 = __THREW__; __THREW__ = 0;
                      $689 = $688&1;
                      if ($689) {
                       label = 24;
                       break L212;
                      }
                      $690 = HEAP32[$687>>2]|0;
                      $691 = HEAP32[$612>>2]|0;
                      $692 = ($690|0)<($691|0);
                      if (!($692)) {
                       break;
                      }
                     }
                     __THREW__ = 0;
                     $693 = (invoke_ii(29,40)|0);
                     $694 = __THREW__; __THREW__ = 0;
                     $695 = $694&1;
                     if ($695) {
                      label = 24;
                      break L212;
                     }
                     ;HEAP32[$693>>2]=HEAP32[$612>>2]|0;HEAP32[$693+4>>2]=HEAP32[$612+4>>2]|0;HEAP32[$693+8>>2]=HEAP32[$612+8>>2]|0;HEAP32[$693+12>>2]=HEAP32[$612+12>>2]|0;
                     $696 = ((($693)) + 16|0);
                     HEAP32[$696>>2] = 0;
                     $697 = ((($693)) + 20|0);
                     HEAP32[$697>>2] = 0;
                     $698 = ((($693)) + 24|0);
                     HEAP32[$698>>2] = 0;
                     __THREW__ = 0;
                     $699 = (invoke_ii(29,4)|0);
                     $700 = __THREW__; __THREW__ = 0;
                     $701 = $700&1;
                     if ($701) {
                      $$lcssa829 = $693;
                      label = 211;
                      break L212;
                     }
                     $702 = $612;
                     HEAP32[$696>>2] = $699;
                     $703 = ((($699)) + 4|0);
                     HEAP32[$698>>2] = $703;
                     HEAP32[$699>>2] = $702;
                     HEAP32[$697>>2] = $703;
                     $704 = ((($693)) + 28|0);
                     HEAP32[$704>>2] = 0;
                     $705 = ((($693)) + 32|0);
                     HEAP32[$705>>2] = 0;
                     $706 = ((($693)) + 36|0);
                     HEAP32[$706>>2] = 0;
                     __THREW__ = 0;
                     (invoke_iiii(103,($671|0),($693|0),0)|0);
                     $707 = __THREW__; __THREW__ = 0;
                     $708 = $707&1;
                     if ($708) {
                      label = 24;
                      break L212;
                     } else {
                      $current_line$6 = $current_line$5$lcssa;
                      break L231;
                     }
                    }
                   } while(0);
                   $711 = ((($671)) + 16|0);
                   $712 = ((($671)) + 20|0);
                   $713 = HEAP32[$712>>2]|0;
                   $714 = HEAP32[$711>>2]|0;
                   $715 = (($713) - ($714))|0;
                   $716 = $715 >> 2;
                   $717 = ($716|0)==(0);
                   do {
                    if (!($717)) {
                     $718 = (($673) + 1)|0;
                     $719 = (($716) + -1)|0;
                     $720 = ($719|0)<($718|0);
                     $721 = $720 ? $719 : $718;
                     __THREW__ = 0;
                     $722 = (invoke_iii(104,($671|0),($721|0))|0);
                     $723 = __THREW__; __THREW__ = 0;
                     $724 = $723&1;
                     if ($724) {
                      label = 24;
                      break L212;
                     }
                     $725 = HEAP32[$722>>2]|0;
                     $726 = HEAP32[$612>>2]|0;
                     $727 = ((($612)) + 8|0);
                     $728 = HEAP32[$727>>2]|0;
                     $729 = (($728) + ($726))|0;
                     $730 = (($729|0) / 2)&-1;
                     $731 = ($725|0)>($730|0);
                     if ($731) {
                      break;
                     }
                     __THREW__ = 0;
                     invoke_vi(72,($612|0));
                     $750 = __THREW__; __THREW__ = 0;
                     $751 = $750&1;
                     if ($751) {
                      $$lcssa826 = $612;
                      label = 221;
                      break L212;
                     }
                     __ZdlPv($612);
                     $current_line$6 = $current_line$5$lcssa;
                     break L231;
                    }
                   } while(0);
                   __THREW__ = 0;
                   $732 = (invoke_ii(29,40)|0);
                   $733 = __THREW__; __THREW__ = 0;
                   $734 = $733&1;
                   if ($734) {
                    label = 24;
                    break L212;
                   }
                   ;HEAP32[$732>>2]=HEAP32[$612>>2]|0;HEAP32[$732+4>>2]=HEAP32[$612+4>>2]|0;HEAP32[$732+8>>2]=HEAP32[$612+8>>2]|0;HEAP32[$732+12>>2]=HEAP32[$612+12>>2]|0;
                   $735 = ((($732)) + 16|0);
                   HEAP32[$735>>2] = 0;
                   $736 = ((($732)) + 20|0);
                   HEAP32[$736>>2] = 0;
                   $737 = ((($732)) + 24|0);
                   HEAP32[$737>>2] = 0;
                   __THREW__ = 0;
                   $738 = (invoke_ii(29,4)|0);
                   $739 = __THREW__; __THREW__ = 0;
                   $740 = $739&1;
                   if ($740) {
                    $$lcssa830 = $732;
                    label = 218;
                    break L212;
                   }
                   $741 = $612;
                   HEAP32[$735>>2] = $738;
                   $742 = ((($738)) + 4|0);
                   HEAP32[$737>>2] = $742;
                   HEAP32[$738>>2] = $741;
                   HEAP32[$736>>2] = $742;
                   $743 = ((($732)) + 28|0);
                   HEAP32[$743>>2] = 0;
                   $744 = ((($732)) + 32|0);
                   HEAP32[$744>>2] = 0;
                   $745 = ((($732)) + 36|0);
                   HEAP32[$745>>2] = 0;
                   __THREW__ = 0;
                   (invoke_iiii(103,($671|0),($732|0),1)|0);
                   $746 = __THREW__; __THREW__ = 0;
                   $747 = $746&1;
                   if ($747) {
                    label = 24;
                    break L212;
                   } else {
                    $current_line$6 = $current_line$5$lcssa;
                   }
                  } else {
                   $663 = (($current_line$5$lcssa) + -1)|0;
                   $664 = ($612|0)==(0|0);
                   if ($664) {
                    $current_line$6 = $663;
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vi(72,($612|0));
                   $665 = __THREW__; __THREW__ = 0;
                   $666 = $665&1;
                   if ($666) {
                    $$lcssa823 = $612;
                    label = 202;
                    break L212;
                   }
                   __ZdlPv($612);
                   $current_line$6 = $663;
                  }
                 } while(0);
                 $754 = (($i11$0383) + 1)|0;
                 $755 = HEAP32[$9>>2]|0;
                 $756 = HEAP32[$pending_tall>>2]|0;
                 $757 = (($755) - ($756))|0;
                 $758 = $757 >> 2;
                 $759 = ($754>>>0)<($758>>>0);
                 if ($759) {
                  $$in = $756;$current_line$3384 = $current_line$6;$i11$0383 = $754;
                 } else {
                  break L211;
                 }
                }
                if ((label|0) == 22) {
                 $70 = ___cxa_find_matching_catch_2()|0;
                 $71 = tempRet0;
                 $eh$lpad$body$index27Z2D = $71;$eh$lpad$body$indexZ2D = $70;
                 break L101;
                }
                else if ((label|0) == 23) {
                 $72 = ___cxa_find_matching_catch_2()|0;
                 $73 = tempRet0;
                 $eh$lpad$body$index27Z2D = $73;$eh$lpad$body$indexZ2D = $72;
                 break L101;
                }
                else if ((label|0) == 24) {
                 $74 = ___cxa_find_matching_catch_2()|0;
                 $75 = tempRet0;
                 $eh$lpad$body$index27Z2D = $75;$eh$lpad$body$indexZ2D = $74;
                 break L101;
                }
                else if ((label|0) == 202) {
                 $667 = ___cxa_find_matching_catch_2()|0;
                 $668 = tempRet0;
                 __ZdlPv($$lcssa823);
                 $$0 = $667;$$09 = $668;
                 break L86;
                }
                else if ((label|0) == 211) {
                 $709 = ___cxa_find_matching_catch_2()|0;
                 $710 = tempRet0;
                 __ZdlPv($$lcssa829);
                 $$0 = $709;$$09 = $710;
                 break L86;
                }
                else if ((label|0) == 218) {
                 $748 = ___cxa_find_matching_catch_2()|0;
                 $749 = tempRet0;
                 __ZdlPv($$lcssa830);
                 $$0 = $748;$$09 = $749;
                 break L86;
                }
                else if ((label|0) == 221) {
                 $752 = ___cxa_find_matching_catch_2()|0;
                 $753 = tempRet0;
                 __ZdlPv($$lcssa826);
                 $$0 = $752;$$09 = $753;
                 break L86;
                }
               }
              } while(0);
              $607 = HEAP32[$11>>2]|0;
              $608 = HEAP32[$pending_short>>2]|0;
              $609 = ($607|0)==($608|0);
              L264: do {
               if (!($609)) {
                $$in533 = $608;$current_line$7370 = 0;$i14$0369 = 0;
                L265: while(1) {
                 $768 = $$in533;
                 $769 = (($768) + ($i14$0369<<2)|0);
                 $770 = HEAP32[$769>>2]|0;
                 $771 = ($current_line$7370|0)>(0);
                 L267: do {
                  if ($771) {
                   $772 = ((($770)) + 12|0);
                   $773 = ((($770)) + 8|0);
                   $current_line$8356 = $current_line$7370;
                   while(1) {
                    $774 = HEAP32[$772>>2]|0;
                    $775 = HEAP32[$4>>2]|0;
                    $776 = (($775) + ($current_line$8356<<2)|0);
                    $777 = HEAP32[$776>>2]|0;
                    $778 = HEAP32[$770>>2]|0;
                    $779 = HEAP32[$773>>2]|0;
                    $780 = (($779) + ($778))|0;
                    $781 = (($780|0) / 2)&-1;
                    __THREW__ = 0;
                    $782 = (invoke_iii(115,($777|0),($781|0))|0);
                    $783 = __THREW__; __THREW__ = 0;
                    $784 = $783&1;
                    if ($784) {
                     label = 20;
                     break L265;
                    }
                    $785 = ($774|0)<($782|0);
                    if (!($785)) {
                     $current_line$8$lcssa = $current_line$8356;
                     break L267;
                    }
                    $786 = (($current_line$8356) + -1)|0;
                    $787 = ($current_line$8356|0)>(1);
                    if ($787) {
                     $current_line$8356 = $786;
                    } else {
                     $current_line$8$lcssa = $786;
                     break;
                    }
                   }
                  } else {
                   $current_line$8$lcssa = $current_line$7370;
                  }
                 } while(0);
                 $788 = (($current_line$8$lcssa) + -1)|0;
                 $789 = ($788|0)>(0);
                 $790 = $789 ? $788 : 0;
                 $791 = HEAP32[$$pre$phiZ2D>>2]|0;
                 $792 = HEAP32[$4>>2]|0;
                 $793 = (($791) - ($792))|0;
                 $794 = $793 >> 2;
                 $795 = ($current_line$8$lcssa|0)<($794|0);
                 $796 = $792;
                 if ($795) {
                  $797 = ((($770)) + 4|0);
                  $798 = ((($770)) + 8|0);
                  $801 = $796;$current_line$9363 = $current_line$8$lcssa;
                  while(1) {
                   $799 = HEAP32[$797>>2]|0;
                   $800 = (($801) + ($current_line$9363<<2)|0);
                   $802 = HEAP32[$800>>2]|0;
                   $803 = HEAP32[$770>>2]|0;
                   $804 = HEAP32[$798>>2]|0;
                   $805 = (($804) + ($803))|0;
                   $806 = (($805|0) / 2)&-1;
                   __THREW__ = 0;
                   $807 = (invoke_iii(116,($802|0),($806|0))|0);
                   $808 = __THREW__; __THREW__ = 0;
                   $809 = $808&1;
                   if ($809) {
                    label = 19;
                    break L265;
                   }
                   $810 = ($799|0)>($807|0);
                   if (!($810)) {
                    $current_line$9363$lcssa804 = $current_line$9363;
                    label = 234;
                    break;
                   }
                   $811 = (($current_line$9363) + 1)|0;
                   $812 = HEAP32[$$pre$phiZ2D>>2]|0;
                   $813 = HEAP32[$4>>2]|0;
                   $814 = (($812) - ($813))|0;
                   $815 = $814 >> 2;
                   $816 = ($811|0)<($815|0);
                   $817 = $813;
                   if ($816) {
                    $801 = $817;$current_line$9363 = $811;
                   } else {
                    $$pre509 = $812;$$pre510 = $813;$current_line$9$lcssa$ph = $811;
                    break;
                   }
                  }
                  if ((label|0) == 234) {
                   label = 0;
                   $$pre509$pre = HEAP32[$$pre$phiZ2D>>2]|0;
                   $$pre510$pre = HEAP32[$4>>2]|0;
                   $$pre509 = $$pre509$pre;$$pre510 = $$pre510$pre;$current_line$9$lcssa$ph = $current_line$9363$lcssa804;
                  }
                  $818 = $$pre510;
                  $820 = $$pre510;$821 = $$pre509;$826 = $818;$current_line$9$lcssa = $current_line$9$lcssa$ph;
                 } else {
                  $820 = $792;$821 = $791;$826 = $796;$current_line$9$lcssa = $current_line$8$lcssa;
                 }
                 $819 = (($821) - ($820))|0;
                 $822 = $819 >> 2;
                 $823 = ($current_line$9$lcssa|0)<($822|0);
                 do {
                  if ($823) {
                   $current_line$10 = $current_line$9$lcssa;$temp$1 = $790;
                   label = 250;
                  } else {
                   $824 = (($current_line$9$lcssa) + -1)|0;
                   $825 = (($826) + ($824<<2)|0);
                   $827 = HEAP32[$825>>2]|0;
                   $828 = HEAP32[$770>>2]|0;
                   $829 = ((($770)) + 8|0);
                   $830 = HEAP32[$829>>2]|0;
                   $831 = (($830) + ($828))|0;
                   $832 = (($831|0) / 2)&-1;
                   __THREW__ = 0;
                   $833 = (invoke_iii(117,($827|0),($832|0))|0);
                   $834 = __THREW__; __THREW__ = 0;
                   $835 = $834&1;
                   if ($835) {
                    label = 21;
                    break L265;
                   }
                   $836 = ((($770)) + 4|0);
                   $837 = HEAP32[$836>>2]|0;
                   $838 = HEAP32[$770>>2]|0;
                   $839 = HEAP32[$829>>2]|0;
                   $840 = (($839) + ($838))|0;
                   $841 = (($840|0) / 2)&-1;
                   __THREW__ = 0;
                   $842 = (invoke_iii(116,($827|0),($841|0))|0);
                   $843 = __THREW__; __THREW__ = 0;
                   $844 = $843&1;
                   if ($844) {
                    label = 21;
                    break L265;
                   }
                   $845 = HEAP32[$827>>2]|0;
                   $846 = ((($827)) + 4|0);
                   $847 = HEAP32[$846>>2]|0;
                   $848 = ($845|0)==($847|0);
                   if ($848) {
                    $852 = 0;
                   } else {
                    $849 = ((($845)) + 16|0);
                    $850 = HEAP32[$849>>2]|0;
                    $852 = $850;
                   }
                   $851 = (($852|0) / 2)&-1;
                   $853 = (($851) + ($842))|0;
                   $854 = ($837|0)>($853|0);
                   if (!($854)) {
                    $current_line$10 = $824;$temp$1 = $824;
                    label = 250;
                    break;
                   }
                   $855 = ($833|0)==(0|0);
                   if (!($855)) {
                    $856 = HEAP32[$836>>2]|0;
                    $857 = ((($833)) + 12|0);
                    $858 = HEAP32[$857>>2]|0;
                    if ($848) {
                     $862 = 0;
                    } else {
                     $859 = ((($845)) + 16|0);
                     $860 = HEAP32[$859>>2]|0;
                     $862 = $860;
                    }
                    $861 = (($862|0) / 2)&-1;
                    $863 = (($861) + ($858))|0;
                    $864 = ($856|0)>($863|0);
                    if (!($864)) {
                     $current_line$10 = $824;$temp$1 = $824;
                     label = 250;
                     break;
                    }
                   }
                   __THREW__ = 0;
                   invoke_vi(72,($770|0));
                   $865 = __THREW__; __THREW__ = 0;
                   $866 = $865&1;
                   if ($866) {
                    $$lcssa812 = $770;
                    label = 248;
                    break L265;
                   }
                   __ZdlPv($770);
                   $current_line$12 = $824;
                  }
                 } while(0);
                 if ((label|0) == 250) {
                  label = 0;
                  $869 = (($current_line$10) - ($temp$1))|0;
                  $870 = ($869|0)>(1);
                  $871 = (($current_line$10) + -1)|0;
                  $$temp$1 = $870 ? $871 : $temp$1;
                  $872 = ($current_line$10|0)==($$temp$1|0);
                  if ($872) {
                   $current_line$11 = $current_line$10;
                  } else {
                   $873 = ((($770)) + 4|0);
                   $874 = HEAP32[$873>>2]|0;
                   $875 = HEAP32[$4>>2]|0;
                   $876 = (($875) + ($$temp$1<<2)|0);
                   $877 = HEAP32[$876>>2]|0;
                   $878 = HEAP32[$770>>2]|0;
                   $879 = ((($770)) + 8|0);
                   $880 = HEAP32[$879>>2]|0;
                   $881 = (($880) + ($878))|0;
                   $882 = (($881|0) / 2)&-1;
                   __THREW__ = 0;
                   $883 = (invoke_iii(116,($877|0),($882|0))|0);
                   $884 = __THREW__; __THREW__ = 0;
                   $885 = $884&1;
                   if ($885) {
                    label = 21;
                    break;
                   }
                   $886 = HEAP32[$4>>2]|0;
                   $887 = (($886) + ($current_line$10<<2)|0);
                   $888 = HEAP32[$887>>2]|0;
                   $889 = HEAP32[$770>>2]|0;
                   $890 = HEAP32[$879>>2]|0;
                   $891 = (($890) + ($889))|0;
                   $892 = (($891|0) / 2)&-1;
                   __THREW__ = 0;
                   $893 = (invoke_iii(115,($888|0),($892|0))|0);
                   $894 = __THREW__; __THREW__ = 0;
                   $895 = $894&1;
                   if ($895) {
                    label = 21;
                    break;
                   }
                   $896 = (($874) - ($883))|0;
                   $897 = $896 << 1;
                   $898 = ((($770)) + 12|0);
                   $899 = HEAP32[$898>>2]|0;
                   $900 = (($893) - ($899))|0;
                   $901 = ($897|0)<($900|0);
                   $$temp$1$current_line$10 = $901 ? $$temp$1 : $current_line$10;
                   $current_line$11 = $$temp$1$current_line$10;
                  }
                  $902 = HEAP32[$4>>2]|0;
                  $903 = (($902) + ($current_line$11<<2)|0);
                  $904 = HEAP32[$903>>2]|0;
                  __THREW__ = 0;
                  $905 = (invoke_ii(29,40)|0);
                  $906 = __THREW__; __THREW__ = 0;
                  $907 = $906&1;
                  if ($907) {
                   label = 21;
                   break;
                  }
                  ;HEAP32[$905>>2]=HEAP32[$770>>2]|0;HEAP32[$905+4>>2]=HEAP32[$770+4>>2]|0;HEAP32[$905+8>>2]=HEAP32[$770+8>>2]|0;HEAP32[$905+12>>2]=HEAP32[$770+12>>2]|0;
                  $908 = ((($905)) + 16|0);
                  HEAP32[$908>>2] = 0;
                  $909 = ((($905)) + 20|0);
                  HEAP32[$909>>2] = 0;
                  $910 = ((($905)) + 24|0);
                  HEAP32[$910>>2] = 0;
                  __THREW__ = 0;
                  $911 = (invoke_ii(29,4)|0);
                  $912 = __THREW__; __THREW__ = 0;
                  $913 = $912&1;
                  if ($913) {
                   $$lcssa815 = $905;
                   label = 258;
                   break;
                  }
                  $914 = $770;
                  HEAP32[$908>>2] = $911;
                  $915 = ((($911)) + 4|0);
                  HEAP32[$910>>2] = $915;
                  HEAP32[$911>>2] = $914;
                  HEAP32[$909>>2] = $915;
                  $916 = ((($905)) + 28|0);
                  HEAP32[$916>>2] = 0;
                  $917 = ((($905)) + 32|0);
                  HEAP32[$917>>2] = 0;
                  $918 = ((($905)) + 36|0);
                  HEAP32[$918>>2] = 0;
                  __THREW__ = 0;
                  (invoke_iiii(103,($904|0),($905|0),0)|0);
                  $919 = __THREW__; __THREW__ = 0;
                  $920 = $919&1;
                  if ($920) {
                   label = 21;
                   break;
                  } else {
                   $current_line$12 = $current_line$11;
                  }
                 }
                 $921 = (($i14$0369) + 1)|0;
                 $922 = HEAP32[$11>>2]|0;
                 $923 = HEAP32[$pending_short>>2]|0;
                 $924 = (($922) - ($923))|0;
                 $925 = $924 >> 2;
                 $926 = ($921>>>0)<($925>>>0);
                 if ($926) {
                  $$in533 = $923;$current_line$7370 = $current_line$12;$i14$0369 = $921;
                 } else {
                  break L264;
                 }
                }
                if ((label|0) == 19) {
                 $64 = ___cxa_find_matching_catch_2()|0;
                 $65 = tempRet0;
                 $eh$lpad$body$index27Z2D = $65;$eh$lpad$body$indexZ2D = $64;
                 break L101;
                }
                else if ((label|0) == 20) {
                 $66 = ___cxa_find_matching_catch_2()|0;
                 $67 = tempRet0;
                 $eh$lpad$body$index27Z2D = $67;$eh$lpad$body$indexZ2D = $66;
                 break L101;
                }
                else if ((label|0) == 21) {
                 $68 = ___cxa_find_matching_catch_2()|0;
                 $69 = tempRet0;
                 $eh$lpad$body$index27Z2D = $69;$eh$lpad$body$indexZ2D = $68;
                 break L101;
                }
                else if ((label|0) == 248) {
                 $867 = ___cxa_find_matching_catch_2()|0;
                 $868 = tempRet0;
                 __ZdlPv($$lcssa812);
                 $$0 = $867;$$09 = $868;
                 break L86;
                }
                else if ((label|0) == 258) {
                 $927 = ___cxa_find_matching_catch_2()|0;
                 $928 = tempRet0;
                 __ZdlPv($$lcssa815);
                 $$0 = $927;$$09 = $928;
                 break L86;
                }
               }
              } while(0);
              $760 = HEAP32[$$pre$phiZ2D>>2]|0;
              $761 = HEAP32[$4>>2]|0;
              $762 = (($760) - ($761))|0;
              $763 = ($762|0)>(8);
              L316: do {
               if ($763) {
                $929 = $761;
                $930 = $762 >> 2;
                $931 = (($930) + -1)|0;
                $932 = (($929) + ($931<<2)|0);
                $933 = HEAP32[$932>>2]|0;
                $934 = ((($933)) + 16|0);
                $935 = ((($933)) + 20|0);
                $936 = HEAP32[$935>>2]|0;
                $937 = HEAP32[$934>>2]|0;
                $938 = (($936) - ($937))|0;
                $939 = ($938|0)>(0);
                L318: do {
                 if ($939) {
                  $940 = ((($page)) + 12|0);
                  $c$0353 = 0;$i20$0352 = 0;
                  while(1) {
                   __THREW__ = 0;
                   $941 = (invoke_iii(104,($933|0),($i20$0352|0))|0);
                   $942 = __THREW__; __THREW__ = 0;
                   $943 = $942&1;
                   if ($943) {
                    label = 18;
                    break;
                   }
                   $944 = ((($941)) + 12|0);
                   $945 = HEAP32[$944>>2]|0;
                   $946 = HEAP32[$940>>2]|0;
                   $947 = ($945|0)<($946|0);
                   if ($947) {
                    $$pre513 = HEAP32[$935>>2]|0;
                    $$pre514 = HEAP32[$934>>2]|0;
                    $983 = $$pre514;$984 = $$pre513;$c$1 = $c$0353;
                   } else {
                    $948 = (($c$0353) + 1)|0;
                    $949 = $948 << 1;
                    $950 = HEAP32[$935>>2]|0;
                    $951 = HEAP32[$934>>2]|0;
                    $952 = (($950) - ($951))|0;
                    $953 = $952 >> 2;
                    $954 = ($949|0)<($953|0);
                    if ($954) {
                     $983 = $951;$984 = $950;$c$1 = $948;
                    } else {
                     break;
                    }
                   }
                   $981 = (($i20$0352) + 1)|0;
                   $982 = (($984) - ($983))|0;
                   $985 = $982 >> 2;
                   $986 = ($981|0)<($985|0);
                   if ($986) {
                    $c$0353 = $c$1;$i20$0352 = $981;
                   } else {
                    break L318;
                   }
                  }
                  if ((label|0) == 18) {
                   $62 = ___cxa_find_matching_catch_2()|0;
                   $63 = tempRet0;
                   $eh$lpad$body$index27Z2D = $63;$eh$lpad$body$indexZ2D = $62;
                   break L101;
                  }
                  $955 = HEAP32[$$pre$phiZ2D>>2]|0;
                  $956 = HEAP32[$4>>2]|0;
                  $957 = (($955) - ($956))|0;
                  $958 = $957 >> 2;
                  $959 = (($958) + -1)|0;
                  $$cast161 = $956;
                  $960 = (($$cast161) + ($959<<2)|0);
                  $961 = HEAP32[$960>>2]|0;
                  $962 = ($961|0)==(0|0);
                  do {
                   if ($962) {
                    $966 = $$cast161;$970 = $955;
                   } else {
                    __THREW__ = 0;
                    invoke_vi(111,($961|0));
                    $963 = __THREW__; __THREW__ = 0;
                    $964 = $963&1;
                    if ($964) {
                     $979 = ___cxa_find_matching_catch_2()|0;
                     $980 = tempRet0;
                     __ZdlPv($961);
                     $eh$lpad$body$index27Z2D = $980;$eh$lpad$body$indexZ2D = $979;
                     break L101;
                    } else {
                     __ZdlPv($961);
                     $$pre$i71 = HEAP32[$4>>2]|0;
                     $$pre511 = HEAP32[$$pre$phiZ2D>>2]|0;
                     $966 = $$pre$i71;$970 = $$pre511;
                     break;
                    }
                   }
                  } while(0);
                  $965 = (($966) + ($959<<2)|0);
                  $967 = ((($965)) + 4|0);
                  $968 = $967;
                  $969 = (($970) - ($968))|0;
                  $971 = $969 >> 2;
                  _memmove(($965|0),($967|0),($969|0))|0;
                  $972 = (($965) + ($971<<2)|0);
                  $973 = HEAP32[$5>>2]|0;
                  $974 = ($973|0)==($972|0);
                  if ($974) {
                   break;
                  }
                  $__new_last2$i$i$i$i72 = $972;
                  $scevgep$i$i$i$i73 = ((($973)) + -4|0);
                  $975 = $scevgep$i$i$i$i73;
                  $976 = (($975) - ($__new_last2$i$i$i$i72))|0;
                  $977 = $976 >>> 2;
                  $978 = $977 ^ -1;
                  $scevgep4$i$i$i$i74 = (($973) + ($978<<2)|0);
                  HEAP32[$5>>2] = $scevgep4$i$i$i$i74;
                 }
                } while(0);
                $987 = HEAP32[$4>>2]|0;
                $988 = HEAP32[$987>>2]|0;
                $989 = ((($page)) + 4|0);
                $990 = HEAP32[$989>>2]|0;
                $991 = ($990|0)<(1);
                $992 = $991 ? 1 : $990;
                $993 = ((($988)) + 16|0);
                $994 = ((($988)) + 20|0);
                $995 = HEAP32[$994>>2]|0;
                $996 = HEAP32[$993>>2]|0;
                $997 = (($995) - ($996))|0;
                $998 = ($997|0)>(0);
                if ($998) {
                 $c22$0349 = 0;$i21$0348 = 0;
                } else {
                 break;
                }
                while(1) {
                 __THREW__ = 0;
                 $999 = (invoke_iii(104,($988|0),($i21$0348|0))|0);
                 $1000 = __THREW__; __THREW__ = 0;
                 $1001 = $1000&1;
                 if ($1001) {
                  label = 17;
                  break;
                 }
                 $1002 = ((($999)) + 4|0);
                 $1003 = HEAP32[$1002>>2]|0;
                 $1004 = ($1003|0)>($992|0);
                 if ($1004) {
                  $$pre516 = HEAP32[$994>>2]|0;
                  $$pre517 = HEAP32[$993>>2]|0;
                  $1034 = $$pre517;$1035 = $$pre516;$c22$1 = $c22$0349;
                 } else {
                  $1005 = (($c22$0349) + 1)|0;
                  $1006 = $1005 << 1;
                  $1007 = HEAP32[$994>>2]|0;
                  $1008 = HEAP32[$993>>2]|0;
                  $1009 = (($1007) - ($1008))|0;
                  $1010 = $1009 >> 2;
                  $1011 = ($1006|0)<($1010|0);
                  if ($1011) {
                   $1034 = $1008;$1035 = $1007;$c22$1 = $1005;
                  } else {
                   break;
                  }
                 }
                 $1032 = (($i21$0348) + 1)|0;
                 $1033 = (($1035) - ($1034))|0;
                 $1036 = $1033 >> 2;
                 $1037 = ($1032|0)<($1036|0);
                 if ($1037) {
                  $c22$0349 = $c22$1;$i21$0348 = $1032;
                 } else {
                  break L316;
                 }
                }
                if ((label|0) == 17) {
                 $60 = ___cxa_find_matching_catch_2()|0;
                 $61 = tempRet0;
                 $eh$lpad$body$index27Z2D = $61;$eh$lpad$body$indexZ2D = $60;
                 break L101;
                }
                $1012 = HEAP32[$4>>2]|0;
                $1013 = HEAP32[$1012>>2]|0;
                $1014 = ($1013|0)==(0|0);
                do {
                 if ($1014) {
                  $1018 = $1012;
                 } else {
                  __THREW__ = 0;
                  invoke_vi(111,($1013|0));
                  $1015 = __THREW__; __THREW__ = 0;
                  $1016 = $1015&1;
                  if ($1016) {
                   $1030 = ___cxa_find_matching_catch_2()|0;
                   $1031 = tempRet0;
                   __ZdlPv($1013);
                   $eh$lpad$body$index27Z2D = $1031;$eh$lpad$body$indexZ2D = $1030;
                   break L101;
                  } else {
                   __ZdlPv($1013);
                   $$pre$i63 = HEAP32[$4>>2]|0;
                   $1018 = $$pre$i63;
                   break;
                  }
                 }
                } while(0);
                $1017 = ((($1018)) + 4|0);
                $1019 = HEAP32[$$pre$phiZ2D>>2]|0;
                $1020 = $1017;
                $1021 = (($1019) - ($1020))|0;
                $1022 = $1021 >> 2;
                _memmove(($1018|0),($1017|0),($1021|0))|0;
                $1023 = (($1018) + ($1022<<2)|0);
                $1024 = HEAP32[$5>>2]|0;
                $1025 = ($1024|0)==($1023|0);
                if ($1025) {
                 break;
                }
                $__new_last2$i$i$i$i64 = $1023;
                $scevgep$i$i$i$i65 = ((($1024)) + -4|0);
                $1026 = $scevgep$i$i$i$i65;
                $1027 = (($1026) - ($__new_last2$i$i$i$i64))|0;
                $1028 = $1027 >>> 2;
                $1029 = $1028 ^ -1;
                $scevgep4$i$i$i$i66 = (($1024) + ($1029<<2)|0);
                HEAP32[$5>>2] = $scevgep4$i$i$i$i66;
               }
              } while(0);
              $764 = HEAP32[$$pre$phiZ2D>>2]|0;
              $765 = HEAP32[$4>>2]|0;
              $766 = (($764) - ($765))|0;
              $767 = ($766|0)>(4);
              L356: do {
               if ($767) {
                $$in534 = $765;$current_line23$0346 = 0;
                L357: while(1) {
                 $1045 = $$in534;
                 $1046 = (($1045) + ($current_line23$0346<<2)|0);
                 $1047 = HEAP32[$1046>>2]|0;
                 $1048 = (($current_line23$0346) + 1)|0;
                 $1049 = (($1045) + ($1048<<2)|0);
                 $1050 = HEAP32[$1049>>2]|0;
                 $1051 = ((($1047)) + 16|0);
                 $1052 = ((($1047)) + 20|0);
                 $1053 = HEAP32[$1052>>2]|0;
                 $1054 = HEAP32[$1051>>2]|0;
                 $1055 = (($1053) - ($1054))|0;
                 $1056 = $1055 >> 2;
                 $1057 = ((($1050)) + 16|0);
                 $1058 = ((($1050)) + 20|0);
                 $1059 = HEAP32[$1058>>2]|0;
                 $1060 = HEAP32[$1057>>2]|0;
                 $1061 = (($1059) - ($1060))|0;
                 $1062 = $1061 >> 1;
                 $1063 = ($1056|0)>($1062|0);
                 L359: do {
                  if ($1063) {
                   $current_line23$0$be = $1048;
                  } else {
                   __THREW__ = 0;
                   $1064 = (invoke_ii(114,($1047|0))|0);
                   $1065 = __THREW__; __THREW__ = 0;
                   $1066 = $1065&1;
                   if ($1066) {
                    label = 16;
                    break L357;
                   }
                   __THREW__ = 0;
                   $1067 = (invoke_ii(114,($1050|0))|0);
                   $1068 = __THREW__; __THREW__ = 0;
                   $1069 = $1068&1;
                   if ($1069) {
                    label = 16;
                    break L357;
                   }
                   $1070 = $1064 << 1;
                   $1071 = ($1070|0)<($1067|0);
                   if ($1071) {
                    $i124$0345 = 0;
                   } else {
                    $current_line23$0$be = $1048;
                    break;
                   }
                   L363: while(1) {
                    $1078 = HEAP32[$1052>>2]|0;
                    $1079 = HEAP32[$1051>>2]|0;
                    $1080 = (($1078) - ($1079))|0;
                    $1081 = $1080 >> 2;
                    $1082 = ($i124$0345|0)<($1081|0);
                    if (!($1082)) {
                     $current_line23$0$be = $1048;
                     break L359;
                    }
                    __THREW__ = 0;
                    $1083 = (invoke_iii(104,($1047|0),($i124$0345|0))|0);
                    $1084 = __THREW__; __THREW__ = 0;
                    $1085 = $1084&1;
                    if ($1085) {
                     label = 15;
                     break L357;
                    }
                    $1086 = ((($1083)) + 12|0);
                    $1087 = HEAP32[$1086>>2]|0;
                    $1088 = ((($1083)) + 4|0);
                    $1089 = HEAP32[$1088>>2]|0;
                    __THREW__ = 0;
                    $1090 = (invoke_ii(114,($1050|0))|0);
                    $1091 = __THREW__; __THREW__ = 0;
                    $1092 = $1091&1;
                    if ($1092) {
                     label = 15;
                     break L357;
                    }
                    $1093 = (($1087) + 1)|0;
                    $1094 = (($1093) - ($1089))|0;
                    $1095 = $1094 << 1;
                    $1096 = ($1095|0)<($1090|0);
                    L368: do {
                     if ($1096) {
                      $1097 = ((($1083)) + 8|0);
                      $i2$0337 = 0;
                      while(1) {
                       $1098 = HEAP32[$1058>>2]|0;
                       $1099 = HEAP32[$1057>>2]|0;
                       $1100 = (($1098) - ($1099))|0;
                       $1101 = $1100 >> 2;
                       $1102 = ($i2$0337|0)<($1101|0);
                       if (!($1102)) {
                        break L368;
                       }
                       __THREW__ = 0;
                       $1103 = (invoke_iii(104,($1050|0),($i2$0337|0))|0);
                       $1104 = __THREW__; __THREW__ = 0;
                       $1105 = $1104&1;
                       if ($1105) {
                        label = 13;
                        break L357;
                       }
                       $1106 = ((($1103)) + 8|0);
                       $1107 = HEAP32[$1106>>2]|0;
                       $1108 = HEAP32[$1083>>2]|0;
                       $1109 = ($1107|0)<($1108|0);
                       do {
                        if (!($1109)) {
                         $1110 = HEAP32[$1103>>2]|0;
                         $1111 = HEAP32[$1097>>2]|0;
                         $1112 = ($1110|0)>($1111|0);
                         if ($1112) {
                          break L368;
                         }
                         __THREW__ = 0;
                         $1113 = (invoke_iii(105,($1103|0),($1083|0))|0);
                         $1114 = __THREW__; __THREW__ = 0;
                         $1115 = $1114&1;
                         if ($1115) {
                          label = 13;
                          break L357;
                         }
                         if (!($1113)) {
                          __THREW__ = 0;
                          $1116 = (invoke_iii(105,($1083|0),($1103|0))|0);
                          $1117 = __THREW__; __THREW__ = 0;
                          $1118 = $1117&1;
                          if ($1118) {
                           label = 13;
                           break L357;
                          }
                          if (!($1116)) {
                           break;
                          }
                         }
                         $1119 = ((($1103)) + 4|0);
                         $1120 = HEAP32[$1119>>2]|0;
                         $1121 = HEAP32[$1086>>2]|0;
                         __THREW__ = 0;
                         $1122 = (invoke_ii(114,($1050|0))|0);
                         $1123 = __THREW__; __THREW__ = 0;
                         $1124 = $1123&1;
                         if ($1124) {
                          label = 13;
                          break L357;
                         }
                         $1125 = (($1120) - ($1121))|0;
                         $1126 = ($1125|0)<($1122|0);
                         if ($1126) {
                          break L363;
                         }
                        }
                       } while(0);
                       $1151 = (($i2$0337) + 1)|0;
                       $i2$0337 = $1151;
                      }
                     }
                    } while(0);
                    $1152 = (($i124$0345) + 1)|0;
                    $i124$0345 = $1152;
                   }
                   __THREW__ = 0;
                   invoke_vii(118,($1050|0),($1047|0));
                   $1127 = __THREW__; __THREW__ = 0;
                   $1128 = $1127&1;
                   if ($1128) {
                    label = 14;
                    break L357;
                   }
                   $1129 = HEAP32[$4>>2]|0;
                   $1130 = (($1129) + ($current_line23$0346<<2)|0);
                   $1131 = HEAP32[$1130>>2]|0;
                   $1132 = ($1131|0)==(0|0);
                   if ($1132) {
                    $1136 = $1129;
                   } else {
                    __THREW__ = 0;
                    invoke_vi(111,($1131|0));
                    $1133 = __THREW__; __THREW__ = 0;
                    $1134 = $1133&1;
                    if ($1134) {
                     $$lcssa803 = $1131;
                     label = 312;
                     break L357;
                    }
                    __ZdlPv($1131);
                    $$pre$i55 = HEAP32[$4>>2]|0;
                    $1136 = $$pre$i55;
                   }
                   $1135 = (($1136) + ($current_line23$0346<<2)|0);
                   $1137 = ((($1135)) + 4|0);
                   $1138 = HEAP32[$$pre$phiZ2D>>2]|0;
                   $1139 = $1137;
                   $1140 = (($1138) - ($1139))|0;
                   $1141 = $1140 >> 2;
                   _memmove(($1135|0),($1137|0),($1140|0))|0;
                   $1142 = (($1135) + ($1141<<2)|0);
                   $1143 = HEAP32[$5>>2]|0;
                   $1144 = ($1143|0)==($1142|0);
                   if ($1144) {
                    $current_line23$0$be = $current_line23$0346;
                    break;
                   }
                   $__new_last2$i$i$i$i56 = $1142;
                   $scevgep$i$i$i$i57 = ((($1143)) + -4|0);
                   $1145 = $scevgep$i$i$i$i57;
                   $1146 = (($1145) - ($__new_last2$i$i$i$i56))|0;
                   $1147 = $1146 >>> 2;
                   $1148 = $1147 ^ -1;
                   $scevgep4$i$i$i$i58 = (($1143) + ($1148<<2)|0);
                   HEAP32[$5>>2] = $scevgep4$i$i$i$i58;
                   $current_line23$0$be = $current_line23$0346;
                  }
                 } while(0);
                 $1072 = HEAP32[$$pre$phiZ2D>>2]|0;
                 $1073 = HEAP32[$4>>2]|0;
                 $1074 = (($1072) - ($1073))|0;
                 $1075 = $1074 >> 2;
                 $1076 = (($1075) + -1)|0;
                 $1077 = ($current_line23$0$be|0)<($1076|0);
                 if ($1077) {
                  $$in534 = $1073;$current_line23$0346 = $current_line23$0$be;
                 } else {
                  break L356;
                 }
                }
                if ((label|0) == 13) {
                 $52 = ___cxa_find_matching_catch_2()|0;
                 $53 = tempRet0;
                 $eh$lpad$body$index27Z2D = $53;$eh$lpad$body$indexZ2D = $52;
                 break L101;
                }
                else if ((label|0) == 14) {
                 $54 = ___cxa_find_matching_catch_2()|0;
                 $55 = tempRet0;
                 $eh$lpad$body$index27Z2D = $55;$eh$lpad$body$indexZ2D = $54;
                 break L101;
                }
                else if ((label|0) == 15) {
                 $56 = ___cxa_find_matching_catch_2()|0;
                 $57 = tempRet0;
                 $eh$lpad$body$index27Z2D = $57;$eh$lpad$body$indexZ2D = $56;
                 break L101;
                }
                else if ((label|0) == 16) {
                 $58 = ___cxa_find_matching_catch_2()|0;
                 $59 = tempRet0;
                 $eh$lpad$body$index27Z2D = $59;$eh$lpad$body$indexZ2D = $58;
                 break L101;
                }
                else if ((label|0) == 312) {
                 $1149 = ___cxa_find_matching_catch_2()|0;
                 $1150 = tempRet0;
                 __ZdlPv($$lcssa803);
                 $eh$lpad$body$index27Z2D = $1150;$eh$lpad$body$indexZ2D = $1149;
                 break L101;
                }
               }
              } while(0);
              __THREW__ = 0;
              invoke_vi(110,($4|0));
              $1038 = __THREW__; __THREW__ = 0;
              $1039 = $1038&1;
              if ($1039) {
               label = 30;
              } else {
               $1040 = HEAP32[$$pre$phiZ2D>>2]|0;
               $1041 = HEAP32[$4>>2]|0;
               $1042 = (($1040) - ($1041))|0;
               $1043 = ($1042|0)>(0);
               $1044 = $1041;
               L401: do {
                if ($1043) {
                 $1161 = $1044;$i27$0332 = 0;
                 while(1) {
                  $1160 = (($1161) + ($i27$0332<<2)|0);
                  $1162 = HEAP32[$1160>>2]|0;
                  __THREW__ = 0;
                  invoke_vi(119,($1162|0));
                  $1163 = __THREW__; __THREW__ = 0;
                  $1164 = $1163&1;
                  if ($1164) {
                   label = 12;
                   break;
                  }
                  $1165 = (($i27$0332) + 1)|0;
                  $1166 = HEAP32[$$pre$phiZ2D>>2]|0;
                  $1167 = HEAP32[$4>>2]|0;
                  $1168 = (($1166) - ($1167))|0;
                  $1169 = $1168 >> 2;
                  $1170 = ($1165|0)<($1169|0);
                  $1171 = $1167;
                  if ($1170) {
                   $1161 = $1171;$i27$0332 = $1165;
                  } else {
                   $$lcssa799 = $1166;$$lcssa800 = $1167;$$lcssa801 = $1168;$$lcssa802 = $1171;
                   break;
                  }
                 }
                 if ((label|0) == 12) {
                  $50 = ___cxa_find_matching_catch_2()|0;
                  $51 = tempRet0;
                  $eh$lpad$body$index27Z2D = $51;$eh$lpad$body$indexZ2D = $50;
                  break L101;
                 }
                 $1153 = ($$lcssa801|0)>(8);
                 $1154 = (($$lcssa799) - ($$lcssa800))|0;
                 $1155 = ($1154|0)>(8);
                 $or$cond626 = $1153 & $1155;
                 if ($or$cond626) {
                  $1173 = $$lcssa802;$1179 = 2;$i28$0330 = 0;
                 } else {
                  $1157 = $$lcssa800;$1158 = $$lcssa799;$1549 = $$lcssa802;
                  break;
                 }
                 L408: while(1) {
                  $1172 = (($1173) + ($i28$0330<<2)|0);
                  $1174 = HEAP32[$1172>>2]|0;
                  $1175 = (($i28$0330) + 1)|0;
                  $1176 = (($1173) + ($1175<<2)|0);
                  $1177 = HEAP32[$1176>>2]|0;
                  $1178 = (($1173) + ($1179<<2)|0);
                  $1180 = HEAP32[$1178>>2]|0;
                  $1181 = ((($1177)) + 16|0);
                  $1182 = ((($1177)) + 20|0);
                  $1183 = HEAP32[$1182>>2]|0;
                  $1184 = HEAP32[$1181>>2]|0;
                  $1185 = (($1183) - ($1184))|0;
                  $1186 = ($1185|0)>(8);
                  do {
                   if (!($1186)) {
                    $1187 = ((($1174)) + 16|0);
                    $1188 = ((($1174)) + 20|0);
                    $1189 = HEAP32[$1188>>2]|0;
                    $1190 = HEAP32[$1187>>2]|0;
                    $1191 = (($1189) - ($1190))|0;
                    $1192 = ($1191|0)<(16);
                    if ($1192) {
                     break;
                    }
                    $1193 = ((($1180)) + 16|0);
                    $1194 = ((($1180)) + 20|0);
                    $1195 = HEAP32[$1194>>2]|0;
                    $1196 = HEAP32[$1193>>2]|0;
                    $1197 = (($1195) - ($1196))|0;
                    $1198 = ($1197|0)<(16);
                    if ($1198) {
                     break;
                    }
                    $1199 = HEAP32[$1174>>2]|0;
                    $1200 = ((($1174)) + 4|0);
                    $1201 = HEAP32[$1200>>2]|0;
                    $1202 = ($1199|0)==($1201|0);
                    if ($1202) {
                     $1211 = 0;
                    } else {
                     $1203 = ((($1199)) + 16|0);
                     $1204 = HEAP32[$1203>>2]|0;
                     $1211 = $1204;
                    }
                    $1205 = HEAP32[$1180>>2]|0;
                    $1206 = ((($1180)) + 4|0);
                    $1207 = HEAP32[$1206>>2]|0;
                    $1208 = ($1205|0)==($1207|0);
                    if ($1208) {
                     $1212 = 0;
                    } else {
                     $1209 = ((($1205)) + 16|0);
                     $1210 = HEAP32[$1209>>2]|0;
                     $1212 = $1210;
                    }
                    __THREW__ = 0;
                    $1213 = (invoke_iiiii(120,($1211|0),($1212|0),10,1)|0);
                    $1214 = __THREW__; __THREW__ = 0;
                    $1215 = $1214&1;
                    if ($1215) {
                     label = 11;
                     break L408;
                    }
                    if (!($1213)) {
                     break;
                    }
                    $1216 = HEAP32[$1177>>2]|0;
                    $1217 = ((($1177)) + 4|0);
                    $1218 = HEAP32[$1217>>2]|0;
                    $1219 = ($1216|0)==($1218|0);
                    if ($1219) {
                     $1223 = 0;
                    } else {
                     $1220 = ((($1216)) + 16|0);
                     $1221 = HEAP32[$1220>>2]|0;
                     $1223 = $1221;
                    }
                    $1222 = $1223 << 3;
                    $1224 = HEAP32[$1174>>2]|0;
                    $1225 = HEAP32[$1200>>2]|0;
                    $1226 = ($1224|0)==($1225|0);
                    if ($1226) {
                     $1235 = 0;
                    } else {
                     $1227 = ((($1224)) + 16|0);
                     $1228 = HEAP32[$1227>>2]|0;
                     $1235 = $1228;
                    }
                    $1229 = HEAP32[$1180>>2]|0;
                    $1230 = HEAP32[$1206>>2]|0;
                    $1231 = ($1229|0)==($1230|0);
                    if ($1231) {
                     $1236 = 0;
                    } else {
                     $1232 = ((($1229)) + 16|0);
                     $1233 = HEAP32[$1232>>2]|0;
                     $1236 = $1233;
                    }
                    $1234 = (($1236) + ($1235))|0;
                    $1237 = ($1222|0)>($1234|0);
                    if ($1237) {
                     break;
                    }
                    $1245 = HEAP32[$4>>2]|0;
                    $1246 = (($1245) + ($1175<<2)|0);
                    $1247 = HEAP32[$1246>>2]|0;
                    $1248 = ($1247|0)==(0|0);
                    if ($1248) {
                     $1252 = $1245;
                    } else {
                     __THREW__ = 0;
                     invoke_vi(111,($1247|0));
                     $1249 = __THREW__; __THREW__ = 0;
                     $1250 = $1249&1;
                     if ($1250) {
                      $$lcssa795 = $1247;
                      label = 341;
                      break L408;
                     }
                     __ZdlPv($1247);
                     $$pre$i = HEAP32[$4>>2]|0;
                     $1252 = $$pre$i;
                    }
                    $1251 = (($1252) + ($1175<<2)|0);
                    $1253 = ((($1251)) + 4|0);
                    $1254 = HEAP32[$$pre$phiZ2D>>2]|0;
                    $1255 = $1253;
                    $1256 = (($1254) - ($1255))|0;
                    $1257 = $1256 >> 2;
                    _memmove(($1251|0),($1253|0),($1256|0))|0;
                    $1258 = (($1251) + ($1257<<2)|0);
                    $1259 = HEAP32[$5>>2]|0;
                    $1260 = ($1259|0)==($1258|0);
                    if ($1260) {
                     break;
                    }
                    $__new_last2$i$i$i$i = $1258;
                    $scevgep$i$i$i$i = ((($1259)) + -4|0);
                    $1261 = $scevgep$i$i$i$i;
                    $1262 = (($1261) - ($__new_last2$i$i$i$i))|0;
                    $1263 = $1262 >>> 2;
                    $1264 = $1263 ^ -1;
                    $scevgep4$i$i$i$i = (($1259) + ($1264<<2)|0);
                    HEAP32[$5>>2] = $scevgep4$i$i$i$i;
                   }
                  } while(0);
                  $1238 = (($i28$0330) + 3)|0;
                  $1239 = HEAP32[$$pre$phiZ2D>>2]|0;
                  $1240 = HEAP32[$4>>2]|0;
                  $1241 = (($1239) - ($1240))|0;
                  $1242 = $1241 >> 2;
                  $1243 = ($1238|0)<($1242|0);
                  $1244 = $1240;
                  if ($1243) {
                   $1173 = $1244;$1179 = $1238;$i28$0330 = $1175;
                  } else {
                   $1157 = $1240;$1158 = $1239;$1549 = $1244;
                   break L401;
                  }
                 }
                 if ((label|0) == 11) {
                  $48 = ___cxa_find_matching_catch_2()|0;
                  $49 = tempRet0;
                  $eh$lpad$body$index27Z2D = $49;$eh$lpad$body$indexZ2D = $48;
                  break L101;
                 }
                 else if ((label|0) == 341) {
                  $1265 = ___cxa_find_matching_catch_2()|0;
                  $1266 = tempRet0;
                  __ZdlPv($$lcssa795);
                  $eh$lpad$body$index27Z2D = $1266;$eh$lpad$body$indexZ2D = $1265;
                  break L101;
                 }
                } else {
                 $1157 = $1041;$1158 = $1040;$1549 = $1044;
                }
               } while(0);
               $1156 = (($1158) - ($1157))|0;
               $1159 = ($1156|0)>(0);
               L442: do {
                if ($1159) {
                 $1272 = $1549;$i32$0328 = 0;
                 L443: while(1) {
                  $1271 = (($1272) + ($i32$0328<<2)|0);
                  $1273 = HEAP32[$1271>>2]|0;
                  $1274 = ((($1273)) + 12|0);
                  $1275 = HEAP32[$1274>>2]|0;
                  $1276 = ($1275|0)==(0);
                  $1277 = ((($1273)) + 16|0);
                  $1278 = ((($1273)) + 20|0);
                  do {
                   if ($1276) {
                    $1279 = HEAP32[$1278>>2]|0;
                    $1280 = HEAP32[$1277>>2]|0;
                    $1281 = (($1279) - ($1280))|0;
                    $1282 = ($1281|0)>(8);
                    if (!($1282)) {
                     $$pre$phi532Z2D = $1277;
                     break;
                    }
                    __THREW__ = 0;
                    $1283 = (invoke_iii(104,($1273|0),0)|0);
                    $1284 = __THREW__; __THREW__ = 0;
                    $1285 = $1284&1;
                    if ($1285) {
                     break L443;
                    }
                    __THREW__ = 0;
                    $1286 = (invoke_iii(104,($1273|0),1)|0);
                    $1287 = __THREW__; __THREW__ = 0;
                    $1288 = $1287&1;
                    if ($1288) {
                     break L443;
                    }
                    __THREW__ = 0;
                    $1289 = (invoke_iii(104,($1273|0),2)|0);
                    $1290 = __THREW__; __THREW__ = 0;
                    $1291 = $1290&1;
                    if ($1291) {
                     break L443;
                    }
                    $1292 = ((($1283)) + 16|0);
                    $1293 = ((($1283)) + 20|0);
                    $1294 = HEAP32[$1293>>2]|0;
                    $1295 = HEAP32[$1292>>2]|0;
                    $1296 = (($1294) - ($1295))|0;
                    $1297 = ($1296|0)==(4);
                    if (!($1297)) {
                     $$pre$phi532Z2D = $1277;
                     break;
                    }
                    $1298 = ((($1283)) + 12|0);
                    $1299 = HEAP32[$1298>>2]|0;
                    $1300 = ((($1283)) + 4|0);
                    $1301 = HEAP32[$1300>>2]|0;
                    $1302 = (($1299) + 1)|0;
                    $1303 = (($1302) - ($1301))|0;
                    $1304 = ((($1283)) + 8|0);
                    $1305 = HEAP32[$1304>>2]|0;
                    $1306 = HEAP32[$1283>>2]|0;
                    $1307 = (($1305) + 1)|0;
                    $1308 = (($1307) - ($1306))|0;
                    $1309 = $1303 << 2;
                    $1310 = Math_imul($1309, $1308)|0;
                    $1311 = ((($1286)) + 12|0);
                    $1312 = HEAP32[$1311>>2]|0;
                    $1313 = ((($1286)) + 4|0);
                    $1314 = HEAP32[$1313>>2]|0;
                    $1315 = (($1312) + 1)|0;
                    $1316 = (($1315) - ($1314))|0;
                    $1317 = ((($1286)) + 8|0);
                    $1318 = HEAP32[$1317>>2]|0;
                    $1319 = HEAP32[$1286>>2]|0;
                    $1320 = (($1318) + 1)|0;
                    $1321 = (($1320) - ($1319))|0;
                    $1322 = Math_imul($1321, $1316)|0;
                    $1323 = ($1310|0)<($1322|0);
                    if (!($1323)) {
                     $$pre$phi532Z2D = $1277;
                     break;
                    }
                    $1324 = HEAP32[$1273>>2]|0;
                    $1325 = ((($1273)) + 4|0);
                    $1326 = HEAP32[$1325>>2]|0;
                    $1327 = ($1324|0)==($1326|0);
                    if ($1327) {
                     $1332 = 0;
                    } else {
                     $1328 = ((($1324)) + 16|0);
                     $1329 = HEAP32[$1328>>2]|0;
                     $1332 = $1329;
                    }
                    $1330 = (($1319) - ($1305))|0;
                    $1331 = $1332 << 1;
                    $1333 = ($1330|0)>($1331|0);
                    if (!($1333)) {
                     $$pre$phi532Z2D = $1277;
                     break;
                    }
                    $1334 = ((($1289)) + 12|0);
                    $1335 = HEAP32[$1334>>2]|0;
                    $1336 = ((($1289)) + 4|0);
                    $1337 = HEAP32[$1336>>2]|0;
                    $1338 = (($1335) + 1)|0;
                    $1339 = (($1338) - ($1337))|0;
                    $1340 = ((($1289)) + 8|0);
                    $1341 = HEAP32[$1340>>2]|0;
                    $1342 = HEAP32[$1289>>2]|0;
                    $1343 = (($1341) + 1)|0;
                    $1344 = (($1343) - ($1342))|0;
                    $1345 = Math_imul($1344, $1339)|0;
                    $1346 = ($1310|0)<($1345|0);
                    if (!($1346)) {
                     $$pre$phi532Z2D = $1277;
                     break;
                    }
                    if ($1327) {
                     $1351 = 0;
                    } else {
                     $1347 = ((($1324)) + 16|0);
                     $1348 = HEAP32[$1347>>2]|0;
                     $1351 = $1348;
                    }
                    $1349 = (($1342) - ($1318))|0;
                    $1350 = ($1349|0)<($1351|0);
                    if (!($1350)) {
                     $$pre$phi532Z2D = $1277;
                     break;
                    }
                    __THREW__ = 0;
                    invoke_vii(121,($1273|0),0);
                    $1352 = __THREW__; __THREW__ = 0;
                    $1353 = $1352&1;
                    if ($1353) {
                     break L443;
                    } else {
                     $$pre$phi532Z2D = $1277;
                    }
                   } else {
                    $$pre$phi532Z2D = $1277;
                   }
                  } while(0);
                  $1354 = HEAP32[$1278>>2]|0;
                  $1355 = HEAP32[$$pre$phi532Z2D>>2]|0;
                  $1356 = (($1354) - ($1355))|0;
                  $1357 = ($1356|0)>(8);
                  do {
                   if ($1357) {
                    $1358 = $1356 >> 2;
                    $1359 = (($1358) + -1)|0;
                    __THREW__ = 0;
                    $1360 = (invoke_iii(104,($1273|0),($1359|0))|0);
                    $1361 = __THREW__; __THREW__ = 0;
                    $1362 = $1361&1;
                    if ($1362) {
                     break L443;
                    }
                    $1363 = HEAP32[$1278>>2]|0;
                    $1364 = HEAP32[$$pre$phi532Z2D>>2]|0;
                    $1365 = (($1363) - ($1364))|0;
                    $1366 = $1365 >> 2;
                    $1367 = (($1366) + -2)|0;
                    __THREW__ = 0;
                    $1368 = (invoke_iii(104,($1273|0),($1367|0))|0);
                    $1369 = __THREW__; __THREW__ = 0;
                    $1370 = $1369&1;
                    if ($1370) {
                     break L443;
                    }
                    $1371 = HEAP32[$1278>>2]|0;
                    $1372 = HEAP32[$$pre$phi532Z2D>>2]|0;
                    $1373 = (($1371) - ($1372))|0;
                    $1374 = $1373 >> 2;
                    $1375 = (($1374) + -3)|0;
                    __THREW__ = 0;
                    $1376 = (invoke_iii(104,($1273|0),($1375|0))|0);
                    $1377 = __THREW__; __THREW__ = 0;
                    $1378 = $1377&1;
                    if ($1378) {
                     break L443;
                    }
                    $1379 = ((($1360)) + 16|0);
                    $1380 = ((($1360)) + 20|0);
                    $1381 = HEAP32[$1380>>2]|0;
                    $1382 = HEAP32[$1379>>2]|0;
                    $1383 = (($1381) - ($1382))|0;
                    $1384 = ($1383|0)==(4);
                    if (!($1384)) {
                     break;
                    }
                    $1385 = ((($1360)) + 12|0);
                    $1386 = HEAP32[$1385>>2]|0;
                    $1387 = ((($1360)) + 4|0);
                    $1388 = HEAP32[$1387>>2]|0;
                    $1389 = (($1386) + 1)|0;
                    $1390 = (($1389) - ($1388))|0;
                    $1391 = ((($1360)) + 8|0);
                    $1392 = HEAP32[$1391>>2]|0;
                    $1393 = HEAP32[$1360>>2]|0;
                    $1394 = (($1392) + 1)|0;
                    $1395 = (($1394) - ($1393))|0;
                    $1396 = $1390 << 2;
                    $1397 = Math_imul($1396, $1395)|0;
                    $1398 = ((($1368)) + 12|0);
                    $1399 = HEAP32[$1398>>2]|0;
                    $1400 = ((($1368)) + 4|0);
                    $1401 = HEAP32[$1400>>2]|0;
                    $1402 = (($1399) + 1)|0;
                    $1403 = (($1402) - ($1401))|0;
                    $1404 = ((($1368)) + 8|0);
                    $1405 = HEAP32[$1404>>2]|0;
                    $1406 = HEAP32[$1368>>2]|0;
                    $1407 = (($1405) + 1)|0;
                    $1408 = (($1407) - ($1406))|0;
                    $1409 = Math_imul($1408, $1403)|0;
                    $1410 = ($1397|0)<($1409|0);
                    if (!($1410)) {
                     break;
                    }
                    $1411 = HEAP32[$1273>>2]|0;
                    $1412 = ((($1273)) + 4|0);
                    $1413 = HEAP32[$1412>>2]|0;
                    $1414 = ($1411|0)==($1413|0);
                    if ($1414) {
                     $1419 = 0;
                    } else {
                     $1415 = ((($1411)) + 16|0);
                     $1416 = HEAP32[$1415>>2]|0;
                     $1419 = $1416;
                    }
                    $1417 = (($1393) - ($1405))|0;
                    $1418 = $1419 << 1;
                    $1420 = ($1417|0)>($1418|0);
                    if (!($1420)) {
                     break;
                    }
                    $1421 = ((($1376)) + 12|0);
                    $1422 = HEAP32[$1421>>2]|0;
                    $1423 = ((($1376)) + 4|0);
                    $1424 = HEAP32[$1423>>2]|0;
                    $1425 = (($1422) + 1)|0;
                    $1426 = (($1425) - ($1424))|0;
                    $1427 = ((($1376)) + 8|0);
                    $1428 = HEAP32[$1427>>2]|0;
                    $1429 = HEAP32[$1376>>2]|0;
                    $1430 = (($1428) + 1)|0;
                    $1431 = (($1430) - ($1429))|0;
                    $1432 = Math_imul($1431, $1426)|0;
                    $1433 = ($1397|0)<($1432|0);
                    if (!($1433)) {
                     break;
                    }
                    if ($1414) {
                     $1438 = 0;
                    } else {
                     $1434 = ((($1411)) + 16|0);
                     $1435 = HEAP32[$1434>>2]|0;
                     $1438 = $1435;
                    }
                    $1436 = (($1406) - ($1428))|0;
                    $1437 = ($1436|0)<($1438|0);
                    if (!($1437)) {
                     break;
                    }
                    $1439 = HEAP32[$1278>>2]|0;
                    $1440 = HEAP32[$$pre$phi532Z2D>>2]|0;
                    $1441 = (($1439) - ($1440))|0;
                    $1442 = $1441 >> 2;
                    $1443 = (($1442) + -1)|0;
                    __THREW__ = 0;
                    invoke_vii(121,($1273|0),($1443|0));
                    $1444 = __THREW__; __THREW__ = 0;
                    $1445 = $1444&1;
                    if ($1445) {
                     break L443;
                    }
                   }
                  } while(0);
                  $1446 = (($i32$0328) + 1)|0;
                  $1447 = HEAP32[$$pre$phiZ2D>>2]|0;
                  $1448 = HEAP32[$4>>2]|0;
                  $1449 = (($1447) - ($1448))|0;
                  $1450 = $1449 >> 2;
                  $1451 = ($1446|0)<($1450|0);
                  $1452 = $1448;
                  if ($1451) {
                   $1272 = $1452;$i32$0328 = $1446;
                  } else {
                   $1268 = $1448;$1269 = $1447;$1550 = $1452;
                   break L442;
                  }
                 }
                 $46 = ___cxa_find_matching_catch_2()|0;
                 $47 = tempRet0;
                 $eh$lpad$body$index27Z2D = $47;$eh$lpad$body$indexZ2D = $46;
                 break L101;
                } else {
                 $1268 = $1157;$1269 = $1158;$1550 = $1549;
                }
               } while(0);
               $1267 = (($1269) - ($1268))|0;
               $1270 = ($1267|0)>(0);
               if ($1270) {
                $1454 = $1550;$i39$0326 = 0;
               } else {
                break L1;
               }
               while(1) {
                $1453 = (($1454) + ($i39$0326<<2)|0);
                $1455 = HEAP32[$1453>>2]|0;
                __THREW__ = 0;
                invoke_vi(122,($1455|0));
                $1456 = __THREW__; __THREW__ = 0;
                $1457 = $1456&1;
                if ($1457) {
                 break;
                }
                $1458 = (($i39$0326) + 1)|0;
                $1459 = HEAP32[$$pre$phiZ2D>>2]|0;
                $1460 = HEAP32[$4>>2]|0;
                $1461 = (($1459) - ($1460))|0;
                $1462 = $1461 >> 2;
                $1463 = ($1458|0)<($1462|0);
                $1464 = $1460;
                if ($1463) {
                 $1454 = $1464;$i39$0326 = $1458;
                } else {
                 break L1;
                }
               }
               $44 = ___cxa_find_matching_catch_2()|0;
               $45 = tempRet0;
               $eh$lpad$body$index27Z2D = $45;$eh$lpad$body$indexZ2D = $44;
              }
             }
            }
           }
          }
         } while(0);
         if ((label|0) == 30) {
          $86 = ___cxa_find_matching_catch_2()|0;
          $87 = tempRet0;
          $eh$lpad$body$index27Z2D = $87;$eh$lpad$body$indexZ2D = $86;
         }
         $$0 = $eh$lpad$body$indexZ2D;$$09 = $eh$lpad$body$index27Z2D;
        }
        else if ((label|0) == 37) {
         $116 = ___cxa_find_matching_catch_2()|0;
         $117 = tempRet0;
         $lpad$phi252$index = $116;$lpad$phi252$index58 = $117;
         label = 40;
        }
        else if ((label|0) == 38) {
         $118 = ___cxa_find_matching_catch_2()|0;
         $119 = tempRet0;
         $lpad$phi252$index = $118;$lpad$phi252$index58 = $119;
         label = 40;
        }
        else if ((label|0) == 39) {
         $120 = ___cxa_find_matching_catch_2()|0;
         $121 = tempRet0;
         $lpad$phi252$index = $120;$lpad$phi252$index58 = $121;
         label = 40;
        }
       } while(0);
       if ((label|0) == 40) {
        $122 = HEAP32[$height_distrib>>2]|0;
        $123 = ($122|0)==(0|0);
        $124 = $122;
        if ($123) {
         $$0 = $lpad$phi252$index;$$09 = $lpad$phi252$index58;
        } else {
         $125 = HEAP32[$19>>2]|0;
         $126 = ($125|0)==($122|0);
         if (!($126)) {
          $scevgep$i$i$i79 = ((($125)) + -4|0);
          $127 = $scevgep$i$i$i79;
          $128 = (($127) - ($124))|0;
          $129 = $128 >>> 2;
          $130 = $129 ^ -1;
          $scevgep4$i$i$i80 = (($125) + ($130<<2)|0);
          HEAP32[$19>>2] = $scevgep4$i$i$i80;
         }
         __ZdlPv($122);
         $$0 = $lpad$phi252$index;$$09 = $lpad$phi252$index58;
        }
       }
       $1492 = HEAP32[$pending_short>>2]|0;
       $1493 = ($1492|0)==(0|0);
       $1494 = $1492;
       if (!($1493)) {
        $1495 = HEAP32[$11>>2]|0;
        $1496 = ($1495|0)==($1492|0);
        if (!($1496)) {
         $scevgep$i$i$i27 = ((($1495)) + -4|0);
         $1497 = $scevgep$i$i$i27;
         $1498 = (($1497) - ($1494))|0;
         $1499 = $1498 >>> 2;
         $1500 = $1499 ^ -1;
         $scevgep4$i$i$i28 = (($1495) + ($1500<<2)|0);
         HEAP32[$11>>2] = $scevgep4$i$i$i28;
        }
        __ZdlPv($1492);
       }
       $1501 = HEAP32[$pending_tall>>2]|0;
       $1502 = ($1501|0)==(0|0);
       $1503 = $1501;
       if (!($1502)) {
        $1504 = HEAP32[$9>>2]|0;
        $1505 = ($1504|0)==($1501|0);
        if (!($1505)) {
         $scevgep$i$i$i22 = ((($1504)) + -4|0);
         $1506 = $scevgep$i$i$i22;
         $1507 = (($1506) - ($1503))|0;
         $1508 = $1507 >>> 2;
         $1509 = $1508 ^ -1;
         $scevgep4$i$i$i23 = (($1504) + ($1509<<2)|0);
         HEAP32[$9>>2] = $scevgep4$i$i$i23;
        }
        __ZdlPv($1501);
       }
       $1510 = HEAP32[$pending>>2]|0;
       $1511 = ($1510|0)==(0|0);
       $1512 = $1510;
       if (!($1511)) {
        $1513 = HEAP32[$7>>2]|0;
        $1514 = ($1513|0)==($1510|0);
        if (!($1514)) {
         $scevgep$i$i$i19 = ((($1513)) + -4|0);
         $1515 = $scevgep$i$i$i19;
         $1516 = (($1515) - ($1512))|0;
         $1517 = $1516 >>> 2;
         $1518 = $1517 ^ -1;
         $scevgep4$i$i$i20 = (($1513) + ($1518<<2)|0);
         HEAP32[$7>>2] = $scevgep4$i$i$i20;
        }
        __ZdlPv($1510);
       }
       $1519 = HEAP32[$4>>2]|0;
       $1520 = ($1519|0)==(0|0);
       $1521 = $1519;
       if ($1520) {
        ___resumeException($$0|0);
        // unreachable;
       }
       $1522 = HEAP32[$5>>2]|0;
       $1523 = ($1522|0)==($1519|0);
       if (!($1523)) {
        $scevgep$i$i$i = ((($1522)) + -4|0);
        $1524 = $scevgep$i$i$i;
        $1525 = (($1524) - ($1521))|0;
        $1526 = $1525 >>> 2;
        $1527 = $1526 ^ -1;
        $scevgep4$i$i$i = (($1522) + ($1527<<2)|0);
        HEAP32[$5>>2] = $scevgep4$i$i$i;
       }
       __ZdlPv($1519);
       ___resumeException($$0|0);
       // unreachable;
      }
     } while(0);
     if ((label|0) == 94) {
      $298 = ($297|0)==($$cast163$lcssa|0);
      if (!($298)) {
       $scevgep$i$i$i132 = ((($297)) + -4|0);
       $299 = $scevgep$i$i$i132;
       $300 = (($299) - ($$lcssa))|0;
       $301 = $300 >>> 2;
       $302 = $301 ^ -1;
       $scevgep4$i$i$i133 = (($297) + ($302<<2)|0);
       HEAP32[$13>>2] = $scevgep4$i$i$i133;
      }
     }
     $1465 = HEAP32[$pending_short>>2]|0;
     $1466 = ($1465|0)==(0|0);
     $1467 = $1465;
     if (!($1466)) {
      $1468 = HEAP32[$11>>2]|0;
      $1469 = ($1468|0)==($1465|0);
      if (!($1469)) {
       $scevgep$i$i$i42 = ((($1468)) + -4|0);
       $1470 = $scevgep$i$i$i42;
       $1471 = (($1470) - ($1467))|0;
       $1472 = $1471 >>> 2;
       $1473 = $1472 ^ -1;
       $scevgep4$i$i$i43 = (($1468) + ($1473<<2)|0);
       HEAP32[$11>>2] = $scevgep4$i$i$i43;
      }
      __ZdlPv($1465);
     }
     $1474 = HEAP32[$pending_tall>>2]|0;
     $1475 = ($1474|0)==(0|0);
     $1476 = $1474;
     if (!($1475)) {
      $1477 = HEAP32[$9>>2]|0;
      $1478 = ($1477|0)==($1474|0);
      if (!($1478)) {
       $scevgep$i$i$i37 = ((($1477)) + -4|0);
       $1479 = $scevgep$i$i$i37;
       $1480 = (($1479) - ($1476))|0;
       $1481 = $1480 >>> 2;
       $1482 = $1481 ^ -1;
       $scevgep4$i$i$i38 = (($1477) + ($1482<<2)|0);
       HEAP32[$9>>2] = $scevgep4$i$i$i38;
      }
      __ZdlPv($1474);
     }
     $1483 = HEAP32[$pending>>2]|0;
     $1484 = ($1483|0)==(0|0);
     $1485 = $1483;
     if ($1484) {
      STACKTOP = sp;return;
     }
     $1486 = HEAP32[$7>>2]|0;
     $1487 = ($1486|0)==($1483|0);
     if (!($1487)) {
      $scevgep$i$i$i32 = ((($1486)) + -4|0);
      $1488 = $scevgep$i$i$i32;
      $1489 = (($1488) - ($1485))|0;
      $1490 = $1489 >>> 2;
      $1491 = $1490 ^ -1;
      $scevgep4$i$i$i33 = (($1486) + ($1491<<2)|0);
      HEAP32[$7>>2] = $scevgep4$i$i$i33;
     }
     __ZdlPv($1483);
     STACKTOP = sp;return;
    }
    function __ZNSt3__16vectorIP8TextlineNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
     $this = $this|0;
     $__x = $__x|0;
     var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
     var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$this>>2]|0;
     $3 = (($1) - ($2))|0;
     $4 = $3 >> 2;
     $5 = (($4) + 1)|0;
     $6 = ($5>>>0)>(1073741823);
     if ($6) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$this>>2]|0;
      $$in = $$pre;
     } else {
      $$in = $2;
     }
     $7 = ((($this)) + 8|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) - ($$in))|0;
     $10 = $9 >> 2;
     $11 = ($10>>>0)<(536870911);
     if ($11) {
      $15 = $9 >> 1;
      $16 = ($15>>>0)<($5>>>0);
      $17 = $16 ? $5 : $15;
      $18 = HEAP32[$0>>2]|0;
      $19 = (($18) - ($$in))|0;
      $20 = $19 >> 2;
      $21 = ($17|0)==(0);
      if ($21) {
       $$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
      } else {
       $$0$i1 = $17;$41 = $18;$42 = $20;
       label = 6;
      }
     } else {
      $12 = HEAP32[$0>>2]|0;
      $13 = (($12) - ($$in))|0;
      $14 = $13 >> 2;
      $$0$i1 = 1073741823;$41 = $12;$42 = $14;
      label = 6;
     }
     if ((label|0) == 6) {
      $22 = $$0$i1 << 2;
      $23 = (__Znwj($22)|0);
      $$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
     }
     $24 = (($25) + ($26<<2)|0);
     $27 = (($25) + ($$0$i2<<2)|0);
     $28 = $27;
     $29 = HEAP32[$__x>>2]|0;
     HEAP32[$24>>2] = $29;
     $30 = ((($24)) + 4|0);
     $31 = $30;
     $32 = (($33) - ($$in))|0;
     $34 = $32 >> 2;
     $35 = (0 - ($34))|0;
     $36 = (($24) + ($35<<2)|0);
     $37 = $36;
     $38 = $$in;
     _memcpy(($36|0),($38|0),($32|0))|0;
     HEAP32[$this>>2] = $37;
     HEAP32[$0>>2] = $31;
     HEAP32[$7>>2] = $28;
     $39 = ($$in|0)==(0);
     if ($39) {
      return;
     }
     $40 = $$in;
     __ZdlPv($40);
     return;
    }
    function __ZNSt3__16vectorIP8TextlineNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($this,$__position,$__x) {
     $this = $this|0;
     $__position = $__position|0;
     $__x = $__x|0;
     var $$ = 0, $$0$i8 = 0, $$0$i9 = 0, $$in$i7 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre11 = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0;
     var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
     var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
     var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
     var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
     var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0, $__p$0 = 0, $__v$sroa$21$0 = 0, $__v$sroa$37$0 = 0, $__xr$0 = 0;
     var label = 0, sp = 0;
     sp = STACKTOP;
     $0 = HEAP32[$this>>2]|0;
     $1 = $0;
     $2 = HEAP32[$__position>>2]|0;
     $3 = (($2) - ($1))|0;
     $4 = $3 >> 2;
     $5 = (($0) + ($4<<2)|0);
     $6 = ((($this)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ((($this)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($7>>>0)<($9>>>0);
     $11 = $7;
     $12 = $9;
     if ($10) {
      $13 = ($5|0)==($7|0);
      if ($13) {
       $14 = HEAP32[$__x>>2]|0;
       HEAP32[$5>>2] = $14;
       $15 = HEAP32[$6>>2]|0;
       $16 = ((($15)) + 4|0);
       HEAP32[$6>>2] = $16;
       $__p$0 = $5;
       return ($__p$0|0);
      }
      $17 = ((($5)) + 4|0);
      $18 = $17;
      $19 = (($11) - ($18))|0;
      $20 = $19 >> 2;
      $21 = (($5) + ($20<<2)|0);
      $22 = ($21>>>0)<($7>>>0);
      if ($22) {
       $$in$i7 = $7;$__i$01$i = $21;
       while(1) {
        $23 = HEAP32[$__i$01$i>>2]|0;
        HEAP32[$$in$i7>>2] = $23;
        $24 = ((($__i$01$i)) + 4|0);
        $25 = HEAP32[$6>>2]|0;
        $26 = ((($25)) + 4|0);
        HEAP32[$6>>2] = $26;
        $27 = ($24>>>0)<($7>>>0);
        if ($27) {
         $$in$i7 = $26;$__i$01$i = $24;
        } else {
         break;
        }
       }
      }
      $28 = (0 - ($20))|0;
      $29 = (($7) + ($28<<2)|0);
      _memmove(($29|0),($5|0),($19|0))|0;
      $30 = ($5>>>0)>($__x>>>0);
      if ($30) {
       $__xr$0 = $__x;
      } else {
       $31 = HEAP32[$6>>2]|0;
       $32 = ($31>>>0)>($__x>>>0);
       $33 = ((($__x)) + 4|0);
       $$ = $32 ? $33 : $__x;
       $__xr$0 = $$;
      }
      $34 = HEAP32[$__xr$0>>2]|0;
      HEAP32[$5>>2] = $34;
      $__p$0 = $5;
      return ($__p$0|0);
     }
     $35 = (($11) - ($1))|0;
     $36 = $35 >> 2;
     $37 = (($36) + 1)|0;
     $38 = ($37>>>0)>(1073741823);
     if ($38) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
      $$pre = HEAP32[$8>>2]|0;
      $$pre11 = HEAP32[$this>>2]|0;
      $39 = $$pre11;
      $$pre$phiZ2D = $8;$104 = $39;$41 = $$pre11;$42 = $$pre;
     } else {
      $$pre$phiZ2D = $8;$104 = $0;$41 = $1;$42 = $12;
     }
     $40 = (($42) - ($41))|0;
     $43 = $40 >> 2;
     $44 = ($43>>>0)<(536870911);
     if ($44) {
      $48 = $40 >> 1;
      $49 = ($48>>>0)<($37>>>0);
      $50 = $49 ? $37 : $48;
      $51 = $5;
      $52 = (($51) - ($41))|0;
      $53 = $52 >> 2;
      $54 = ($50|0)==(0);
      if ($54) {
       $$0$i9 = 0;$58 = 0;$59 = $53;$89 = $51;
      } else {
       $$0$i8 = $50;$105 = $53;$106 = $51;
       label = 15;
      }
     } else {
      $45 = $5;
      $46 = (($45) - ($41))|0;
      $47 = $46 >> 2;
      $$0$i8 = 1073741823;$105 = $47;$106 = $45;
      label = 15;
     }
     if ((label|0) == 15) {
      $55 = $$0$i8 << 2;
      $56 = (__Znwj($55)|0);
      $$0$i9 = $$0$i8;$58 = $56;$59 = $105;$89 = $106;
     }
     $57 = (($58) + ($59<<2)|0);
     $60 = $57;
     $61 = (($58) + ($$0$i9<<2)|0);
     $62 = $61;
     $63 = ($59|0)==($$0$i9|0);
     do {
      if ($63) {
       $64 = ($59|0)>(0);
       if ($64) {
        $65 = (($59) + 1)|0;
        $66 = (($65|0) / -2)&-1;
        $67 = (($57) + ($66<<2)|0);
        $68 = $67;
        $83 = $67;$86 = $104;$__v$sroa$21$0 = $68;$__v$sroa$37$0 = $62;
        break;
       }
       $69 = $59 << 1;
       $70 = ($59|0)==(0);
       $71 = $70 ? 1 : $69;
       $72 = $71 << 2;
       __THREW__ = 0;
       $73 = (invoke_ii(29,($72|0))|0);
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if (!($75)) {
        $76 = $71 >>> 2;
        $77 = (($73) + ($76<<2)|0);
        $78 = $77;
        $79 = (($73) + ($71<<2)|0);
        $80 = $79;
        $81 = ($58|0)==(0|0);
        if ($81) {
         $83 = $77;$86 = $104;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
         break;
        }
        __ZdlPv($58);
        $$pre12 = HEAP32[$this>>2]|0;
        $83 = $77;$86 = $$pre12;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
        break;
       }
       $101 = ___cxa_find_matching_catch_2()|0;
       $102 = tempRet0;
       $103 = ($58|0)==(0|0);
       if ($103) {
        ___resumeException($101|0);
        // unreachable;
       }
       __ZdlPv($58);
       ___resumeException($101|0);
       // unreachable;
      } else {
       $83 = $57;$86 = $104;$__v$sroa$21$0 = $60;$__v$sroa$37$0 = $62;
      }
     } while(0);
     $82 = HEAP32[$__x>>2]|0;
     HEAP32[$83>>2] = $82;
     $84 = $__v$sroa$21$0;
     $85 = ((($84)) + 4|0);
     $87 = $86;
     $88 = (($89) - ($87))|0;
     $90 = $88 >> 2;
     $91 = (0 - ($90))|0;
     $92 = (($84) + ($91<<2)|0);
     $93 = $92;
     _memcpy(($92|0),($86|0),($88|0))|0;
     $94 = HEAP32[$6>>2]|0;
     $95 = (($94) - ($89))|0;
     $96 = $95 >> 2;
     _memcpy(($85|0),($5|0),($95|0))|0;
     $97 = (($85) + ($96<<2)|0);
     $98 = $97;
     $99 = HEAP32[$this>>2]|0;
     HEAP32[$this>>2] = $93;
     HEAP32[$6>>2] = $98;
     HEAP32[$$pre$phiZ2D>>2] = $__v$sroa$37$0;
     $100 = ($99|0)==(0|0);
     if ($100) {
      $__p$0 = $84;
      return ($__p$0|0);
     }
     __ZdlPv($99);
     $__p$0 = $84;
     return ($__p$0|0);
    }
    function __ZN12_GLOBAL__N_115join_charactersERNSt3__16vectorIP8TextlineNS0_9allocatorIS3_EEEE($tlpv) {
     $tlpv = $tlpv|0;
     var $$ = 0, $$6 = 0, $$6$lcssa = 0, $$in = 0, $$lcssa = 0, $$lcssa85 = 0, $$lcssa86 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
     var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
     var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
     var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
     var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
     var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
     var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
     var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
     var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $current_line$031 = 0, $i$0$ph30 = 0, $j$025 = 0, $j$025$lcssa = 0, $k$0 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($tlpv)) + 4|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = HEAP32[$tlpv>>2]|0;
     $3 = ($1|0)==($2|0);
     if ($3) {
      return;
     } else {
      $$in = $2;$current_line$031 = 0;
     }
     while(1) {
      $4 = $$in;
      $5 = (($4) + ($current_line$031<<2)|0);
      $6 = HEAP32[$5>>2]|0;
      $7 = ((($6)) + 16|0);
      $8 = ((($6)) + 20|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = HEAP32[$7>>2]|0;
      $11 = (($9) - ($10))|0;
      $12 = ($11|0)>(4);
      L5: do {
       if ($12) {
        $i$0$ph30 = 0;
        while(1) {
         $18 = (($i$0$ph30) + 1)|0;
         L8: while(1) {
          $26 = (__ZNK8Textline9characterEi($6,$i$0$ph30)|0);
          $27 = HEAP32[$8>>2]|0;
          $28 = HEAP32[$7>>2]|0;
          $29 = (($27) - ($28))|0;
          $30 = $29 >> 2;
          $31 = ($18|0)<($30|0);
          if (!($31)) {
           $14 = $28;$15 = $27;
           break;
          }
          $32 = ((($26)) + 4|0);
          $33 = ((($26)) + 12|0);
          $j$025 = $18;
          while(1) {
           $34 = (__ZNK8Textline9characterEi($6,$j$025)|0);
           $35 = (__ZNK9Rectangle10h_overlapsERKS_($26,$34)|0);
           if ($35) {
            $36 = HEAP32[$32>>2]|0;
            $37 = HEAP32[$33>>2]|0;
            $38 = (($37) + ($36))|0;
            $39 = (($38|0) / 2)&-1;
            $40 = ((($34)) + 4|0);
            $41 = HEAP32[$40>>2]|0;
            $42 = ((($34)) + 12|0);
            $43 = HEAP32[$42>>2]|0;
            $44 = (($43) + ($41))|0;
            $45 = (($44|0) / 2)&-1;
            $46 = ($39|0)<($45|0);
            $$ = $46 ? $26 : $34;
            $$6 = $46 ? $34 : $26;
            $47 = (__ZNK9Rectangle16includes_hcenterERKS_($$6,$$)|0);
            if ($47) {
             $$6$lcssa = $$6;$$lcssa = $34;$$lcssa85 = $40;$$lcssa86 = $42;$j$025$lcssa = $j$025;
             break;
            }
            $48 = (__ZNK9Rectangle16includes_hcenterERKS_($$,$$6)|0);
            if ($48) {
             $$6$lcssa = $$6;$$lcssa = $34;$$lcssa85 = $40;$$lcssa86 = $42;$j$025$lcssa = $j$025;
             break;
            }
            $49 = ((($$6)) + 4|0);
            $50 = HEAP32[$49>>2]|0;
            $51 = ((($$)) + 12|0);
            $52 = HEAP32[$51>>2]|0;
            $53 = ($50|0)>($52|0);
            if ($53) {
             $54 = HEAP32[$$6>>2]|0;
             $55 = ((($$6)) + 8|0);
             $56 = HEAP32[$55>>2]|0;
             $57 = (($56) + ($54))|0;
             $58 = (($57|0) / 2)&-1;
             $59 = HEAP32[$$>>2]|0;
             $60 = ((($$)) + 8|0);
             $61 = HEAP32[$60>>2]|0;
             $62 = (($61) + ($59))|0;
             $63 = (($62|0) / 2)&-1;
             $64 = ($58|0)<($63|0);
             if ($64) {
              $$6$lcssa = $$6;$$lcssa = $34;$$lcssa85 = $40;$$lcssa86 = $42;$j$025$lcssa = $j$025;
              break;
             }
            }
            $65 = ((($$6)) + 16|0);
            $66 = ((($$6)) + 20|0);
            $67 = HEAP32[$66>>2]|0;
            $68 = HEAP32[$65>>2]|0;
            $69 = (($67) - ($68))|0;
            $70 = ($69|0)==(8);
            if ($70) {
             $71 = (__ZN9Character4blobEi($$6,0)|0);
             $72 = ((($71)) + 12|0);
             $73 = HEAP32[$72>>2]|0;
             $74 = ((($71)) + 4|0);
             $75 = HEAP32[$74>>2]|0;
             $76 = (($73) + 1)|0;
             $77 = (($76) - ($75))|0;
             $78 = ((($71)) + 8|0);
             $79 = HEAP32[$78>>2]|0;
             $80 = HEAP32[$71>>2]|0;
             $81 = (($79) + 1)|0;
             $82 = (($81) - ($80))|0;
             $83 = $77 << 1;
             $84 = Math_imul($83, $82)|0;
             $85 = (__ZN9Character4blobEi($$6,1)|0);
             $86 = ((($85)) + 12|0);
             $87 = HEAP32[$86>>2]|0;
             $88 = ((($85)) + 4|0);
             $89 = HEAP32[$88>>2]|0;
             $90 = (($87) + 1)|0;
             $91 = (($90) - ($89))|0;
             $92 = ((($85)) + 8|0);
             $93 = HEAP32[$92>>2]|0;
             $94 = HEAP32[$85>>2]|0;
             $95 = (($93) + 1)|0;
             $96 = (($95) - ($94))|0;
             $97 = Math_imul($96, $91)|0;
             $98 = ($84|0)<($97|0);
             if ($98) {
              $99 = (__ZN9Character4blobEi($$6,0)|0);
              $100 = (__ZNK9Rectangle16includes_vcenterERKS_($99,$$)|0);
              if ($100) {
               $$6$lcssa = $$6;$$lcssa = $34;$$lcssa85 = $40;$$lcssa86 = $42;$j$025$lcssa = $j$025;
               break;
              }
             }
            }
           }
           $158 = (($j$025) + 1)|0;
           $159 = HEAP32[$8>>2]|0;
           $160 = HEAP32[$7>>2]|0;
           $161 = (($159) - ($160))|0;
           $162 = $161 >> 2;
           $163 = ($158|0)<($162|0);
           if ($163) {
            $j$025 = $158;
           } else {
            $14 = $160;$15 = $159;
            break L8;
           }
          }
          $101 = HEAP32[$33>>2]|0;
          $102 = HEAP32[$32>>2]|0;
          $103 = (($101) + 1)|0;
          $104 = (($103) - ($102))|0;
          $105 = ((($26)) + 8|0);
          $106 = HEAP32[$105>>2]|0;
          $107 = HEAP32[$26>>2]|0;
          $108 = (($106) + 1)|0;
          $109 = (($108) - ($107))|0;
          $110 = $104 << 6;
          $111 = Math_imul($110, $109)|0;
          $112 = (__ZN9Character9main_blobEv($$lcssa)|0);
          $113 = ((($112)) + 12|0);
          $114 = HEAP32[$113>>2]|0;
          $115 = ((($112)) + 4|0);
          $116 = HEAP32[$115>>2]|0;
          $117 = (($114) + 1)|0;
          $118 = (($117) - ($116))|0;
          $119 = ((($112)) + 8|0);
          $120 = HEAP32[$119>>2]|0;
          $121 = HEAP32[$112>>2]|0;
          $122 = (($120) + 1)|0;
          $123 = (($122) - ($121))|0;
          $124 = Math_imul($123, $118)|0;
          $125 = ($111|0)<($124|0);
          do {
           if ($125) {
            $k$0 = $i$0$ph30;
           } else {
            $126 = HEAP32[$$lcssa86>>2]|0;
            $127 = HEAP32[$$lcssa85>>2]|0;
            $128 = (($126) + 1)|0;
            $129 = (($128) - ($127))|0;
            $130 = ((($$lcssa)) + 8|0);
            $131 = HEAP32[$130>>2]|0;
            $132 = HEAP32[$$lcssa>>2]|0;
            $133 = (($131) + 1)|0;
            $134 = (($133) - ($132))|0;
            $135 = $129 << 6;
            $136 = Math_imul($135, $134)|0;
            $137 = (__ZN9Character9main_blobEv($26)|0);
            $138 = ((($137)) + 12|0);
            $139 = HEAP32[$138>>2]|0;
            $140 = ((($137)) + 4|0);
            $141 = HEAP32[$140>>2]|0;
            $142 = (($139) + 1)|0;
            $143 = (($142) - ($141))|0;
            $144 = ((($137)) + 8|0);
            $145 = HEAP32[$144>>2]|0;
            $146 = HEAP32[$137>>2]|0;
            $147 = (($145) + 1)|0;
            $148 = (($147) - ($146))|0;
            $149 = Math_imul($148, $143)|0;
            $150 = ($136|0)<($149|0);
            if ($150) {
             $k$0 = $j$025$lcssa;
            } else {
             $151 = ($$6$lcssa|0)==($$lcssa|0);
             if ($151) {
              __ZN9Character4joinERS_($$lcssa,$26);
              $k$0 = $i$0$ph30;
              break;
             } else {
              __ZN9Character4joinERS_($26,$$lcssa);
              $k$0 = $j$025$lcssa;
              break;
             }
            }
           }
          } while(0);
          __ZN8Textline16delete_characterEi($6,$k$0);
          $152 = HEAP32[$8>>2]|0;
          $153 = HEAP32[$7>>2]|0;
          $154 = (($152) - ($153))|0;
          $155 = $154 >> 2;
          $156 = (($155) + -1)|0;
          $157 = ($i$0$ph30|0)<($156|0);
          if (!($157)) {
           break L5;
          }
         }
         $13 = (($15) - ($14))|0;
         $16 = $13 >> 2;
         $17 = (($16) + -1)|0;
         $19 = ($18|0)<($17|0);
         if ($19) {
          $i$0$ph30 = $18;
         } else {
          break;
         }
        }
       }
      } while(0);
      $20 = (($current_line$031) + 1)|0;
      $21 = HEAP32[$0>>2]|0;
      $22 = HEAP32[$tlpv>>2]|0;
      $23 = (($21) - ($22))|0;
      $24 = $23 >> 2;
      $25 = ($20>>>0)<($24>>>0);
      if ($25) {
       $$in = $22;$current_line$031 = $20;
      } else {
       break;
      }
     }
     return;
    }
    function __ZN9TextblockD2Ev($this) {
     $this = $this|0;
     var $$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
     var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$07 = 0;
     var $i$07$in = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i1 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i2 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 16|0);
     $1 = ((($this)) + 20|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$0>>2]|0;
     $4 = (($2) - ($3))|0;
     $5 = ($4|0)>(0);
     $6 = $3;
     do {
      if ($5) {
       $7 = $4 >> 2;
       $18 = $6;$i$07$in = $7;
       while(1) {
        $i$07 = (($i$07$in) + -1)|0;
        $17 = (($18) + ($i$07<<2)|0);
        $19 = HEAP32[$17>>2]|0;
        $20 = ($19|0)==(0|0);
        if (!($20)) {
         __THREW__ = 0;
         invoke_vi(111,($19|0));
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if ($23) {
          $$lcssa = $19;
          break;
         }
         __ZdlPv($19);
        }
        $21 = ($i$07$in|0)>(1);
        if (!($21)) {
         label = 3;
         break;
        }
        $$pre = HEAP32[$0>>2]|0;
        $18 = $$pre;$i$07$in = $i$07;
       }
       if ((label|0) == 3) {
        $$phi$trans$insert = ((($this)) + 16|0);
        $$pre9 = HEAP32[$$phi$trans$insert>>2]|0;
        $8 = $$pre9;
        break;
       }
       $24 = ___cxa_find_matching_catch_2()|0;
       $25 = tempRet0;
       __ZdlPv($$lcssa);
       $26 = HEAP32[$0>>2]|0;
       $27 = ($26|0)==(0|0);
       $28 = $26;
       if ($27) {
        ___resumeException($24|0);
        // unreachable;
       }
       $29 = HEAP32[$1>>2]|0;
       $30 = ($29|0)==($26|0);
       if (!($30)) {
        $scevgep$i$i$i = ((($29)) + -4|0);
        $31 = $scevgep$i$i$i;
        $32 = (($31) - ($28))|0;
        $33 = $32 >>> 2;
        $34 = $33 ^ -1;
        $scevgep4$i$i$i = (($29) + ($34<<2)|0);
        HEAP32[$1>>2] = $scevgep4$i$i$i;
       }
       __ZdlPv($26);
       ___resumeException($24|0);
       // unreachable;
      } else {
       $8 = $6;
      }
     } while(0);
     $9 = ($8|0)==(0|0);
     $10 = $8;
     if ($9) {
      return;
     }
     $11 = HEAP32[$1>>2]|0;
     $12 = ($11|0)==($8|0);
     if (!($12)) {
      $scevgep$i$i$i1 = ((($11)) + -4|0);
      $13 = $scevgep$i$i$i1;
      $14 = (($13) - ($10))|0;
      $15 = $14 >>> 2;
      $16 = $15 ^ -1;
      $scevgep4$i$i$i2 = (($11) + ($16<<2)|0);
      HEAP32[$1>>2] = $scevgep4$i$i$i2;
     }
     __ZdlPv($8);
     return;
    }
    function __ZN9Textblock9recognizeERK7Control($this,$control) {
     $this = $this|0;
     $control = $control|0;
     var $$byval_copy = 0, $$in = 0, $$in50 = 0, $$lcssa = 0, $$lcssa101 = 0, $$lcssa102 = 0, $$lcssa103 = 0, $$lcssa111 = 0, $$lcssa99 = 0, $$min_vdistance$0 = 0, $$pre = 0, $$pre$i = 0, $$pre47 = 0, $$pre48 = 0, $$pre49 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
     var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
     var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
     var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
     var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
     var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
     var $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
     var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
     var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
     var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
     var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i$i = 0, $i$031 = 0, $i1$028 = 0, $i1$028$in = 0, $i2$0$ph21 = 0, $i2$017 = 0, $i2$017$phi = 0, $i4$015 = 0, $j$024 = 0, $min_vdistance$0$ph$lcssa = 0, $min_vdistance$0$ph22 = 0;
     var $or$cond = 0, $or$cond67 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, $vdistance7$0 = 0, $vdistance7$013 = 0, $vdistance7$014 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $$byval_copy = sp + 8|0;
     $0 = sp + 4|0;
     $1 = sp;
     $2 = ((($this)) + 16|0);
     $3 = ((($this)) + 20|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP32[$2>>2]|0;
     $6 = (($4) - ($5))|0;
     $7 = ($6|0)>(0);
     if ($7) {
      $$in50 = $5;$i$031 = 0;
      while(1) {
       $14 = $$in50;
       $15 = (($14) + ($i$031<<2)|0);
       $16 = HEAP32[$15>>2]|0;
       __ZNK8Textline10recognize1ERK7Charset($16,$control);
       $17 = HEAP32[$2>>2]|0;
       $18 = (($17) + ($i$031<<2)|0);
       $19 = HEAP32[$18>>2]|0;
       __ZN8Textline10recognize2ERK7Charset($19,$control);
       $20 = (($i$031) + 1)|0;
       $21 = HEAP32[$3>>2]|0;
       $22 = HEAP32[$2>>2]|0;
       $23 = (($21) - ($22))|0;
       $24 = $23 >> 2;
       $25 = ($20|0)<($24|0);
       if ($25) {
        $$in50 = $22;$i$031 = $20;
       } else {
        break;
       }
      }
     }
     __ZN9Textblock13apply_filtersERK7Control($this,$control);
     $8 = HEAP32[$3>>2]|0;
     $9 = HEAP32[$2>>2]|0;
     $10 = (($8) - ($9))|0;
     $11 = ($10|0)>(0);
     do {
      if ($11) {
       $12 = $9;
       $13 = $10 >> 2;
       $30 = $12;$i1$028$in = $13;
       while(1) {
        $i1$028 = (($i1$028$in) + -1)|0;
        $29 = (($30) + ($i1$028<<2)|0);
        $31 = HEAP32[$29>>2]|0;
        $32 = ((($31)) + 16|0);
        $33 = ((($31)) + 20|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = HEAP32[$32>>2]|0;
        $36 = (($34) - ($35))|0;
        $37 = ($36|0)>(0);
        L10: do {
         if ($37) {
          $j$024 = 0;
          while(1) {
           $44 = (__ZNK8Textline9characterEi($31,$j$024)|0);
           $45 = ((($44)) + 28|0);
           $46 = ((($44)) + 32|0);
           $47 = HEAP32[$46>>2]|0;
           $48 = HEAP32[$45>>2]|0;
           $49 = ($47|0)==($48|0);
           $42 = (($j$024) + 1)|0;
           if (!($49)) {
            break L10;
           }
           $38 = HEAP32[$33>>2]|0;
           $39 = HEAP32[$32>>2]|0;
           $40 = (($38) - ($39))|0;
           $41 = $40 >> 2;
           $43 = ($42|0)<($41|0);
           if ($43) {
            $j$024 = $42;
           } else {
            break;
           }
          }
          $$pre47 = HEAP32[$2>>2]|0;
          $51 = $$pre47;
          label = 12;
         } else {
          $51 = $30;
          label = 12;
         }
        } while(0);
        if ((label|0) == 12) {
         label = 0;
         $50 = (($51) + ($i1$028<<2)|0);
         $52 = HEAP32[$50>>2]|0;
         $53 = ($52|0)==(0|0);
         if ($53) {
          $57 = $51;
         } else {
          __THREW__ = 0;
          invoke_vi(111,($52|0));
          $54 = __THREW__; __THREW__ = 0;
          $55 = $54&1;
          if ($55) {
           $$lcssa111 = $52;
           label = 19;
           break;
          }
          __ZdlPv($52);
          $$pre$i = HEAP32[$2>>2]|0;
          $57 = $$pre$i;
         }
         $56 = (($57) + ($i1$028<<2)|0);
         $58 = ((($56)) + 4|0);
         $59 = HEAP32[$3>>2]|0;
         $60 = $58;
         $61 = (($59) - ($60))|0;
         $62 = $61 >> 2;
         _memmove(($56|0),($58|0),($61|0))|0;
         $63 = (($56) + ($62<<2)|0);
         $64 = HEAP32[$3>>2]|0;
         $65 = ($64|0)==($63|0);
         if (!($65)) {
          $__new_last2$i$i$i$i = $63;
          $scevgep$i$i$i$i = ((($64)) + -4|0);
          $67 = $scevgep$i$i$i$i;
          $68 = (($67) - ($__new_last2$i$i$i$i))|0;
          $69 = $68 >>> 2;
          $70 = $69 ^ -1;
          $scevgep4$i$i$i$i = (($64) + ($70<<2)|0);
          HEAP32[$3>>2] = $scevgep4$i$i$i$i;
         }
        }
        $66 = ($i1$028$in|0)>(1);
        if (!($66)) {
         label = 6;
         break;
        }
        $$pre = HEAP32[$2>>2]|0;
        $30 = $$pre;$i1$028$in = $i1$028;
       }
       if ((label|0) == 6) {
        $$pre48 = HEAP32[$3>>2]|0;
        $$pre49 = HEAP32[$2>>2]|0;
        $$in = $$pre48;$27 = $$pre49;
        break;
       }
       else if ((label|0) == 19) {
        $71 = ___cxa_find_matching_catch_2()|0;
        $72 = tempRet0;
        __ZdlPv($$lcssa111);
        ___resumeException($71|0);
        // unreachable;
       }
      } else {
       $$in = $8;$27 = $9;
      }
     } while(0);
     $26 = (($$in) - ($27))|0;
     $28 = ($26|0)>(8);
     if (!($28)) {
      STACKTOP = sp;return;
     }
     $73 = $$in;
     $74 = ((($73)) + -4|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (__ZNK8Textline12mean_vcenterEv($75)|0);
     $77 = HEAP32[$2>>2]|0;
     $78 = HEAP32[$77>>2]|0;
     $79 = (__ZNK8Textline12mean_vcenterEv($78)|0);
     $80 = (($76) - ($79))|0;
     $81 = HEAP32[$3>>2]|0;
     $82 = HEAP32[$2>>2]|0;
     $83 = (($81) - ($82))|0;
     $84 = $83 >> 2;
     $85 = (($84) + -1)|0;
     $86 = (($80|0) / ($85|0))&-1;
     $87 = ($83|0)>(4);
     $88 = $82;
     L31: do {
      if ($87) {
       $191 = $88;$192 = 1;$i2$0$ph21 = 0;$min_vdistance$0$ph22 = $86;
       while(1) {
        $95 = $191;$98 = $192;$i2$017 = $i2$0$ph21;
        while(1) {
         $94 = (($95) + ($i2$017<<2)|0);
         $96 = HEAP32[$94>>2]|0;
         $97 = (($95) + ($98<<2)|0);
         $99 = HEAP32[$97>>2]|0;
         $100 = ((($96)) + 16|0);
         $101 = ((($96)) + 20|0);
         $102 = HEAP32[$101>>2]|0;
         $103 = HEAP32[$100>>2]|0;
         $104 = (($102) - ($103))|0;
         $105 = $104 >> 2;
         $106 = ((($99)) + 16|0);
         $107 = ((($99)) + 20|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = HEAP32[$106>>2]|0;
         $110 = (($108) - ($109))|0;
         $111 = $110 >> 2;
         $112 = (__ZN5Ocrad7similarEiiii($105,$111,50,1)|0);
         if ($112) {
          $113 = ((($96)) + 16|0);
          $114 = HEAP32[$113>>2]|0;
          $115 = HEAP32[$101>>2]|0;
          $116 = ($114|0)==($115|0);
          if ($116) {
           $135 = 0;
          } else {
           $117 = ((($115)) + -4|0);
           $118 = HEAP32[$117>>2]|0;
           $119 = ((($118)) + 8|0);
           $120 = HEAP32[$119>>2]|0;
           $121 = HEAP32[$114>>2]|0;
           $122 = HEAP32[$121>>2]|0;
           $123 = (($120) - ($122))|0;
           $135 = $123;
          }
          $124 = ((($99)) + 16|0);
          $125 = HEAP32[$124>>2]|0;
          $126 = HEAP32[$107>>2]|0;
          $127 = ($125|0)==($126|0);
          if ($127) {
           $136 = 0;
          } else {
           $128 = ((($126)) + -4|0);
           $129 = HEAP32[$128>>2]|0;
           $130 = ((($129)) + 8|0);
           $131 = HEAP32[$130>>2]|0;
           $132 = HEAP32[$125>>2]|0;
           $133 = HEAP32[$132>>2]|0;
           $134 = (($131) - ($133))|0;
           $136 = $134;
          }
          $137 = (__ZN5Ocrad7similarEiiii($135,$136,30,1)|0);
          if ($137) {
           $138 = (__ZNK8Textline12mean_vcenterEv($99)|0);
           $139 = (__ZNK8Textline12mean_vcenterEv($96)|0);
           $140 = (($138) - ($139))|0;
           $141 = ($140|0)<($min_vdistance$0$ph22|0);
           if ($141) {
            $149 = (__ZNK8Textline11mean_heightEv($96)|0);
            $150 = (__ZNK8Textline11mean_heightEv($99)|0);
            $151 = ($149|0)<(10);
            $152 = ($150|0)<(10);
            $or$cond = $151 | $152;
            if (!($or$cond)) {
             $153 = (__ZN5Ocrad7similarEiiii($149,$150,20,1)|0);
             if ($153) {
              $$lcssa101 = $140;$$lcssa102 = $149;$$lcssa103 = $150;$$lcssa99 = $98;
              break;
             }
            }
           }
          }
         }
         $142 = (($98) + 1)|0;
         $143 = HEAP32[$3>>2]|0;
         $144 = HEAP32[$2>>2]|0;
         $145 = (($143) - ($144))|0;
         $146 = $145 >> 2;
         $147 = ($142|0)<($146|0);
         $148 = $144;
         if ($147) {
          $i2$017$phi = $98;$95 = $148;$98 = $142;$i2$017 = $i2$017$phi;
         } else {
          $193 = $148;$91 = $144;$92 = $143;$min_vdistance$0$ph$lcssa = $min_vdistance$0$ph22;
          break L31;
         }
        }
        $154 = $$lcssa101 << 1;
        $155 = (($$lcssa103) + ($$lcssa102))|0;
        $156 = ($154|0)>($155|0);
        $$min_vdistance$0 = $156 ? $$lcssa101 : $min_vdistance$0$ph22;
        $157 = (($$lcssa99) + 1)|0;
        $158 = HEAP32[$3>>2]|0;
        $159 = HEAP32[$2>>2]|0;
        $160 = (($158) - ($159))|0;
        $161 = $160 >> 2;
        $162 = ($157|0)<($161|0);
        $163 = $159;
        if ($162) {
         $191 = $163;$192 = $157;$i2$0$ph21 = $$lcssa99;$min_vdistance$0$ph22 = $$min_vdistance$0;
        } else {
         $193 = $163;$91 = $159;$92 = $158;$min_vdistance$0$ph$lcssa = $$min_vdistance$0;
         break;
        }
       }
      } else {
       $193 = $88;$91 = $82;$92 = $81;$min_vdistance$0$ph$lcssa = $86;
      }
     } while(0);
     $89 = ($min_vdistance$0$ph$lcssa|0)>(0);
     $90 = (($92) - ($91))|0;
     $93 = ($90|0)>(4);
     $or$cond67 = $89 & $93;
     if (!($or$cond67)) {
      STACKTOP = sp;return;
     }
     $172 = $193;$175 = 1;$i4$015 = 0;
     while(1) {
      $171 = (($172) + ($i4$015<<2)|0);
      $173 = HEAP32[$171>>2]|0;
      $174 = (($172) + ($175<<2)|0);
      $176 = HEAP32[$174>>2]|0;
      $177 = (__ZNK8Textline12mean_vcenterEv($176)|0);
      $178 = (__ZNK8Textline12mean_vcenterEv($173)|0);
      $179 = (($177) - ($178))|0;
      $vdistance7$013 = (($179) - ($min_vdistance$0$ph$lcssa))|0;
      $180 = $vdistance7$013 << 1;
      $181 = ($180|0)>($min_vdistance$0$ph$lcssa|0);
      $182 = (($i4$015) + 1)|0;
      if ($181) {
       $185 = $182;$vdistance7$014 = $vdistance7$013;
       while(1) {
        $183 = HEAP32[$2>>2]|0;
        $184 = (($183) + ($185<<2)|0);
        $186 = $184;
        HEAP32[$0>>2] = $186;
        $187 = (__Znwj(28)|0);
        ;HEAP32[$187>>2]=0|0;HEAP32[$187+4>>2]=0|0;HEAP32[$187+8>>2]=0|0;HEAP32[$187+12>>2]=0|0;HEAP32[$187+16>>2]=0|0;HEAP32[$187+20>>2]=0|0;HEAP32[$187+24>>2]=0|0;
        HEAP32[$1>>2] = $187;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        (__ZNSt3__16vectorIP8TextlineNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($2,$$byval_copy,$1)|0);
        $vdistance7$0 = (($vdistance7$014) - ($min_vdistance$0$ph$lcssa))|0;
        $188 = $vdistance7$0 << 1;
        $189 = ($188|0)>($min_vdistance$0$ph$lcssa|0);
        $190 = (($185) + 1)|0;
        if ($189) {
         $185 = $190;$vdistance7$014 = $vdistance7$0;
        } else {
         $$lcssa = $190;
         break;
        }
       }
      } else {
       $$lcssa = $182;
      }
      $164 = (($$lcssa) + 1)|0;
      $165 = HEAP32[$3>>2]|0;
      $166 = HEAP32[$2>>2]|0;
      $167 = (($165) - ($166))|0;
      $168 = $167 >> 2;
      $169 = ($164|0)<($168|0);
      $170 = $166;
      if ($169) {
       $172 = $170;$175 = $164;$i4$015 = $$lcssa;
      } else {
       break;
      }
     }
     STACKTOP = sp;return;
    }
    function __ZNK9Textblock8textlineEi($this,$i) {
     $this = $this|0;
     $i = $i|0;
     var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ($i|0)<(0);
     if (!($0)) {
      $1 = ((($this)) + 16|0);
      $2 = ((($this)) + 20|0);
      $3 = HEAP32[$2>>2]|0;
      $4 = HEAP32[$1>>2]|0;
      $5 = (($3) - ($4))|0;
      $6 = $5 >> 2;
      $7 = ($6|0)>($i|0);
      if ($7) {
       $8 = $4;
       $10 = $8;
       $9 = (($10) + ($i<<2)|0);
       $11 = HEAP32[$9>>2]|0;
       return ($11|0);
      }
     }
     __ZN5Ocrad14internal_errorEPKc(2315);
     $$phi$trans$insert = ((($this)) + 16|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $10 = $$pre;
     $9 = (($10) + ($i<<2)|0);
     $11 = HEAP32[$9>>2]|0;
     return ($11|0);
    }
    function __ZNK9Textblock6dprintERK7Controlbb($this,$control,$graph,$recursive) {
     $this = $this|0;
     $control = $control|0;
     $graph = $graph|0;
     $recursive = $recursive|0;
     var $$in = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
     var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0;
     var sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $vararg_buffer1 = sp + 8|0;
     $vararg_buffer = sp;
     $0 = ((($control)) + 16|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 16|0);
     $3 = ((($this)) + 20|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP32[$2>>2]|0;
     $6 = (($4) - ($5))|0;
     $7 = $6 >> 2;
     HEAP32[$vararg_buffer>>2] = $7;
     (_fprintf($1,2342,$vararg_buffer)|0);
     $8 = HEAP32[$3>>2]|0;
     $9 = HEAP32[$2>>2]|0;
     $10 = (($8) - ($9))|0;
     $11 = ($10|0)>(0);
     $12 = HEAP32[$0>>2]|0;
     if (!($11)) {
      $$lcssa = $12;
      (_fputc(10,$$lcssa)|0);
      STACKTOP = sp;return;
     }
     $$in = $9;$23 = $12;$i$01 = 0;
     while(1) {
      $13 = $$in;
      $14 = (($13) + ($i$01<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = ((($15)) + 16|0);
      $17 = ((($15)) + 20|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = HEAP32[$16>>2]|0;
      $20 = (($18) - ($19))|0;
      $21 = $20 >> 2;
      $22 = (($i$01) + 1)|0;
      HEAP32[$vararg_buffer1>>2] = $21;
      $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $22;
      (_fprintf($23,2353,$vararg_buffer1)|0);
      $24 = HEAP32[$2>>2]|0;
      $25 = (($24) + ($i$01<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      __ZNK8Textline6dprintERK7Controlbb($26,$control,$graph,$recursive);
      $27 = HEAP32[$3>>2]|0;
      $28 = HEAP32[$2>>2]|0;
      $29 = (($27) - ($28))|0;
      $30 = $29 >> 2;
      $31 = ($22|0)<($30|0);
      $32 = HEAP32[$0>>2]|0;
      if ($31) {
       $$in = $28;$23 = $32;$i$01 = $22;
      } else {
       $$lcssa = $32;
       break;
      }
     }
     (_fputc(10,$$lcssa)|0);
     STACKTOP = sp;return;
    }
    function __ZNK9Textblock6xprintERK7Control($this,$control) {
     $this = $this|0;
     $control = $control|0;
     var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
     var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $vararg_buffer1 = sp + 8|0;
     $vararg_buffer = sp;
     $0 = ((($control)) + 20|0);
     $1 = HEAP32[$0>>2]|0;
     $2 = ((($this)) + 16|0);
     $3 = ((($this)) + 20|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP32[$2>>2]|0;
     $6 = (($4) - ($5))|0;
     $7 = $6 >> 2;
     HEAP32[$vararg_buffer>>2] = $7;
     (_fprintf($1,2379,$vararg_buffer)|0);
     $8 = HEAP32[$3>>2]|0;
     $9 = HEAP32[$2>>2]|0;
     $10 = (($8) - ($9))|0;
     $11 = ($10|0)>(0);
     if (!($11)) {
      STACKTOP = sp;return;
     }
     $$in = $9;$i$01 = 0;
     while(1) {
      $12 = $$in;
      $13 = HEAP32[$0>>2]|0;
      $14 = (($i$01) + 1)|0;
      $15 = (($12) + ($i$01<<2)|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ((($16)) + 16|0);
      $18 = ((($16)) + 20|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = HEAP32[$17>>2]|0;
      $21 = (($19) - ($20))|0;
      $22 = $21 >> 2;
      $23 = (__ZNK8Textline11mean_heightEv($16)|0);
      HEAP32[$vararg_buffer1>>2] = $14;
      $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $22;
      $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
      HEAP32[$vararg_ptr5>>2] = $23;
      (_fprintf($13,2389,$vararg_buffer1)|0);
      $24 = HEAP32[$2>>2]|0;
      $25 = (($24) + ($i$01<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      __ZNK8Textline6xprintERK7Control($26,$control);
      $27 = HEAP32[$3>>2]|0;
      $28 = HEAP32[$2>>2]|0;
      $29 = (($27) - ($28))|0;
      $30 = $29 >> 2;
      $31 = ($14|0)<($30|0);
      if ($31) {
       $$in = $28;$i$01 = $14;
      } else {
       break;
      }
     }
     STACKTOP = sp;return;
    }
    function __ZNK9Textblock5cmarkER10Page_image($this,$page_image) {
     $this = $this|0;
     $page_image = $page_image|0;
     var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 16|0);
     $1 = ((($this)) + 20|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$0>>2]|0;
     $4 = (($2) - ($3))|0;
     $5 = ($4|0)>(0);
     if ($5) {
      $$in = $3;$i$01 = 0;
     } else {
      return;
     }
     while(1) {
      $6 = $$in;
      $7 = (($6) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      __ZNK8Textline5cmarkER10Page_image($8,$page_image);
      $9 = (($i$01) + 1)|0;
      $10 = HEAP32[$1>>2]|0;
      $11 = HEAP32[$0>>2]|0;
      $12 = (($10) - ($11))|0;
      $13 = $12 >> 2;
      $14 = ($9|0)<($13|0);
      if ($14) {
       $$in = $11;$i$01 = $9;
      } else {
       break;
      }
     }
     return;
    }
    function __ZNK9Textblock5lmarkER10Page_image($this,$page_image) {
     $this = $this|0;
     $page_image = $page_image|0;
     var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 16|0);
     $1 = ((($this)) + 20|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$0>>2]|0;
     $4 = (($2) - ($3))|0;
     $5 = ($4|0)>(0);
     if ($5) {
      $$in = $3;$i$01 = 0;
     } else {
      return;
     }
     while(1) {
      $6 = $$in;
      $7 = (($6) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      __ZN10Page_image10draw_trackERK5Track($page_image,$8);
      $9 = (($i$01) + 1)|0;
      $10 = HEAP32[$1>>2]|0;
      $11 = HEAP32[$0>>2]|0;
      $12 = (($10) - ($11))|0;
      $13 = $12 >> 2;
      $14 = ($9|0)<($13|0);
      if ($14) {
       $$in = $11;$i$01 = $9;
      } else {
       break;
      }
     }
     return;
    }
    function __ZN9Character10recognize1ERK7CharsetRK9Rectangle($this,$charset,$charbox) {
     $this = $this|0;
     $charset = $charset|0;
     $charbox = $charbox|0;
     var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     $0 = ((($this)) + 16|0);
     $1 = ((($this)) + 20|0);
     $2 = HEAP32[$1>>2]|0;
     $3 = HEAP32[$0>>2]|0;
     $4 = (($2) - ($3))|0;
     $5 = $4 >> 2;
     switch ($5|0) {
     case 1:  {
      $6 = (__ZN9Character4blobEi($this,0)|0);
      $7 = ((($6)) + 28|0);
      $8 = ((($6)) + 32|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = HEAP32[$7>>2]|0;
      $11 = (($9) - ($10))|0;
      $12 = $11 >> 2;
      switch ($12|0) {
      case 0:  {
       __ZN9Character12recognize110ERK7CharsetRK9Rectangle($this,$charset,$charbox);
       return;
       break;
      }
      case 1:  {
       __ZN9Character12recognize111ERK7CharsetRK9Rectangle($this,$charset,$charbox);
       return;
       break;
      }
      case 2:  {
       __ZN9Character12recognize112ERK9Rectangle($this,$charbox);
       return;
       break;
      }
      default: {
       return;
      }
      }
      break;
     }
     case 2:  {
      __ZN9Character11recognize12ERK7CharsetRK9Rectangle($this,$charset,$charbox);
      return;
      break;
     }
     case 3:  {
      __ZN9Character11recognize13ERK7CharsetRK9Rectangle($this,$charset,$charbox);
      return;
      break;
     }
     default: {
      return;
     }
     }
    }
    function __ZN9Character12recognize110ERK7CharsetRK9Rectangle($this,$charset,$charbox) {
     $this = $this|0;
     $charset = $charset|0;
     $charbox = $charbox|0;
     var $$bar$0$off0 = 0, $$lcssa = 0, $$lcssa165 = 0, $$lcssa168 = 0, $$lcssa254 = 0, $$phi$trans$insert210 = 0, $$pre = 0, $$pre$i = 0, $$pre$i36 = 0, $$pre$i39 = 0, $$pre200 = 0, $$pre201$pre = 0, $$pre202$pre = 0, $$pre204 = 0, $$pre205 = 0, $$pre206 = 0, $$pre207 = 0, $$pre208 = 0, $$pre209 = 0, $$pre211 = 0;
     var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
     var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
     var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
     var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
     var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
     var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
     var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
     var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
     var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
     var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
     var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
     var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
     var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
     var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
     var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
     var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
     var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
     var $1303 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
     var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
     var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
     var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
     var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
     var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
     var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
     var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
     var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
     var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
     var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
     var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
     var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
     var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
     var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
     var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
     var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
     var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
     var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
     var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
     var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
     var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
     var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
     var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
     var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
     var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
     var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
     var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
     var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
     var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
     var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
     var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
     var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
     var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
     var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
     var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
     var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
     var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
     var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
     var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
     var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
     var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
     var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
     var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
     var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
     var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
     var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
     var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
     var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bar$0$off0173 = 0, $bar$1$off0102$ph = 0, $col$0$lcssa = 0, $col$0187 = 0, $col$0187$lcssa256 = 0, $col$0187$phi = 0, $col11$0$lcssa = 0, $col11$0178 = 0, $col11$1 = 0, $col6$0$lcssa = 0, $col6$0$lcssa$ph = 0, $col6$0170 = 0, $dmax$0175 = 0, $dmax$1105 = 0, $dmax$1106$ph = 0, $f = 0;
     var $hdiff = 0, $hmin$0179 = 0, $hmin$1 = 0, $i$0180 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $or$cond118 = 0, $or$cond119 = 0, $or$cond121 = 0, $or$cond122 = 0, $or$cond124 = 0, $or$cond126 = 0, $row$0174 = 0, label = 0, sp = 0;
     sp = STACKTOP;
     STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
     $0 = sp + 128|0;
     $1 = sp + 120|0;
     $2 = sp + 112|0;
     $3 = sp + 104|0;
     $4 = sp + 96|0;
     $5 = sp + 88|0;
     $6 = sp + 80|0;
     $7 = sp + 72|0;
     $8 = sp + 64|0;
     $9 = sp + 56|0;
     $10 = sp + 48|0;
     $11 = sp + 40|0;
     $12 = sp + 32|0;
     $13 = sp + 24|0;
     $14 = sp + 16|0;
     $15 = sp + 8|0;
     $16 = sp;
     $f = sp + 144|0;
     $hdiff = sp + 136|0;
     $17 = (__ZN9Character4blobEi($this,0)|0);
     __ZN8FeaturesC2ERK4Blob($f,$17);
     __THREW__ = 0;
     $18 = (invoke_iii(123,($f|0),($charbox|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     L1: do {
      if ($20) {
       label = 18;
      } else {
       switch ($18|0) {
       case 0:  {
        $115 = ((($17)) + 12|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = ((($17)) + 4|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = (($116) + 1)|0;
        $120 = (($119) - ($118))|0;
        $121 = ($120|0)<(5);
        if ($121) {
         __ZN8FeaturesD2Ev($f);
         STACKTOP = sp;return;
        }
        $122 = ($120|0)<(8);
        $123 = ((($17)) + 8|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = HEAP32[$17>>2]|0;
        if ($122) {
         $126 = (($124) + 1)|0;
         $127 = (($126) - ($125))|0;
         $128 = ($127|0)<(6);
         if ($128) {
          __ZN8FeaturesD2Ev($f);
          STACKTOP = sp;return;
         }
        }
        $129 = (($124) + 1)|0;
        $130 = (($129) - ($125))|0;
        $131 = ($130*10)|0;
        $132 = ($120|0)>($131|0);
        $133 = ($120*5)|0;
        $134 = ($133|0)<($130|0);
        $or$cond118 = $134 | $132;
        if ($or$cond118) {
         __ZN8FeaturesD2Ev($f);
         STACKTOP = sp;return;
        }
        __THREW__ = 0;
        $135 = (invoke_iiii(127,($f|0),($charset|0),($charbox|0))|0);
        $136 = __THREW__; __THREW__ = 0;
        $137 = $136&1;
        if ($137) {
         label = 18;
         break L1;
        }
        $138 = ($135|0)==(0);
        if (!($138)) {
         HEAP32[$8>>2] = $135;
         $139 = ((($8)) + 4|0);
         HEAP32[$139>>2] = 0;
         $140 = ((($this)) + 32|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ((($this)) + 36|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = ($141|0)==($143|0);
         if ($144) {
          $157 = ((($this)) + 28|0);
          __THREW__ = 0;
          invoke_vii(125,($157|0),($8|0));
          $158 = __THREW__; __THREW__ = 0;
          $159 = $158&1;
          if ($159) {
           label = 18;
           break L1;
          }
         } else {
          $145 = $8;
          $146 = $145;
          $147 = HEAP32[$146>>2]|0;
          $148 = (($145) + 4)|0;
          $149 = $148;
          $150 = HEAP32[$149>>2]|0;
          $151 = $141;
          $152 = $151;
          HEAP32[$152>>2] = $147;
          $153 = (($151) + 4)|0;
          $154 = $153;
          HEAP32[$154>>2] = $150;
          $155 = HEAP32[$140>>2]|0;
          $156 = ((($155)) + 8|0);
          HEAP32[$140>>2] = $156;
         }
         __ZN8FeaturesD2Ev($f);
         STACKTOP = sp;return;
        }
        __THREW__ = 0;
        $160 = (invoke_iii(128,($f|0),($charbox|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         label = 18;
         break L1;
        }
        $163 = ($160|0)==(0);
        if (!($163)) {
         HEAP32[$7>>2] = $160;
         $164 = ((($7)) + 4|0);
         HEAP32[$164>>2] = 0;
         $165 = ((($this)) + 32|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ((($this)) + 36|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($166|0)==($168|0);
         if ($169) {
          $182 = ((($this)) + 28|0);
          __THREW__ = 0;
          invoke_vii(125,($182|0),($7|0));
          $183 = __THREW__; __THREW__ = 0;
          $184 = $183&1;
          if ($184) {
           label = 18;
           break L1;
          }
         } else {
          $170 = $7;
          $171 = $170;
          $172 = HEAP32[$171>>2]|0;
          $173 = (($170) + 4)|0;
          $174 = $173;
          $175 = HEAP32[$174>>2]|0;
          $176 = $166;
          $177 = $176;
          HEAP32[$177>>2] = $172;
          $178 = (($176) + 4)|0;
          $179 = $178;
          HEAP32[$179>>2] = $175;
          $180 = HEAP32[$165>>2]|0;
          $181 = ((($180)) + 8|0);
          HEAP32[$165>>2] = $181;
         }
         __ZN8FeaturesD2Ev($f);
         STACKTOP = sp;return;
        }
        __THREW__ = 0;
        $185 = (invoke_ii(129,($f|0))|0);
        $186 = __THREW__; __THREW__ = 0;
        $187 = $186&1;
        if ($187) {
         label = 18;
         break L1;
        }
        $188 = ($185|0)==(0);
        if (!($188)) {
         HEAP32[$6>>2] = $185;
         $189 = ((($6)) + 4|0);
         HEAP32[$189>>2] = 0;
         $190 = ((($this)) + 32|0);
         $191 = HEAP32[$190>>2]|0;
         $192 = ((($this)) + 36|0);
         $193 = HEAP32[$192>>2]|0;
         $194 = ($191|0)==($193|0);
         if ($194) {
          $207 = ((($this)) + 28|0);
          __THREW__ = 0;
          invoke_vii(125,($207|0),($6|0));
          $208 = __THREW__; __THREW__ = 0;
          $209 = $208&1;
          if ($209) {
           label = 18;
           break L1;
          }
         } else {
          $195 = $6;
          $196 = $195;
          $197 = HEAP32[$196>>2]|0;
          $198 = (($195) + 4)|0;
          $199 = $198;
          $200 = HEAP32[$199>>2]|0;
          $201 = $191;
          $202 = $201;
          HEAP32[$202>>2] = $197;
          $203 = (($201) + 4)|0;
          $204 = $203;
          HEAP32[$204>>2] = $200;
          $205 = HEAP32[$190>>2]|0;
          $206 = ((($205)) + 8|0);
          HEAP32[$190>>2] = $206;
         }
         __ZN8FeaturesD2Ev($f);
         STACKTOP = sp;return;
        }
        __THREW__ = 0;
        $210 = (invoke_ii(130,($f|0))|0);
        $211 = __THREW__; __THREW__ = 0;
        $212 = $211&1;
        if ($212) {
         label = 18;
         break L1;
        }
        $213 = ($210|0)==(0);
        if (!($213)) {
         HEAP32[$5>>2] = $210;
         $214 = ((($5)) + 4|0);
         HEAP32[$214>>2] = 0;
         $215 = ((($this)) + 32|0);
         $216 = HEAP32[$215>>2]|0;
         $217 = ((($this)) + 36|0);
         $218 = HEAP32[$217>>2]|0;
         $219 = ($216|0)==($218|0);
         if ($219) {
          $232 = ((($this)) + 28|0);
          __THREW__ = 0;
          invoke_vii(125,($232|0),($5|0));
          $233 = __THREW__; __THREW__ = 0;
          $234 = $233&1;
          if ($234) {
           label = 18;
           break L1;
          }
         } else {
          $220 = $5;
          $221 = $220;
          $222 = HEAP32[$221>>2]|0;
          $223 = (($220) + 4)|0;
          $224 = $223;
          $225 = HEAP32[$224>>2]|0;
          $226 = $216;
          $227 = $226;
          HEAP32[$227>>2] = $222;
          $228 = (($226) + 4)|0;
          $229 = $228;
          HEAP32[$229>>2] = $225;
          $230 = HEAP32[$215>>2]|0;
          $231 = ((($230)) + 8|0);
          HEAP32[$215>>2] = $231;
         }
         __ZN8FeaturesD2Ev($f);
         STACKTOP = sp;return;
        }
        __THREW__ = 0;
        $235 = (invoke_iii(131,($charset|0),2)|0);
        $236 = __THREW__; __THREW__ = 0;
        $237 = $236&1;
        if ($237) {
         label = 18;
         break L1;
        }
        if ($235) {
         __THREW__ = 0;
         $238 = (invoke_ii(132,($f|0))|0);
         $239 = __THREW__; __THREW__ = 0;
         $240 = $239&1;
         if ($240) {
          label = 18;
          break L1;
         }
         $241 = ($238|0)==(0);
         if (!($241)) {
          HEAP32[$4>>2] = $238;
          $242 = ((($4)) + 4|0);
          HEAP32[$242>>2] = 0;
          $243 = ((($this)) + 32|0);
          $244 = HEAP32[$243>>2]|0;
          $245 = ((($this)) + 36|0);
          $246 = HEAP32[$245>>2]|0;
          $247 = ($244|0)==($246|0);
          if ($247) {
           $260 = ((($this)) + 28|0);
           __THREW__ = 0;
           invoke_vii(125,($260|0),($4|0));
           $261 = __THREW__; __THREW__ = 0;
           $262 = $261&1;
           if ($262) {
            label = 18;
            break L1;
           }
          } else {
           $248 = $4;
           $249 = $248;
           $250 = HEAP32[$249>>2]|0;
           $251 = (($248) + 4)|0;
           $252 = $251;
           $253 = HEAP32[$252>>2]|0;
           $254 = $244;
           $255 = $254;
           HEAP32[$255>>2] = $250;
           $256 = (($254) + 4)|0;
           $257 = $256;
           HEAP32[$257>>2] = $253;
           $258 = HEAP32[$243>>2]|0;
           $259 = ((($258)) + 8|0);
           HEAP32[$243>>2] = $259;
          }
          __ZN8FeaturesD2Ev($f);
          STACKTOP = sp;return;
         }
        }
        __THREW__ = 0;
        $263 = (invoke_iii(133,($f|0),($charset|0))|0);
        $264 = __THREW__; __THREW__ = 0;
        $265 = $264&1;
        if ($265) {
         label = 18;
         break L1;
        }
        $266 = ($263|0)==(0);
        if (!($266)) {
         HEAP32[$3>>2] = $263;
         $267 = ((($3)) + 4|0);
         HEAP32[$267>>2] = 0;
         $268 = ((($this)) + 32|0);
         $269 = HEAP32[$268>>2]|0;
         $270 = ((($this)) + 36|0);
         $271 = HEAP32[$270>>2]|0;
         $272 = ($269|0)==($271|0);
         if ($272) {
          $285 = ((($this)) + 28|0);
          __THREW__ = 0;
          invoke_vii(125,($285|0),($3|0));
          $286 = __THREW__; __THREW__ = 0;
          $287 = $286&1;
          if ($287) {
           label = 18;
           break L1;
          }
         } else {
          $273 = $3;
          $274 = $273;
          $275 = HEAP32[$274>>2]|0;
          $276 = (($273) + 4)|0;
          $277 = $276;
          $278 = HEAP32[$277>>2]|0;
          $279 = $269;
          $280 = $279;
          HEAP32[$280>>2] = $275;
          $281 = (($279) + 4)|0;
          $282 = $281;
          HEAP32[$282>>2] = $278;
          $283 = HEAP32[$268>>2]|0;
          $284 = ((($283)) + 8|0);
          HEAP32[$268>>2] = $284;
         }
         __ZN8FeaturesD2Ev($f);
         STACKTOP = sp;return;
        }
        __THREW__ = 0;
        $288 = (invoke_iii(134,($f|0),($charbox|0))|0);
        $289 = __THREW__; __THREW__ = 0;
        $290 = $289&1;
        if ($290) {
         label = 18;
         break L1;
        }
        L72: do {
         switch ($288|0) {
         case 117:  {
          $291 = ((($f)) + 56|0);
          __THREW__ = 0;
          $292 = (invoke_ii(135,($291|0))|0);
          $293 = __THREW__; __THREW__ = 0;
          $294 = $293&1;
          if ($294) {
           label = 18;
           break L1;
          }
          if (!($292)) {
           label = 103;
           break L72;
          }
          $295 = HEAP32[$117>>2]|0;
          $296 = HEAP32[$115>>2]|0;
          $297 = (($296) + ($295))|0;
          $298 = (($297|0) / 2)&-1;
          $299 = HEAP32[$123>>2]|0;
          __THREW__ = 0;
          $300 = (invoke_iiiii(136,($17|0),($298|0),($299|0),1)|0);
          $301 = __THREW__; __THREW__ = 0;
          $302 = $301&1;
          if ($302) {
           label = 18;
           break L1;
          }
          $303 = HEAP32[$17>>2]|0;
          $304 = HEAP32[$123>>2]|0;
          $305 = (($304) - ($303))|0;
          $306 = ($305*90)|0;
          $307 = (($306|0) / 100)&-1;
          $308 = (($307) + ($303))|0;
          $309 = ($300|0)<($308|0);
          if (!($309)) {
           label = 103;
           break L72;
          }
          $310 = HEAP32[$117>>2]|0;
          $311 = HEAP32[$115>>2]|0;
          $312 = (($311) + ($310))|0;
          $313 = (($312|0) / 2)&-1;
          __THREW__ = 0;
          $314 = (invoke_iiii(137,($17|0),($313|0),($300|0))|0);
          $315 = __THREW__; __THREW__ = 0;
          $316 = $315&1;
          if ($316) {
           label = 18;
           break L1;
          }
          if ($314) {
           label = 103;
           break L72;
          }
          $317 = HEAP32[$117>>2]|0;
          $318 = HEAP32[$115>>2]|0;
          $319 = (($318) + ($317))|0;
          $320 = (($319|0) / 2)&-1;
          $321 = (($300) + -1)|0;
          __THREW__ = 0;
          $322 = (invoke_iiiii(136,($17|0),($320|0),($321|0),0)|0);
          $323 = __THREW__; __THREW__ = 0;
          $324 = $323&1;
          if ($324) {
           label = 18;
           break L1;
          }
          $325 = (($322) + -1)|0;
          $326 = HEAP32[$17>>2]|0;
          $327 = HEAP32[$123>>2]|0;
          $328 = (($327) - ($326))|0;
          $329 = ($328*40)|0;
          $330 = (($329|0) / 100)&-1;
          $331 = (($330) + ($326))|0;
          $332 = ($325|0)>($331|0);
          L81: do {
           if ($332) {
            $333 = ((($f)) + 248|0);
            $$pre200 = HEAP32[$117>>2]|0;
            $336 = $$pre200;$338 = $325;$col$0187 = $322;
            while(1) {
             $334 = HEAP32[$115>>2]|0;
             $335 = (($334) + ($336))|0;
             $337 = (($335|0) / 2)&-1;
             __THREW__ = 0;
             $339 = (invoke_iiiii(138,($17|0),($337|0),($338|0),1)|0);
             $340 = __THREW__; __THREW__ = 0;
             $341 = $340&1;
             if ($341) {
              label = 17;
              break;
             }
             $342 = HEAP32[$117>>2]|0;
             $343 = ($339|0)>($342|0);
             if ($343) {
              $1303 = $342;
             } else {
              $344 = HEAP32[$17>>2]|0;
              $345 = (($338) - ($344))|0;
              __THREW__ = 0;
              $346 = (invoke_iii(139,($333|0),($345|0))|0);
              $347 = __THREW__; __THREW__ = 0;
              $348 = $347&1;
              if ($348) {
               label = 17;
               break;
              }
              $349 = HEAP32[$115>>2]|0;
              $350 = HEAP32[$117>>2]|0;
              $351 = (($349) + 1)|0;
              $352 = (($351) - ($350))|0;
              $353 = (($352|0) / 10)&-1;
              $354 = ($346|0)>($353|0);
              if ($354) {
               $1303 = $350;
              } else {
               $$lcssa254 = $338;$col$0187$lcssa256 = $col$0187;
               label = 81;
               break;
              }
             }
             $355 = (($338) + -1)|0;
             $356 = HEAP32[$17>>2]|0;
             $357 = HEAP32[$123>>2]|0;
             $358 = (($357) - ($356))|0;
             $359 = ($358*40)|0;
             $360 = (($359|0) / 100)&-1;
             $361 = (($360) + ($356))|0;
             $362 = ($355|0)>($361|0);
             if ($362) {
              $col$0187$phi = $338;$336 = $1303;$338 = $355;$col$0187 = $col$0187$phi;
             } else {
              $$lcssa168 = $355;$364 = $356;$365 = $357;$col$0$lcssa = $338;
              break L81;
             }
            }
            if ((label|0) == 17) {
             $88 = ___cxa_find_matching_catch_2()|0;
             $89 = tempRet0;
             $lpad$phi$index = $88;$lpad$phi$index5 = $89;
             break L1;
            }
            else if ((label|0) == 81) {
             $$pre201$pre = HEAP32[$17>>2]|0;
             $$pre202$pre = HEAP32[$123>>2]|0;
             $$lcssa168 = $$lcssa254;$364 = $$pre201$pre;$365 = $$pre202$pre;$col$0$lcssa = $col$0187$lcssa256;
             break;
            }
           } else {
            $$lcssa168 = $325;$364 = $326;$365 = $327;$col$0$lcssa = $322;
           }
          } while(0);
          $363 = (($365) - ($364))|0;
          $366 = ($363*40)|0;
          $367 = (($366|0) / 100)&-1;
          $368 = (($367) + ($364))|0;
          $369 = ($$lcssa168|0)<=($368|0);
          $370 = ($col$0$lcssa|0)>($365|0);
          $or$cond119 = $370 | $369;
          if ($or$cond119) {
           label = 103;
           break L72;
          }
          __THREW__ = 0;
          $371 = (invoke_iiiiii(140,($this|0),116,($$lcssa168|0),114,0)|0);
          $372 = __THREW__; __THREW__ = 0;
          $373 = $372&1;
          if ($373) {
           label = 18;
           break L1;
          }
          if (!($371)) {
           label = 103;
           break L72;
          }
          __ZN8FeaturesD2Ev($f);
          STACKTOP = sp;return;
          break;
         }
         case 78:  {
          $374 = HEAP32[$123>>2]|0;
          $375 = HEAP32[$17>>2]|0;
          $376 = (($374) + 1)|0;
          $377 = (($376) - ($375))|0;
          $378 = HEAP32[$115>>2]|0;
          $379 = HEAP32[$117>>2]|0;
          $380 = (($378) + 1)|0;
          $381 = (($380) - ($379))|0;
          $382 = ($377|0)>($381|0);
          if (!($382)) {
           label = 103;
           break L72;
          }
          $383 = ((($charbox)) + 4|0);
          $384 = HEAP32[$383>>2]|0;
          $385 = ($379|0)<($384|0);
          if ($385) {
           label = 103;
           break L72;
          }
          $386 = ((($f)) + 104|0);
          $387 = ((($f)) + 112|0);
          $388 = HEAP32[$387>>2]|0;
          $389 = ($388|0)<(0);
          if ($389) {
           __THREW__ = 0;
           invoke_vi(141,($386|0));
           $390 = __THREW__; __THREW__ = 0;
           $391 = $390&1;
           if ($391) {
            label = 18;
            break L1;
           }
          }
          $392 = ((($f)) + 140|0);
          $393 = ((($f)) + 144|0);
          $394 = HEAP32[$393>>2]|0;
          $395 = HEAP32[$392>>2]|0;
          $396 = (($394) - ($395))|0;
          $397 = $396 >> 2;
          $398 = ($397*50)|0;
          $399 = (($398) + -50)|0;
          $400 = (($399|0) / 100)&-1;
          __THREW__ = 0;
          $401 = (invoke_iii(139,($386|0),($400|0))|0);
          $402 = __THREW__; __THREW__ = 0;
          $403 = $402&1;
          if ($403) {
           label = 18;
           break L1;
          }
          $404 = $401 << 2;
          $405 = HEAP32[$115>>2]|0;
          $406 = HEAP32[$117>>2]|0;
          $407 = (($405) + 1)|0;
          $408 = (($407) - ($406))|0;
          $409 = ($404|0)<($408|0);
          do {
           if ($409) {
            $410 = ((($f)) + 248|0);
            __THREW__ = 0;
            $411 = (invoke_iiii(142,($410|0),0,-1)|0);
            $412 = __THREW__; __THREW__ = 0;
            $413 = $412&1;
            if ($413) {
             label = 18;
             break L1;
            }
            $414 = ((($f)) + 256|0);
            $415 = HEAP32[$414>>2]|0;
            $416 = ($415|0)<(0);
            if ($416) {
             __THREW__ = 0;
             invoke_vi(141,($410|0));
             $417 = __THREW__; __THREW__ = 0;
             $418 = $417&1;
             if ($418) {
              label = 18;
              break L1;
             }
            }
            $419 = ((($f)) + 284|0);
            $420 = ((($f)) + 288|0);
            $421 = HEAP32[$420>>2]|0;
            $422 = HEAP32[$419>>2]|0;
            $423 = (($421) - ($422))|0;
            $424 = $423 >> 2;
            $425 = ($424*40)|0;
            $426 = (($425) + -40)|0;
            $427 = (($426|0) / 100)&-1;
            $428 = ($411|0)<($427|0);
            if ($428) {
             break;
            }
            $429 = HEAP32[$414>>2]|0;
            $430 = ($429|0)<(0);
            if ($430) {
             __THREW__ = 0;
             invoke_vi(141,($410|0));
             $431 = __THREW__; __THREW__ = 0;
             $432 = $431&1;
             if ($432) {
              label = 18;
              break L1;
             }
             $$pre204 = HEAP32[$420>>2]|0;
             $$pre205 = HEAP32[$419>>2]|0;
             $434 = $$pre205;$435 = $$pre204;
            } else {
             $434 = $422;$435 = $421;
            }
            $433 = (($435) - ($434))|0;
            $436 = $433 >> 2;
            $437 = ($436*50)|0;
            $438 = (($437) + -50)|0;
            $439 = (($438|0) / 100)&-1;
            $440 = ($411|0)<($439|0);
            if (!($440)) {
             break;
            }
            $441 = HEAP32[$17>>2]|0;
            $442 = (($441) + ($411))|0;
            __THREW__ = 0;
            $443 = (invoke_iiiiii(140,($this|0),114,($442|0),118,0)|0);
            $444 = __THREW__; __THREW__ = 0;
            $445 = $444&1;
            if ($445) {
             label = 18;
             break L1;
            }
            if (!($443)) {
             break;
            }
            __ZN8FeaturesD2Ev($f);
            STACKTOP = sp;return;
           }
          } while(0);
          $446 = ($288|0)==(0);
          if (!($446)) {
           label = 103;
          }
          break;
         }
         case 0:  {
          break;
         }
         default: {
          label = 103;
         }
         }
        } while(0);
        if ((label|0) == 103) {
         HEAP32[$0>>2] = $288;
         $447 = ((($0)) + 4|0);
         HEAP32[$447>>2] = 0;
         $448 = ((($this)) + 32|0);
         $449 = HEAP32[$448>>2]|0;
         $450 = ((($this)) + 36|0);
         $451 = HEAP32[$450>>2]|0;
         $452 = ($449|0)==($451|0);
         if ($452) {
          $465 = ((($this)) + 28|0);
          __THREW__ = 0;
          invoke_vii(125,($465|0),($0|0));
          $466 = __THREW__; __THREW__ = 0;
          $467 = $466&1;
          if ($467) {
           label = 18;
           break L1;
          }
         } else {
          $453 = $0;
          $454 = $453;
          $455 = HEAP32[$454>>2]|0;
          $456 = (($453) + 4)|0;
          $457 = $456;
          $458 = HEAP32[$457>>2]|0;
          $459 = $449;
          $460 = $459;
          HEAP32[$460>>2] = $455;
          $461 = (($459) + 4)|0;
          $462 = $461;
          HEAP32[$462>>2] = $458;
          $463 = HEAP32[$448>>2]|0;
          $464 = ((($463)) + 8|0);
          HEAP32[$448>>2] = $464;
         }
         __ZN8FeaturesD2Ev($f);
         STACKTOP = sp;return;
        }
        $468 = HEAP32[$115>>2]|0;
        $469 = HEAP32[$117>>2]|0;
        $470 = (($468) + 1)|0;
        $471 = (($470) - ($469))|0;
        $472 = HEAP32[$123>>2]|0;
        $473 = HEAP32[$17>>2]|0;
        $474 = (($472) + 1)|0;
        $475 = (($474) - ($473))|0;
        $476 = ($475|0)<($471|0);
        $477 = $476 ? $475 : $471;
        $478 = (($477|0) / 30)&-1;
        $479 = (($478) + 1)|0;
        $480 = ((($f)) + 200|0);
        __THREW__ = 0;
        $481 = (invoke_iii(143,($480|0),-1)|0);
        $482 = __THREW__; __THREW__ = 0;
        $483 = $482&1;
        if ($483) {
         label = 18;
         break L1;
        }
        $484 = ($481|0)<(3);
        L128: do {
         if ($484) {
          $485 = HEAP32[$115>>2]|0;
          $486 = HEAP32[$117>>2]|0;
          $487 = (($485) + 1)|0;
          $488 = (($487) - ($486))|0;
          $489 = (($488|0) / 8)&-1;
          $490 = (($479) + ($489))|0;
          __THREW__ = 0;
          $491 = (invoke_iii(143,($480|0),($490|0))|0);
          $492 = __THREW__; __THREW__ = 0;
          $493 = $492&1;
          if ($493) {
           label = 18;
           break L1;
          }
          $494 = ($491|0)==(2);
          if (!($494)) {
           $495 = HEAP32[$115>>2]|0;
           $496 = HEAP32[$117>>2]|0;
           $497 = (($495) + 1)|0;
           $498 = (($497) - ($496))|0;
           $499 = ($498|0)>(15);
           if (!($499)) {
            break;
           }
           $500 = (($498|0) / 8)&-1;
           __THREW__ = 0;
           $501 = (invoke_iii(143,($480|0),($500|0))|0);
           $502 = __THREW__; __THREW__ = 0;
           $503 = $502&1;
           if ($503) {
            label = 18;
            break L1;
           }
           $504 = ($501|0)==(2);
           if (!($504)) {
            break;
           }
          }
          __THREW__ = 0;
          $505 = (invoke_iii(144,($f|0),($charbox|0))|0);
          $506 = __THREW__; __THREW__ = 0;
          $507 = $506&1;
          if ($507) {
           label = 18;
           break L1;
          }
          L137: do {
           switch ($505|0) {
           case 0:  {
            break L128;
            break;
           }
           case 110:  {
            $508 = HEAP32[$115>>2]|0;
            $509 = ((($charbox)) + 4|0);
            $510 = HEAP32[$509>>2]|0;
            $511 = ((($charbox)) + 12|0);
            $512 = HEAP32[$511>>2]|0;
            $513 = (($512) + ($510))|0;
            $514 = (($513|0) / 2)&-1;
            $515 = ($508|0)>($514|0);
            if (!($515)) {
             HEAP32[$1>>2] = 34;
             $516 = ((($1)) + 4|0);
             HEAP32[$516>>2] = 0;
             $517 = ((($this)) + 32|0);
             $518 = HEAP32[$517>>2]|0;
             $519 = ((($this)) + 36|0);
             $520 = HEAP32[$519>>2]|0;
             $521 = ($518|0)==($520|0);
             if ($521) {
              $534 = ((($this)) + 28|0);
              __THREW__ = 0;
              invoke_vii(125,($534|0),($1|0));
              $535 = __THREW__; __THREW__ = 0;
              $536 = $535&1;
              if ($536) {
               label = 18;
               break L1;
              }
             } else {
              $522 = $1;
              $523 = $522;
              $524 = HEAP32[$523>>2]|0;
              $525 = (($522) + 4)|0;
              $526 = $525;
              $527 = HEAP32[$526>>2]|0;
              $528 = $518;
              $529 = $528;
              HEAP32[$529>>2] = $524;
              $530 = (($528) + 4)|0;
              $531 = $530;
              HEAP32[$531>>2] = $527;
              $532 = HEAP32[$517>>2]|0;
              $533 = ((($532)) + 8|0);
              HEAP32[$517>>2] = $533;
             }
             __ZN8FeaturesD2Ev($f);
             STACKTOP = sp;return;
            }
            $537 = HEAP32[$123>>2]|0;
            $538 = HEAP32[$17>>2]|0;
            $539 = (($537) + 1)|0;
            $540 = (($539) - ($538))|0;
            $541 = HEAP32[$117>>2]|0;
            $542 = (($508) + 1)|0;
            $543 = (($542) - ($541))|0;
            $544 = ($540|0)>($543|0);
            $545 = ((($f)) + 56|0);
            $546 = ((($f)) + 64|0);
            do {
             if ($544) {
              $547 = HEAP32[$546>>2]|0;
              $548 = ($547|0)<(0);
              if ($548) {
               __THREW__ = 0;
               invoke_vi(141,($545|0));
               $549 = __THREW__; __THREW__ = 0;
               $550 = $549&1;
               if ($550) {
                label = 18;
                break L1;
               }
              }
              $551 = ((($f)) + 92|0);
              $552 = ((($f)) + 96|0);
              $553 = HEAP32[$552>>2]|0;
              $554 = HEAP32[$551>>2]|0;
              $555 = (($553) - ($554))|0;
              $556 = $555 >> 2;
              $557 = ($556*10)|0;
              $558 = (($557) + -10)|0;
              $559 = (($558|0) / 100)&-1;
              __THREW__ = 0;
              $560 = (invoke_iii(139,($545|0),($559|0))|0);
              $561 = __THREW__; __THREW__ = 0;
              $562 = $561&1;
              if ($562) {
               label = 18;
               break L1;
              }
              $563 = ($560*10)|0;
              $564 = HEAP32[$123>>2]|0;
              $565 = HEAP32[$17>>2]|0;
              $566 = (($564) + 1)|0;
              $567 = (($566) - ($565))|0;
              $568 = ($563|0)<($567|0);
              if (!($568)) {
               break;
              }
              $569 = ((($f)) + 152|0);
              $570 = ((($f)) + 160|0);
              $571 = HEAP32[$570>>2]|0;
              $572 = ($571|0)<(0);
              if ($572) {
               __THREW__ = 0;
               invoke_vi(141,($569|0));
               $573 = __THREW__; __THREW__ = 0;
               $574 = $573&1;
               if ($574) {
                label = 18;
                break L1;
               }
              }
              $575 = ((($f)) + 188|0);
              $576 = ((($f)) + 192|0);
              $577 = HEAP32[$576>>2]|0;
              $578 = HEAP32[$575>>2]|0;
              $579 = (($577) - ($578))|0;
              $580 = $579 >> 2;
              $581 = ($580*75)|0;
              $582 = (($581) + -75)|0;
              $583 = (($582|0) / 100)&-1;
              __THREW__ = 0;
              $584 = (invoke_iiii(145,($569|0),($583|0),2)|0);
              $585 = __THREW__; __THREW__ = 0;
              $586 = $585&1;
              if ($586) {
               label = 18;
               break L1;
              }
              if ($584) {
               break;
              }
              $587 = HEAP32[$570>>2]|0;
              $588 = ($587|0)<(0);
              if ($588) {
               __THREW__ = 0;
               invoke_vi(141,($569|0));
               $589 = __THREW__; __THREW__ = 0;
               $590 = $589&1;
               if ($590) {
                label = 18;
                break L1;
               }
              }
              $591 = HEAP32[$576>>2]|0;
              $592 = HEAP32[$575>>2]|0;
              $593 = (($591) - ($592))|0;
              $594 = $593 >> 2;
              $595 = ($594*50)|0;
              $596 = (($595) + -50)|0;
              $597 = (($596|0) / 100)&-1;
              __THREW__ = 0;
              $598 = (invoke_iii(139,($569|0),($597|0))|0);
              $599 = __THREW__; __THREW__ = 0;
              $600 = $599&1;
              if ($600) {
               label = 18;
               break L1;
              }
              $601 = ($598*10)|0;
              $602 = HEAP32[$123>>2]|0;
              $603 = HEAP32[$17>>2]|0;
              $604 = (($602) + 1)|0;
              $605 = (($604) - ($603))|0;
              $606 = ($601|0)>($605|0);
              if (!($606)) {
               break;
              }
              $607 = HEAP32[$117>>2]|0;
              $608 = HEAP32[$115>>2]|0;
              $609 = (($608) + ($607))|0;
              $610 = (($609|0) / 2)&-1;
              __THREW__ = 0;
              $611 = (invoke_iiii(137,($17|0),($610|0),($602|0))|0);
              $612 = __THREW__; __THREW__ = 0;
              $613 = $612&1;
              if ($613) {
               label = 18;
               break L1;
              }
              if ($611) {
               break;
              }
              __ZN8FeaturesD2Ev($f);
              STACKTOP = sp;return;
             }
            } while(0);
            $614 = HEAP32[$546>>2]|0;
            $615 = ($614|0)<(0);
            if ($615) {
             __THREW__ = 0;
             invoke_vi(141,($545|0));
             $616 = __THREW__; __THREW__ = 0;
             $617 = $616&1;
             if ($617) {
              label = 18;
              break L1;
             }
            }
            $618 = ((($f)) + 92|0);
            $619 = ((($f)) + 96|0);
            $620 = HEAP32[$619>>2]|0;
            $621 = HEAP32[$618>>2]|0;
            $622 = (($620) - ($621))|0;
            $623 = $622 >> 2;
            $624 = ($623*10)|0;
            $625 = (($624) + -10)|0;
            $626 = (($625|0) / 100)&-1;
            __THREW__ = 0;
            $627 = (invoke_iii(139,($545|0),($626|0))|0);
            $628 = __THREW__; __THREW__ = 0;
            $629 = $628&1;
            if ($629) {
             label = 18;
             break L1;
            }
            $630 = $627 << 1;
            $631 = HEAP32[$123>>2]|0;
            $632 = HEAP32[$17>>2]|0;
            $633 = (($631) + 1)|0;
            $634 = (($633) - ($632))|0;
            $635 = ($630|0)>($634|0);
            $636 = ((($f)) + 152|0);
            do {
             if ($635) {
              $637 = ((($f)) + 160|0);
              $638 = HEAP32[$637>>2]|0;
              $639 = ($638|0)<(0);
              if ($639) {
               __THREW__ = 0;
               invoke_vi(141,($636|0));
               $640 = __THREW__; __THREW__ = 0;
               $641 = $640&1;
               if ($641) {
                label = 18;
                break L1;
               }
              }
              $642 = ((($f)) + 188|0);
              $643 = ((($f)) + 192|0);
              $644 = HEAP32[$643>>2]|0;
              $645 = HEAP32[$642>>2]|0;
              $646 = (($644) - ($645))|0;
              $647 = $646 >> 2;
              $648 = ($647*75)|0;
              $649 = (($648) + -75)|0;
              $650 = (($649|0) / 100)&-1;
              __THREW__ = 0;
              $651 = (invoke_iiii(145,($636|0),($650|0),2)|0);
              $652 = __THREW__; __THREW__ = 0;
              $653 = $652&1;
              if ($653) {
               label = 18;
               break L1;
              }
              if ($651) {
               break;
              }
              $654 = HEAP32[$117>>2]|0;
              $655 = HEAP32[$115>>2]|0;
              $656 = (($655) + ($654))|0;
              $657 = (($656|0) / 2)&-1;
              $658 = HEAP32[$123>>2]|0;
              __THREW__ = 0;
              $659 = (invoke_iiiii(136,($17|0),($657|0),($658|0),1)|0);
              $660 = __THREW__; __THREW__ = 0;
              $661 = $660&1;
              if ($661) {
               label = 18;
               break L1;
              }
              $662 = HEAP32[$17>>2]|0;
              $663 = HEAP32[$123>>2]|0;
              $664 = (($663) - ($662))|0;
              $665 = ($664*95)|0;
              $666 = (($665|0) / 100)&-1;
              $667 = (($666) + ($662))|0;
              $668 = ($659|0)>($667|0);
              if ($668) {
               break;
              }
              $669 = HEAP32[$117>>2]|0;
              $670 = HEAP32[$115>>2]|0;
              $671 = (($670) + ($669))|0;
              $672 = (($671|0) / 2)&-1;
              __THREW__ = 0;
              $673 = (invoke_iiii(137,($17|0),($672|0),($659|0))|0);
              $674 = __THREW__; __THREW__ = 0;
              $675 = $674&1;
              if ($675) {
               label = 18;
               break L1;
              }
              if ($673) {
               break;
              }
              $676 = HEAP32[$17>>2]|0;
              $677 = HEAP32[$123>>2]|0;
              $678 = (($677) + ($676))|0;
              $679 = (($678|0) / 2)&-1;
              __THREW__ = 0;
              $680 = (invoke_iiiiii(140,($this|0),114,($679|0),116,0)|0);
              $681 = __THREW__; __THREW__ = 0;
              $682 = $681&1;
              if ($682) {
               label = 18;
               break L1;
              }
              if (!($680)) {
               break;
              }
              __ZN8FeaturesD2Ev($f);
              STACKTOP = sp;return;
             }
            } while(0);
            __THREW__ = 0;
            $683 = (invoke_iii(143,($636|0),-1)|0);
            $684 = __THREW__; __THREW__ = 0;
            $685 = $684&1;
            if ($685) {
             label = 18;
             break L1;
            }
            $686 = ($683|0)==(1);
            if (!($686)) {
             label = 208;
             break L137;
            }
            $687 = ((($f)) + 160|0);
            $688 = HEAP32[$687>>2]|0;
            $689 = ($688|0)<(0);
            if ($689) {
             __THREW__ = 0;
             invoke_vi(141,($636|0));
             $690 = __THREW__; __THREW__ = 0;
             $691 = $690&1;
             if ($691) {
              label = 18;
              break L1;
             }
            }
            $692 = ((($f)) + 188|0);
            $693 = ((($f)) + 192|0);
            $694 = HEAP32[$693>>2]|0;
            $695 = HEAP32[$692>>2]|0;
            $696 = (($694) - ($695))|0;
            $697 = $696 >> 2;
            $698 = ($697*75)|0;
            $699 = (($698) + -75)|0;
            $700 = (($699|0) / 100)&-1;
            __THREW__ = 0;
            $701 = (invoke_iiii(145,($636|0),($700|0),2)|0);
            $702 = __THREW__; __THREW__ = 0;
            $703 = $702&1;
            if ($703) {
             label = 18;
             break L1;
            }
            if ($701) {
             label = 208;
             break L137;
            }
            $704 = HEAP32[$117>>2]|0;
            $705 = HEAP32[$115>>2]|0;
            $706 = (($705) - ($704))|0;
            $707 = ($706*60)|0;
            $708 = (($707|0) / 100)&-1;
            $709 = (($708) + ($704))|0;
            $710 = (($706|0) / 4)&-1;
            $711 = (($710) + ($704))|0;
            $712 = ($709|0)>($711|0);
            if (!($712)) {
             label = 208;
             break L137;
            }
            $bar$0$off0173 = 0;$dmax$0175 = 0;$row$0174 = $709;
            L193: while(1) {
             $713 = HEAP32[$17>>2]|0;
             $714 = HEAP32[$123>>2]|0;
             $715 = (($714) + ($713))|0;
             $716 = (($715|0) / 2)&-1;
             __THREW__ = 0;
             $717 = (invoke_iiiii(136,($17|0),($row$0174|0),($716|0),1)|0);
             $718 = __THREW__; __THREW__ = 0;
             $719 = $718&1;
             if ($719) {
              label = 15;
              break;
             }
             $720 = (($716) - ($717))|0;
             $721 = ($720|0)>($dmax$0175|0);
             if ($721) {
              if ($bar$0$off0173) {
               $dmax$1105 = $720;
               label = 162;
              } else {
               $bar$1$off0102$ph = 0;$dmax$1106$ph = $720;
              }
             } else {
              $722 = $720 << 1;
              $723 = ($722|0)<($dmax$0175|0);
              $724 = ($dmax$0175|0)>(2);
              $or$cond = $724 & $723;
              $$bar$0$off0 = $bar$0$off0173 | $or$cond;
              if ($$bar$0$off0) {
               $dmax$1105 = $dmax$0175;
               label = 162;
              } else {
               $bar$1$off0102$ph = 0;$dmax$1106$ph = $dmax$0175;
              }
             }
             do {
              if ((label|0) == 162) {
               label = 0;
               __THREW__ = 0;
               $725 = (invoke_iiiii(120,($720|0),($dmax$1105|0),25,1)|0);
               $726 = __THREW__; __THREW__ = 0;
               $727 = $726&1;
               if ($727) {
                label = 15;
                break L193;
               }
               if (!($725)) {
                $bar$1$off0102$ph = 1;$dmax$1106$ph = $dmax$1105;
                break;
               }
               $728 = HEAP32[$117>>2]|0;
               $729 = HEAP32[$115>>2]|0;
               $730 = (($729) + ($728))|0;
               $731 = (($730|0) / 2)&-1;
               $732 = HEAP32[$17>>2]|0;
               $733 = HEAP32[$123>>2]|0;
               $734 = (($733) + ($732))|0;
               $735 = (($734|0) / 2)&-1;
               __THREW__ = 0;
               $736 = (invoke_iiiii(146,($17|0),($731|0),($735|0),1)|0);
               $737 = __THREW__; __THREW__ = 0;
               $738 = $737&1;
               if ($738) {
                label = 15;
                break L193;
               }
               $739 = HEAP32[$17>>2]|0;
               $740 = HEAP32[$123>>2]|0;
               $741 = (($740) + ($739))|0;
               $742 = (($741|0) / 2)&-1;
               $743 = ($742|0)>($736|0);
               if ($743) {
                $756 = $739;$758 = $740;$col6$0$lcssa = $742;
               } else {
                $$pre206 = HEAP32[$115>>2]|0;
                $746 = $$pre206;$col6$0170 = $742;
                while(1) {
                 $744 = HEAP32[$117>>2]|0;
                 $745 = (($746) + ($744))|0;
                 $747 = (($745|0) / 2)&-1;
                 __THREW__ = 0;
                 $748 = (invoke_iiiii(147,($17|0),($747|0),($col6$0170|0),1)|0);
                 $749 = __THREW__; __THREW__ = 0;
                 $750 = $749&1;
                 if ($750) {
                  label = 14;
                  break L193;
                 }
                 $751 = HEAP32[$115>>2]|0;
                 $752 = ($748|0)<($751|0);
                 if ($752) {
                  $col6$0$lcssa$ph = $col6$0170;
                  break;
                 }
                 $753 = (($col6$0170) + 1)|0;
                 $754 = ($col6$0170|0)<($736|0);
                 if ($754) {
                  $746 = $751;$col6$0170 = $753;
                 } else {
                  $col6$0$lcssa$ph = $753;
                  break;
                 }
                }
                $$pre207 = HEAP32[$17>>2]|0;
                $$pre208 = HEAP32[$123>>2]|0;
                $756 = $$pre207;$758 = $$pre208;$col6$0$lcssa = $col6$0$lcssa$ph;
               }
               $755 = ($col6$0$lcssa|0)>($756|0);
               $757 = ($col6$0$lcssa|0)<($758|0);
               $or$cond121 = $755 & $757;
               if (!($or$cond121)) {
                $bar$1$off0102$ph = 1;$dmax$1106$ph = $dmax$1105;
                break;
               }
               $759 = (($col6$0$lcssa) + -1)|0;
               __THREW__ = 0;
               $760 = (invoke_iiiiii(140,($this|0),102,($759|0),108,0)|0);
               $761 = __THREW__; __THREW__ = 0;
               $762 = $761&1;
               if ($762) {
                label = 15;
                break L193;
               }
               if ($760) {
                label = 292;
                break L193;
               } else {
                $bar$1$off0102$ph = 1;$dmax$1106$ph = $dmax$1105;
               }
              }
             } while(0);
             $763 = (($row$0174) + -1)|0;
             $764 = HEAP32[$117>>2]|0;
             $765 = HEAP32[$115>>2]|0;
             $766 = (($765) - ($764))|0;
             $767 = (($766|0) / 4)&-1;
             $768 = (($767) + ($764))|0;
             $769 = ($763|0)>($768|0);
             if ($769) {
              $bar$0$off0173 = $bar$1$off0102$ph;$dmax$0175 = $dmax$1106$ph;$row$0174 = $763;
             } else {
              label = 208;
              break L137;
             }
            }
            if ((label|0) == 14) {
             $82 = ___cxa_find_matching_catch_2()|0;
             $83 = tempRet0;
             $lpad$phi$index = $82;$lpad$phi$index5 = $83;
             break L1;
            }
            else if ((label|0) == 15) {
             $84 = ___cxa_find_matching_catch_2()|0;
             $85 = tempRet0;
             $lpad$phi$index = $84;$lpad$phi$index5 = $85;
             break L1;
            }
            else if ((label|0) == 292) {
             __ZN8FeaturesD2Ev($f);
             STACKTOP = sp;return;
            }
            break;
           }
           case 104:  {
            $770 = ((($f)) + 56|0);
            $771 = ((($f)) + 64|0);
            $772 = HEAP32[$771>>2]|0;
            $773 = ($772|0)<(0);
            if ($773) {
             __THREW__ = 0;
             invoke_vi(141,($770|0));
             $774 = __THREW__; __THREW__ = 0;
             $775 = $774&1;
             if ($775) {
              label = 18;
              break L1;
             }
            }
            $776 = ((($f)) + 92|0);
            $777 = ((($f)) + 96|0);
            $778 = HEAP32[$777>>2]|0;
            $779 = HEAP32[$776>>2]|0;
            $780 = (($778) - ($779))|0;
            $781 = $780 >> 2;
            $782 = ($781*10)|0;
            $783 = (($782) + -10)|0;
            $784 = (($783|0) / 100)&-1;
            __THREW__ = 0;
            $785 = (invoke_iii(139,($770|0),($784|0))|0);
            $786 = __THREW__; __THREW__ = 0;
            $787 = $786&1;
            if ($787) {
             label = 18;
             break L1;
            }
            $788 = $785 << 1;
            $789 = HEAP32[$123>>2]|0;
            $790 = HEAP32[$17>>2]|0;
            $791 = (($789) + 1)|0;
            $792 = (($791) - ($790))|0;
            $793 = ($788|0)>($792|0);
            $794 = ((($f)) + 152|0);
            if (!($793)) {
             __THREW__ = 0;
             $868 = (invoke_iii(150,($794|0),30)|0);
             $869 = __THREW__; __THREW__ = 0;
             $870 = $869&1;
             if ($870) {
              label = 18;
              break L1;
             }
             if (!($868)) {
              label = 208;
              break L137;
             }
             $871 = HEAP32[$17>>2]|0;
             $872 = HEAP32[$123>>2]|0;
             $873 = (($872) + ($871))|0;
             $874 = (($873|0) / 2)&-1;
             __THREW__ = 0;
             (invoke_iiiiii(140,($this|0),102,($874|0),105,0)|0);
             $875 = __THREW__; __THREW__ = 0;
             $876 = $875&1;
             if ($876) {
              label = 18;
              break L1;
             }
             __ZN8FeaturesD2Ev($f);
             STACKTOP = sp;return;
            }
            $795 = ((($f)) + 160|0);
            $796 = HEAP32[$795>>2]|0;
            $797 = ($796|0)<(0);
            if ($797) {
             __THREW__ = 0;
             invoke_vi(141,($794|0));
             $798 = __THREW__; __THREW__ = 0;
             $799 = $798&1;
             if ($799) {
              label = 18;
              break L1;
             }
            }
            $800 = ((($f)) + 188|0);
            $801 = ((($f)) + 192|0);
            $802 = HEAP32[$801>>2]|0;
            $803 = HEAP32[$800>>2]|0;
            $804 = (($802) - ($803))|0;
            $805 = $804 >> 2;
            $806 = ($805*70)|0;
            $807 = (($806) + -70)|0;
            $808 = (($807|0) / 100)&-1;
            __THREW__ = 0;
            $809 = (invoke_iii(139,($794|0),($808|0))|0);
            $810 = __THREW__; __THREW__ = 0;
            $811 = $810&1;
            if ($811) {
             label = 18;
             break L1;
            }
            $812 = ($809|0)>(1);
            if (!($812)) {
             __ZN8FeaturesD2Ev($f);
             STACKTOP = sp;return;
            }
            $813 = HEAP32[$117>>2]|0;
            $814 = HEAP32[$115>>2]|0;
            $815 = (($814) - ($813))|0;
            $816 = ($815*70)|0;
            $817 = (($816|0) / 100)&-1;
            $818 = (($817) + ($813))|0;
            $819 = HEAP32[$123>>2]|0;
            __THREW__ = 0;
            $820 = (invoke_iiiii(138,($17|0),($818|0),($819|0),1)|0);
            $821 = __THREW__; __THREW__ = 0;
            $822 = $821&1;
            if ($822) {
             label = 18;
             break L1;
            }
            $823 = HEAP32[$117>>2]|0;
            $824 = ($820|0)>($823|0);
            if (!($824)) {
             __ZN8FeaturesD2Ev($f);
             STACKTOP = sp;return;
            }
            $825 = ((($f)) + 248|0);
            __THREW__ = 0;
            $826 = (invoke_ii(148,($825|0))|0);
            $827 = __THREW__; __THREW__ = 0;
            $828 = $827&1;
            if ($828) {
             label = 18;
             break L1;
            }
            __THREW__ = 0;
            $829 = (invoke_ii(149,($825|0))|0);
            $830 = __THREW__; __THREW__ = 0;
            $831 = $830&1;
            if ($831) {
             label = 18;
             break L1;
            }
            $832 = HEAP32[$17>>2]|0;
            $833 = HEAP32[$123>>2]|0;
            $834 = (($833) - ($832))|0;
            $835 = ($834*40)|0;
            $836 = (($835|0) / 100)&-1;
            $837 = (($836) + ($832))|0;
            $838 = ($834*60)|0;
            $839 = (($838|0) / 100)&-1;
            $840 = (($839) + ($832))|0;
            $841 = ($837|0)>($840|0);
            L243: do {
             if ($841) {
              $$lcssa = $832;$$lcssa165 = $833;$col11$0$lcssa = 0;
             } else {
              $842 = (($826) + 1)|0;
              $843 = (($842) - ($829))|0;
              $847 = $832;$col11$0178 = 0;$hmin$0179 = $843;$i$0180 = $837;
              while(1) {
               $846 = (($i$0180) - ($847))|0;
               __THREW__ = 0;
               $848 = (invoke_iii(139,($825|0),($846|0))|0);
               $849 = __THREW__; __THREW__ = 0;
               $850 = $849&1;
               if ($850) {
                break;
               }
               $851 = ($848|0)<($hmin$0179|0);
               if ($851) {
                $852 = HEAP32[$17>>2]|0;
                $853 = (($i$0180) - ($852))|0;
                __THREW__ = 0;
                $854 = (invoke_iii(139,($825|0),($853|0))|0);
                $855 = __THREW__; __THREW__ = 0;
                $856 = $855&1;
                if ($856) {
                 break;
                } else {
                 $col11$1 = $i$0180;$hmin$1 = $854;
                }
               } else {
                $col11$1 = $col11$0178;$hmin$1 = $hmin$0179;
               }
               $857 = (($i$0180) + 1)|0;
               $858 = HEAP32[$17>>2]|0;
               $859 = HEAP32[$123>>2]|0;
               $860 = (($859) - ($858))|0;
               $861 = ($860*60)|0;
               $862 = (($861|0) / 100)&-1;
               $863 = (($862) + ($858))|0;
               $864 = ($i$0180|0)<($863|0);
               if ($864) {
                $847 = $858;$col11$0178 = $col11$1;$hmin$0179 = $hmin$1;$i$0180 = $857;
               } else {
                $$lcssa = $858;$$lcssa165 = $859;$col11$0$lcssa = $col11$1;
                break L243;
               }
              }
              $86 = ___cxa_find_matching_catch_2()|0;
              $87 = tempRet0;
              $lpad$phi$index = $86;$lpad$phi$index5 = $87;
              break L1;
             }
            } while(0);
            $844 = ($col11$0$lcssa|0)>($$lcssa|0);
            $845 = ($col11$0$lcssa|0)<($$lcssa165|0);
            $or$cond122 = $844 & $845;
            if (!($or$cond122)) {
             __ZN8FeaturesD2Ev($f);
             STACKTOP = sp;return;
            }
            $865 = (($col11$0$lcssa) + -1)|0;
            __THREW__ = 0;
            (invoke_iiiiii(140,($this|0),114,($865|0),102,0)|0);
            $866 = __THREW__; __THREW__ = 0;
            $867 = $866&1;
            if ($867) {
             label = 18;
             break L1;
            }
            __ZN8FeaturesD2Ev($f);
            STACKTOP = sp;return;
            break;
           }
           case 107:  {
            $877 = ((($f)) + 56|0);
            $878 = ((($f)) + 64|0);
            $879 = HEAP32[$878>>2]|0;
            $880 = ($879|0)<(0);
            if ($880) {
             __THREW__ = 0;
             invoke_vi(141,($877|0));
             $881 = __THREW__; __THREW__ = 0;
             $882 = $881&1;
             if ($882) {
              label = 18;
              break L1;
             }
            }
            $883 = ((($f)) + 92|0);
            $884 = ((($f)) + 96|0);
            $885 = HEAP32[$884>>2]|0;
            $886 = HEAP32[$883>>2]|0;
            $887 = (($885) - ($886))|0;
            $888 = $887 >> 2;
            $889 = ($888*10)|0;
            $890 = (($889) + -10)|0;
            $891 = (($890|0) / 100)&-1;
            __THREW__ = 0;
            $892 = (invoke_iii(139,($877|0),($891|0))|0);
            $893 = __THREW__; __THREW__ = 0;
            $894 = $893&1;
            if ($894) {
             label = 18;
             break L1;
            }
            $895 = $892 << 1;
            $896 = HEAP32[$123>>2]|0;
            $897 = HEAP32[$17>>2]|0;
            $898 = (($896) + 1)|0;
            $899 = (($898) - ($897))|0;
            $900 = ($895|0)>($899|0);
            if (!($900)) {
             label = 208;
             break L137;
            }
            $901 = ((($f)) + 152|0);
            $902 = ((($f)) + 160|0);
            $903 = HEAP32[$902>>2]|0;
            $904 = ($903|0)<(0);
            if ($904) {
             __THREW__ = 0;
             invoke_vi(141,($901|0));
             $905 = __THREW__; __THREW__ = 0;
             $906 = $905&1;
             if ($906) {
              label = 18;
              break L1;
             }
            }
            $907 = ((($f)) + 188|0);
            $908 = ((($f)) + 192|0);
            $909 = HEAP32[$908>>2]|0;
            $910 = HEAP32[$907>>2]|0;
            $911 = (($909) - ($910))|0;
            $912 = $911 >> 2;
            $913 = ($912*75)|0;
            $914 = (($913) + -75)|0;
            $915 = (($914|0) / 100)&-1;
            __THREW__ = 0;
            $916 = (invoke_iiii(145,($901|0),($915|0),2)|0);
            $917 = __THREW__; __THREW__ = 0;
            $918 = $917&1;
            if ($918) {
             label = 18;
             break L1;
            }
            if ($916) {
             label = 208;
             break L137;
            }
            $919 = HEAP32[$17>>2]|0;
            $920 = HEAP32[$123>>2]|0;
            $921 = (($920) + ($919))|0;
            $922 = (($921|0) / 2)&-1;
            __THREW__ = 0;
            $923 = (invoke_iiiiii(140,($this|0),114,($922|0),116,0)|0);
            $924 = __THREW__; __THREW__ = 0;
            $925 = $924&1;
            if ($925) {
             label = 18;
             break L1;
            }
            if (!($923)) {
             label = 208;
             break L137;
            }
            __ZN8FeaturesD2Ev($f);
            STACKTOP = sp;return;
            break;